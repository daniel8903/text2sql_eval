{"example_id": 1, "sql_complexity": "basic SQL", "prompt": "What is the average explainability score of creative AI applications in 'Europe' and 'North America' in the 'creative_ai' table?", "context": "CREATE TABLE creative_ai (application_id INT, name TEXT, region TEXT, explainability_score FLOAT); INSERT INTO creative_ai (application_id, name, region, explainability_score) VALUES (1, 'ApplicationX', 'Europe', 0.87), (2, 'ApplicationY', 'North America', 0.91), (3, 'ApplicationZ', 'Europe', 0.84), (4, 'ApplicationAA', 'North America', 0.93), (5, 'ApplicationAB', 'Europe', 0.89);", "reference_sql": "SELECT AVG(explainability_score) FROM creative_ai WHERE region IN ('Europe', 'North America');", "generated_sql": "SELECT \n    region,\n    AVG(explainability_score) AS avg_explainability_score\nFROM \n    creative_ai\nWHERE \n    region IN ('Europe', 'North America')\nGROUP BY \n    region;", "raw_model_output": "To find the average explainability score for creative AI applications in both 'Europe' and 'North America', you can use the following SQL query:\n\n```sql\nSELECT \n    region,\n    AVG(explainability_score) AS avg_explainability_score\nFROM \n    creative_ai\nWHERE \n    region IN ('Europe', 'North America')\nGROUP BY \n    region;\n```\n\nThis query will return the average explainability score for each specified region. If you want to get a single value representing the overall average across both regions, you can modify the query as follows:\n\n```sql\nSELECT \n    AVG(explainability_score) AS avg_explainability_score\nFROM \n    creative_ai\nWHERE \n    region IN ('Europe', 'North America');\n```\n\nThis will give you the combined average explainability score for all applications in Europe and North America.", "latency_sec": 2.333423376083374, "total_duration": 2332078437, "load_duration": 8429583, "tokens_prompt": 177, "prompt_eval_duration": 11614776, "tokens_completion": 174, "eval_duration": 2309175204, "tokens_total": 351, "tokens_per_sec": 150.4227666516094, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "Not implemented"}
{"example_id": 2, "sql_complexity": "basic SQL", "prompt": "Delete all records of rural infrastructure projects in Indonesia that have a completion date before 2010.", "context": "CREATE TABLE rural_infrastructure (id INT, project_name TEXT, sector TEXT, country TEXT, completion_date DATE); INSERT INTO rural_infrastructure (id, project_name, sector, country, completion_date) VALUES (1, 'Water Supply Expansion', 'Infrastructure', 'Indonesia', '2008-05-15'), (2, 'Rural Electrification', 'Infrastructure', 'Indonesia', '2012-08-28'), (3, 'Transportation Improvement', 'Infrastructure', 'Indonesia', '2009-12-31');", "reference_sql": "DELETE FROM rural_infrastructure WHERE country = 'Indonesia' AND completion_date < '2010-01-01';", "generated_sql": "DELETE FROM rural_infrastructure\nWHERE country = 'Indonesia' AND completion_date < '2010-01-01';", "raw_model_output": "To delete all records from the `rural_infrastructure` table where the country is \"Indonesia\" and the completion date is before January 1, 2010, you can use the following SQL query:\n\n```sql\nDELETE FROM rural_infrastructure\nWHERE country = 'Indonesia' AND completion_date < '2010-01-01';\n```\n\nThis query will remove all records that match the specified criteria. Make sure to back up your data before running delete queries, as they cannot be undone without additional steps.", "latency_sec": 1.5267291069030762, "total_duration": 1525870953, "load_duration": 8252446, "tokens_prompt": 176, "prompt_eval_duration": 9113161, "tokens_completion": 113, "eval_duration": 1505993989, "tokens_total": 289, "tokens_per_sec": 189.29356799008553, "match_exact": true, "match_ast": true, "llm_equivalent": false, "llm_explanation": "Not implemented"}
{"example_id": 3, "sql_complexity": "aggregation", "prompt": "How many accidents have been recorded for SpaceX and Blue Origin rocket launches?", "context": "CREATE TABLE Accidents (id INT, launch_provider VARCHAR(255), year INT, description TEXT); INSERT INTO Accidents (id, launch_provider, year, description) VALUES (1, 'SpaceX', 2015, 'Falcon 9 explosion'), (2, 'Blue Origin', 2011, 'Propulsion system failure'), (3, 'SpaceX', 2016, 'Falcon 9 explosion');", "reference_sql": "SELECT launch_provider, COUNT(*) FROM Accidents GROUP BY launch_provider;", "generated_sql": "SELECT launch_provider, COUNT(*) AS accident_count\nFROM Accidents\nWHERE launch_provider IN ('SpaceX', 'Blue Origin')\nGROUP BY launch_provider;", "raw_model_output": "To find out how many accidents have been recorded for SpaceX and Blue Origin rocket launches, you can use the following SQL query:\n\n```sql\nSELECT launch_provider, COUNT(*) AS accident_count\nFROM Accidents\nWHERE launch_provider IN ('SpaceX', 'Blue Origin')\nGROUP BY launch_provider;\n```\n\nThis query will return the number of accidents for each specified launch provider. Let's break down what this query does:\n\n- `SELECT launch_provider, COUNT(*) AS accident_count`: This part selects the `launch_provider` and counts the number of records (accidents) for each provider.\n- `FROM Accidents`: Specifies the table from which to retrieve the data.\n- `WHERE launch_provider IN ('SpaceX', 'Blue Origin')`: Filters the results to only include entries where the `launch_provider` is either 'SpaceX' or 'Blue Origin'.\n- `GROUP BY launch_provider`: Groups the results by `launch_provider`, so you get a count for each provider.\n\nRunning this query on your data will give you:\n\n```\n+---------------+----------------+\n| launch_provider | accident_count |\n+---------------+----------------+\n| SpaceX         | 2              |\n| Blue Origin    | 1              |\n+---------------+----------------+\n```\n\nThis means there were 2 accidents recorded for SpaceX and 1 accident recorded for Blue Origin.", "latency_sec": 3.6025710105895996, "total_duration": 3601703026, "load_duration": 15700544, "tokens_prompt": 140, "prompt_eval_duration": 7664686, "tokens_completion": 270, "eval_duration": 3576350253, "tokens_total": 410, "tokens_per_sec": 113.80761095196263, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "Not implemented"}
{"example_id": 4, "sql_complexity": "basic SQL", "prompt": "What is the maximum quantity of seafood sold in a single transaction?", "context": "CREATE TABLE sales (id INT, location VARCHAR(20), quantity INT, price DECIMAL(5,2)); INSERT INTO sales (id, location, quantity, price) VALUES (1, 'Northeast', 50, 12.99), (2, 'Midwest', 75, 19.99), (3, 'West', 120, 14.49);", "reference_sql": "SELECT MAX(quantity) FROM sales;", "generated_sql": "SELECT MAX(quantity) AS max_quantity_sold\nFROM sales;", "raw_model_output": "The SQL query to find the maximum quantity of seafood sold in a single transaction from the `sales` table would be:\n\n```sql\nSELECT MAX(quantity) AS max_quantity_sold\nFROM sales;\n```\n\nGiven the data you provided, this query will return the maximum value among the quantities listed. In your example data:\n\n- ID 1: Northeast, Quantity = 50\n- ID 2: Midwest, Quantity = 75\n- ID 3: West, Quantity = 120\n\nThe result of the query would be `120`, which is the maximum quantity sold in a single transaction.", "latency_sec": 1.7039687633514404, "total_duration": 1702969373, "load_duration": 11378320, "tokens_prompt": 134, "prompt_eval_duration": 7132628, "tokens_completion": 128, "eval_duration": 1682409185, "tokens_total": 262, "tokens_per_sec": 153.7586871514516, "match_exact": false, "match_ast": true, "llm_equivalent": false, "llm_explanation": "Not implemented"}
{"example_id": 5, "sql_complexity": "basic SQL", "prompt": "What is the total budget for movies released before 2010?", "context": "CREATE TABLE Movies_Release_Year (id INT, title VARCHAR(100), release_year INT, budget DECIMAL(10,2)); INSERT INTO Movies_Release_Year (id, title, release_year, budget) VALUES (1, 'The Matrix', 1999, 63000000.00), (2, 'Titanic', 1997, 200000000.00), (3, 'The Lord of the Rings: The Fellowship of the Ring', 2001, 93000000.00);", "reference_sql": "SELECT SUM(budget) FROM Movies_Release_Year WHERE release_year < 2010;", "generated_sql": "SELECT SUM(budget) AS total_budget\nFROM Movies_Release_Year\nWHERE release_year < 2010;", "raw_model_output": "To find the total budget for movies released before 2010, you can use the following SQL query:\n\n```sql\nSELECT SUM(budget) AS total_budget\nFROM Movies_Release_Year\nWHERE release_year < 2010;\n```\n\nThis query sums up the `budget` column for all rows where the `release_year` is less than 2010. The result will give you the total budget for movies released before 2010.\n\nGiven the data provided:\n\n- \"The Matrix\" (1999, $63,000,000)\n- \"Titanic\" (1997, $200,000,000)\n- \"The Lord of the Rings: The Fellowship of the Ring\" (2001, $93,000,000)\n\nOnly \"The Matrix\" and \"Titanic\" are released before 2010. So the total budget would be:\n\n\\[ 63,000,000 + 200,000,000 = 263,000,000 \\]\n\nThus, the query will return a `total_budget` of $263,000,000.", "latency_sec": 3.651658058166504, "total_duration": 3650630566, "load_duration": 9969059, "tokens_prompt": 180, "prompt_eval_duration": 9039951, "tokens_completion": 274, "eval_duration": 3629378202, "tokens_total": 454, "tokens_per_sec": 124.3270845101946, "match_exact": false, "match_ast": true, "llm_equivalent": false, "llm_explanation": "Not implemented"}
