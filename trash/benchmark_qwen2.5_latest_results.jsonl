{"example_id": 1, "prompt": "What is the average explainability score of creative AI applications in 'Europe' and 'North America' in the 'creative_ai' table?", "context": "CREATE TABLE creative_ai (application_id INT, name TEXT, region TEXT, explainability_score FLOAT); INSERT INTO creative_ai (application_id, name, region, explainability_score) VALUES (1, 'ApplicationX', 'Europe', 0.87), (2, 'ApplicationY', 'North America', 0.91), (3, 'ApplicationZ', 'Europe', 0.84), (4, 'ApplicationAA', 'North America', 0.93), (5, 'ApplicationAB', 'Europe', 0.89);", "reference_sql": "SELECT AVG(explainability_score) FROM creative_ai WHERE region IN ('Europe', 'North America');", "generated_sql": "To find the average explainability score of creative AI applications in both 'Europe' and 'North America', you can use the following SQL query:\n\n```sql\nSELECT \n    AVG(explainability_score) AS average_explainability_score\nFROM \n    creative_ai\nWHERE \n    region IN ('Europe', 'North America');\n```\n\nThis query calculates the average (`AVG`) explainability score for all applications in the `creative_ai` table where the `region` is either 'Europe' or 'North America'.", "latency_sec": 1.5512280464172363, "tokens_prompt": null, "tokens_completion": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false}
{"example_id": 2, "prompt": "Delete all records of rural infrastructure projects in Indonesia that have a completion date before 2010.", "context": "CREATE TABLE rural_infrastructure (id INT, project_name TEXT, sector TEXT, country TEXT, completion_date DATE); INSERT INTO rural_infrastructure (id, project_name, sector, country, completion_date) VALUES (1, 'Water Supply Expansion', 'Infrastructure', 'Indonesia', '2008-05-15'), (2, 'Rural Electrification', 'Infrastructure', 'Indonesia', '2012-08-28'), (3, 'Transportation Improvement', 'Infrastructure', 'Indonesia', '2009-12-31');", "reference_sql": "DELETE FROM rural_infrastructure WHERE country = 'Indonesia' AND completion_date < '2010-01-01';", "generated_sql": "Certainly! Here is the SQL query to delete all records of rural infrastructure projects in Indonesia with a completion date before 2010:\n\n```sql\nDELETE FROM rural_infrastructure\nWHERE country = 'Indonesia' AND YEAR(completion_date) < 2010;\n```\n\nThis query uses the `YEAR` function to extract the year from the `completion_date` column and filters out records that belong to Indonesia with a completion date before 2010.", "latency_sec": 1.411492109298706, "tokens_prompt": null, "tokens_completion": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false}
{"example_id": 3, "prompt": "How many accidents have been recorded for SpaceX and Blue Origin rocket launches?", "context": "CREATE TABLE Accidents (id INT, launch_provider VARCHAR(255), year INT, description TEXT); INSERT INTO Accidents (id, launch_provider, year, description) VALUES (1, 'SpaceX', 2015, 'Falcon 9 explosion'), (2, 'Blue Origin', 2011, 'Propulsion system failure'), (3, 'SpaceX', 2016, 'Falcon 9 explosion');", "reference_sql": "SELECT launch_provider, COUNT(*) FROM Accidents GROUP BY launch_provider;", "generated_sql": "To find out how many accidents have been recorded for SpaceX and Blue Origin rocket launches, you can use the `COUNT` function along with a `WHERE` clause to filter by the `launch_provider`. Here is the SQL query:\n\n```sql\nSELECT COUNT(*) AS accident_count\nFROM Accidents\nWHERE launch_provider IN ('SpaceX', 'Blue Origin');\n```\n\nThis query counts the number of rows (accidents) where the `launch_provider` is either 'SpaceX' or 'Blue Origin'. The result will be a single value representing the total number of accidents for these two providers.", "latency_sec": 1.755718469619751, "tokens_prompt": null, "tokens_completion": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false}
{"example_id": 4, "prompt": "What is the maximum quantity of seafood sold in a single transaction?", "context": "CREATE TABLE sales (id INT, location VARCHAR(20), quantity INT, price DECIMAL(5,2)); INSERT INTO sales (id, location, quantity, price) VALUES (1, 'Northeast', 50, 12.99), (2, 'Midwest', 75, 19.99), (3, 'West', 120, 14.49);", "reference_sql": "SELECT MAX(quantity) FROM sales;", "generated_sql": "To find the maximum quantity of seafood sold in a single transaction from the `sales` table, you can use the `MAX()` aggregate function. However, based on the provided schema and data, it seems that the term \"seafood\" is not mentioned or represented in the `sales` table directly. Assuming that all entries represent different types of products and we are looking for the maximum quantity sold across all transactions, you can simply use:\n\n```sql\nSELECT MAX(quantity) AS max_quantity_sold\nFROM sales;\n```\n\nThis query will return the highest value in the `quantity` column, which represents the maximum quantity of any product sold in a single transaction. \n\nIf \"seafood\" is meant to be specific to one or more locations and you have additional information about this, please provide that detail so I can adjust the query accordingly.", "latency_sec": 2.4240009784698486, "tokens_prompt": null, "tokens_completion": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false}
{"example_id": 5, "prompt": "What is the total budget for movies released before 2010?", "context": "CREATE TABLE Movies_Release_Year (id INT, title VARCHAR(100), release_year INT, budget DECIMAL(10,2)); INSERT INTO Movies_Release_Year (id, title, release_year, budget) VALUES (1, 'The Matrix', 1999, 63000000.00), (2, 'Titanic', 1997, 200000000.00), (3, 'The Lord of the Rings: The Fellowship of the Ring', 2001, 93000000.00);", "reference_sql": "SELECT SUM(budget) FROM Movies_Release_Year WHERE release_year < 2010;", "generated_sql": "Certainly! Here's the SQL query to find the total budget for movies released before 2010:\n\n```sql\nSELECT SUM(budget) AS total_budget\nFROM Movies_Release_Year\nWHERE release_year < 2010;\n```\n\nThis query sums up the `budget` column for all rows where the `release_year` is less than 2010. The result will give you the total budget for movies released before 2010.", "latency_sec": 1.4260060787200928, "tokens_prompt": null, "tokens_completion": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false}
