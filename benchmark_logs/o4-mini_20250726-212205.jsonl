{"example_id": 2656, "sql_complexity": "multiple_joins", "prompt": "Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.", "context": "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", "reference_sql": "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')", "generated_sql": "SELECT d.name,\n       SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s\n  ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n  SELECT AVG(t.total_rev)\n  FROM (\n    SELECT SUM(s2.revenue) AS total_rev\n    FROM drugs d2\n    JOIN sales s2\n      ON d2.id = s2.drug_id\n    WHERE d2.indication = 'Infectious_Diseases'\n    GROUP BY d2.id\n  ) AS t\n);", "raw_model_output": "SELECT d.name,\n       SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s\n  ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n  SELECT AVG(t.total_rev)\n  FROM (\n    SELECT SUM(s2.revenue) AS total_rev\n    FROM drugs d2\n    JOIN sales s2\n      ON d2.id = s2.drug_id\n    WHERE d2.indication = 'Infectious_Diseases'\n    GROUP BY d2.id\n  ) AS t\n);", "latency_sec": 11.437074899673462, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 714, "prompt_eval_sec": null, "tokens_completion": 982, "completion_eval_sec": null, "tokens_total": 1696, "tokens_per_sec": 148.28966452326216, "retrieval_latency_sec": 0.31542301177978516, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the HAVING clause subquery logic. The Reference SQL calculates the average of individual sales revenues for 'Infectious_Diseases' drugs, while the Generated SQL calculates the average of per-drug total revenues for the same. This leads to different threshold values for comparison. Additionally, the Generated SQL groups by 'd.name' instead of 's.drug_id', which could produce different results if multiple drugs share the same name."}
{"example_id": 3008, "sql_complexity": "multiple_joins", "prompt": "Who are the users who used electric vehicles and their trip details?", "context": "CREATE TABLE users (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), city VARCHAR(50));CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(20), is_electric BOOLEAN);CREATE TABLE trips (id INT, user_id INT, vehicle_id INT, trip_distance FLOAT, trip_duration INT, departure_time TIMESTAMP, arrival_time TIMESTAMP);INSERT INTO users (id, name, age, gender, city) VALUES (3, 'Alex', 30, 'Female', 'New York');INSERT INTO vehicles (id, vehicle_type, is_electric) VALUES (1, 'Tesla', true), (2, 'Bike', false);INSERT INTO trips (id, user_id, vehicle_id, trip_distance, trip_duration, departure_time, arrival_time) VALUES (3, 3, 1, 15.3, 25, '2022-01-03 12:00:00', '2022-01-03 12:25:00');", "reference_sql": "SELECT u.name, v.vehicle_type, t.trip_distance, t.trip_duration FROM users u JOIN trips t ON u.id = t.user_id JOIN vehicles v ON t.vehicle_id = v.id WHERE v.is_electric = true;", "generated_sql": "SELECT u.id AS user_id,\n       u.name,\n       u.age,\n       u.gender,\n       u.city,\n       t.id AS trip_id,\n       t.trip_distance,\n       t.trip_duration,\n       t.departure_time,\n       t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "raw_model_output": "SELECT u.id AS user_id,\n       u.name,\n       u.age,\n       u.gender,\n       u.city,\n       t.id AS trip_id,\n       t.trip_distance,\n       t.trip_duration,\n       t.departure_time,\n       t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "latency_sec": 4.667192220687866, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 765, "prompt_eval_sec": null, "tokens_completion": 425, "completion_eval_sec": null, "tokens_total": 1190, "tokens_per_sec": 254.9712854604934, "retrieval_latency_sec": 0.1084749698638916, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 4 columns (u.name, v.vehicle_type, t.trip_distance, t.trip_duration), while the Generated SQL selects 10 columns including additional user/trip attributes (id, age, gender, city, trip_id, departure_time, arrival_time) and includes all columns from users and trips tables. The result sets have different structures and content."}
{"example_id": 2531, "sql_complexity": "basic SQL", "prompt": "Who is the top customer by sales in 2022?", "context": "CREATE TABLE customers (customer_id INT, total_sales_2022 FLOAT); INSERT INTO customers (customer_id, total_sales_2022) VALUES (1, 25000.0), (2, 30000.0), (3, 22000.0), (4, 35000.0);", "reference_sql": "SELECT customer_id, total_sales_2022 FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "generated_sql": "SELECT customer_id, total_sales_2022\nFROM customers\nORDER BY total_sales_2022 DESC\nLIMIT 1;", "raw_model_output": "SELECT customer_id, total_sales_2022\nFROM customers\nORDER BY total_sales_2022 DESC\nLIMIT 1;", "latency_sec": 3.028618812561035, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1329, "prompt_eval_sec": null, "tokens_completion": 301, "completion_eval_sec": null, "tokens_total": 1630, "tokens_per_sec": 538.1991266909067, "retrieval_latency_sec": 0.10598015785217285, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns from the customers table, apply the same ordering by total_sales_2022 in descending order, and limit the result to 1 row. The formatting differences (line breaks) do not affect semantic equivalence."}
{"example_id": 3792, "sql_complexity": "single join", "prompt": "What is the maximum distance traveled by an electric vehicle in a single trip, grouped by vehicle model?", "context": "CREATE TABLE Trips (trip_id INT, vehicle_id INT, distance FLOAT); CREATE TABLE ElectricVehicleModels (vehicle_id INT, vehicle_model TEXT);", "reference_sql": "SELECT evm.vehicle_model, MAX(trips.distance) AS max_distance_traveled FROM Trips trips INNER JOIN ElectricVehicleModels evm ON trips.vehicle_id = evm.vehicle_id GROUP BY 1;", "generated_sql": "SELECT evm.vehicle_model,\n       MAX(t.distance) AS max_distance\nFROM Trips t\nJOIN ElectricVehicleModels evm\n  ON t.vehicle_id = evm.vehicle_id\nGROUP BY evm.vehicle_model;", "raw_model_output": "SELECT evm.vehicle_model,\n       MAX(t.distance) AS max_distance\nFROM Trips t\nJOIN ElectricVehicleModels evm\n  ON t.vehicle_id = evm.vehicle_id\nGROUP BY evm.vehicle_model;", "latency_sec": 1.8024392127990723, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 863, "prompt_eval_sec": null, "tokens_completion": 191, "completion_eval_sec": null, "tokens_total": 1054, "tokens_per_sec": 584.7631323794858, "retrieval_latency_sec": 0.12085795402526855, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum distance traveled per vehicle model by joining the Trips and ElectricVehicleModels tables. The Reference SQL uses GROUP BY 1 (first column) while the Generated SQL explicitly groups by evm.vehicle_model. Since the first selected column in both queries is evm.vehicle_model, the grouping logic is equivalent. The table aliases (trips/t) and column aliases (max_distance_traveled/max_distance) differ but do not affect semantic equivalence."}
{"example_id": 2311, "sql_complexity": "subqueries", "prompt": "Determine the percentage of sales from each ingredient category", "context": "CREATE TABLE Sales_Details (sale_id INT, ingredient_id INT, quantity INT); INSERT INTO Sales_Details (sale_id, ingredient_id, quantity) VALUES (1, 1, 2), (1, 2, 8), (2, 1, 3), (2, 2, 7); CREATE TABLE Ingredient_Categories (ingredient_id INT, ingredient_category VARCHAR(255)); INSERT INTO Ingredient_Categories (ingredient_id, ingredient_category) VALUES (1, 'Legumes'), (2, 'Poultry');", "reference_sql": "SELECT ingredient_category, SUM(quantity) AS total_quantity, SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales FROM Sales_Details, Ingredient_Categories WHERE Sales_Details.ingredient_id = Ingredient_Categories.ingredient_id GROUP BY ingredient_category;", "generated_sql": "SELECT \n  ic.ingredient_category,\n  100.0 * SUM(sd.quantity) / (SELECT SUM(quantity) FROM Sales_Details) AS percentage\nFROM Sales_Details sd\nJOIN Ingredient_Categories ic\n  ON sd.ingredient_id = ic.ingredient_id\nGROUP BY \n  ic.ingredient_category;", "raw_model_output": "SELECT \n  ic.ingredient_category,\n  100.0 * SUM(sd.quantity) / (SELECT SUM(quantity) FROM Sales_Details) AS percentage\nFROM Sales_Details sd\nJOIN Ingredient_Categories ic\n  ON sd.ingredient_id = ic.ingredient_id\nGROUP BY \n  ic.ingredient_category;", "latency_sec": 2.3561367988586426, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 739, "prompt_eval_sec": null, "tokens_completion": 276, "completion_eval_sec": null, "tokens_total": 1015, "tokens_per_sec": 430.7899271772697, "retrieval_latency_sec": 0.11334919929504395, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an additional column 'total_quantity' in the SELECT clause, while the Generated SQL only returns 'ingredient_category' and 'percentage'. Although both queries calculate the percentage correctly and use equivalent JOIN logic, the result sets differ in column count, making them non-equivalent."}
{"example_id": 3329, "sql_complexity": "set operations", "prompt": "Which causes received funding from donors in both the United States and Canada?", "context": "CREATE TABLE donor_location (donor_id INT, country VARCHAR(50), cause VARCHAR(50), donation DECIMAL(10,2)); INSERT INTO donor_location (donor_id, country, cause, donation) VALUES (1, 'United States', 'Global Health', 1000.00), (2, 'Canada', 'Education', 2000.00), (3, 'United States', 'Environment', 1500.00), (4, 'Canada', 'Animal Welfare', 2500.00);", "reference_sql": "SELECT cause FROM donor_location WHERE country = 'United States' INTERSECT SELECT cause FROM donor_location WHERE country = 'Canada';", "generated_sql": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "raw_model_output": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "latency_sec": 2.7913992404937744, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 877, "prompt_eval_sec": null, "tokens_completion": 308, "completion_eval_sec": null, "tokens_total": 1185, "tokens_per_sec": 424.5182784352925, "retrieval_latency_sec": 0.10785317420959473, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve causes that exist in both 'United States' and 'Canada'. The reference uses INTERSECT to find common causes between the two countries, while the generated query groups by cause and checks for presence in both countries via COUNT(DISTINCT country) = 2. Both approaches ensure only causes appearing in both countries are returned."}
{"example_id": 2912, "sql_complexity": "single join", "prompt": "Which company has manufactured the most satellites?", "context": "CREATE TABLE manufacturers (id INT, name TEXT); CREATE TABLE satellites (id INT, manufacturer_id INT, name TEXT, launch_date DATE); INSERT INTO manufacturers (id, name) VALUES (1, 'SpaceX'), (2, 'Blue Origin'), (3, 'ISRO'), (4, 'CAST'); INSERT INTO satellites (id, manufacturer_id, name, launch_date) VALUES (1, 1, 'StarDragon', '2012-05-25'), (2, 1, 'Falcon', '2015-12-21'), (3, 2, 'New Glenn', '2022-01-11'), (4, 3, 'ChinaSat 1E', '2000-12-05'), (5, 3, 'ChinaSat 2A', '2003-08-13'), (6, 4, 'Shijian 9', '2017-11-19'), (7, 1, 'StarLink', '2020-05-24'), (8, 1, 'StarLink', '2020-06-13');", "reference_sql": "SELECT m.name, COUNT(s.id) FROM manufacturers m JOIN satellites s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY COUNT(s.id) DESC;", "generated_sql": "SELECT m.name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "raw_model_output": "SELECT m.name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "latency_sec": 2.3891587257385254, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 940, "prompt_eval_sec": null, "tokens_completion": 246, "completion_eval_sec": null, "tokens_total": 1186, "tokens_per_sec": 496.40904441515886, "retrieval_latency_sec": 0.11044502258300781, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns all manufacturers with their satellite counts ordered by count descending, while the Generated SQL only returns the top manufacturer (due to LIMIT 1). The Generated query truncates the result set, making them non-equivalent."}
{"example_id": 3170, "sql_complexity": "aggregation", "prompt": "Determine the total production quantity of silver for mining sites in Mexico, between the dates '2017-05-01' and '2017-09-30', having less than 40 employees.", "context": "CREATE TABLE silver_mine_2 (site_id INT, country VARCHAR(50), num_employees INT, extraction_date DATE, quantity INT); INSERT INTO silver_mine_2 (site_id, country, num_employees, extraction_date, quantity) VALUES (1, 'Mexico', 35, '2017-05-02', 1200), (2, 'Mexico', 30, '2017-08-31', 1800), (3, 'Mexico', 37, '2017-07-04', 2200);", "reference_sql": "SELECT country, SUM(quantity) as total_silver_prod FROM silver_mine_2 WHERE num_employees < 40 AND country = 'Mexico' AND extraction_date >= '2017-05-01' AND extraction_date <= '2017-09-30' GROUP BY country;", "generated_sql": "SELECT SUM(quantity) AS total_quantity\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "raw_model_output": "SELECT SUM(quantity) AS total_quantity\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "latency_sec": 2.3189761638641357, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 938, "prompt_eval_sec": null, "tokens_completion": 263, "completion_eval_sec": null, "tokens_total": 1201, "tokens_per_sec": 517.9009679852683, "retrieval_latency_sec": 0.1083378791809082, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter the same rows (Mexico sites with employees <40 and extraction dates between 2017-05-01 and 2017-09-30) and calculate the sum of quantity. The Reference query includes a GROUP BY country, but since all filtered rows are from Mexico, the aggregation has no effect. The Generated query simplifies this by directly summing the filtered rows without grouping, producing the same numerical result."}
{"example_id": 3518, "sql_complexity": "basic SQL", "prompt": "Insert new records of ticket sales for a new event, including event and salesperson information.", "context": "CREATE TABLE salesperson (salesperson_id INT, name VARCHAR(50), position VARCHAR(50)); CREATE TABLE tickets (ticket_id INT, salesperson_id INT, event_id INT, price DECIMAL(5,2), quantity INT); CREATE TABLE events (event_id INT, name VARCHAR(50), date DATE); INSERT INTO salesperson VALUES (1, 'John Doe', 'Senior Salesperson'); INSERT INTO events VALUES (2, 'New Event', '2023-04-15');", "reference_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) VALUES (2, 1, 2, 75, 50), (3, 2, 2, 65, 75); INSERT INTO events (event_id, name, date) VALUES (2, 'New Event', '2023-04-15');", "generated_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) \nVALUES (2, 1, 2, 75.00, 50);", "raw_model_output": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) \nVALUES (2, 1, 2, 75.00, 50);", "latency_sec": 7.200123071670532, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 875, "prompt_eval_sec": null, "tokens_completion": 1207, "completion_eval_sec": null, "tokens_total": 2082, "tokens_per_sec": 289.161723942164, "retrieval_latency_sec": 0.11058616638183594, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts two rows into the tickets table and one row into the events table, while the Generated SQL only inserts a single row into the tickets table. The Generated SQL omits the second ticket row and the events table insertion entirely, resulting in different data being added to the database."}
{"example_id": 3925, "sql_complexity": "set operations", "prompt": "What is the total number of students and staff with accommodations in the \"disability_services\" schema, excluding the \"accessibility_parking\" type?", "context": "CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));", "reference_sql": "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';", "generated_sql": "SELECT \n  (SELECT COUNT(*) \n   FROM disability_services.staff \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking')\n+ (SELECT COUNT(*) \n   FROM disability_services.students \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking')\n  AS total_accommodations;", "raw_model_output": "SELECT \n  (SELECT COUNT(*) \n   FROM disability_services.staff \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking')\n+ (SELECT COUNT(*) \n   FROM disability_services.students \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking')\n  AS total_accommodations;", "latency_sec": 3.575253963470459, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 591, "prompt_eval_sec": null, "tokens_completion": 534, "completion_eval_sec": null, "tokens_total": 1125, "tokens_per_sec": 314.66296142721427, "retrieval_latency_sec": 0.11612701416015625, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (staff and students) as individual rows via UNION, while the Generated SQL calculates a single summed total. Additionally, the Generated SQL explicitly checks for non-NULL accommodations, though this is functionally equivalent to the != condition in the Reference SQL. The structural difference in output (two rows vs. one row) makes them non-equivalent."}
{"example_id": 3340, "sql_complexity": "subqueries", "prompt": "Calculate the total revenue for garments manufactured in the US and sold in California.", "context": "CREATE TABLE garment_manufacturing(id INT PRIMARY KEY, garment_id INT, country VARCHAR(50), material VARCHAR(50), manufacturing_date DATE, quantity INT); CREATE TABLE garment_sales(id INT PRIMARY KEY, garment_id INT, store_id INT, sale_date DATE, units INT, revenue DECIMAL(10,2));", "reference_sql": "SELECT SUM(gs.revenue) FROM garment_manufacturing gm JOIN garment_sales gs ON gm.garment_id = gs.garment_id WHERE gm.country = 'United States' AND gs.store_id IN (SELECT id FROM stores WHERE region = 'California');", "generated_sql": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_manufacturing AS gm\nJOIN garment_sales AS gs\n  ON gm.garment_id = gs.garment_id\nWHERE gm.country = 'US'\n  AND gs.country = 'California';", "raw_model_output": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_manufacturing AS gm\nJOIN garment_sales AS gs\n  ON gm.garment_id = gs.garment_id\nWHERE gm.country = 'US'\n  AND gs.country = 'California';", "latency_sec": 19.764174938201904, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 879, "prompt_eval_sec": null, "tokens_completion": 2889, "completion_eval_sec": null, "tokens_total": 3768, "tokens_per_sec": 190.64797856635462, "retrieval_latency_sec": 0.12002992630004883, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses a subquery to filter store_id from the 'stores' table where region = 'California', while the Generated SQL incorrectly references 'gs.country' which doesn't exist in the schema. The garment_sales table lacks a 'country' column, making the Generated SQL invalid and semantically different."}
{"example_id": 596, "sql_complexity": "basic SQL", "prompt": "What is the minimum energy production cost of wind farms in Spain?", "context": "CREATE TABLE wind_farm_costs (id INT, name TEXT, country TEXT, energy_production_cost FLOAT); INSERT INTO wind_farm_costs (id, name, country, energy_production_cost) VALUES (1, 'Las Tiesas', 'Spain', 0.045), (2, 'Eolo', 'Spain', 0.050);", "reference_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "generated_sql": "SELECT MIN(energy_production_cost) AS minimum_energy_production_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "raw_model_output": "SELECT MIN(energy_production_cost) AS minimum_energy_production_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "latency_sec": 1.6267848014831543, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 652, "prompt_eval_sec": null, "tokens_completion": 175, "completion_eval_sec": null, "tokens_total": 827, "tokens_per_sec": 508.3647199346937, "retrieval_latency_sec": 0.1404111385345459, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the minimum energy_production_cost for wind farms in Spain. The generated query adds an alias to the result column, but this does not affect the semantic equivalence of the data returned. The WHERE clause and aggregate function (MIN) are identical in both queries."}
{"example_id": 2604, "sql_complexity": "subqueries", "prompt": "What is the maximum number of virtual tours taken by a single user in the UK?", "context": "CREATE TABLE virtual_tour_data (user_id INT, hotel_id INT, tour_date DATE); INSERT INTO virtual_tour_data (user_id, hotel_id, tour_date) VALUES (1, 10, '2022-01-01'), (2, 11, '2022-01-03'), (3, 12, '2022-01-05'), (4, 10, '2022-01-07'), (5, 10, '2022-01-09'); CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT); INSERT INTO hotels (hotel_id, hotel_name, country) VALUES (10, 'Royal Park Hotel', 'UK'), (11, 'The Ritz London', 'UK'), (12, 'Hotel de Crillon', 'France');", "reference_sql": "SELECT MAX(vt.user_tours) FROM (SELECT user_id, COUNT(DISTINCT hotel_id) as user_tours FROM virtual_tour_data WHERE country = 'UK' GROUP BY user_id) as vt;", "generated_sql": "SELECT MAX(tour_count) AS max_virtual_tours\nFROM (\n  SELECT v.user_id,\n         COUNT(*) AS tour_count\n  FROM virtual_tour_data v\n  JOIN hotels h\n    ON v.hotel_id = h.hotel_id\n  WHERE h.country = 'UK'\n  GROUP BY v.user_id\n) AS user_tours;", "raw_model_output": "SELECT MAX(tour_count) AS max_virtual_tours\nFROM (\n  SELECT v.user_id,\n         COUNT(*) AS tour_count\n  FROM virtual_tour_data v\n  JOIN hotels h\n    ON v.hotel_id = h.hotel_id\n  WHERE h.country = 'UK'\n  GROUP BY v.user_id\n) AS user_tours;", "latency_sec": 4.787225008010864, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 804, "prompt_eval_sec": null, "tokens_completion": 538, "completion_eval_sec": null, "tokens_total": 1342, "tokens_per_sec": 280.32941793091385, "retrieval_latency_sec": 0.1265730857849121, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'country' column not present in the virtual_tour_data table, causing an error. The Generated SQL correctly joins with the hotels table to filter by country. Additionally, the Reference SQL uses COUNT(DISTINCT hotel_id) while the Generated SQL uses COUNT(*), which would yield different results if a user viewed the same hotel multiple times."}
{"example_id": 5812, "sql_complexity": "single join", "prompt": "Calculate the percentage of Shariah-compliant investments held by each investor in the top 5 countries with the highest percentage?", "context": "CREATE TABLE investors (investor_id INT, investor_name TEXT, country TEXT); INSERT INTO investors (investor_id, investor_name, country) VALUES (1, 'Al Thani', 'Qatar'), (2, 'Saudi Investment Group', 'Saudi Arabia'), (3, 'Temasek Holdings', 'Singapore'); CREATE TABLE investments (investment_id INT, investor_id INT, investment_type TEXT, investment_value DECIMAL, is_shariah_compliant BOOLEAN); INSERT INTO investments (investment_id, investor_id, investment_type, investment_value, is_shariah_compliant) VALUES (1, 1, 'Real Estate', 15000000, true), (2, 2, 'Stocks', 20000000, false);", "reference_sql": "SELECT investor_name, ROUND((SUM(CASE WHEN is_shariah_compliant THEN investment_value ELSE 0 END) / SUM(investment_value)) * 100, 2) AS percentage FROM investments JOIN investors ON investments.investor_id = investors.investor_id GROUP BY investor_name ORDER BY percentage DESC LIMIT 5;", "generated_sql": "SELECT inv.country,\n         100.0 * SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) / COUNT(*) AS pct\n  FROM investors inv\n  JOIN investments i ON inv.investor_id = i.investor_id\n  GROUP BY inv.country\n),\ntop_countries AS (\n  SELECT country\n  FROM country_pct\n  ORDER BY pct DESC\n  FETCH FIRST 5 ROWS ONLY\n)\nSELECT \n  inv.investor_id,\n  inv.investor_name,\n  inv.country,\n  100.0 * SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) / COUNT(*) AS pct_shariah_compliant\nFROM investors inv\nJOIN investments i \n  ON inv.investor_id = i.investor_id\nWHERE inv.country IN (SELECT country FROM top_countries)\nGROUP BY \n  inv.investor_id,\n  inv.investor_name,\n  inv.country;", "raw_model_output": "WITH country_pct AS (\n  SELECT inv.country,\n         100.0 * SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) / COUNT(*) AS pct\n  FROM investors inv\n  JOIN investments i ON inv.investor_id = i.investor_id\n  GROUP BY inv.country\n),\ntop_countries AS (\n  SELECT country\n  FROM country_pct\n  ORDER BY pct DESC\n  FETCH FIRST 5 ROWS ONLY\n)\nSELECT \n  inv.investor_id,\n  inv.investor_name,\n  inv.country,\n  100.0 * SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) / COUNT(*) AS pct_shariah_compliant\nFROM investors inv\nJOIN investments i \n  ON inv.investor_id = i.investor_id\nWHERE inv.country IN (SELECT country FROM top_countries)\nGROUP BY \n  inv.investor_id,\n  inv.investor_name,\n  inv.country;", "latency_sec": 5.445205926895142, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1101, "prompt_eval_sec": null, "tokens_completion": 870, "completion_eval_sec": null, "tokens_total": 1971, "tokens_per_sec": 361.9697815769963, "retrieval_latency_sec": 0.12293505668640137, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects.  The Reference SQL calculates the percentage of investment value that is shariah compliant per investor, while the Generated SQL calculates the percentage of shariah compliant investments (count) per country, then filters investors based on their country's percentage.  The Generated SQL also includes additional columns (investor_id, country) and uses a different calculation method (count-based instead of value-based).  Additionally, the Reference SQL orders by investor percentage and limits to 5 results, while the Generated SQL first identifies top countries and then returns investors from those countries, with no explicit limit."}
{"example_id": 4706, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 customers by total spend on makeup products from Italy and Spain?", "context": "CREATE TABLE customers (customer_id INT, customer_name TEXT, country TEXT); INSERT INTO customers (customer_id, customer_name, country) VALUES (1, 'Alessandro Martini', 'IT'), (2, 'Laura Rossi', 'ES'), (3, 'Daniela Gonzalez', 'MX'), (4, 'Jose Hernandez', 'ES'), (5, 'Sophia Rodriguez', 'IT'); CREATE TABLE sales (sale_id INT, customer_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, customer_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 1, 100, 'IT'), (2, 2, 2, 150, 'ES'), (3, 3, 3, 200, 'MX'), (4, 4, 4, 250, 'ES'), (5, 5, 5, 300, 'IT'); CREATE TABLE products (product_id INT, product_name TEXT, category TEXT); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Eyeshadow Palette', 'makeup'), (2, 'Liquid Lipstick', 'makeup'), (3, 'BB Cream', 'makeup'), (4, 'Volumizing Mascara', 'makeup'), (5, 'Nourishing Lip Balm', 'makeup');", "reference_sql": "SELECT c.customer_name, SUM(s.sale_quantity) as total_spent_on_makeup FROM sales s JOIN customers c ON s.customer_id = c.customer_id JOIN products p ON s.product_id = p.product_id WHERE c.country IN ('IT', 'ES') AND p.category = 'makeup' GROUP BY c.customer_name ORDER BY total_spent_on_makeup DESC LIMIT 3;", "generated_sql": "SELECT\n  c.customer_name\nFROM\n  customers c\n  JOIN sales s ON c.customer_id = s.customer_id\n  JOIN products p ON s.product_id = p.product_id\nWHERE\n  p.category = 'makeup'\n  AND s.sale_country IN ('IT','ES')\nGROUP BY\n  c.customer_name\nORDER BY\n  SUM(s.sale_quantity) DESC\nLIMIT 3;", "raw_model_output": "SELECT\n  c.customer_name\nFROM\n  customers c\n  JOIN sales s ON c.customer_id = s.customer_id\n  JOIN products p ON s.product_id = p.product_id\nWHERE\n  p.category = 'makeup'\n  AND s.sale_country IN ('IT','ES')\nGROUP BY\n  c.customer_name\nORDER BY\n  SUM(s.sale_quantity) DESC\nLIMIT 3;", "latency_sec": 3.5942280292510986, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1279, "prompt_eval_sec": null, "tokens_completion": 486, "completion_eval_sec": null, "tokens_total": 1765, "tokens_per_sec": 491.0651148552084, "retrieval_latency_sec": 0.12006783485412598, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their filtering conditions and selected columns. The Reference SQL filters customers by their country ('IT', 'ES'), while the Generated SQL filters sales by sale_country ('IT', 'ES'). Additionally, the Reference SQL includes a calculated total_spent_on_makeup column in the output, which the Generated SQL omits. These differences in logic and output structure make them non-equivalent."}
{"example_id": 1515, "sql_complexity": "multiple_joins", "prompt": "What is the average age of clients who lost cases in the 'personal injury' category?", "context": "CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50)); INSERT INTO Cases (CaseID, ClientID, Category) VALUES (701, 7, 'Personal Injury'); CREATE TABLE Clients (ClientID int, Age int, Gender varchar(10)); INSERT INTO Clients (ClientID, Age, Gender) VALUES (7, 45, 'Male'); CREATE TABLE CaseOutcomes (CaseID int, Outcome varchar(50)); INSERT INTO CaseOutcomes (CaseID, Outcome) VALUES (701, 'Lost');", "reference_sql": "SELECT AVG(C.Age) as AvgAge FROM Clients C INNER JOIN Cases CA ON C.ClientID = CA.ClientID INNER JOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID WHERE CA.Category = 'Personal Injury' AND CO.Outcome = 'Lost';", "generated_sql": "SELECT AVG(C.Age) AS AverageAge\nFROM Clients C\nJOIN Cases CA ON C.ClientID = CA.ClientID\nJOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID\nWHERE CA.Category = 'Personal Injury'\n  AND CO.Outcome = 'Lost';", "raw_model_output": "SELECT AVG(C.Age) AS AverageAge\nFROM Clients C\nJOIN Cases CA ON C.ClientID = CA.ClientID\nJOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID\nWHERE CA.Category = 'Personal Injury'\n  AND CO.Outcome = 'Lost';", "latency_sec": 2.823559284210205, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 710, "prompt_eval_sec": null, "tokens_completion": 334, "completion_eval_sec": null, "tokens_total": 1044, "tokens_per_sec": 369.74608815129716, "retrieval_latency_sec": 0.1267561912536621, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. They both calculate the average age of clients with 'Personal Injury' cases that resulted in a 'Lost' outcome. The only differences are formatting (column alias name 'AvgAge' vs 'AverageAge' and whitespace/indentation), which do not affect the query's logic or result."}
{"example_id": 4388, "sql_complexity": "subqueries", "prompt": "Insert a new drug with a price 10% higher than the average price", "context": "CREATE TABLE drugs (drug_id INT, drug_name VARCHAR(50), price DECIMAL(10, 2)); INSERT INTO drugs (drug_id, drug_name, price) VALUES (1, 'DrugA', 50), (2, 'DrugB', 75), (3, 'DrugC', 100)", "reference_sql": "INSERT INTO drugs (drug_id, drug_name, price) VALUES ((SELECT MAX(drug_id) FROM drugs) + 1, 'DrugD', (SELECT AVG(price) * 1.1 FROM drugs))", "generated_sql": "INSERT INTO drugs (drug_id, drug_name, price)\nSELECT MAX(drug_id) + 1,\n       'NewDrug',\n       AVG(price) * 1.10\nFROM drugs;", "raw_model_output": "INSERT INTO drugs (drug_id, drug_name, price)\nSELECT MAX(drug_id) + 1,\n       'NewDrug',\n       AVG(price) * 1.10\nFROM drugs;", "latency_sec": 3.43865704536438, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 694, "prompt_eval_sec": null, "tokens_completion": 507, "completion_eval_sec": null, "tokens_total": 1201, "tokens_per_sec": 349.26425757376893, "retrieval_latency_sec": 0.14019107818603516, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the drug_name value inserted ('DrugD' vs 'NewDrug'). While both calculate drug_id as MAX(drug_id)+1 and price as AVG(price)*1.1, the distinct drug_name values make the inserted rows semantically different. The structure of the INSERT (VALUES vs SELECT) is functionally equivalent but the actual data inserted varies due to the different string literals."}
{"example_id": 5431, "sql_complexity": "basic SQL", "prompt": "What is the average CO2 emission of ride-hailing vehicles in San Francisco?", "context": "CREATE TABLE SFRideHailing (id INT, company VARCHAR(20), co2_emission DECIMAL(5,2));", "reference_sql": "SELECT AVG(co2_emission) FROM SFRideHailing WHERE company = 'Uber';", "generated_sql": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "raw_model_output": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "latency_sec": 1.672502040863037, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 547, "prompt_eval_sec": null, "tokens_completion": 168, "completion_eval_sec": null, "tokens_total": 715, "tokens_per_sec": 427.50321526127937, "retrieval_latency_sec": 0.13158822059631348, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average co2_emission specifically for 'Uber' rides, while the Generated SQL calculates the average for all companies in the table. The WHERE clause in the Reference SQL restricts the data, making the results different unless all entries are from Uber."}
{"example_id": 3531, "sql_complexity": "single join", "prompt": "What is the total number of workouts and total workout time per user for users with a membership type of 'Basic'?", "context": "CREATE TABLE Members (id INT, user_name VARCHAR, membership_type VARCHAR, signup_date DATE); CREATE TABLE Workouts (id INT, user_id INT, workout_date DATE, workout_duration INT); INSERT INTO Members (id, user_name, membership_type, signup_date) VALUES (1, 'John Doe', 'Premium', '2020-01-01'), (2, 'Jane Smith', 'Basic', '2019-06-15'), (3, 'Alice Johnson', 'Premium', '2020-03-20'); INSERT INTO Workouts (id, user_id, workout_date, workout_duration) VALUES (1, 1, '2020-01-01', 60), (2, 1, '2020-01-02', 70), (3, 2, '2019-06-15', 90), (4, 3, '2020-03-20', 65), (5, 3, '2020-03-21', 70);", "reference_sql": "SELECT Members.user_name, SUM(Workouts.workout_duration) AS total_workout_time, COUNT(Workouts.id) AS total_workouts FROM Members JOIN Workouts ON Members.id = Workouts.user_id WHERE Members.membership_type = 'Basic' GROUP BY Members.user_name;", "generated_sql": "SELECT \n  m.user_name, \n  COUNT(w.id) AS total_workouts, \n  SUM(w.workout_duration) AS total_workout_time \nFROM Members m \nJOIN Workouts w \n  ON m.id = w.user_id \nWHERE m.membership_type = 'Basic' \nGROUP BY m.user_name;", "raw_model_output": "SELECT \n  m.user_name, \n  COUNT(w.id) AS total_workouts, \n  SUM(w.workout_duration) AS total_workout_time \nFROM Members m \nJOIN Workouts w \n  ON m.id = w.user_id \nWHERE m.membership_type = 'Basic' \nGROUP BY m.user_name;", "latency_sec": 4.21281099319458, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1048, "prompt_eval_sec": null, "tokens_completion": 533, "completion_eval_sec": null, "tokens_total": 1581, "tokens_per_sec": 375.28386688934404, "retrieval_latency_sec": 0.12258005142211914, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining Members and Workouts tables on user_id, filtering for 'Basic' membership type, and grouping by user_name. The generated query uses table aliases (m/w) and swaps the order of aggregated columns, but these are syntactic differences that do not affect the semantic result. The aggregation functions (SUM and COUNT) are applied to the same columns in both queries."}
{"example_id": 5678, "sql_complexity": "set operations", "prompt": "How many public works projects are there in 'Sydney' and 'Melbourne' combined?", "context": "CREATE TABLE PublicWorksC(id INT, city VARCHAR(20), project VARCHAR(30)); INSERT INTO PublicWorksC(id, city, project) VALUES (1, 'Sydney', 'Park Renovation'), (2, 'Melbourne', 'Sidewalk Repair');", "reference_sql": "SELECT COUNT(*) FROM (SELECT city FROM PublicWorksC WHERE city = 'Sydney' UNION ALL SELECT city FROM PublicWorksC WHERE city = 'Melbourne') AS Total;", "generated_sql": "SELECT COUNT(*) AS project_count\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "raw_model_output": "SELECT COUNT(*) AS project_count\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "latency_sec": 1.779754877090454, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 700, "prompt_eval_sec": null, "tokens_completion": 169, "completion_eval_sec": null, "tokens_total": 869, "tokens_per_sec": 488.26948653774303, "retrieval_latency_sec": 0.11836814880371094, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows in PublicWorksC where the city is either 'Sydney' or 'Melbourne'. The Reference SQL uses a UNION ALL to combine results from two separate SELECTs (one for each city) and then counts all rows. The Generated SQL uses a single WHERE clause with IN to achieve the same filtering. Since UNION ALL includes all matching rows (without deduplication) and the COUNT(*) in both cases aggregates the same set of rows, the results are identical."}
{"example_id": 5792, "sql_complexity": "multiple_joins", "prompt": "How many cases were handled by attorneys in the 'Los Angeles' office?", "context": "CREATE TABLE offices (office_id INT, office_name VARCHAR(20), city VARCHAR(20), state VARCHAR(20)); INSERT INTO offices (office_id, office_name, city, state) VALUES (1, 'Boston', 'Boston', 'MA'), (2, 'New York', 'New York', 'NY'), (3, 'Los Angeles', 'Los Angeles', 'CA'); CREATE TABLE attorneys (attorney_id INT, office_id INT); INSERT INTO attorneys (attorney_id, office_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3);", "reference_sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.attorney_id JOIN offices ON attorneys.office_id = offices.office_id WHERE offices.city = 'Los Angeles';", "generated_sql": "SELECT COUNT(*) AS cases_count\nFROM cases AS c\nJOIN attorneys AS a\n  ON c.attorney_id = a.attorney_id\nJOIN offices AS o\n  ON a.office_id = o.office_id\nWHERE o.office_name = 'Los Angeles';", "raw_model_output": "SELECT COUNT(*) AS cases_count\nFROM cases AS c\nJOIN attorneys AS a\n  ON c.attorney_id = a.attorney_id\nJOIN offices AS o\n  ON a.office_id = o.office_id\nWHERE o.office_name = 'Los Angeles';", "latency_sec": 3.0071487426757812, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 863, "prompt_eval_sec": null, "tokens_completion": 392, "completion_eval_sec": null, "tokens_total": 1255, "tokens_per_sec": 417.33885064936715, "retrieval_latency_sec": 0.1276860237121582, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters on 'offices.city = 'Los Angeles'', while the Generated SQL filters on 'o.office_name = 'Los Angeles''. Since the 'city' and 'office_name' columns are distinct (e.g., in the sample data, 'Los Angeles' office has both city and office_name as 'Los Angeles', but this isn't guaranteed to always be the case), the conditions are not semantically equivalent. The queries may produce different results if an office's name differs from its city."}
{"example_id": 5148, "sql_complexity": "window functions", "prompt": "List the unique types of smart city technologies that have been implemented in the top 3 most populous countries in the world.", "context": "CREATE TABLE smart_city_tech (tech_type VARCHAR(255), country VARCHAR(255)); CREATE TABLE country_populations (country VARCHAR(255), population INT);", "reference_sql": "SELECT DISTINCT tech_type FROM smart_city_tech SCT WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY population DESC) as rank FROM country_populations) CP WHERE rank <= 3);", "generated_sql": "SELECT country\n  FROM country_populations\n  ORDER BY population DESC\n  LIMIT 3\n)\nSELECT DISTINCT tech_type\nFROM smart_city_tech\nWHERE country IN (SELECT country FROM top_countries);", "raw_model_output": "WITH top_countries AS (\n  SELECT country\n  FROM country_populations\n  ORDER BY population DESC\n  LIMIT 3\n)\nSELECT DISTINCT tech_type\nFROM smart_city_tech\nWHERE country IN (SELECT country FROM top_countries);", "latency_sec": 4.73793625831604, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 700, "prompt_eval_sec": null, "tokens_completion": 453, "completion_eval_sec": null, "tokens_total": 1153, "tokens_per_sec": 243.3548990821164, "retrieval_latency_sec": 0.12589573860168457, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries aim to retrieve distinct tech_types from smart_city_tech where the country is among the top 3 most populous countries. The Reference SQL uses ROW_NUMBER() to rank countries by population and selects the top 3, while the Generated SQL uses ORDER BY and LIMIT 3 to achieve the same result. Assuming deterministic ordering, both approaches yield identical country subsets, leading to equivalent outcomes."}
{"example_id": 5547, "sql_complexity": "multiple_joins", "prompt": "Which species have a population growth rate higher than the average for protected areas?", "context": "CREATE TABLE species (id INT, name VARCHAR(50), population DECIMAL(5,2), protected_area_id INT, growth_rate DECIMAL(5,2)); INSERT INTO species (id, name, population, protected_area_id, growth_rate) VALUES (1, 'Species 1', 500.00, 1, 0.05), (2, 'Species 2', 800.00, 1, 0.03), (3, 'Species 3', 1200.00, 2, 0.07), (4, 'Species 4', 700.00, 2, 0.02); CREATE TABLE protected_areas (id INT, name VARCHAR(50)); INSERT INTO protected_areas (id, name) VALUES (1, 'Area 1'), (2, 'Area 2');", "reference_sql": "SELECT s.name, s.growth_rate FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id GROUP BY s.name, s.growth_rate HAVING s.growth_rate > (SELECT AVG(s.growth_rate) FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id);", "generated_sql": "SELECT name\nFROM species\nWHERE growth_rate > (\n  SELECT AVG(growth_rate)\n  FROM species\n);", "raw_model_output": "SELECT name\nFROM species\nWHERE growth_rate > (\n  SELECT AVG(growth_rate)\n  FROM species\n);", "latency_sec": 4.919888973236084, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1077, "prompt_eval_sec": null, "tokens_completion": 682, "completion_eval_sec": null, "tokens_total": 1759, "tokens_per_sec": 357.52839333750416, "retrieval_latency_sec": 0.13045310974121094, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL includes a JOIN with protected_areas in both the main query and subquery, while the Generated SQL omits the JOIN. Although the subquery averages might yield the same result in this specific dataset, the main query's GROUP BY and HAVING clause in the Reference SQL returns (name, growth_rate) pairs, whereas the Generated SQL only returns names. Additionally, the Reference SQL's JOIN could affect results if there were species without valid protected_area_id, but in this dataset, it doesn't change the average. However, the differing output columns and grouping logic make them non-equivalent."}
{"example_id": 5498, "sql_complexity": "aggregation", "prompt": "Identify the destinations with the highest number of repeat visitors from the US.", "context": "CREATE TABLE RepeatTravelers (Visitor VARCHAR(20), Destination VARCHAR(20), VisitCount INT); INSERT INTO RepeatTravelers (Visitor, Destination, VisitCount) VALUES ('David', 'Paris', 3), ('Ella', 'London', 4), ('Fiona', 'Paris', 2);", "reference_sql": "SELECT Destination, AVG(VisitCount) AS AvgVisitCount FROM RepeatTravelers WHERE Visitor LIKE '%USA%' GROUP BY Destination ORDER BY AvgVisitCount DESC;", "generated_sql": "SELECT Destination\nFROM RepeatTravelers\nGROUP BY Destination\nORDER BY COUNT(Visitor) DESC\nFETCH FIRST 1 ROW WITH TIES;", "raw_model_output": "SELECT Destination\nFROM RepeatTravelers\nGROUP BY Destination\nORDER BY COUNT(Visitor) DESC\nFETCH FIRST 1 ROW WITH TIES;", "latency_sec": 4.095024108886719, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 795, "prompt_eval_sec": null, "tokens_completion": 560, "completion_eval_sec": null, "tokens_total": 1355, "tokens_per_sec": 330.88938281449407, "retrieval_latency_sec": 0.14529085159301758, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL filters for visitors with 'USA' in their name (which returns no rows in the sample data) and calculates average VisitCount per destination. The Generated SQL counts visitor occurrences per destination without filtering, returning Paris (2 visitors) as the top result. The WHERE clause and aggregation logic differ fundamentally."}
{"example_id": 3546, "sql_complexity": "window functions", "prompt": "What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?", "context": "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", "reference_sql": "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';", "generated_sql": "SELECT \n  ce.exchange_name, \n  bc.company_name \nFROM cryptocurrency_exchanges ce \nJOIN blockchain_companies bc \n  ON ce.company_id = bc.company_id \nWHERE bc.platform = 'Bitcoin' \nORDER BY ce.exchange_id ASC;", "raw_model_output": "SELECT \n  ce.exchange_name, \n  bc.company_name \nFROM cryptocurrency_exchanges ce \nJOIN blockchain_companies bc \n  ON ce.company_id = bc.company_id \nWHERE bc.platform = 'Bitcoin' \nORDER BY ce.exchange_id ASC;", "latency_sec": 3.318030834197998, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 995, "prompt_eval_sec": null, "tokens_completion": 453, "completion_eval_sec": null, "tokens_total": 1448, "tokens_per_sec": 436.4034188820299, "retrieval_latency_sec": 0.137864351272583, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL includes an additional 'exchange_id' column and a computed 'rank' column using ROW_NUMBER(), while the Generated SQL omits these. Additionally, the Generated SQL includes an ORDER BY clause not present in the Reference SQL, which could affect result ordering. The differing column sets and potential ordering differences mean the result structures and contents are not identical."}
{"example_id": 486, "sql_complexity": "single join", "prompt": "What is the average price of paintings from African artists in our collection?", "context": "CREATE TABLE Artworks (id INT, title VARCHAR(50), price DECIMAL(10,2), medium VARCHAR(50), artist_nationality VARCHAR(50)); CREATE TABLE Collections (id INT, name VARCHAR(50), continent VARCHAR(50));", "reference_sql": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Collections ON Artworks.artist_nationality = Collections.continent WHERE Artworks.medium = 'Painting' AND Collections.continent = 'Africa';", "generated_sql": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'Painting'\n  AND artist_nationality = 'African';", "raw_model_output": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'Painting'\n  AND artist_nationality = 'African';", "latency_sec": 3.1531639099121094, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 819, "prompt_eval_sec": null, "tokens_completion": 431, "completion_eval_sec": null, "tokens_total": 1250, "tokens_per_sec": 396.4272190451534, "retrieval_latency_sec": 0.12962818145751953, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their filtering conditions. The Reference SQL uses a JOIN with Collections.continent = 'Africa' (which implies Artworks.artist_nationality = 'Africa'), while the Generated SQL directly checks Artworks.artist_nationality = 'African'. 'Africa' and 'African' are distinct values, leading to different results."}
{"example_id": 794, "sql_complexity": "multiple_joins", "prompt": "Which suppliers have provided raw materials for the production of chemicals with high environmental impact?", "context": "CREATE TABLE suppliers (id INT, name TEXT); INSERT INTO suppliers (id, name) VALUES (1, 'Supplier1'), (2, 'Supplier2'), (3, 'Supplier3'); CREATE TABLE chemicals (id INT, name TEXT, environmental_impact INT); INSERT INTO chemicals (id, name, environmental_impact) VALUES (1, 'ChemA', 10), (2, 'ChemB', 20), (3, 'ChemC', 15); CREATE TABLE raw_materials (chemical_id INT, supplier_id INT); INSERT INTO raw_materials (chemical_id, supplier_id) VALUES (1, 1), (1, 2), (2, 3), (3, 1);", "reference_sql": "SELECT s.name FROM suppliers s INNER JOIN raw_materials rm ON s.id = rm.supplier_id INNER JOIN chemicals c ON rm.chemical_id = c.id WHERE c.environmental_impact > 10;", "generated_sql": "SELECT DISTINCT s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > (\n  SELECT AVG(environmental_impact) FROM chemicals\n);", "raw_model_output": "SELECT DISTINCT s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > (\n  SELECT AVG(environmental_impact) FROM chemicals\n);", "latency_sec": 5.201088190078735, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 872, "prompt_eval_sec": null, "tokens_completion": 842, "completion_eval_sec": null, "tokens_total": 1714, "tokens_per_sec": 329.54642131804593, "retrieval_latency_sec": 0.14220094680786133, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters chemicals with environmental_impact > 10, while the Generated SQL filters chemicals with environmental_impact > (average of 15). This changes the set of chemicals considered (ChemB and ChemC vs only ChemB). Additionally, the Generated SQL uses DISTINCT, which could affect results if duplicates exist, though in this specific dataset it doesn't. The core difference in filter conditions makes them non-equivalent."}
{"example_id": 3164, "sql_complexity": "set operations", "prompt": "What is the average age of patients who received therapy in 'clinic_a' and 'clinic_b'?", "context": "CREATE TABLE clinic_a (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_a (patient_id, age, therapy_received) VALUES (1, 35, true), (2, 42, true), (3, 28, false); CREATE TABLE clinic_b (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_b (patient_id, age, therapy_received) VALUES (4, 50, true), (5, 32, false), (6, 45, true);", "reference_sql": "SELECT AVG(age) FROM (SELECT age FROM clinic_a WHERE therapy_received = true UNION ALL SELECT age FROM clinic_b WHERE therapy_received = true) AS combined_clinics;", "generated_sql": "SELECT AVG(age) AS average_age\nFROM (\n  SELECT age\n  FROM clinic_a\n  WHERE therapy_received = TRUE\n  UNION ALL\n  SELECT age\n  FROM clinic_b\n  WHERE therapy_received = TRUE\n) AS combined;", "raw_model_output": "SELECT AVG(age) AS average_age\nFROM (\n  SELECT age\n  FROM clinic_a\n  WHERE therapy_received = TRUE\n  UNION ALL\n  SELECT age\n  FROM clinic_b\n  WHERE therapy_received = TRUE\n) AS combined;", "latency_sec": 5.81799578666687, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 707, "prompt_eval_sec": null, "tokens_completion": 453, "completion_eval_sec": null, "tokens_total": 1160, "tokens_per_sec": 199.3813750533092, "retrieval_latency_sec": 0.12014889717102051, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of patients who received therapy (therapy_received = true) from both clinics. The only differences are the alias names ('combined_clinics' vs 'combined') and an explicit column alias ('average_age') in the generated query, which do not affect the semantic result."}
{"example_id": 3704, "sql_complexity": "aggregation", "prompt": "What is the total sales revenue for each category of garments in the South America region in Q1 2022?", "context": "CREATE TABLE sales_category (sale_id INT, garment_category VARCHAR(50), sale_date DATE, total_sales DECIMAL(10, 2), region VARCHAR(50));", "reference_sql": "SELECT garment_category, SUM(total_sales) FROM sales_category WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31' AND region = 'South America' GROUP BY garment_category;", "generated_sql": "SELECT \n  garment_category, \n  SUM(total_sales) AS total_revenue \nFROM sales_category \nWHERE region = 'South America' \n  AND sale_date BETWEEN '2022-01-01' AND '2022-03-31' \nGROUP BY garment_category;", "raw_model_output": "SELECT \n  garment_category, \n  SUM(total_sales) AS total_revenue \nFROM sales_category \nWHERE region = 'South America' \n  AND sale_date BETWEEN '2022-01-01' AND '2022-03-31' \nGROUP BY garment_category;", "latency_sec": 2.1723108291625977, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 745, "prompt_eval_sec": null, "tokens_completion": 204, "completion_eval_sec": null, "tokens_total": 949, "tokens_per_sec": 436.86197539503553, "retrieval_latency_sec": 0.1248939037322998, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (garment_category and SUM(total_sales)), apply identical WHERE conditions (region = 'South America' and sale_date between 2022-01-01 and 2022-03-31), and group by the same column (garment_category). The only difference is the alias 'total_revenue' in the generated query, which does not affect the semantic result content."}
{"example_id": 2851, "sql_complexity": "single join", "prompt": "How many cases were handled by attorneys who joined the firm in 2015 or later?", "context": "CREATE TABLE attorneys (attorney_id INT, join_year INT); CREATE TABLE cases (case_id INT, attorney_id INT, billing_amount INT);", "reference_sql": "SELECT COUNT(DISTINCT cases.case_id) FROM cases INNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id WHERE attorneys.join_year >= 2015;", "generated_sql": "SELECT COUNT(*) \nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nWHERE a.join_year >= 2015;", "raw_model_output": "SELECT COUNT(*) \nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nWHERE a.join_year >= 2015;", "latency_sec": 2.0428106784820557, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 835, "prompt_eval_sec": null, "tokens_completion": 178, "completion_eval_sec": null, "tokens_total": 1013, "tokens_per_sec": 495.8854046879794, "retrieval_latency_sec": 0.1317729949951172, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses COUNT(DISTINCT cases.case_id) to count unique case IDs, while the Generated SQL uses COUNT(*) which counts all rows. If there are multiple entries for the same case_id in the cases table, the two queries would produce different results. The DISTINCT keyword ensures uniqueness in the Reference SQL, whereas the Generated SQL counts all joined rows without deduplication."}
{"example_id": 3246, "sql_complexity": "single join", "prompt": "What is the average eco-friendliness score of accommodations in Oceania by year?", "context": "CREATE TABLE Accommodations (Accommodation_ID INT, Accommodation_Name VARCHAR(50), City VARCHAR(30), Country VARCHAR(50), Eco_Friendliness_Score INT, Visit_Year INT); INSERT INTO Accommodations (Accommodation_ID, Accommodation_Name, City, Country, Eco_Friendliness_Score, Visit_Year) VALUES (1, 'EcoLodge', 'Sydney', 'Australia', 85, 2019), (2, 'GreenHotel', 'Melbourne', 'Australia', 90, 2019), (3, 'SustainableResort', 'Auckland', 'New Zealand', 80, 2019), (4, 'EcoVilla', 'Wellington', 'New Zealand', 88, 2019); CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(30)); INSERT INTO Countries (Country, Continent) VALUES ('Australia', 'Oceania'), ('New Zealand', 'Oceania');", "reference_sql": "SELECT C.Continent, V.Visit_Year, AVG(A.Eco_Friendliness_Score) AS Avg_Eco_Score  FROM Accommodations A  JOIN Countries C  ON A.Country = C.Country  WHERE C.Continent = 'Oceania'  GROUP BY C.Continent, V.Visit_Year  ORDER BY V.Visit_Year;", "generated_sql": "SELECT a.Visit_Year,\n       AVG(a.Eco_Friendliness_Score) AS Avg_Eco_Friendliness_Score\nFROM Accommodations AS a\nJOIN Countries AS c\n  ON a.Country = c.Country\nWHERE c.Continent = 'Oceania'\nGROUP BY a.Visit_Year;", "raw_model_output": "SELECT a.Visit_Year,\n       AVG(a.Eco_Friendliness_Score) AS Avg_Eco_Friendliness_Score\nFROM Accommodations AS a\nJOIN Countries AS c\n  ON a.Country = c.Country\nWHERE c.Continent = 'Oceania'\nGROUP BY a.Visit_Year;", "latency_sec": 3.0107901096343994, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 934, "prompt_eval_sec": null, "tokens_completion": 340, "completion_eval_sec": null, "tokens_total": 1274, "tokens_per_sec": 423.14474061916656, "retrieval_latency_sec": 0.10518407821655273, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'Continent' in the SELECT and GROUP BY clauses, while the Generated SQL omits it. Although the Continent is fixed as 'Oceania' in both queries, the result sets differ in column structure. The Reference SQL returns three columns (Continent, Visit_Year, Avg_Eco_Score), whereas the Generated SQL returns only two (Visit_Year, Avg_Eco_Score). This makes them semantically distinct."}
{"example_id": 3056, "sql_complexity": "multiple_joins", "prompt": "Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.", "context": "CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);", "reference_sql": "SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;", "generated_sql": "SELECT DISTINCT s.id, s.name\nFROM Suppliers AS s\nJOIN Ingredients AS i\n  ON s.id = i.supplierId\nJOIN Restaurants AS r\n  ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE\n  AND r.numStars > 0;", "raw_model_output": "SELECT DISTINCT s.id, s.name\nFROM Suppliers AS s\nJOIN Ingredients AS i\n  ON s.id = i.supplierId\nJOIN Restaurants AS r\n  ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE\n  AND r.numStars > 0;", "latency_sec": 4.295958042144775, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 760, "prompt_eval_sec": null, "tokens_completion": 591, "completion_eval_sec": null, "tokens_total": 1351, "tokens_per_sec": 314.48165618617344, "retrieval_latency_sec": 0.12273502349853516, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in three key aspects: 1) The Reference SQL selects only 'Suppliers.name' while the Generated SQL selects 's.id' and 's.name' (different output columns). 2) The WHERE clause in Reference uses 'Restaurants.numStars > 2' whereas Generated uses 'r.numStars > 0' (different filtering thresholds). 3) The Generated query includes 'DISTINCT' which could eliminate duplicates not present in the Reference query. These differences ensure they do not produce identical results."}
{"example_id": 264, "sql_complexity": "set operations", "prompt": "List the number of community health centers and infectious disease tracking facilities in 'southwest' regions.", "context": "CREATE TABLE centers (id INT, name TEXT, region TEXT); INSERT INTO centers (id, name, region) VALUES (1, 'Center A', 'southwest'); INSERT INTO centers (id, name, region) VALUES (2, 'Center B', 'northeast'); INSERT INTO centers (id, name, region) VALUES (3, 'Center C', 'northwest'); CREATE TABLE diseases (id INT, name TEXT, region TEXT); INSERT INTO diseases (id, name, region) VALUES (1, 'Disease A', 'southwest'); INSERT INTO diseases (id, name, region) VALUES (2, 'Disease B', 'southeast');", "reference_sql": "SELECT COUNT(*) FROM ( (SELECT * FROM centers WHERE region = 'southwest') UNION (SELECT * FROM diseases WHERE region = 'southwest') );", "generated_sql": "SELECT\n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS community_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS infectious_disease_tracking_facilities;", "raw_model_output": "SELECT\n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS community_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS infectious_disease_tracking_facilities;", "latency_sec": 5.130789041519165, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 886, "prompt_eval_sec": null, "tokens_completion": 703, "completion_eval_sec": null, "tokens_total": 1589, "tokens_per_sec": 309.69895412607264, "retrieval_latency_sec": 0.10368204116821289, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL combines rows from both tables using UNION and counts the total, while the Generated SQL returns separate counts for each table. The Reference counts combined rows (e.g., 2 in sample data), whereas the Generated returns two separate counts (e.g., 1 and 1). The output structure and results differ."}
{"example_id": 2838, "sql_complexity": "basic SQL", "prompt": "What is the minimum safety rating of electric vehicles in the 'green_cars' table?", "context": "CREATE TABLE green_cars (id INT, make VARCHAR(50), model VARCHAR(50), type VARCHAR(50), safety_rating INT);", "reference_sql": "SELECT MIN(safety_rating) FROM green_cars WHERE type = 'Electric';", "generated_sql": "SELECT MIN(safety_rating) AS min_safety_rating\nFROM green_cars\nWHERE type = 'electric';", "raw_model_output": "SELECT MIN(safety_rating) AS min_safety_rating\nFROM green_cars\nWHERE type = 'electric';", "latency_sec": 1.9657809734344482, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 580, "prompt_eval_sec": null, "tokens_completion": 170, "completion_eval_sec": null, "tokens_total": 750, "tokens_per_sec": 381.52775417785364, "retrieval_latency_sec": 0.12749409675598145, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the case of the string literal in the WHERE clause ('Electric' vs. 'electric'). While SQL is often case-insensitive for string comparisons, this depends on the database's collation settings. Without explicit case-insensitive configuration, the two queries may filter different rows, making them non-equivalent. The aliasing difference (AS min_safety_rating) does not affect the result's content."}
{"example_id": 1187, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 authors with the highest number of articles published in The Guardian?", "context": "CREATE TABLE authors (id INT, name VARCHAR(100), publisher VARCHAR(50)); CREATE TABLE articles_authors (article_id INT, author_id INT); INSERT INTO authors (id, name, publisher) VALUES (1, 'Author1', 'The Guardian'), (2, 'Author2', 'The Guardian'), (3, 'Author3', 'The Guardian'); INSERT INTO articles_authors (article_id, author_id) VALUES (1, 1), (2, 2), (3, 1), (3, 2), (3, 3); INSERT INTO articles (id, title, publication_date, publisher) VALUES (1, 'Article1', '2021-01-01', 'The Guardian'), (2, 'Article2', '2021-01-02', 'The Guardian'), (3, 'Article3', '2021-01-03', 'The Guardian');", "reference_sql": "SELECT a.name, COUNT(aa.article_id) AS articles_count FROM authors a JOIN articles_authors aa ON a.id = aa.author_id JOIN articles ar ON aa.article_id = ar.id WHERE ar.publisher = 'The Guardian' GROUP BY a.name ORDER BY articles_count DESC LIMIT 3;", "generated_sql": "SELECT a.name,\n       COUNT(*) AS article_count\nFROM authors AS a\nJOIN articles_authors AS aa\n  ON a.id = aa.author_id\nJOIN articles AS ar\n  ON aa.article_id = ar.id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.id, a.name\nORDER BY article_count DESC\nLIMIT 3;", "raw_model_output": "SELECT a.name,\n       COUNT(*) AS article_count\nFROM authors AS a\nJOIN articles_authors AS aa\n  ON a.id = aa.author_id\nJOIN articles AS ar\n  ON aa.article_id = ar.id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.id, a.name\nORDER BY article_count DESC\nLIMIT 3;", "latency_sec": 5.258930921554565, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1028, "prompt_eval_sec": null, "tokens_completion": 539, "completion_eval_sec": null, "tokens_total": 1567, "tokens_per_sec": 297.9693065709232, "retrieval_latency_sec": 0.12547612190246582, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL groups by 'a.name' while the Generated SQL groups by 'a.id, a.name'. Although the authors table has unique names in the provided data, the GROUP BY clause in the Reference SQL may not be valid in standard SQL if multiple authors share the same name (since 'name' isn't guaranteed to be unique). The Generated SQL's grouping by both 'id' and 'name' ensures correct aggregation per author, making them semantically different in general cases."}
{"example_id": 360, "sql_complexity": "window functions", "prompt": "What is the change in crime rate for each category, between this year and last year, for the same time period?", "context": "CREATE TABLE CrimeStatistics (ID INT, CrimeType VARCHAR(50), Date TIMESTAMP, Count INT); INSERT INTO CrimeStatistics (ID, CrimeType, Date, Count) VALUES (1, 'Theft', '2022-01-01 00:00:00', 100), (2, 'Vandalism', '2022-01-01 00:00:00', 50), (3, 'Theft', '2022-01-02 00:00:00', 120), (4, 'Vandalism', '2022-01-02 00:00:00', 60), (5, 'Theft', '2021-01-01 00:00:00', 80), (6, 'Vandalism', '2021-01-01 00:00:00', 40), (7, 'Theft', '2021-01-02 00:00:00', 90), (8, 'Vandalism', '2021-01-02 00:00:00', 45);", "reference_sql": "SELECT CrimeType, (SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date) ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) - SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date)) AS CrimeRateChange FROM CrimeStatistics WHERE Date BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND CURRENT_DATE;", "generated_sql": "SELECT\n  CrimeType,\n  SUM(CASE \n        WHEN Date >= CAST(EXTRACT(YEAR FROM CURRENT_DATE) || '-01-01' AS DATE)\n         AND Date <= CURRENT_DATE\n        THEN Count \n        ELSE 0 \n      END)\n  - SUM(CASE \n          WHEN Date >= CAST(EXTRACT(YEAR FROM CURRENT_DATE) || '-01-01' AS DATE) - INTERVAL '1' YEAR\n           AND Date <= CURRENT_DATE - INTERVAL '1' YEAR\n          THEN Count \n          ELSE 0 \n        END) AS change_in_count\nFROM CrimeStatistics\nGROUP BY CrimeType;", "raw_model_output": "SELECT\n  CrimeType,\n  SUM(CASE \n        WHEN Date >= CAST(EXTRACT(YEAR FROM CURRENT_DATE) || '-01-01' AS DATE)\n         AND Date <= CURRENT_DATE\n        THEN Count \n        ELSE 0 \n      END)\n  - SUM(CASE \n          WHEN Date >= CAST(EXTRACT(YEAR FROM CURRENT_DATE) || '-01-01' AS DATE) - INTERVAL '1' YEAR\n           AND Date <= CURRENT_DATE - INTERVAL '1' YEAR\n          THEN Count \n          ELSE 0 \n        END) AS change_in_count\nFROM CrimeStatistics\nGROUP BY CrimeType;", "latency_sec": 12.122395038604736, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 875, "prompt_eval_sec": null, "tokens_completion": 1683, "completion_eval_sec": null, "tokens_total": 2558, "tokens_per_sec": 211.01440695950302, "retrieval_latency_sec": 0.12598800659179688, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses window functions to calculate a difference between the previous year's sum and the current cumulative sum, which may not correctly aggregate yearly totals and has an inverted sign compared to the Generated SQL. The Generated SQL directly computes the difference between current and previous year sums using conditional aggregation, which is more straightforward and accurate for year-over-year comparison. Additionally, the Reference SQL's window frame may not properly capture yearly aggregates due to row-level operations."}
{"example_id": 335, "sql_complexity": "single join", "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000", "context": "CREATE TABLE policies (policy_number INT);CREATE TABLE claims (claim_id INT, policy_number INT, claim_amount DECIMAL(10,2), claim_date DATE);", "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "generated_sql": "SELECT c.policy_number,\n       c.claim_amount,\n       c.claim_date\nFROM claims AS c\nJOIN (\n    SELECT policy_number\n    FROM claims\n    GROUP BY policy_number\n    HAVING COUNT(*) > 2\n       AND SUM(claim_amount) > 5000\n) AS agg\n  ON c.policy_number = agg.policy_number;", "raw_model_output": "SELECT c.policy_number,\n       c.claim_amount,\n       c.claim_date\nFROM claims AS c\nJOIN (\n    SELECT policy_number\n    FROM claims\n    GROUP BY policy_number\n    HAVING COUNT(*) > 2\n       AND SUM(claim_amount) > 5000\n) AS agg\n  ON c.policy_number = agg.policy_number;", "latency_sec": 4.565298795700073, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 972, "prompt_eval_sec": null, "tokens_completion": 667, "completion_eval_sec": null, "tokens_total": 1639, "tokens_per_sec": 359.01264590692904, "retrieval_latency_sec": 0.12495684623718262, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in grouping logic. The reference query groups by policy_number, claim_amount, and claim_date, requiring each (policy, amount, date) combination to have >2 claims. The generated query first filters policies with >2 total claims (regardless of amount/date) and then retrieves all their claims. This leads to different results: the reference query's HAVING clause is per-claim-group, while the generated query's HAVING is per-policy aggregate."}
{"example_id": 2866, "sql_complexity": "basic SQL", "prompt": "What is the number of hospitals in 'rural_healthcare' table?", "context": "CREATE TABLE rural_healthcare (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO rural_healthcare (name, type, location) VALUES ('Rural General Hospital', 'Hospital', 'Bushland'), ('Rural Community Hospital', 'Hospital', 'Forest Region');", "reference_sql": "SELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "generated_sql": "SELECT COUNT(*) \nFROM rural_healthcare \nWHERE type = 'Hospital';", "raw_model_output": "SELECT COUNT(*) \nFROM rural_healthcare \nWHERE type = 'Hospital';", "latency_sec": 1.904991865158081, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 551, "prompt_eval_sec": null, "tokens_completion": 98, "completion_eval_sec": null, "tokens_total": 649, "tokens_per_sec": 340.68386950625865, "retrieval_latency_sec": 0.1260230541229248, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the count of rows from the 'rural_healthcare' table where the 'type' column equals 'Hospital'. The structure, conditions, and table references are identical, with only trivial formatting differences (e.g., line breaks) that do not affect semantic meaning."}
{"example_id": 4440, "sql_complexity": "multiple_joins", "prompt": "What is the average session length for each game genre in the last month, sorted by average session length.", "context": "CREATE TABLE game_sessions(id INT, user_id INT, game_name VARCHAR(50), start_time DATETIME, end_time DATETIME); CREATE TABLE games(id INT, name VARCHAR(50), genre VARCHAR(50));", "reference_sql": "SELECT genres.genre, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) as avg_session_length FROM game_sessions JOIN games ON game_sessions.game_name = games.name JOIN (SELECT DISTINCT game_name, genre FROM game_sessions JOIN games ON game_sessions.game_name = games.name) genres ON games.name = genres.game_name WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY genres.genre ORDER BY avg_session_length DESC;", "generated_sql": "SELECT g.genre,\n       AVG(TIMESTAMPDIFF(SECOND, gs.start_time, gs.end_time)) AS avg_session_length\nFROM game_sessions AS gs\nJOIN games AS g\n  ON gs.game_name = g.name\nWHERE gs.start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY g.genre\nORDER BY avg_session_length DESC;", "raw_model_output": "SELECT g.genre,\n       AVG(TIMESTAMPDIFF(SECOND, gs.start_time, gs.end_time)) AS avg_session_length\nFROM game_sessions AS gs\nJOIN games AS g\n  ON gs.game_name = g.name\nWHERE gs.start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY g.genre\nORDER BY avg_session_length DESC;", "latency_sec": 5.225768089294434, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 745, "prompt_eval_sec": null, "tokens_completion": 671, "completion_eval_sec": null, "tokens_total": 1416, "tokens_per_sec": 270.96495209973693, "retrieval_latency_sec": 0.12838506698608398, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average session length per genre for game sessions in the last month. The Reference SQL includes a redundant subquery and additional join that doesn't affect the result, while the Generated SQL directly joins the tables and groups by genre. The final output structure and aggregation logic are identical, making them semantically equivalent."}
{"example_id": 451, "sql_complexity": "single join", "prompt": "Which customers have made a transaction over 500 in the \"risk_management\" category?", "context": "CREATE TABLE customers (id INT, name VARCHAR(50), category VARCHAR(50)); INSERT INTO customers (id, name, category) VALUES (1, 'John Doe', 'risk_management'); INSERT INTO customers (id, name, category) VALUES (2, 'Jane Smith', 'compliance'); INSERT INTO customers (id, name, category) VALUES (3, 'Jim Brown', 'risk_management'); CREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10, 2)); INSERT INTO transactions (id, customer_id, amount) VALUES (1, 1, 500.00); INSERT INTO transactions (id, customer_id, amount) VALUES (2, 1, 200.00); INSERT INTO transactions (id, customer_id, amount) VALUES (3, 2, 100.00); INSERT INTO transactions (id, customer_id, amount) VALUES (4, 3, 750.00);", "reference_sql": "SELECT c.name FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE c.category = 'risk_management' AND t.amount > 500;", "generated_sql": "SELECT DISTINCT c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management'\n  AND t.amount > 500;", "raw_model_output": "SELECT DISTINCT c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management'\n  AND t.amount > 500;", "latency_sec": 2.258457899093628, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1202, "prompt_eval_sec": null, "tokens_completion": 183, "completion_eval_sec": null, "tokens_total": 1385, "tokens_per_sec": 613.2503070151686, "retrieval_latency_sec": 0.12271261215209961, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Generated SQL includes DISTINCT which ensures unique names, while the Reference SQL might return duplicates if a customer has multiple transactions meeting the criteria. Semantic equivalence requires identical result sets in all cases, not just the sample data."}
{"example_id": 2879, "sql_complexity": "basic SQL", "prompt": "Update the FoodSafetyRecords.OrganicFarms table to include a new record for a certified organic farm in Kenya.", "context": "CREATE TABLE FoodSafetyRecords.OrganicFarms (farmName TEXT, country TEXT, certified BOOLEAN);", "reference_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) VALUES ('Ngong Organic Farm', 'Kenya', TRUE);", "generated_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) \nVALUES ('Maasai Organic Farm', 'Kenya', TRUE);", "raw_model_output": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) \nVALUES ('Maasai Organic Farm', 'Kenya', TRUE);", "latency_sec": 2.3496739864349365, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 551, "prompt_eval_sec": null, "tokens_completion": 179, "completion_eval_sec": null, "tokens_total": 730, "tokens_per_sec": 310.681398446939, "retrieval_latency_sec": 0.11661219596862793, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The two queries insert different farm names ('Ngong Organic Farm' vs. 'Maasai Organic Farm') into the same table, resulting in different data records. While the structure and other values (country 'Kenya', certified TRUE) are identical, the distinct farm names make the inserted data non-equivalent."}
{"example_id": 5688, "sql_complexity": "single join", "prompt": "What is the total amount donated to a specific cause?", "context": "CREATE TABLE causes (id INT, name TEXT); CREATE TABLE donations (id INT, donor_id INT, cause_id INT, donation_amount DECIMAL(10,2)); INSERT INTO causes (id, name) VALUES (1, 'Cause A'), (2, 'Cause B'); INSERT INTO donations (id, donor_id, cause_id, donation_amount) VALUES (1, 1, 1, 50.00), (2, 2, 1, 100.00);", "reference_sql": "SELECT SUM(donation_amount) FROM donations JOIN causes ON donations.cause_id = causes.id WHERE causes.name = 'Cause A';", "generated_sql": "SELECT c.name AS cause_name,\n       SUM(d.donation_amount) AS total_donated\nFROM donations d\nJOIN causes c ON d.cause_id = c.id\nWHERE c.id = 1\nGROUP BY c.name;", "raw_model_output": "Answer:\n\n```sql\nSELECT c.name AS cause_name,\n       SUM(d.donation_amount) AS total_donated\nFROM donations d\nJOIN causes c ON d.cause_id = c.id\nWHERE c.id = 1\nGROUP BY c.name;\n```\n\nReplace `1` in the `WHERE` clause with the desired `cause_id`.", "latency_sec": 4.865142583847046, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 880, "prompt_eval_sec": null, "tokens_completion": 731, "completion_eval_sec": null, "tokens_total": 1611, "tokens_per_sec": 331.1310968251466, "retrieval_latency_sec": 0.11485910415649414, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single numeric value (the sum of donations for 'Cause A'), while the Generated SQL returns a result set with two columns (cause_name and total_donated) for the same cause. Although both queries aggregate the same data, their output structures differ, making them semantically non-equivalent."}
{"example_id": 3273, "sql_complexity": "multiple_joins", "prompt": "List all departments, the number of chemicals they handle, and the number of machines used in their manufacturing processes.", "context": "CREATE TABLE Departments (DepartmentID INT, DepartmentName VARCHAR(20)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Manufacturing'), (2, 'Engineering'), (3, 'Chemical Safety'), (4, 'Product Development'); CREATE TABLE Chemicals (ChemicalID INT, ChemicalName VARCHAR(20), DepartmentID INT); INSERT INTO Chemicals (ChemicalID, ChemicalName, DepartmentID) VALUES (1, 'Hydrochloric Acid', 1), (2, 'Nitric Acid', 2), (3, 'Sodium Hydroxide', 3), (4, 'New Chemical', 4); CREATE TABLE Machinery (MachineID INT, MachineName VARCHAR(20), DepartmentID INT); INSERT INTO Machinery (MachineID, MachineName, DepartmentID) VALUES (1, 'Mixer 1', 1), (2, 'Cutter 2', 2), (3, 'Dispenser 3', 3), (4, 'Innovator 4', 4);", "reference_sql": "SELECT D.DepartmentName, COUNT(C.ChemicalID) AS ChemicalCount, COUNT(M.MachineID) AS MachineCount FROM Departments D LEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID LEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID GROUP BY D.DepartmentName;", "generated_sql": "SELECT\n  d.DepartmentName,\n  COALESCE(c.num_chemicals, 0) AS chemical_count,\n  COALESCE(m.num_machines, 0)   AS machine_count\nFROM Departments d\nLEFT JOIN (\n  SELECT DepartmentID, COUNT(*) AS num_chemicals\n  FROM Chemicals\n  GROUP BY DepartmentID\n) c ON d.DepartmentID = c.DepartmentID\nLEFT JOIN (\n  SELECT DepartmentID, COUNT(*) AS num_machines\n  FROM Machinery\n  GROUP BY DepartmentID\n) m ON d.DepartmentID = m.DepartmentID;", "raw_model_output": "SELECT\n  d.DepartmentName,\n  COALESCE(c.num_chemicals, 0) AS chemical_count,\n  COALESCE(m.num_machines, 0)   AS machine_count\nFROM Departments d\nLEFT JOIN (\n  SELECT DepartmentID, COUNT(*) AS num_chemicals\n  FROM Chemicals\n  GROUP BY DepartmentID\n) c ON d.DepartmentID = c.DepartmentID\nLEFT JOIN (\n  SELECT DepartmentID, COUNT(*) AS num_machines\n  FROM Machinery\n  GROUP BY DepartmentID\n) m ON d.DepartmentID = m.DepartmentID;", "latency_sec": 6.462451934814453, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1206, "prompt_eval_sec": null, "tokens_completion": 713, "completion_eval_sec": null, "tokens_total": 1919, "tokens_per_sec": 296.94611570911394, "retrieval_latency_sec": 0.1154639720916748, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their grouping logic. The Reference SQL groups by DepartmentName, which could merge departments with identical names (though not enforced by the schema). The Generated SQL groups by DepartmentID in subqueries, ensuring accurate aggregation per department. While the sample data has unique DepartmentNames, the schema allows for non-unique names, making the queries non-equivalent in general cases."}
{"example_id": 1895, "sql_complexity": "window functions", "prompt": "What is the average safety score of chemical production sites in the United States, partitioned by state and ranked in descending order?", "context": "CREATE TABLE production_sites (site_id INT, site_name TEXT, country TEXT, state TEXT, safety_score FLOAT); INSERT INTO production_sites (site_id, site_name, country, state, safety_score) VALUES (1, 'Site A', 'USA', 'NY', 92.5), (2, 'Site B', 'USA', 'CA', 87.4), (3, 'Site C', 'USA', 'TX', 95.3), (4, 'Site D', 'USA', 'FL', 89.2);", "reference_sql": "SELECT state, AVG(safety_score) as avg_safety_score, ROW_NUMBER() OVER (ORDER BY AVG(safety_score) DESC) as rank FROM production_sites WHERE country = 'USA' GROUP BY state ORDER BY rank;", "generated_sql": "SELECT \n  state, \n  AVG(safety_score) AS avg_safety_score \nFROM production_sites \nWHERE country = 'USA' \nGROUP BY state \nORDER BY avg_safety_score DESC;", "raw_model_output": "SELECT \n  state, \n  AVG(safety_score) AS avg_safety_score \nFROM production_sites \nWHERE country = 'USA' \nGROUP BY state \nORDER BY avg_safety_score DESC;", "latency_sec": 2.8823437690734863, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 867, "prompt_eval_sec": null, "tokens_completion": 316, "completion_eval_sec": null, "tokens_total": 1183, "tokens_per_sec": 410.42987748136267, "retrieval_latency_sec": 0.11876893043518066, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a 'rank' column generated by ROW_NUMBER() and orders by this rank, while the Generated SQL only calculates the average safety score and orders by it directly. Although both queries group by state and filter for 'USA', the Reference SQL's additional ranking column and different ordering mechanism make their result sets structurally and semantically different."}
{"example_id": 4669, "sql_complexity": "set operations", "prompt": "Identify the number of IoT devices in each country and the total number of devices.", "context": "CREATE TABLE device_country (device_id INT, country TEXT); INSERT INTO device_country (device_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'), (4, 'Brazil'); CREATE TABLE device_info (device_id INT, device_type TEXT); INSERT INTO device_info (device_id, device_type) VALUES (1, 'Soil Sensor'), (2, 'Temperature Sensor'), (3, 'Humidity Sensor'), (4, 'Precision Sprayer');", "reference_sql": "SELECT country, COUNT(*) AS device_count FROM device_country GROUP BY country UNION SELECT 'Total' AS country, COUNT(*) FROM device_country;", "generated_sql": "SELECT COALESCE(dc.country, 'Total') AS country,\n       COUNT(*) AS device_count\nFROM device_country dc\nJOIN device_info di\n  ON dc.device_id = di.device_id\nGROUP BY ROLLUP(dc.country);", "raw_model_output": "SELECT COALESCE(dc.country, 'Total') AS country,\n       COUNT(*) AS device_count\nFROM device_country dc\nJOIN device_info di\n  ON dc.device_id = di.device_id\nGROUP BY ROLLUP(dc.country);", "latency_sec": 11.22355318069458, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 822, "prompt_eval_sec": null, "tokens_completion": 835, "completion_eval_sec": null, "tokens_total": 1657, "tokens_per_sec": 147.63595568381803, "retrieval_latency_sec": 0.11490011215209961, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result. The Reference SQL calculates country-specific device counts and adds a 'Total' row. The Generated SQL joins device_country with device_info (which has a 1:1 relationship with device_country based on sample data) and uses GROUP BY ROLLUP to generate subtotals. The COALESCE replaces NULL (from ROLLUP) with 'Total', matching the UNION approach. Since all device_ids are present in both tables, COUNT(*) remains equivalent."}
{"example_id": 5302, "sql_complexity": "multiple_joins", "prompt": "Find the supplier with the lowest average delivery time for orders in the last month.", "context": "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", "reference_sql": "SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;", "generated_sql": "SELECT s.SupplierID,\n       s.SupplierName\nFROM Suppliers s\nJOIN Products p\n  ON s.SupplierID = p.SupplierID\nJOIN Orders o\n  ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1' MONTH\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AVG(o.DeliveryTime) ASC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "SELECT s.SupplierID,\n       s.SupplierName\nFROM Suppliers s\nJOIN Products p\n  ON s.SupplierID = p.SupplierID\nJOIN Orders o\n  ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1' MONTH\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AVG(o.DeliveryTime) ASC\nFETCH FIRST 1 ROW ONLY;", "latency_sec": 6.1180150508880615, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 842, "prompt_eval_sec": null, "tokens_completion": 871, "completion_eval_sec": null, "tokens_total": 1713, "tokens_per_sec": 279.9927731056087, "retrieval_latency_sec": 0.11581993103027344, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects.  The Reference query returns the average delivery time alongside supplier names, while the Generated query only returns supplier IDs and names.  The Generated query includes a 'FETCH FIRST 1 ROW ONLY' clause, limiting the result to a single row, whereas the Reference query returns all suppliers sorted by average delivery time.  Additionally, the Generated query uses a different date calculation method (CURRENT_DATE - INTERVAL '1' MONTH) compared to the Reference query's DATEADD(month, -1, GETDATE()).  These differences in output columns, result set size, and date calculation mean the queries are not semantically equivalent."}
{"example_id": 267, "sql_complexity": "subqueries", "prompt": "What is the total number of disability support programs offered in urban and rural areas, and the percentage of total programs for each area type?", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(255), area_type VARCHAR(255));", "reference_sql": "SELECT area_type, COUNT(*) as total_programs, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs) , 2) as percentage_of_total FROM programs WHERE area_type IN ('urban', 'rural') GROUP BY area_type;", "generated_sql": "SELECT \n  area_type,\n  COUNT(*) AS total_programs,\n  ROUND(\n    COUNT(*) * 100.0 \n    / SUM(COUNT(*)) OVER (), \n    2\n  ) AS percentage_of_total\nFROM programs\nWHERE area_type IN ('Urban','Rural')\nGROUP BY area_type;", "raw_model_output": "SELECT \n  area_type,\n  COUNT(*) AS total_programs,\n  ROUND(\n    COUNT(*) * 100.0 \n    / SUM(COUNT(*)) OVER (), \n    2\n  ) AS percentage_of_total\nFROM programs\nWHERE area_type IN ('Urban','Rural')\nGROUP BY area_type;", "latency_sec": 7.1914660930633545, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 993, "prompt_eval_sec": null, "tokens_completion": 788, "completion_eval_sec": null, "tokens_total": 1781, "tokens_per_sec": 247.65464746025745, "retrieval_latency_sec": 0.11945295333862305, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the WHERE clause: the Reference SQL uses 'urban' and 'rural' (lowercase), while the Generated SQL uses 'Urban' and 'Rural' (capitalized). This would affect the results if the database is case-sensitive. Additionally, the percentage calculation methods differ (subquery vs. window function), but these are logically equivalent. However, the case sensitivity in the WHERE clause introduces a semantic difference."}
{"example_id": 3028, "sql_complexity": "basic SQL", "prompt": "What is the number of startups founded by non-binary individuals in the technology industry?", "context": "CREATE TABLE company (id INT, name TEXT, founder_gender TEXT, industry TEXT); INSERT INTO company (id, name, founder_gender, industry) VALUES (1, 'CodeForAll', 'Non-binary', 'Technology'); INSERT INTO company (id, name, founder_gender, industry) VALUES (2, 'TechVillage', 'Male', 'Technology');", "reference_sql": "SELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "generated_sql": "SELECT COUNT(*) \nFROM company \nWHERE founder_gender = 'Non-binary' \n  AND industry = 'Technology';", "raw_model_output": "SELECT COUNT(*) \nFROM company \nWHERE founder_gender = 'Non-binary' \n  AND industry = 'Technology';", "latency_sec": 2.030421018600464, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 742, "prompt_eval_sec": null, "tokens_completion": 171, "completion_eval_sec": null, "tokens_total": 913, "tokens_per_sec": 449.6604357599273, "retrieval_latency_sec": 0.11665582656860352, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in logic and structure, with the only difference being whitespace formatting in the WHERE clause. Both count companies where founder_gender is 'Non-binary' and industry is 'Technology', which matches the single inserted record (CodeForAll)."}
{"example_id": 3282, "sql_complexity": "aggregation", "prompt": "Which marine species have been observed in both the Arctic and Antarctic oceans?", "context": "CREATE TABLE marine_species (id INT, species_name VARCHAR(50), common_name VARCHAR(50), region VARCHAR(20));INSERT INTO marine_species (id, species_name, common_name, region) VALUES (1, 'Orcinus_orca', 'Killer Whale', 'Arctic');INSERT INTO marine_species (id, species_name, common_name, region) VALUES (2, 'Balaenoptera_bonaerensis', 'Antarctic Minke Whale', 'Antarctic');", "reference_sql": "SELECT species_name FROM marine_species WHERE region IN ('Arctic', 'Antarctic') GROUP BY species_name HAVING COUNT(DISTINCT region) = 2;", "generated_sql": "SELECT species_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name\nHAVING COUNT(DISTINCT region) = 2;", "raw_model_output": "SELECT species_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name\nHAVING COUNT(DISTINCT region) = 2;", "latency_sec": 2.186738967895508, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 930, "prompt_eval_sec": null, "tokens_completion": 248, "completion_eval_sec": null, "tokens_total": 1178, "tokens_per_sec": 538.7017002462318, "retrieval_latency_sec": 0.11516880989074707, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The Reference SQL and Generated SQL are identical in structure and logic. Both queries select species_name from marine_species where region is 'Arctic' or 'Antarctic', group by species_name, and filter with HAVING COUNT(DISTINCT region) = 2. Since the queries are exactly the same, they will produce identical results."}
{"example_id": 3474, "sql_complexity": "subqueries", "prompt": "What is the total transaction volume for the top 3 digital assets by market capitalization in the 'developed_markets' schema?", "context": "CREATE SCHEMA developed_markets; CREATE TABLE developed_markets.digital_assets (asset_name VARCHAR(10), market_cap BIGINT, daily_transaction_volume BIGINT); INSERT INTO developed_markets.digital_assets (asset_name, market_cap, daily_transaction_volume) VALUES ('AssetG', 30000000, 15000000), ('AssetH', 25000000, 12000000), ('AssetI', 20000000, 10000000), ('AssetJ', 15000000, 8000000), ('AssetK', 10000000, 6000000);", "reference_sql": "SELECT SUM(daily_transaction_volume) FROM (SELECT daily_transaction_volume FROM developed_markets.digital_assets ORDER BY market_cap DESC FETCH NEXT 3 ROWS ONLY) t;", "generated_sql": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n  SELECT daily_transaction_volume\n  FROM developed_markets.digital_assets\n  ORDER BY market_cap DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top3;", "raw_model_output": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n  SELECT daily_transaction_volume\n  FROM developed_markets.digital_assets\n  ORDER BY market_cap DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top3;", "latency_sec": 2.5030510425567627, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 936, "prompt_eval_sec": null, "tokens_completion": 260, "completion_eval_sec": null, "tokens_total": 1196, "tokens_per_sec": 477.8168641652372, "retrieval_latency_sec": 0.11523795127868652, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of daily_transaction_volume for the top 3 assets by market_cap. The differences (FETCH NEXT 3 ROWS ONLY vs FETCH FIRST 3 ROWS ONLY, and alias names) are syntactic variations with no semantic impact. The ordering, row limitation, and aggregation logic are identical."}
{"example_id": 1626, "sql_complexity": "aggregation", "prompt": "Find the total value of social impact bonds issued by each organization.", "context": "CREATE TABLE social_impact_bonds (id INT, organization_name VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO social_impact_bonds (id, organization_name, issue_year, value) VALUES (1, 'Acme Corp', 2018, 2000000), (2, 'XYZ Foundation', 2019, 3000000), (3, 'Global Giving', 2018, 1500000), (4, 'Acme Corp', 2019, 2500000), (5, 'XYZ Foundation', 2018, 1000000);", "reference_sql": "SELECT organization_name, SUM(value) as total_value FROM social_impact_bonds GROUP BY organization_name;", "generated_sql": "SELECT organization_name,\n       SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "raw_model_output": "SELECT organization_name,\n       SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "latency_sec": 2.3896050453186035, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 986, "prompt_eval_sec": null, "tokens_completion": 171, "completion_eval_sec": null, "tokens_total": 1157, "tokens_per_sec": 484.1804306810619, "retrieval_latency_sec": 0.1167149543762207, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and capitalization of keywords), which do not affect semantic meaning. Both select organization_name and sum value grouped by organization_name."}
{"example_id": 1315, "sql_complexity": "single join", "prompt": "List all the transactions made by clients living in New York with a transaction amount greater than $1000.", "context": "CREATE TABLE transactions (id INT, client_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (id, client_id, transaction_amount, transaction_date) VALUES (1, 3, 1500.00, '2022-01-01'), (2, 4, 800.00, '2022-01-02'), (3, 3, 1200.00, '2022-01-03'); CREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');", "reference_sql": "SELECT transactions.id, transactions.client_id, transactions.transaction_amount, transactions.transaction_date FROM transactions INNER JOIN clients ON transactions.client_id = clients.id WHERE clients.state = 'New York' AND transactions.transaction_amount > 1000.00;", "generated_sql": "SELECT t.id,\n       t.client_id,\n       t.transaction_amount,\n       t.transaction_date\nFROM transactions AS t\nJOIN clients AS c\n  ON t.client_id = c.id\nWHERE c.state = 'New York'\n  AND t.transaction_amount > 1000.00;", "raw_model_output": "SELECT t.id,\n       t.client_id,\n       t.transaction_amount,\n       t.transaction_date\nFROM transactions AS t\nJOIN clients AS c\n  ON t.client_id = c.id\nWHERE c.state = 'New York'\n  AND t.transaction_amount > 1000.00;", "latency_sec": 2.4117422103881836, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 847, "prompt_eval_sec": null, "tokens_completion": 269, "completion_eval_sec": null, "tokens_total": 1116, "tokens_per_sec": 462.73602344106814, "retrieval_latency_sec": 0.11880683898925781, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an INNER JOIN between transactions and clients tables on client_id, apply the same filters (clients.state = 'New York' and transaction_amount > 1000.00), and select identical columns. The generated query uses table aliases (t/c) but this doesn't affect semantic equivalence."}
{"example_id": 520, "sql_complexity": "multiple_joins", "prompt": "What is the total number of electric vehicles sold in 'California' in the 'sales' schema?", "context": "CREATE TABLE sales_regions (id INT, name VARCHAR(50));   CREATE TABLE sales (id INT, region_id INT, vehicle_count INT);   CREATE TABLE vehicles (id INT, type VARCHAR(50));   INSERT INTO sales_regions VALUES (1, 'California');   INSERT INTO sales VALUES (1, 1, 5000);   INSERT INTO vehicles VALUES (1, 'electric');", "reference_sql": "SELECT SUM(sales.vehicle_count) FROM sales INNER JOIN sales_regions ON sales.region_id = sales_regions.id INNER JOIN vehicles ON sales.id = vehicles.id WHERE vehicles.type = 'electric' AND sales_regions.name = 'California';", "generated_sql": "SELECT SUM(s.vehicle_count)\nFROM sales AS s\nJOIN sales_regions AS r ON s.region_id = r.id\nJOIN vehicles AS v ON s.id = v.id\nWHERE r.name = 'California'\n  AND v.type = 'electric';", "raw_model_output": "SELECT SUM(s.vehicle_count)\nFROM sales AS s\nJOIN sales_regions AS r ON s.region_id = r.id\nJOIN vehicles AS v ON s.id = v.id\nWHERE r.name = 'California'\n  AND v.type = 'electric';", "latency_sec": 4.572014093399048, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 712, "prompt_eval_sec": null, "tokens_completion": 453, "completion_eval_sec": null, "tokens_total": 1165, "tokens_per_sec": 254.81111304577908, "retrieval_latency_sec": 0.11874699592590332, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operations: joining the sales, sales_regions, and vehicles tables on identical conditions, filtering with the same WHERE clause (vehicles.type = 'electric' and sales_regions.name = 'California'), and summing sales.vehicle_count. The only differences are table aliases (sales vs s, etc.) and explicit INNER JOIN vs JOIN syntax, which are syntactic variations with no semantic impact."}
{"example_id": 3999, "sql_complexity": "single join", "prompt": "What is the total number of tickets sold for performances with a rating of 5?", "context": "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", "reference_sql": "SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;", "generated_sql": "SELECT SUM(tickets_sold) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "raw_model_output": "SELECT SUM(tickets_sold) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "latency_sec": 3.2932519912719727, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 692, "prompt_eval_sec": null, "tokens_completion": 490, "completion_eval_sec": null, "tokens_total": 1182, "tokens_per_sec": 358.9157474534674, "retrieval_latency_sec": 0.11504411697387695, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL joins the 'performance' table with the 'ticket' table to sum ticket quantities, while the Generated SQL attempts to sum a non-existent 'tickets_sold' column directly in the 'performance' table without any join. The Generated SQL would result in an error since 'tickets_sold' is not a column in the 'performance' table."}
{"example_id": 2261, "sql_complexity": "multiple_joins", "prompt": "What is the total number of animals that have been released into 'protected' habitats, and the average weight of those animals?", "context": "CREATE TABLE habitats (habitat_id INT, habitat_name VARCHAR(50), habitat_status VARCHAR(50)); INSERT INTO habitats (habitat_id, habitat_name, habitat_status) VALUES (1, 'Habitat A', 'protected'), (2, 'Habitat B', 'unprotected'); CREATE TABLE animal_habitats (animal_id INT, habitat_id INT, animal_weight FLOAT); INSERT INTO animal_habitats (animal_id, habitat_id, animal_weight) VALUES (101, 1, 25.5), (102, 2, 15.2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');", "reference_sql": "SELECT COUNT(*), AVG(animal_habitats.animal_weight) FROM animal_habitats INNER JOIN animals ON animal_habitats.animal_id = animals.animal_id INNER JOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id WHERE habitats.habitat_status = 'protected';", "generated_sql": "SELECT \n  COUNT(*) AS total_animals, \n  AVG(ah.animal_weight) AS average_weight\nFROM animal_habitats ah\nJOIN habitats h \n  ON ah.habitat_id = h.habitat_id\nWHERE h.habitat_status = 'protected';", "raw_model_output": "SELECT \n  COUNT(*) AS total_animals, \n  AVG(ah.animal_weight) AS average_weight\nFROM animal_habitats ah\nJOIN habitats h \n  ON ah.habitat_id = h.habitat_id\nWHERE h.habitat_status = 'protected';", "latency_sec": 5.199246644973755, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 955, "prompt_eval_sec": null, "tokens_completion": 589, "completion_eval_sec": null, "tokens_total": 1544, "tokens_per_sec": 296.96610017388275, "retrieval_latency_sec": 0.11577820777893066, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the count and average animal weight for protected habitats. The generated query omits the unnecessary join with the 'animals' table (since it doesn't reference any columns from it) and uses aliases, but the core logic (filtering by habitat_status = 'protected' and aggregating animal_habitats.animal_weight) remains identical. The result set structure and values would be the same given the provided data."}
{"example_id": 3439, "sql_complexity": "multiple_joins", "prompt": "How many menu items contain ingredients sourced from local suppliers for each restaurant?", "context": "CREATE TABLE restaurants (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO restaurants VALUES (1, 'Restaurant A', 'City A'); INSERT INTO restaurants VALUES (2, 'Restaurant B', 'City B'); CREATE TABLE menu_items (id INT, name VARCHAR(50), restaurant_id INT, price DECIMAL(5,2)); INSERT INTO menu_items VALUES (1, 'Item A', 1, 10.99); INSERT INTO menu_items VALUES (2, 'Item B', 1, 12.99); INSERT INTO menu_items VALUES (3, 'Item C', 2, 11.99); CREATE TABLE ingredients (id INT, name VARCHAR(50), local_source BOOLEAN, menu_item_id INT); INSERT INTO ingredients VALUES (1, 'Ingredient A', TRUE, 1); INSERT INTO ingredients VALUES (2, 'Ingredient B', FALSE, 1); INSERT INTO ingredients VALUES (3, 'Ingredient C', TRUE, 2); INSERT INTO ingredients VALUES (4, 'Ingredient D', FALSE, 2); INSERT INTO ingredients VALUES (5, 'Ingredient E', TRUE, 3);", "reference_sql": "SELECT r.name, COUNT(DISTINCT mi.id) as num_local_items FROM restaurants r JOIN menu_items mi ON r.id = mi.restaurant_id JOIN ingredients i ON mi.id = i.menu_item_id WHERE i.local_source = TRUE GROUP BY r.name;", "generated_sql": "SELECT\n  r.name AS restaurant_name,\n  COUNT(DISTINCT mi.id) AS local_sourced_menu_items_count\nFROM restaurants r\nJOIN menu_items mi\n  ON mi.restaurant_id = r.id\nJOIN ingredients i\n  ON i.menu_item_id = mi.id\n    AND i.local_source = TRUE\nGROUP BY\n  r.name;", "raw_model_output": "SELECT\n  r.name AS restaurant_name,\n  COUNT(DISTINCT mi.id) AS local_sourced_menu_items_count\nFROM restaurants r\nJOIN menu_items mi\n  ON mi.restaurant_id = r.id\nJOIN ingredients i\n  ON i.menu_item_id = mi.id\n    AND i.local_source = TRUE\nGROUP BY\n  r.name;", "latency_sec": 3.2986538410186768, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 874, "prompt_eval_sec": null, "tokens_completion": 347, "completion_eval_sec": null, "tokens_total": 1221, "tokens_per_sec": 370.15099457145095, "retrieval_latency_sec": 0.10754013061523438, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the count of distinct local-sourced menu items per restaurant. The Reference SQL uses a WHERE clause to filter ingredients with local_source = TRUE, while the Generated SQL includes this condition in the JOIN ON clause. This difference in placement does not affect the result because both approaches filter the same rows. The SELECT columns and GROUP BY clause are identical in effect, with only alias names differing. The logical outcome (restaurant names and corresponding counts) remains the same."}
{"example_id": 2265, "sql_complexity": "aggregation", "prompt": "Hourly revenue for a specific movie?", "context": "CREATE TABLE Movie_Revenue (id INT, movie_title VARCHAR(100), revenue_time TIME, revenue DECIMAL(10,2));", "reference_sql": "SELECT revenue_time, SUM(revenue) FROM Movie_Revenue WHERE movie_title = 'Spider-Man: No Way Home' GROUP BY revenue_time;", "generated_sql": "SELECT \n  EXTRACT(HOUR FROM revenue_time) AS hour_of_day,\n  SUM(revenue) AS total_revenue\nFROM Movie_Revenue\nWHERE movie_title = 'Specific Movie'\nGROUP BY EXTRACT(HOUR FROM revenue_time)\nORDER BY hour_of_day;", "raw_model_output": "SELECT \n  EXTRACT(HOUR FROM revenue_time) AS hour_of_day,\n  SUM(revenue) AS total_revenue\nFROM Movie_Revenue\nWHERE movie_title = 'Specific Movie'\nGROUP BY EXTRACT(HOUR FROM revenue_time)\nORDER BY hour_of_day;", "latency_sec": 2.914789915084839, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 608, "prompt_eval_sec": null, "tokens_completion": 266, "completion_eval_sec": null, "tokens_total": 874, "tokens_per_sec": 299.8500836979056, "retrieval_latency_sec": 0.11184120178222656, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query groups by the full 'revenue_time' and filters for 'Spider-Man: No Way Home', while the generated query groups by the extracted hour from 'revenue_time' and filters for 'Specific Movie'. The different grouping criteria (full time vs. hour) and different WHERE conditions (movie titles) ensure distinct results."}
{"example_id": 1763, "sql_complexity": "multiple_joins", "prompt": "What is the total food and beverage revenue last month for hotels in 'Bangkok'?", "context": "CREATE TABLE revenue (hotel_id INT, revenue_source VARCHAR(50), revenue INT, revenue_date DATE); INSERT INTO revenue (hotel_id, revenue_source, revenue, revenue_date) VALUES (5, 'Room revenue', 12000, '2022-03-01'), (5, 'Food and beverage', 4000, '2022-03-02'), (5, 'Other revenue', 1000, '2022-03-03'); CREATE TABLE hotels (hotel_id INT, city VARCHAR(50)); INSERT INTO hotels (hotel_id, city) VALUES (5, 'Bangkok'); CREATE TABLE dates (date DATE); INSERT INTO dates (date) VALUES ('2022-03-01'), ('2022-03-02'), ('2022-03-03');", "reference_sql": "SELECT SUM(revenue) FROM revenue JOIN hotels ON revenue.hotel_id = hotels.hotel_id JOIN dates ON revenue.revenue_date = dates.date WHERE hotels.city = 'Bangkok' AND revenue_source = 'Food and beverage' AND dates.date >= DATEADD(month, -1, GETDATE());", "generated_sql": "SELECT \n  SUM(r.revenue) AS total_food_and_beverage_revenue_last_month\nFROM revenue r\nJOIN hotels h\n  ON r.hotel_id = h.hotel_id\nWHERE h.city = 'Bangkok'\n  AND r.revenue_source = 'Food and beverage'\n  AND r.revenue_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' MONTH\n  AND r.revenue_date <  DATE_TRUNC('month', CURRENT_DATE);", "raw_model_output": "SELECT \n  SUM(r.revenue) AS total_food_and_beverage_revenue_last_month\nFROM revenue r\nJOIN hotels h\n  ON r.hotel_id = h.hotel_id\nWHERE h.city = 'Bangkok'\n  AND r.revenue_source = 'Food and beverage'\n  AND r.revenue_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' MONTH\n  AND r.revenue_date <  DATE_TRUNC('month', CURRENT_DATE);", "latency_sec": 6.045120000839233, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 985, "prompt_eval_sec": null, "tokens_completion": 1013, "completion_eval_sec": null, "tokens_total": 1998, "tokens_per_sec": 330.5145306830338, "retrieval_latency_sec": 0.11548089981079102, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their date range logic. The Reference SQL uses DATEADD(month, -1, GETDATE()) which calculates a date one month before the current date (e.g., February 3rd if current date is March 3rd), while the Generated SQL uses DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1' MONTH which targets the entire previous month (e.g., February 1st to February 28th). This results in different date ranges being considered, making the queries non-equivalent."}
{"example_id": 5499, "sql_complexity": "set operations", "prompt": "How many legal aid clinics and community mediation centers are there in total, and what is the sum of cases handled by each type of center, for centers located in the state of California?", "context": "CREATE TABLE LegalAidClinics (ClinicName text, State text, NumCases int); INSERT INTO LegalAidClinics VALUES ('Clinic1', 'CA', 30, '2022-01-01'), ('Clinic2', 'CA', 25, '2022-01-01'); CREATE TABLE CommunityMediationCenters (CenterName text, State text, NumCases int); INSERT INTO CommunityMediationCenters VALUES ('CM1', 'CA', 22, '2022-01-01'), ('CM2', 'CA', 28, '2022-01-01');", "reference_sql": "SELECT State, 'Legal Aid Clinics' AS CenterType, COUNT(*) AS NumCenters, SUM(NumCases) AS TotalCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT State, 'Community Mediation Centers', COUNT(*), SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA';", "generated_sql": "SELECT 'Legal Aid Clinics' AS CenterType,\n       COUNT(*)          AS NumCenters,\n       SUM(NumCases)     AS TotalCases\nFROM   LegalAidClinics\nWHERE  State = 'CA'\nUNION ALL\nSELECT 'Community Mediation Centers' AS CenterType,\n       COUNT(*)                     AS NumCenters,\n       SUM(NumCases)                AS TotalCases\nFROM   CommunityMediationCenters\nWHERE  State = 'CA';", "raw_model_output": "SELECT 'Legal Aid Clinics' AS CenterType,\n       COUNT(*)          AS NumCenters,\n       SUM(NumCases)     AS TotalCases\nFROM   LegalAidClinics\nWHERE  State = 'CA'\nUNION ALL\nSELECT 'Community Mediation Centers' AS CenterType,\n       COUNT(*)                     AS NumCenters,\n       SUM(NumCases)                AS TotalCases\nFROM   CommunityMediationCenters\nWHERE  State = 'CA';", "latency_sec": 7.014916896820068, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1054, "prompt_eval_sec": null, "tokens_completion": 942, "completion_eval_sec": null, "tokens_total": 1996, "tokens_per_sec": 284.5365140255342, "retrieval_latency_sec": 0.1165168285369873, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes the 'State' column in its output, while the Generated SQL omits it. This difference in column selection makes their result sets structurally different, even though both queries aggregate data from the same tables and filters."}
{"example_id": 2408, "sql_complexity": "aggregation", "prompt": "What is the average number of victories for players from Japan and South Korea, partitioned by game mode?", "context": "CREATE TABLE PlayerVictories (PlayerID INT, GameMode VARCHAR(255), Victories INT, Country VARCHAR(255)); INSERT INTO PlayerVictories (PlayerID, GameMode, Victories, Country) VALUES (1, 'Battle Royale', 25, 'Japan'), (2, 'Team Deathmatch', 18, 'South Korea');", "reference_sql": "SELECT GameMode, AVG(Victories) as AvgVictories FROM PlayerVictories WHERE Country IN ('Japan', 'South Korea') GROUP BY GameMode, Country WITH ROLLUP;", "generated_sql": "SELECT \n  GameMode, \n  AVG(Victories) AS AverageVictories \nFROM PlayerVictories \nWHERE Country IN ('Japan', 'South Korea') \nGROUP BY GameMode;", "raw_model_output": "SELECT \n  GameMode, \n  AVG(Victories) AS AverageVictories \nFROM PlayerVictories \nWHERE Country IN ('Japan', 'South Korea') \nGROUP BY GameMode;", "latency_sec": 7.2937400341033936, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 832, "prompt_eval_sec": null, "tokens_completion": 634, "completion_eval_sec": null, "tokens_total": 1466, "tokens_per_sec": 200.99427634456578, "retrieval_latency_sec": 0.10816311836242676, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL groups by both GameMode and Country with ROLLUP, producing subtotals for each GameMode-Country combination and overall totals. The Generated SQL only groups by GameMode, aggregating all countries together. This difference in grouping columns leads to different results, as the Reference includes country-specific averages while the Generated combines them."}
{"example_id": 2729, "sql_complexity": "subqueries", "prompt": "Find the total number of trips made by shared autonomous vehicles in Seattle", "context": "CREATE TABLE shared_vehicles (id INT, vehicle_type VARCHAR(20), is_autonomous BOOLEAN, trip_count INT); INSERT INTO shared_vehicles (id, vehicle_type, is_autonomous, trip_count) VALUES (1, 'ebike', false, 1200), (2, 'escooter', false, 800), (3, 'car', true, 1500); CREATE TABLE city_data (city VARCHAR(20), has_autonomous_vehicles BOOLEAN); INSERT INTO city_data (city, has_autonomous_vehicles) VALUES ('Seattle', true), ('Denver', false), ('Portland', true);", "reference_sql": "SELECT SUM(trip_count) FROM shared_vehicles WHERE is_autonomous = true AND vehicle_type != 'ebike' AND vehicle_type != 'escooter' AND city IN (SELECT city FROM city_data WHERE has_autonomous_vehicles = true AND city = 'Seattle');", "generated_sql": "SELECT SUM(s.trip_count) AS total_trips\nFROM shared_vehicles s\nJOIN city_data c\n  ON c.city = 'Seattle'\n  AND c.has_autonomous_vehicles = TRUE\nWHERE s.is_autonomous = TRUE;", "raw_model_output": "SELECT SUM(s.trip_count) AS total_trips\nFROM shared_vehicles s\nJOIN city_data c\n  ON c.city = 'Seattle'\n  AND c.has_autonomous_vehicles = TRUE\nWHERE s.is_autonomous = TRUE;", "latency_sec": 5.994801044464111, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 731, "prompt_eval_sec": null, "tokens_completion": 964, "completion_eval_sec": null, "tokens_total": 1695, "tokens_per_sec": 282.7449964440846, "retrieval_latency_sec": 0.11551594734191895, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'city' column in shared_vehicles, which does not exist in the schema. The Generated SQL correctly joins with city_data to filter for Seattle. The Reference SQL would fail due to invalid column reference, while the Generated SQL is valid but has different logic (no vehicle_type filters and a join condition)."}
{"example_id": 2952, "sql_complexity": "aggregation", "prompt": "Show the total budget allocated for each program category in 2023.", "context": "CREATE TABLE Budget (id INT, category TEXT, year INT, allocated_amount INT); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (1, 'Education', 2023, 30000); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (2, 'Healthcare', 2023, 50000);", "reference_sql": "SELECT category, SUM(allocated_amount) FROM Budget WHERE year = 2023 GROUP BY category;", "generated_sql": "SELECT category, SUM(allocated_amount) AS total_budget\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "raw_model_output": "SELECT category, SUM(allocated_amount) AS total_budget\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "latency_sec": 3.915090799331665, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 742, "prompt_eval_sec": null, "tokens_completion": 173, "completion_eval_sec": null, "tokens_total": 915, "tokens_per_sec": 233.71105471070996, "retrieval_latency_sec": 0.11227917671203613, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (category and summed allocated_amount) from the Budget table where year is 2023, grouped by category. The only difference is the alias 'total_budget' in the generated query, which doesn't affect the semantic meaning of the result."}
{"example_id": 4328, "sql_complexity": "aggregation", "prompt": "What is the average cargo handling time in hours for each port?", "context": "CREATE TABLE cargo_handling (id INT, port_id INT, time_in_hours DECIMAL(5,2)); INSERT INTO cargo_handling (id, port_id, time_in_hours) VALUES (1, 1, 20.5), (2, 1, 22.3), (3, 2, 18.7);", "reference_sql": "SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id;", "generated_sql": "SELECT \n  port_id, \n  AVG(time_in_hours) AS avg_time_in_hours \nFROM cargo_handling \nGROUP BY port_id;", "raw_model_output": "SELECT \n  port_id, \n  AVG(time_in_hours) AS avg_time_in_hours \nFROM cargo_handling \nGROUP BY port_id;", "latency_sec": 2.0483241081237793, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 741, "prompt_eval_sec": null, "tokens_completion": 176, "completion_eval_sec": null, "tokens_total": 917, "tokens_per_sec": 447.68305775590966, "retrieval_latency_sec": 0.11544609069824219, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average time_in_hours per port_id. The generated query adds an alias (avg_time_in_hours) to the computed average, but this does not affect the semantic result. The GROUP BY clause and aggregation logic are identical."}
{"example_id": 4915, "sql_complexity": "window functions", "prompt": "Calculate the percentage of total Europium production for each country.", "context": "CREATE TABLE europium_production (country VARCHAR(50), quantity INT);", "reference_sql": "SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;", "generated_sql": "SELECT \n  country, \n  (quantity * 100.0 / SUM(quantity) OVER ()) AS percentage_of_total \nFROM \n  europium_production;", "raw_model_output": "SELECT \n  country, \n  (quantity * 100.0 / SUM(quantity) OVER ()) AS percentage_of_total \nFROM \n  europium_production;", "latency_sec": 2.5861921310424805, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 713, "prompt_eval_sec": null, "tokens_completion": 308, "completion_eval_sec": null, "tokens_total": 1021, "tokens_per_sec": 394.7889206469901, "retrieval_latency_sec": 0.11673879623413086, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of each country's production relative to the total production. The SUM(quantity) OVER () in the generated query is equivalent to SUM(quantity) OVER (PARTITION BY NULL) in the reference query, as both represent the total sum of the entire dataset. The column alias difference ('percentage' vs 'percentage_of_total') does not affect semantic equivalence."}
{"example_id": 5030, "sql_complexity": "subqueries", "prompt": "What is the success rate of diverse-led startups (at least 1 female or underrepresented racial or ethnic group executive) in the past 3 years?", "context": "CREATE TABLE DiverseStartups(id INT, name TEXT, country TEXT, year INT, success BOOLEAN);   INSERT INTO DiverseStartups VALUES (1, 'FemTech', 'USA', 2020, true), (2, 'GreenCity', 'Canada', 2019, false), (3, 'AI-Health', 'UK', 2021, true), (4, 'SolarEnergy', 'USA', 2020, false), (5, 'DataAnalytics', 'Germany', 2019, true), (6, 'SmartGrid', 'USA', 2021, true), (7, 'CloudServices', 'India', 2020, false), (8, 'RenewableEnergy', 'USA', 2019, true);", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3) AS success_rate FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3 AND success = true;", "generated_sql": "SELECT \n  SUM(CASE WHEN success THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS success_rate\nFROM DiverseStartups\nWHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3;", "raw_model_output": "SELECT \n  SUM(CASE WHEN success THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS success_rate\nFROM DiverseStartups\nWHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3;", "latency_sec": 4.938578367233276, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1317, "prompt_eval_sec": null, "tokens_completion": 707, "completion_eval_sec": null, "tokens_total": 2024, "tokens_per_sec": 409.83454133864416, "retrieval_latency_sec": 0.11915206909179688, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the success rate of startups in the last 3 years. The Reference SQL uses a subquery to count total startups and another count for successes, while the Generated SQL uses SUM(CASE) for successes and COUNT(*) for total. The WHERE clauses are equivalent (year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3 vs year >= YEAR(CURRENT_DATE) - 3). Both compute (success_count / total_count) * 100.0, producing identical results."}
{"example_id": 4626, "sql_complexity": "aggregation", "prompt": "What was the maximum number of training hours for farmers in each country in 2020?", "context": "CREATE TABLE training (id INT, country_id INT, farmer_id INT, hours INT, date DATE);", "reference_sql": "SELECT country_id, MAX(hours) FROM training WHERE YEAR(date) = 2020 GROUP BY country_id;", "generated_sql": "SELECT\n  country_id,\n  MAX(hours) AS max_hours\nFROM\n  training\nWHERE\n  date >= DATE '2020-01-01'\n  AND date < DATE '2021-01-01'\nGROUP BY\n  country_id;", "raw_model_output": "SELECT\n  country_id,\n  MAX(hours) AS max_hours\nFROM\n  training\nWHERE\n  date >= DATE '2020-01-01'\n  AND date < DATE '2021-01-01'\nGROUP BY\n  country_id;", "latency_sec": 4.017569065093994, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 619, "prompt_eval_sec": null, "tokens_completion": 392, "completion_eval_sec": null, "tokens_total": 1011, "tokens_per_sec": 251.64470942986685, "retrieval_latency_sec": 0.10061073303222656, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter training records for the year 2020. The reference query uses YEAR(date) = 2020, while the generated query uses date between '2020-01-01' and '2021-01-01' (exclusive). These conditions are equivalent for date values, as they both capture all dates in 2020. The SELECT clause and GROUP BY logic are identical, with only a column alias difference (max_hours vs. MAX(hours)) which doesn't affect semantic equivalence."}
{"example_id": 2703, "sql_complexity": "set operations", "prompt": "Identify the species unique to 'MarineResearchAreaA' and 'MarineResearchAreaB'", "context": "CREATE TABLE ResearchAreaSpecies (area VARCHAR(255), species VARCHAR(255)); INSERT INTO ResearchAreaSpecies (area, species) VALUES ('MarineResearchAreaA', 'Coral'), ('MarineResearchAreaA', 'Starfish'), ('MarineResearchAreaB', 'Jellyfish');", "reference_sql": "(SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB') UNION (SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA');", "generated_sql": "SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaA'\n EXCEPT\n SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaB')\nUNION\n(SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaB'\n EXCEPT\n SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaA');", "raw_model_output": "(SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaA'\n EXCEPT\n SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaB')\nUNION\n(SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaB'\n EXCEPT\n SELECT species\n FROM ResearchAreaSpecies\n WHERE area = 'MarineResearchAreaA');", "latency_sec": 3.1646878719329834, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 648, "prompt_eval_sec": null, "tokens_completion": 226, "completion_eval_sec": null, "tokens_total": 874, "tokens_per_sec": 276.1725754224738, "retrieval_latency_sec": 0.11339902877807617, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries compute the symmetric difference between the species in 'MarineResearchAreaA' and 'MarineResearchAreaB'. The Reference SQL uses explicit parentheses for each EXCEPT clause before combining with UNION, while the Generated SQL has slightly different parentheses placement but maintains the same logical structure (A EXCEPT B) UNION (B EXCEPT A). The result is the same set of species present in one area but not the other."}
{"example_id": 200, "sql_complexity": "window functions", "prompt": "List the top three categories of workforce development programs with the highest budget increases.", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(50), budget DECIMAL(10, 2), category VARCHAR(50), budget_date DATE);", "reference_sql": "SELECT category, SUM(budget - LAG(budget) OVER (PARTITION BY category ORDER BY budget_date)) as total_budget_increase FROM programs GROUP BY category ORDER BY total_budget_increase DESC LIMIT 3;", "generated_sql": "SELECT\n    category,\n    MIN(budget_date) AS first_date,\n    MAX(budget_date) AS last_date\n  FROM programs\n  GROUP BY category\n),\nfirst_sums AS (\n  SELECT\n    p.category,\n    SUM(p.budget) AS first_budget\n  FROM programs p\n  JOIN date_bounds d\n    ON p.category = d.category\n   AND p.budget_date = d.first_date\n  GROUP BY p.category\n),\nlast_sums AS (\n  SELECT\n    p.category,\n    SUM(p.budget) AS last_budget\n  FROM programs p\n  JOIN date_bounds d\n    ON p.category = d.category\n   AND p.budget_date = d.last_date\n  GROUP BY p.category\n)\nSELECT\n  f.category,\n  (l.last_budget - f.first_budget) AS budget_increase\nFROM first_sums f\nJOIN last_sums l\n  ON f.category = l.category\nORDER BY budget_increase DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "WITH date_bounds AS (\n  SELECT\n    category,\n    MIN(budget_date) AS first_date,\n    MAX(budget_date) AS last_date\n  FROM programs\n  GROUP BY category\n),\nfirst_sums AS (\n  SELECT\n    p.category,\n    SUM(p.budget) AS first_budget\n  FROM programs p\n  JOIN date_bounds d\n    ON p.category = d.category\n   AND p.budget_date = d.first_date\n  GROUP BY p.category\n),\nlast_sums AS (\n  SELECT\n    p.category,\n    SUM(p.budget) AS last_budget\n  FROM programs p\n  JOIN date_bounds d\n    ON p.category = d.category\n   AND p.budget_date = d.last_date\n  GROUP BY p.category\n)\nSELECT\n  f.category,\n  (l.last_budget - f.first_budget) AS budget_increase\nFROM first_sums f\nJOIN last_sums l\n  ON f.category = l.category\nORDER BY budget_increase DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 6.81335711479187, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 499, "prompt_eval_sec": null, "tokens_completion": 1066, "completion_eval_sec": null, "tokens_total": 1565, "tokens_per_sec": 229.695871452616, "retrieval_latency_sec": 0.10810422897338867, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query calculates the total budget increase by summing consecutive budget differences (using LAG) within each category, which equals the last budget minus the first budget. However, if a category has only one budget entry, the LAG function returns NULL, making the SUM result NULL. The generated query, however, computes the difference between the first and last budget sums, which would be 0 for single-entry categories. This discrepancy in handling single-entry categories makes the queries produce different results in such cases."}
{"example_id": 5131, "sql_complexity": "basic SQL", "prompt": "How many wells were drilled in the Eagle Ford Shale and Bakken Formation?", "context": "CREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), num_drilled INT); INSERT INTO wells (id, region, well_type, num_drilled) VALUES (1, 'Eagle Ford Shale', 'Oil', 2000), (2, 'Eagle Ford Shale', 'Gas', 1500), (3, 'Bakken Formation', 'Oil', 1000), (4, 'Bakken Formation', 'Gas', 1200);", "reference_sql": "SELECT SUM(num_drilled) as total_wells FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "generated_sql": "SELECT \n  region, \n  SUM(num_drilled) AS total_wells_drilled \nFROM wells \nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation') \nGROUP BY region;", "raw_model_output": "SELECT \n  region, \n  SUM(num_drilled) AS total_wells_drilled \nFROM wells \nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation') \nGROUP BY region;", "latency_sec": 3.950373888015747, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 722, "prompt_eval_sec": null, "tokens_completion": 509, "completion_eval_sec": null, "tokens_total": 1231, "tokens_per_sec": 311.6160735404023, "retrieval_latency_sec": 0.11378288269042969, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single total sum of num_drilled for all specified regions combined, while the Generated SQL groups the sum by individual regions. The Reference SQL produces one row with a total, whereas the Generated SQL produces two rows (one per region) with regional totals. The output structure and granularity differ."}
{"example_id": 1160, "sql_complexity": "subqueries", "prompt": "What is the total revenue generated from ads on Instagram in March 2021, for users in the 'brand' category who have posted more than 10 times?", "context": "CREATE TABLE ads (ad_id INT, user_id INT, platform VARCHAR(255), ad_revenue DECIMAL(10,2), post_count INT); INSERT INTO ads (ad_id, user_id, platform, ad_revenue, post_count) VALUES (1, 1, 'Instagram', 150.50, 12), (2, 2, 'Twitter', 80.00, 15), (3, 3, 'Instagram', 120.75, 8);", "reference_sql": "SELECT SUM(ad_revenue) FROM ads WHERE platform = 'Instagram' AND MONTH(ad_date) = 3 AND YEAR(ad_date) = 2021 AND user_id IN (SELECT user_id FROM users WHERE category = 'brand' AND post_count > 10);", "generated_sql": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10;", "raw_model_output": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10;", "latency_sec": 5.571326017379761, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 988, "prompt_eval_sec": null, "tokens_completion": 879, "completion_eval_sec": null, "tokens_total": 1867, "tokens_per_sec": 335.10873249490163, "retrieval_latency_sec": 0.12338995933532715, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes additional conditions: filtering by ad_date (MONTH and YEAR) and a subquery joining with a users table (which isn't defined in the provided schema). The Generated SQL omits these conditions and instead uses a different post_count filter. The absence of the users table and date filters makes the queries semantically distinct."}
{"example_id": 4708, "sql_complexity": "subqueries", "prompt": "What is the maximum number of high-level threats reported by a single agency in a month?", "context": "CREATE TABLE Threat_Intelligence (Threat_ID INT, Threat_Type VARCHAR(50), Threat_Level VARCHAR(50), Reported_Date DATE, Reporting_Agency VARCHAR(50)); CREATE VIEW High_Level_Threats AS SELECT Threat_Type, Threat_Level, Reported_Date FROM Threat_Intelligence WHERE Threat_Level = 'High';", "reference_sql": "SELECT Reporting_Agency, MAX(Number_of_High_Level_Threats) as Max_High_Level_Threats_in_a_Month FROM (SELECT Reporting_Agency, TO_CHAR(Reported_Date, 'YYYY-MM') as Month, COUNT(*) as Number_of_High_Level_Threats FROM High_Level_Threats GROUP BY Reporting_Agency, Month) GROUP BY Reporting_Agency;", "generated_sql": "SELECT MAX(threats_count) \nFROM (\n  SELECT Reporting_Agency,\n         EXTRACT(YEAR FROM Reported_Date) AS yr,\n         EXTRACT(MONTH FROM Reported_Date) AS mo,\n         COUNT(*) AS threats_count\n  FROM Threat_Intelligence\n  WHERE Threat_Level = 'High'\n  GROUP BY Reporting_Agency,\n           EXTRACT(YEAR FROM Reported_Date),\n           EXTRACT(MONTH FROM Reported_Date)\n) AS monthly_agency_counts;", "raw_model_output": "SELECT MAX(threats_count) \nFROM (\n  SELECT Reporting_Agency,\n         EXTRACT(YEAR FROM Reported_Date) AS yr,\n         EXTRACT(MONTH FROM Reported_Date) AS mo,\n         COUNT(*) AS threats_count\n  FROM Threat_Intelligence\n  WHERE Threat_Level = 'High'\n  GROUP BY Reporting_Agency,\n           EXTRACT(YEAR FROM Reported_Date),\n           EXTRACT(MONTH FROM Reported_Date)\n) AS monthly_agency_counts;", "latency_sec": 5.433672904968262, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 634, "prompt_eval_sec": null, "tokens_completion": 566, "completion_eval_sec": null, "tokens_total": 1200, "tokens_per_sec": 220.8450933626836, "retrieval_latency_sec": 0.11544299125671387, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns the maximum number of high-level threats per agency across months, grouped by agency. The Generated SQL calculates the overall maximum threats_count across all agencies and months without grouping by agency, resulting in a single value. The absence of 'GROUP BY Reporting_Agency' in the outer query of the Generated SQL makes them non-equivalent."}
{"example_id": 5608, "sql_complexity": "set operations", "prompt": "List the suppliers that provide materials for both product A and product C.", "context": "CREATE TABLE products (product_id INT, product_name TEXT); CREATE TABLE materials (material_id INT, material_name TEXT, product_id INT, supplier_id INT); INSERT INTO products (product_id, product_name) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'); INSERT INTO materials (material_id, material_name, product_id, supplier_id) VALUES (1, 'Material 1', 1, 101), (2, 'Material 2', 1, 102), (3, 'Material 3', 2, 103), (4, 'Material 4', 3, 101), (5, 'Material 5', 3, 102);", "reference_sql": "SELECT supplier_id FROM materials WHERE product_id = 1 INTERSECT SELECT supplier_id FROM materials WHERE product_id = 3;", "generated_sql": "SELECT supplier_id\nFROM materials m\nJOIN products p ON m.product_id = p.product_id\nWHERE p.product_name IN ('Product A', 'Product C')\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT p.product_name) = 2;", "raw_model_output": "SELECT supplier_id\nFROM materials m\nJOIN products p ON m.product_id = p.product_id\nWHERE p.product_name IN ('Product A', 'Product C')\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT p.product_name) = 2;", "latency_sec": 4.358474969863892, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1247, "prompt_eval_sec": null, "tokens_completion": 391, "completion_eval_sec": null, "tokens_total": 1638, "tokens_per_sec": 375.81952662932287, "retrieval_latency_sec": 0.11350011825561523, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve supplier_ids that are associated with both Product A (product_id=1) and Product C (product_id=3). The Reference SQL uses INTERSECT to find common supplier_ids between the two product_id conditions, while the Generated SQL uses a JOIN and HAVING clause to ensure suppliers have both products. The result sets are identical."}
{"example_id": 1506, "sql_complexity": "basic SQL", "prompt": "How many habitats are in the 'animal_habitats' table?", "context": "CREATE TABLE animal_habitats (id INT PRIMARY KEY, habitat_name VARCHAR, num_animals INT);", "reference_sql": "SELECT COUNT(*) FROM animal_habitats;", "generated_sql": "SELECT COUNT(*) AS habitat_count\nFROM animal_habitats;", "raw_model_output": "SELECT COUNT(*) AS habitat_count\nFROM animal_habitats;", "latency_sec": 1.4153530597686768, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 583, "prompt_eval_sec": null, "tokens_completion": 96, "completion_eval_sec": null, "tokens_total": 679, "tokens_per_sec": 479.73895651942473, "retrieval_latency_sec": 0.11092615127563477, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries return the same count value of rows in the animal_habitats table. The generated query adds an alias (habitat_count) to the COUNT(*) result, but this does not affect the semantic result - the numerical count remains identical."}
{"example_id": 3117, "sql_complexity": "aggregation", "prompt": "What is the percentage of the population that has access to clean water in each continent?", "context": "CREATE TABLE water_data (id INT, country VARCHAR(50), continent CHAR(2), access_to_clean_water BOOLEAN); INSERT INTO water_data VALUES (1, 'Canada', 'NA', true), (2, 'Mexico', 'NA', false), (3, 'Brazil', 'SA', true), (4, 'Russia', 'EU', true);", "reference_sql": "SELECT continent, COUNT(*) FILTER (WHERE access_to_clean_water) * 100.0 / COUNT(*) AS percentage FROM water_data GROUP BY continent;", "generated_sql": "SELECT \n  continent, \n  SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS clean_water_percentage \nFROM water_data \nGROUP BY continent;", "raw_model_output": "SELECT \n  continent, \n  SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS clean_water_percentage \nFROM water_data \nGROUP BY continent;", "latency_sec": 3.6861839294433594, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 716, "prompt_eval_sec": null, "tokens_completion": 447, "completion_eval_sec": null, "tokens_total": 1163, "tokens_per_sec": 315.5024334815603, "retrieval_latency_sec": 0.11295294761657715, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of countries with access to clean water per continent. The Reference SQL uses COUNT(*) FILTER (WHERE access_to_clean_water) to count true values, while the Generated SQL uses SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) which achieves the same result. Both divide by COUNT(*) and multiply by 100.0 to get the percentage. The different syntaxes are functionally equivalent."}
{"example_id": 3542, "sql_complexity": "window functions", "prompt": "What is the average yield of crops for each country, ranked by average yield?", "context": "CREATE TABLE farming (id INT, name TEXT, country TEXT, crop TEXT, yield INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'USA', 'Corn', 120), (2, 'Brown Farm', 'Canada', 'Soybeans', 45), (3, 'Jones Farm', 'Mexico', 'Wheat', 80);", "reference_sql": "SELECT country, AVG(yield) as avg_yield, ROW_NUMBER() OVER (ORDER BY AVG(yield) DESC) as rank FROM farming GROUP BY country;", "generated_sql": "SELECT\n  country,\n  AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "raw_model_output": "SELECT\n  country,\n  AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "latency_sec": 1.5736091136932373, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 627, "prompt_eval_sec": null, "tokens_completion": 176, "completion_eval_sec": null, "tokens_total": 803, "tokens_per_sec": 510.291909860239, "retrieval_latency_sec": 0.11465001106262207, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a ROW_NUMBER() column that assigns ranks based on average yield, while the Generated SQL only returns country and average_yield without ranking. The presence of the rank column in the Reference SQL makes the result sets structurally different."}
{"example_id": 2274, "sql_complexity": "subqueries", "prompt": "Add a new crop 'amaranth' to farm 'Nourishing Harvest' with yield 50 in 2023", "context": "CREATE TABLE farms (id INT, name TEXT, location TEXT, size FLOAT); INSERT INTO farms (id, name, location, size) VALUES (1, 'Nourishing Harvest', 'Mexico', 120.0); CREATE TABLE crops (id INT, farm_id INT, crop TEXT, yield INT, year INT);", "reference_sql": "INSERT INTO crops (id, farm_id, crop, yield, year) VALUES (5, (SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "generated_sql": "INSERT INTO crops (id, farm_id, crop, yield, year)\nVALUES (\n  (SELECT COALESCE(MAX(id), 0) + 1 FROM crops),\n  (SELECT id FROM farms WHERE name = 'Nourishing Harvest'),\n  'amaranth',\n  50,\n  2023\n);", "raw_model_output": "INSERT INTO crops (id, farm_id, crop, yield, year)\nVALUES (\n  (SELECT COALESCE(MAX(id), 0) + 1 FROM crops),\n  (SELECT id FROM farms WHERE name = 'Nourishing Harvest'),\n  'amaranth',\n  50,\n  2023\n);", "latency_sec": 6.733191013336182, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 956, "prompt_eval_sec": null, "tokens_completion": 661, "completion_eval_sec": null, "tokens_total": 1617, "tokens_per_sec": 240.15359088985713, "retrieval_latency_sec": 0.11969590187072754, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL explicitly sets the id to 5, while the Generated SQL calculates the id as the next available number (MAX(id) + 1). If the crops table is empty, the Generated SQL would insert id=1, whereas the Reference SQL would insert id=5. This difference in id assignment makes them non-equivalent."}
{"example_id": 3705, "sql_complexity": "subqueries", "prompt": "What is the percentage of unions with collective bargaining agreements in the Midwest region?", "context": "CREATE TABLE collective_bargaining (bargaining_id INT, union_name VARCHAR(50), contract_start_date DATE, contract_end_date DATE, region VARCHAR(50));CREATE VIEW union_region AS SELECT DISTINCT union_name, region FROM collective_bargaining;", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) as percentage FROM union_region ur WHERE ur.region = 'Midwest' AND EXISTS (SELECT 1 FROM collective_bargaining cb WHERE cb.union_name = ur.union_name);", "generated_sql": "SELECT \n  COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) AS percentage_midwest_unions\nFROM \n  union_region\nWHERE \n  region = 'Midwest';", "raw_model_output": "SELECT \n  COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) AS percentage_midwest_unions\nFROM \n  union_region\nWHERE \n  region = 'Midwest';", "latency_sec": 5.468869924545288, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1105, "prompt_eval_sec": null, "tokens_completion": 636, "completion_eval_sec": null, "tokens_total": 1741, "tokens_per_sec": 318.34730465723345, "retrieval_latency_sec": 0.11497902870178223, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The reference query's EXISTS clause is redundant because union_region is derived from collective_bargaining. Every union_name in union_region already exists in collective_bargaining, so the WHERE condition effectively reduces to region = 'Midwest' in both queries. Both calculate the same percentage by counting Midwest entries in union_region relative to the total union_region count."}
{"example_id": 240, "sql_complexity": "aggregation", "prompt": "What is the average capacity of renewable energy projects for each country?", "context": "CREATE TABLE projects (name TEXT, type TEXT, capacity INTEGER, country TEXT); INSERT INTO projects (name, type, capacity, country) VALUES ('Project 1', 'Wind', 100, 'USA'), ('Project 2', 'Solar', 200, 'Germany'), ('Project 3', 'Wind', 300, 'France');", "reference_sql": "SELECT country, AVG(capacity) FROM projects GROUP BY country", "generated_sql": "SELECT \n  country, \n  AVG(capacity) AS average_capacity \nFROM projects \nWHERE type IN ('Wind', 'Solar') \nGROUP BY country;", "raw_model_output": "SELECT \n  country, \n  AVG(capacity) AS average_capacity \nFROM projects \nWHERE type IN ('Wind', 'Solar') \nGROUP BY country;", "latency_sec": 2.4344868659973145, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 672, "prompt_eval_sec": null, "tokens_completion": 243, "completion_eval_sec": null, "tokens_total": 915, "tokens_per_sec": 375.8492242368948, "retrieval_latency_sec": 0.11462569236755371, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes all projects regardless of type, while the Generated SQL filters projects to only 'Wind' and 'Solar' types. This filter could exclude projects in other types, leading to different results when non-Wind/Solar projects exist in the table."}
{"example_id": 2132, "sql_complexity": "set operations", "prompt": "What is the average caseload per attorney in community legal clinics in California, and how does it compare to the state average?", "context": "CREATE TABLE cali_community_legal_clinics(id INT, attorney_count INT, cases_handled INT, state VARCHAR(255));", "reference_sql": "SELECT state, AVG(cases_handled/attorney_count) AS avg_caseload FROM cali_community_legal_clinics WHERE state = 'California' GROUP BY state UNION ALL SELECT 'California', AVG(cases_handled/attorney_count) FROM cali_community_legal_clinics WHERE state = 'California';", "generated_sql": "SELECT\n  (SELECT AVG(cases_handled * 1.0 / attorney_count)\n   FROM cali_community_legal_clinics\n   WHERE state = 'California'\n  ) AS avg_caseload_per_attorney_california,\n  (SELECT AVG(cases_handled * 1.0 / attorney_count)\n   FROM cali_community_legal_clinics\n  ) AS avg_caseload_per_attorney_statewide;", "raw_model_output": "SELECT\n  (SELECT AVG(cases_handled * 1.0 / attorney_count)\n   FROM cali_community_legal_clinics\n   WHERE state = 'California'\n  ) AS avg_caseload_per_attorney_california,\n  (SELECT AVG(cases_handled * 1.0 / attorney_count)\n   FROM cali_community_legal_clinics\n  ) AS avg_caseload_per_attorney_statewide;", "latency_sec": 9.393263101577759, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 700, "prompt_eval_sec": null, "tokens_completion": 1200, "completion_eval_sec": null, "tokens_total": 1900, "tokens_per_sec": 202.2726266105399, "retrieval_latency_sec": 0.1148061752319336, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the same average caseload for California twice (once via GROUP BY and once via a scalar subquery) and returns two rows with redundant data. The Generated SQL computes two distinct averages: one specifically for California and another for all states (without filtering). The second subquery in the Generated SQL lacks the WHERE state = 'California' condition, leading to different results compared to the Reference SQL."}
{"example_id": 3276, "sql_complexity": "basic SQL", "prompt": "What is the total energy consumption of the Chemical Plant B in the last quarter?", "context": "CREATE TABLE EnergyConsumption (EnergyID INT, Plant VARCHAR(255), EnergyQuantity DECIMAL(5,2), Timestamp DATETIME);", "reference_sql": "SELECT SUM(EnergyQuantity) FROM EnergyConsumption WHERE Plant = 'Chemical Plant B' AND Timestamp BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE();", "generated_sql": "SELECT SUM(EnergyQuantity) AS total_energy_consumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp BETWEEN (CURRENT_TIMESTAMP - INTERVAL '3' MONTH) AND CURRENT_TIMESTAMP;", "raw_model_output": "SELECT SUM(EnergyQuantity) AS total_energy_consumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp BETWEEN (CURRENT_TIMESTAMP - INTERVAL '3' MONTH) AND CURRENT_TIMESTAMP;", "latency_sec": 3.6774730682373047, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 740, "prompt_eval_sec": null, "tokens_completion": 446, "completion_eval_sec": null, "tokens_total": 1186, "tokens_per_sec": 322.5040613467977, "retrieval_latency_sec": 0.10813403129577637, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in how they handle the timestamp range. The Reference SQL uses CURRENT_DATE() (date-only) for both bounds, effectively capturing records up to the start of the current day. The Generated SQL uses CURRENT_TIMESTAMP (datetime), capturing records up to the exact current moment. This discrepancy can lead to different results if the Timestamp column contains time components."}
{"example_id": 3074, "sql_complexity": "multiple_joins", "prompt": "Find the top 5 players with the highest scores in the 'historical_tournaments' view, including their scores and the names of the tournaments they participated in.", "context": "CREATE VIEW historical_tournaments AS SELECT tournaments.tournament_name, players.player_name, players.score FROM tournaments JOIN players_scores ON tournaments.tournament_id = players_scores.tournament_id JOIN players ON players_scores.player_id = players.player_id;  CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT);  CREATE TABLE players_scores (player_id INT, tournament_id INT, score INT);  CREATE TABLE players (player_id INT, player_name TEXT);", "reference_sql": "SELECT players.player_name, MAX(players_scores.score) as high_score, tournaments.tournament_name FROM historical_tournaments JOIN players ON historical_tournaments.player_id = players.player_id JOIN players_scores ON historical_tournaments.player_id = players_scores.player_id JOIN tournaments ON players_scores.tournament_id = tournaments.tournament_id GROUP BY players.player_id, tournaments.tournament_name ORDER BY high_score DESC LIMIT 5;", "generated_sql": "SELECT player_name,\n       tournament_name,\n       score\nFROM (\n  SELECT\n    player_name,\n    tournament_name,\n    score,\n    ROW_NUMBER() OVER (PARTITION BY player_name ORDER BY score DESC) AS rn\n  FROM historical_tournaments\n) AS ranked\nWHERE rn = 1\nORDER BY score DESC\nLIMIT 5;", "raw_model_output": "SELECT player_name,\n       tournament_name,\n       score\nFROM (\n  SELECT\n    player_name,\n    tournament_name,\n    score,\n    ROW_NUMBER() OVER (PARTITION BY player_name ORDER BY score DESC) AS rn\n  FROM historical_tournaments\n) AS ranked\nWHERE rn = 1\nORDER BY score DESC\nLIMIT 5;", "latency_sec": 5.453207015991211, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 938, "prompt_eval_sec": null, "tokens_completion": 794, "completion_eval_sec": null, "tokens_total": 1732, "tokens_per_sec": 317.61126891405576, "retrieval_latency_sec": 0.11531281471252441, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL groups by player_id and tournament_name, returning the highest score per player-tournament pair, while the Generated SQL selects each player's single highest score overall. The Reference SQL may include multiple entries per player (one per tournament) whereas the Generated SQL returns only one entry per player. Additionally, the Reference SQL's joins and grouping logic differ from the Generated SQL's window function approach, leading to different result sets."}
{"example_id": 2219, "sql_complexity": "window functions", "prompt": "What is the average population of cities with a UNESCO World Heritage designation, ordered by designation date?", "context": "CREATE TABLE cities (name VARCHAR(255), population INT, designation_date DATE); INSERT INTO cities (name, population, designation_date) VALUES ('Paris', 2141000, '1991-09-16'); INSERT INTO cities (name, population, designation_date) VALUES ('Rio de Janeiro', 6727000, '2012-07-01');", "reference_sql": "SELECT AVG(population) FROM (SELECT population, ROW_NUMBER() OVER (ORDER BY designation_date) rn FROM cities WHERE name IN (SELECT name FROM heritagesites)) t WHERE rn % 2 = 1;", "generated_sql": "SELECT \n  designation_date, \n  AVG(population) AS average_population \nFROM cities \nGROUP BY designation_date \nORDER BY designation_date;", "raw_model_output": "SELECT \n  designation_date, \n  AVG(population) AS average_population \nFROM cities \nGROUP BY designation_date \nORDER BY designation_date;", "latency_sec": 3.80302095413208, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 927, "prompt_eval_sec": null, "tokens_completion": 304, "completion_eval_sec": null, "tokens_total": 1231, "tokens_per_sec": 323.6900387473508, "retrieval_latency_sec": 0.10952901840209961, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the average population of cities in heritagesites ordered by designation_date, selecting only odd-numbered rows. The generated query groups cities by designation_date and calculates average population per group, without filtering for heritagesites. The output structure and logic differ significantly."}
{"example_id": 3786, "sql_complexity": "aggregation", "prompt": "Display the names and average co-owner percentages for all properties in the 'property_coownership' table where the co-owner percentage is greater than 60.", "context": "CREATE TABLE property_coownership (property_id INT, owner VARCHAR(255), percentage INT); INSERT INTO property_coownership (property_id, owner, percentage) VALUES (1, 'Mohammed', 70), (1, 'Fatima', 30), (2, 'Jamal', 65), (2, 'Aisha', 35), (3, 'Ali', 75), (3, 'Khadija', 25);", "reference_sql": "SELECT owner, AVG(percentage) FROM property_coownership WHERE percentage > 60 GROUP BY owner;", "generated_sql": "SELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "raw_model_output": "SELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "latency_sec": 3.7647621631622314, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 840, "prompt_eval_sec": null, "tokens_completion": 429, "completion_eval_sec": null, "tokens_total": 1269, "tokens_per_sec": 337.0730858955767, "retrieval_latency_sec": 0.11526989936828613, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The only difference is the alias 'average_percentage' in the Generated SQL, which does not affect the result set's content. Both queries filter rows where percentage > 60, group by owner, and calculate the average percentage for each group."}
{"example_id": 2357, "sql_complexity": "basic SQL", "prompt": "What is the total amount of climate finance invested in renewable energy projects by public and private sectors in Africa?", "context": "CREATE TABLE renewable_energy_projects (project_id INT, sector TEXT, investor_type TEXT, region TEXT, amount FLOAT); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (1, 'Renewable Energy', 'Public', 'Africa', 5000000); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (2, 'Renewable Energy', 'Private', 'Africa', 7000000);", "reference_sql": "SELECT SUM(amount) FROM renewable_energy_projects WHERE sector = 'Renewable Energy' AND region = 'Africa';", "generated_sql": "SELECT SUM(amount) \nFROM renewable_energy_projects \nWHERE sector = 'Renewable Energy' \n  AND investor_type IN ('Public', 'Private') \n  AND region = 'Africa';", "raw_model_output": "SELECT SUM(amount) \nFROM renewable_energy_projects \nWHERE sector = 'Renewable Energy' \n  AND investor_type IN ('Public', 'Private') \n  AND region = 'Africa';", "latency_sec": 2.400799036026001, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 739, "prompt_eval_sec": null, "tokens_completion": 249, "completion_eval_sec": null, "tokens_total": 988, "tokens_per_sec": 411.52965540815046, "retrieval_latency_sec": 0.11429309844970703, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL does not filter by investor_type, while the Generated SQL explicitly restricts to ('Public', 'Private'). Although the sample data contains only these two investor types, the queries are not semantically equivalent because the Generated SQL could exclude other potential investor_type values not present in the sample data."}
{"example_id": 1009, "sql_complexity": "multiple_joins", "prompt": "Find the number of IoT sensors installed in each farm that use Sprinkler irrigation.", "context": "CREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, Farm_id) VALUES (1, 'Soil Moisture', 1), (2, 'Temperature', 1), (3, 'Humidity', 2); CREATE TABLE Irrigation (id INT, Farm_id INT, irrigation_type VARCHAR(50), duration INT); INSERT INTO Irrigation (id, Farm_id, irrigation_type, duration) VALUES (1, 1, 'Sprinkler', 30), (2, 2, 'Drip', 45);", "reference_sql": "SELECT f.id, COUNT(s.id) FROM Farmers f JOIN Irrigation i ON f.id = i.Farm_id JOIN IoT_Sensors s ON f.id = s.Farm_id WHERE i.irrigation_type = 'Sprinkler' GROUP BY f.id;", "generated_sql": "SELECT s.Farm_id,\n       COUNT(*) AS sensor_count\nFROM IoT_Sensors s\nJOIN Irrigation i\n  ON s.Farm_id = i.Farm_id\n     AND i.irrigation_type = 'Sprinkler'\nGROUP BY s.Farm_id;", "raw_model_output": "SELECT s.Farm_id,\n       COUNT(*) AS sensor_count\nFROM IoT_Sensors s\nJOIN Irrigation i\n  ON s.Farm_id = i.Farm_id\n     AND i.irrigation_type = 'Sprinkler'\nGROUP BY s.Farm_id;", "latency_sec": 4.891407012939453, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 826, "prompt_eval_sec": null, "tokens_completion": 396, "completion_eval_sec": null, "tokens_total": 1222, "tokens_per_sec": 249.8258674380173, "retrieval_latency_sec": 0.11783719062805176, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of IoT_Sensors per Farm_id where Irrigation has 'Sprinkler' type. The Reference SQL uses Farmers table but groups by f.id (equivalent to s.Farm_id). The Generated SQL directly groups by s.Farm_id. Both count sensor-irrigation pairs (COUNT(s.id) vs COUNT(*)) which yield same results since each row represents a sensor. The WHERE condition in Reference is equivalent to the JOIN condition in Generated."}
{"example_id": 4217, "sql_complexity": "subqueries", "prompt": "Show consumer preference data for foundations, excluding products from the USA.", "context": "CREATE TABLE cosmetics (product_id INT, product_name VARCHAR(100), product_type VARCHAR(50), is_cruelty_free BOOLEAN, consumer_preference_score INT); INSERT INTO cosmetics (product_id, product_name, product_type, is_cruelty_free, consumer_preference_score) VALUES (1, 'Lipstick A', 'Lipstick', TRUE, 80), (2, 'Foundation B', 'Foundation', FALSE, 90), (3, 'Mascara C', 'Mascara', TRUE, 85), (4, 'Eyeshadow D', 'Eyeshadow', TRUE, 70), (5, 'Blush E', 'Blush', FALSE, 95); CREATE TABLE ingredient_sourcing (ingredient_id INT, ingredient_name VARCHAR(100), sourcing_country VARCHAR(50), is_organic BOOLEAN); INSERT INTO ingredient_sourcing (ingredient_id, ingredient_name, sourcing_country, is_organic) VALUES (1, 'Rosehip Oil', 'Chile', TRUE), (2, 'Shea Butter', 'Ghana', TRUE), (3, 'Jojoba Oil', 'India', TRUE), (4, 'Coconut Oil', 'Philippines', FALSE), (5, 'Aloe Vera', 'USA', TRUE);", "reference_sql": "SELECT * FROM cosmetics WHERE product_type = 'Foundation' AND product_id NOT IN (SELECT cosmetics.product_id FROM cosmetics INNER JOIN ingredient_sourcing ON cosmetics.product_id = ingredient_sourcing.ingredient_id WHERE ingredient_sourcing.sourcing_country = 'USA');", "generated_sql": "SELECT c.product_name, \n       c.consumer_preference_score\nFROM cosmetics c\nJOIN ingredient_sourcing s\n  ON c.product_id = s.ingredient_id\nWHERE c.product_type = 'Foundation'\n  AND s.sourcing_country <> 'USA';", "raw_model_output": "SELECT c.product_name, \n       c.consumer_preference_score\nFROM cosmetics c\nJOIN ingredient_sourcing s\n  ON c.product_id = s.ingredient_id\nWHERE c.product_type = 'Foundation'\n  AND s.sourcing_country <> 'USA';", "latency_sec": 13.491822242736816, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 931, "prompt_eval_sec": null, "tokens_completion": 2119, "completion_eval_sec": null, "tokens_total": 3050, "tokens_per_sec": 226.0628657216364, "retrieval_latency_sec": 0.11460113525390625, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL excludes 'Foundation' products that have any ingredient sourced from the USA (using NOT IN with a subquery). The Generated SQL selects 'Foundation' products that have at least one ingredient from a non-USA country (using a JOIN with sourcing_country <> 'USA'). The key difference is that the Reference SQL could include Foundations with no ingredients (since NOT IN would include them if they don't match the subquery), while the Generated SQL requires a matching ingredient_sourcing record. Additionally, the Generated SQL filters for non-USA sourcing, whereas the Reference SQL excludes USA-sourced ingredients, leading to different result sets."}
{"example_id": 5620, "sql_complexity": "basic SQL", "prompt": "What is the recycling rate of plastic in the residential sector in the state of New York?", "context": "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", "reference_sql": "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "generated_sql": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential'\n  AND city = 'New York City'\n  AND material = 'plastic';", "raw_model_output": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential'\n  AND city = 'New York City'\n  AND material = 'plastic';", "latency_sec": 2.9178037643432617, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 969, "prompt_eval_sec": null, "tokens_completion": 307, "completion_eval_sec": null, "tokens_total": 1276, "tokens_per_sec": 437.3152216722846, "retrieval_latency_sec": 0.11470699310302734, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same column (recycling_rate) from the same table and apply identical WHERE conditions (sector = 'residential', city = 'New York City', material = 'plastic'). The order of conditions in the WHERE clause does not affect the result, as AND is commutative."}
{"example_id": 3151, "sql_complexity": "basic SQL", "prompt": "List all biotech startups that received funding in 2022 and their respective funding amounts.", "context": "CREATE TABLE biotech_startups (name TEXT, funding FLOAT, date DATE); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupA', 3500000, '2022-02-28'); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupB', 4500000, '2022-07-12');", "reference_sql": "SELECT name, funding FROM biotech_startups WHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "generated_sql": "SELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "raw_model_output": "SELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "latency_sec": 2.5535550117492676, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 758, "prompt_eval_sec": null, "tokens_completion": 298, "completion_eval_sec": null, "tokens_total": 1056, "tokens_per_sec": 413.54112017998233, "retrieval_latency_sec": 0.11314892768859863, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select startups with dates in 2022. The reference query uses BETWEEN '2022-01-01' AND '2022-12-31' which includes all dates in that year, while the generated query uses EXTRACT(YEAR FROM date) = 2022. Since the date column is of type DATE (without time components) in the schema, both conditions will capture identical rows."}
{"example_id": 2136, "sql_complexity": "window functions", "prompt": "What is the total military equipment sales revenue for each sales representative by fiscal year?", "context": "CREATE TABLE SalesReps (SalesRepID INT, SalesRepName VARCHAR(50), FiscalYear INT, Revenue DECIMAL(10,2)); INSERT INTO SalesReps (SalesRepID, SalesRepName, FiscalYear, Revenue) VALUES (1, 'John Doe', 2020, 150000.00), (2, 'Jane Smith', 2020, 200000.00), (1, 'John Doe', 2021, 180000.00), (2, 'Jane Smith', 2021, 250000.00);", "reference_sql": "SELECT SalesRepName, FiscalYear, SUM(Revenue) OVER (PARTITION BY SalesRepName ORDER BY FiscalYear) AS TotalRevenue FROM SalesReps;", "generated_sql": "SELECT \n  SalesRepID,\n  SalesRepName,\n  FiscalYear,\n  SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY \n  SalesRepID,\n  SalesRepName,\n  FiscalYear;", "raw_model_output": "SELECT \n  SalesRepID,\n  SalesRepName,\n  FiscalYear,\n  SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY \n  SalesRepID,\n  SalesRepName,\n  FiscalYear;", "latency_sec": 9.337382793426514, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 722, "prompt_eval_sec": null, "tokens_completion": 322, "completion_eval_sec": null, "tokens_total": 1044, "tokens_per_sec": 111.80863236483916, "retrieval_latency_sec": 0.1132962703704834, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate a running total of Revenue per SalesRepName across FiscalYears, while the Generated SQL aggregates Revenue per unique SalesRepID/FiscalYear combination. The Reference query retains individual rows with cumulative sums, whereas the Generated query collapses rows into single summaries per SalesRepID/FiscalYear, producing different result structures and values."}
{"example_id": 5452, "sql_complexity": "basic SQL", "prompt": "What is the name of the farms with a size greater than 150 acres located in 'Texas'?", "context": "CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(50), size INT, location VARCHAR(50)); INSERT INTO farms (id, name, size, location) VALUES (1, 'Smith Farms', 200, 'Texas'), (2, 'Johnson Farms', 100, 'California');", "reference_sql": "SELECT name FROM farms WHERE size > 150 AND location = 'Texas'", "generated_sql": "SELECT name\nFROM farms\nWHERE size > 150\n  AND location = 'Texas';", "raw_model_output": "SELECT name\nFROM farms\nWHERE size > 150\n  AND location = 'Texas';", "latency_sec": 1.6335370540618896, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 966, "prompt_eval_sec": null, "tokens_completion": 102, "completion_eval_sec": null, "tokens_total": 1068, "tokens_per_sec": 653.7960050213449, "retrieval_latency_sec": 0.11094498634338379, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the 'name' column from the 'farms' table with identical WHERE conditions (size > 150 AND location = 'Texas'). The only difference is formatting (line breaks/spaces), which does not affect semantic meaning."}
{"example_id": 5152, "sql_complexity": "aggregation", "prompt": "How many international tourists visited Portugal in 2020, broken down by continent?", "context": "CREATE TABLE international_tourists(tourist_id INT, country TEXT, arrival_year INT, continent TEXT);INSERT INTO international_tourists (tourist_id, country, arrival_year, continent) VALUES (1, 'Spain', 2020, 'Europe'), (2, 'France', 2020, 'Europe'), (3, 'Brazil', 2020, 'South America'), (4, 'United States', 2020, 'North America'), (5, 'China', 2020, 'Asia');", "reference_sql": "SELECT continent, COUNT(*) FROM international_tourists WHERE arrival_year = 2020 GROUP BY continent;", "generated_sql": "SELECT continent, COUNT(*) AS num_tourists\nFROM international_tourists\nWHERE country = 'Portugal'\n  AND arrival_year = 2020\nGROUP BY continent;", "raw_model_output": "SELECT continent, COUNT(*) AS num_tourists\nFROM international_tourists\nWHERE country = 'Portugal'\n  AND arrival_year = 2020\nGROUP BY continent;", "latency_sec": 2.0631327629089355, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 822, "prompt_eval_sec": null, "tokens_completion": 247, "completion_eval_sec": null, "tokens_total": 1069, "tokens_per_sec": 518.144066740888, "retrieval_latency_sec": 0.11250090599060059, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL counts all tourists by continent for 2020, while the Generated SQL adds a WHERE condition (country = 'Portugal') that excludes all rows in the dataset. Since there are no tourists from Portugal in the table, the Generated SQL returns an empty result set, making them non-equivalent."}
{"example_id": 2477, "sql_complexity": "set operations", "prompt": "What is the carbon price in Europe and Australia for the last quarter of 2020?", "context": "CREATE TABLE CarbonPrices (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonPrices (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2020, 4, 25), ('Australia', 2020, 4, 15); CREATE TABLE CarbonTaxes (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonTaxes (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2019, 4, 20), ('Australia', 2019, 4, 10);", "reference_sql": "SELECT Context.Country, Context.CarbonPrice FROM ( SELECT * FROM CarbonPrices WHERE CarbonPrices.Country IN ('Europe', 'Australia') AND CarbonPrices.Year = 2020 AND CarbonPrices.Quarter = 4 UNION SELECT * FROM CarbonTaxes WHERE CarbonTaxes.Country IN ('Europe', 'Australia') AND CarbonTaxes.Year = 2020 AND CarbonTaxes.Quarter = 4 ) AS Context;", "generated_sql": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020\n  AND Quarter = 4\n  AND Country IN ('Europe', 'Australia');", "raw_model_output": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020\n  AND Quarter = 4\n  AND Country IN ('Europe', 'Australia');", "latency_sec": 3.217513084411621, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 725, "prompt_eval_sec": null, "tokens_completion": 373, "completion_eval_sec": null, "tokens_total": 1098, "tokens_per_sec": 341.2573534882108, "retrieval_latency_sec": 0.11641192436218262, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL combines data from both CarbonPrices and CarbonTaxes tables using UNION, while the Generated SQL only queries the CarbonPrices table. The Generated SQL lacks the CarbonTaxes table reference and would not include any matching rows from CarbonTaxes, making them non-equivalent."}
{"example_id": 4573, "sql_complexity": "subqueries", "prompt": "Find the names of all the indigenous communities in the 'Arctic_Communities' table that have a population size greater than the average population size in the 'Antarctic_Communities' table.", "context": "CREATE TABLE Arctic_Communities (name TEXT, population INTEGER); CREATE TABLE Antarctic_Communities (name TEXT, population INTEGER);", "reference_sql": "SELECT name FROM Arctic_Communities WHERE Arctic_Communities.population > (SELECT AVG(population) FROM Antarctic_Communities)", "generated_sql": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "raw_model_output": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "latency_sec": 1.802300214767456, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 649, "prompt_eval_sec": null, "tokens_completion": 174, "completion_eval_sec": null, "tokens_total": 823, "tokens_per_sec": 456.63868497412824, "retrieval_latency_sec": 0.11498403549194336, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select names from Arctic_Communities where population exceeds the average population of Antarctic_Communities. The only difference is that the Reference SQL explicitly qualifies 'population' with the table name, while the Generated SQL relies on column uniqueness in the context. Since the column name 'population' is unambiguous in both cases, the semantic meaning remains identical."}
{"example_id": 3596, "sql_complexity": "window functions", "prompt": "What is the total revenue for each game in the \"Gaming\" category?", "context": "CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));", "reference_sql": "SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;", "generated_sql": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "raw_model_output": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "latency_sec": 2.2460741996765137, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 743, "prompt_eval_sec": null, "tokens_completion": 237, "completion_eval_sec": null, "tokens_total": 980, "tokens_per_sec": 436.31684124288614, "retrieval_latency_sec": 0.11487603187561035, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total revenue per category for each row using a window function, while the generated query filters to only 'Gaming' category, groups by GameName, and sums revenue per game. The output columns, aggregation logic, and filtering differ significantly."}
{"example_id": 5039, "sql_complexity": "subqueries", "prompt": "What is the total number of community policing events in 'City Park' in 2021?", "context": "CREATE TABLE locations (id INT, name VARCHAR(255)); CREATE TABLE community_policing (id INT, location_id INT, year INT, events INT); INSERT INTO locations (id, name) VALUES (1, 'City Park'); INSERT INTO community_policing (id, location_id, year, events) VALUES (1, 1, 2021, 5);", "reference_sql": "SELECT SUM(events) FROM community_policing WHERE location_id = (SELECT id FROM locations WHERE name = 'City Park') AND year = 2021;", "generated_sql": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park'\n  AND cp.year = 2021;", "raw_model_output": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park'\n  AND cp.year = 2021;", "latency_sec": 2.5974960327148438, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 742, "prompt_eval_sec": null, "tokens_completion": 254, "completion_eval_sec": null, "tokens_total": 996, "tokens_per_sec": 383.4462064448289, "retrieval_latency_sec": 0.08431220054626465, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of 'events' from the community_policing table where the location name is 'City Park' and the year is 2021. The reference query uses a subquery to get the location_id, while the generated query uses a JOIN. Since the locations table has a unique name ('City Park' in this case), both approaches filter the same set of records and produce identical results."}
{"example_id": 2724, "sql_complexity": "basic SQL", "prompt": "What is the earliest installation date for solar panels in Italy?", "context": "CREATE TABLE solar_panels_italy (id INT, installation_date DATE); INSERT INTO solar_panels_italy (id, installation_date) VALUES (1, '2018-01-01'), (2, '2019-01-01'), (3, '2020-01-01');", "reference_sql": "SELECT MIN(installation_date) as earliest_date FROM solar_panels_italy;", "generated_sql": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "raw_model_output": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "latency_sec": 1.5605089664459229, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 691, "prompt_eval_sec": null, "tokens_completion": 103, "completion_eval_sec": null, "tokens_total": 794, "tokens_per_sec": 508.8083548845888, "retrieval_latency_sec": 0.11315083503723145, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the minimum installation_date from the same table. The only difference is the column alias name ('earliest_date' vs 'earliest_installation_date'), which does not affect the semantic meaning or result of the query."}
{"example_id": 2200, "sql_complexity": "single join", "prompt": "Which diversity programs are currently being participated in by employees in the HR department?", "context": "CREATE TABLE Employees (Employee_ID INT, First_Name VARCHAR(20), Last_Name VARCHAR(20), Department VARCHAR(20), Salary DECIMAL(10,2), Date_Hired DATE); CREATE TABLE Diversity_Programs (Program_ID INT, Program_Name VARCHAR(50), Participant_ID INT, Date_Started DATE, Date_Ended DATE);", "reference_sql": "SELECT dp.Program_Name FROM Diversity_Programs dp JOIN Employees e ON dp.Participant_ID = e.Employee_ID WHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "generated_sql": "SELECT DISTINCT dp.Program_Name\nFROM Employees e\nJOIN Diversity_Programs dp ON e.Employee_ID = dp.Participant_ID\nWHERE e.Department = 'HR'\n  AND dp.Date_Started <= CURRENT_DATE\n  AND (dp.Date_Ended IS NULL OR dp.Date_Ended >= CURRENT_DATE);", "raw_model_output": "SELECT DISTINCT dp.Program_Name\nFROM Employees e\nJOIN Diversity_Programs dp ON e.Employee_ID = dp.Participant_ID\nWHERE e.Department = 'HR'\n  AND dp.Date_Started <= CURRENT_DATE\n  AND (dp.Date_Ended IS NULL OR dp.Date_Ended >= CURRENT_DATE);", "latency_sec": 4.299673795700073, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 869, "prompt_eval_sec": null, "tokens_completion": 463, "completion_eval_sec": null, "tokens_total": 1332, "tokens_per_sec": 309.79094305527974, "retrieval_latency_sec": 0.11403703689575195, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference query only filters for employees in the 'HR' department with unended diversity programs (Date_Ended IS NULL). The Generated query adds conditions: Date_Started <= CURRENT_DATE and (Date_Ended IS NULL OR Date_Ended >= CURRENT_DATE), which broadens the active program criteria. Additionally, the Generated query uses DISTINCT, which could eliminate duplicates not present in the Reference query's results."}
{"example_id": 4359, "sql_complexity": "window functions", "prompt": "Which destinations have the least hotel awards?", "context": "CREATE TABLE Destinations (destination_id INT, destination_name TEXT, country TEXT, awards INT); INSERT INTO Destinations (destination_id, destination_name, country, awards) VALUES (1, 'City A', 'Germany', 3), (2, 'City B', 'Switzerland', 5), (3, 'City C', 'Norway', 2);", "reference_sql": "SELECT destination_name, country, awards, RANK() OVER (PARTITION BY country ORDER BY awards ASC) AS rank FROM Destinations;", "generated_sql": "SELECT destination_name, country, awards\nFROM Destinations\nWHERE awards = (\n  SELECT MIN(awards)\n  FROM Destinations\n);", "raw_model_output": "SELECT destination_name, country, awards\nFROM Destinations\nWHERE awards = (\n  SELECT MIN(awards)\n  FROM Destinations\n);", "latency_sec": 3.5470526218414307, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 793, "prompt_eval_sec": null, "tokens_completion": 432, "completion_eval_sec": null, "tokens_total": 1225, "tokens_per_sec": 345.3571544038861, "retrieval_latency_sec": 0.1171879768371582, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates a rank within each country partition based on awards, while the Generated SQL filters for destinations with the absolute minimum awards in the entire table. The Reference query returns all rows with per-country rankings, whereas the Generated query returns only rows matching the global minimum awards value. Their result sets differ in both content and structure."}
{"example_id": 1373, "sql_complexity": "subqueries", "prompt": "What is the total value of military equipment sales to Africa in the last 12 months?", "context": "CREATE TABLE Military_Equipment_Sales(sale_id INT, sale_date DATE, equipment_type VARCHAR(50), country VARCHAR(50), sale_value DECIMAL(10,2));", "reference_sql": "SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN (SELECT country FROM World_Countries WHERE continent = 'Africa') AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "generated_sql": "SELECT SUM(sale_value) AS total_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= CURRENT_DATE - INTERVAL '12' MONTH;", "raw_model_output": "SELECT SUM(sale_value) AS total_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= CURRENT_DATE - INTERVAL '12' MONTH;", "latency_sec": 2.100957155227661, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 573, "prompt_eval_sec": null, "tokens_completion": 249, "completion_eval_sec": null, "tokens_total": 822, "tokens_per_sec": 391.2502441825985, "retrieval_latency_sec": 0.10654997825622559, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their country condition. The reference query uses a subquery to select countries from World_Countries where continent = 'Africa', which would return actual country names in Africa. The generated query checks for country = 'Africa', which is a string literal match. This would only include rows where the country column exactly equals 'Africa' (a continent name), not individual African countries. The date conditions are equivalent, but the country filtering logic is fundamentally different."}
{"example_id": 904, "sql_complexity": "basic SQL", "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?", "context": "CREATE TABLE loans (id INT, amount DECIMAL, date DATE, loan_type VARCHAR); INSERT INTO loans (id, amount, date, loan_type) VALUES (1, 5000, '2021-09-05', 'Shariah-compliant'), (2, 7000, '2021-10-07', 'socially responsible'), (3, 9000, '2021-11-03', 'Shariah-compliant'), (4, 11000, '2021-12-31', 'Shariah-compliant');", "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';", "generated_sql": "SELECT MIN(amount) AS min_amount\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date BETWEEN '2021-10-01' AND '2021-12-31';", "raw_model_output": "SELECT MIN(amount) AS min_amount\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date BETWEEN '2021-10-01' AND '2021-12-31';", "latency_sec": 3.5715932846069336, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 783, "prompt_eval_sec": null, "tokens_completion": 382, "completion_eval_sec": null, "tokens_total": 1165, "tokens_per_sec": 326.1849564509449, "retrieval_latency_sec": 0.11546492576599121, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter loans with 'Shariah-compliant' type and dates in the fourth quarter of 2021. The reference query uses EXTRACT(YEAR) = 2021 and EXTRACT(QUARTER) = 4, which corresponds to October-December 2021. The generated query uses a date range from '2021-10-01' to '2021-12-31', which exactly matches the fourth quarter of 2021. Both conditions ensure the same subset of rows is selected, so the MIN(amount) will be identical."}
{"example_id": 3299, "sql_complexity": "set operations", "prompt": "How many schools and hospitals are there in Colombia and which ones need repairs?", "context": "CREATE TABLE schools (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN); CREATE TABLE hospitals (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN);", "reference_sql": "SELECT 'Schools' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM schools WHERE country = 'Colombia' UNION ALL SELECT 'Hospitals' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM hospitals WHERE country = 'Colombia';", "generated_sql": "SELECT facility_type,\n       COUNT(*) AS total_count,\n       LISTAGG(CASE WHEN needs_repair THEN name END, ', ') WITHIN GROUP (ORDER BY name) AS need_repair_names\nFROM (\n  SELECT 'School'    AS facility_type, name, needs_repair\n  FROM schools\n  WHERE country = 'Colombia'\n  UNION ALL\n  SELECT 'Hospital'  AS facility_type, name, needs_repair\n  FROM hospitals\n  WHERE country = 'Colombia'\n) AS combined\nGROUP BY facility_type;", "raw_model_output": "SELECT facility_type,\n       COUNT(*) AS total_count,\n       LISTAGG(CASE WHEN needs_repair THEN name END, ', ') WITHIN GROUP (ORDER BY name) AS need_repair_names\nFROM (\n  SELECT 'School'    AS facility_type, name, needs_repair\n  FROM schools\n  WHERE country = 'Colombia'\n  UNION ALL\n  SELECT 'Hospital'  AS facility_type, name, needs_repair\n  FROM hospitals\n  WHERE country = 'Colombia'\n) AS combined\nGROUP BY facility_type;", "latency_sec": 7.648763179779053, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1038, "prompt_eval_sec": null, "tokens_completion": 1155, "completion_eval_sec": null, "tokens_total": 2193, "tokens_per_sec": 286.71302123689867, "retrieval_latency_sec": 0.1145780086517334, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates counts and sums for schools/hospitals separately, while the Generated SQL aggregates names of facilities needing repair. The output structures differ: the first returns summary statistics (count, sum) and the second returns a list of names. The Generated SQL also uses LISTAGG which is not present in the Reference SQL."}
{"example_id": 907, "sql_complexity": "set operations", "prompt": "What is the total quantity of items with type 'E' or type 'F' in warehouse O and warehouse P?", "context": "CREATE TABLE warehouse_o(item_id INT, item_type VARCHAR(10), quantity INT);CREATE TABLE warehouse_p(item_id INT, item_type VARCHAR(10), quantity INT);INSERT INTO warehouse_o(item_id, item_type, quantity) VALUES (1, 'E', 200), (2, 'F', 300), (3, 'E', 50), (4, 'F', 400);INSERT INTO warehouse_p(item_id, item_type, quantity) VALUES (1, 'E', 150), (2, 'F', 250), (3, 'E', 40), (4, 'F', 350);", "reference_sql": "SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F') UNION ALL SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F');", "generated_sql": "SELECT SUM(quantity) AS total_quantity\nFROM (\n  SELECT quantity\n  FROM warehouse_o\n  WHERE item_type IN ('E','F')\n  UNION ALL\n  SELECT quantity\n  FROM warehouse_p\n  WHERE item_type IN ('E','F')\n) AS combined;", "raw_model_output": "SELECT SUM(quantity) AS total_quantity\nFROM (\n  SELECT quantity\n  FROM warehouse_o\n  WHERE item_type IN ('E','F')\n  UNION ALL\n  SELECT quantity\n  FROM warehouse_p\n  WHERE item_type IN ('E','F')\n) AS combined;", "latency_sec": 4.383177042007446, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 988, "prompt_eval_sec": null, "tokens_completion": 459, "completion_eval_sec": null, "tokens_total": 1447, "tokens_per_sec": 330.1258393471805, "retrieval_latency_sec": 0.11020088195800781, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a list of individual quantities from both tables (using UNION ALL), while the Generated SQL aggregates all quantities into a single sum. The first produces multiple rows of data, the second produces one row with a total value. Their output structures and purposes differ fundamentally."}
{"example_id": 1400, "sql_complexity": "single join", "prompt": "What is the maximum co-ownership duration for properties in the neighborhood of 'Chinatown' in San Francisco?'", "context": "CREATE TABLE sf_neighborhoods (neighborhood_id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO sf_neighborhoods (neighborhood_id, name, city) VALUES (1, 'Chinatown', 'San Francisco'); CREATE TABLE co_ownership (co_ownership_id INT, property_id INT, co_owner_id INT, start_date DATE, end_date DATE); INSERT INTO co_ownership (co_ownership_id, property_id, co_owner_id, start_date, end_date) VALUES (1, 1, 2, '2010-01-01', '2020-01-01'), (2, 2, 3, '2015-01-01', '2022-01-01'); CREATE TABLE properties (property_id INT, city VARCHAR(255)); INSERT INTO properties (property_id, city) VALUES (1, 'San Francisco'), (2, 'San Francisco');", "reference_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) as max_duration FROM co_ownership JOIN properties ON co_ownership.property_id = properties.property_id WHERE properties.city = 'San Francisco' AND name = 'Chinatown';", "generated_sql": "SELECT \n  MAX(co.end_date - co.start_date) AS max_co_ownership_duration\nFROM co_ownership co\nJOIN properties p \n  ON co.property_id = p.property_id\nJOIN sf_neighborhoods n \n  ON p.city = n.city\nWHERE \n  n.name = 'Chinatown'\n  AND n.city = 'San Francisco';", "raw_model_output": "SELECT \n  MAX(co.end_date - co.start_date) AS max_co_ownership_duration\nFROM co_ownership co\nJOIN properties p \n  ON co.property_id = p.property_id\nJOIN sf_neighborhoods n \n  ON p.city = n.city\nWHERE \n  n.name = 'Chinatown'\n  AND n.city = 'San Francisco';", "latency_sec": 13.296558141708374, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 931, "prompt_eval_sec": null, "tokens_completion": 1756, "completion_eval_sec": null, "tokens_total": 2687, "tokens_per_sec": 202.08237134476724, "retrieval_latency_sec": 0.10928010940551758, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'name' column in the WHERE clause that does not exist in the joined tables (properties). The Generated SQL correctly joins with sf_neighborhoods to access the 'name' column. Additionally, the Reference SQL lacks the necessary join to sf_neighborhoods, making it invalid and semantically different from the Generated SQL."}
{"example_id": 5248, "sql_complexity": "window functions", "prompt": "Find the top 5 games by rating", "context": "CREATE TABLE games (game_id INT PRIMARY KEY, name VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2));", "reference_sql": "SELECT * FROM (SELECT name, rating, ROW_NUMBER() OVER (ORDER BY rating DESC) as rn FROM games) t WHERE rn <= 5;", "generated_sql": "SELECT game_id, name, genre, rating\nFROM games\nORDER BY rating DESC\nLIMIT 5;", "raw_model_output": "SELECT game_id, name, genre, rating\nFROM games\nORDER BY rating DESC\nLIMIT 5;", "latency_sec": 3.198051691055298, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 822, "prompt_eval_sec": null, "tokens_completion": 361, "completion_eval_sec": null, "tokens_total": 1183, "tokens_per_sec": 369.9127200816544, "retrieval_latency_sec": 0.10996723175048828, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns only 'name', 'rating', and a row number ('rn') column, while the Generated SQL returns all columns (game_id, name, genre, rating). Additionally, the Reference SQL uses a subquery with ROW_NUMBER() while the Generated SQL uses LIMIT, but the core difference lies in the selected columns and the presence of the 'rn' column in the first query."}
{"example_id": 778, "sql_complexity": "single join", "prompt": "What is the maximum property price in wheelchair-accessible neighborhoods in Singapore?", "context": "CREATE TABLE Singapore_Neighborhoods (Neighborhood_Name TEXT, Wheelchair_Accessibility BOOLEAN); INSERT INTO Singapore_Neighborhoods (Neighborhood_Name, Wheelchair_Accessibility) VALUES ('Orchard', true), ('Marina Bay', true), ('Chinatown', false), ('Little India', false), ('Bugis', true); CREATE TABLE Singapore_Properties (Neighborhood_Name TEXT, Property_Price INTEGER); INSERT INTO Singapore_Properties (Neighborhood_Name, Property_Price) VALUES ('Orchard', 2000000), ('Marina Bay', 3000000), ('Chinatown', 1500000), ('Little India', 1200000), ('Bugis', 1800000);", "reference_sql": "SELECT MAX(Singapore_Properties.Property_Price) FROM Singapore_Properties INNER JOIN Singapore_Neighborhoods ON Singapore_Properties.Neighborhood_Name = Singapore_Neighborhoods.Neighborhood_Name WHERE Singapore_Neighborhoods.Wheelchair_Accessibility = true;", "generated_sql": "SELECT MAX(sp.Property_Price)\nFROM Singapore_Properties sp\nJOIN Singapore_Neighborhoods sn\n  ON sp.Neighborhood_Name = sn.Neighborhood_Name\nWHERE sn.Wheelchair_Accessibility = TRUE;", "raw_model_output": "SELECT MAX(sp.Property_Price)\nFROM Singapore_Properties sp\nJOIN Singapore_Neighborhoods sn\n  ON sp.Neighborhood_Name = sn.Neighborhood_Name\nWHERE sn.Wheelchair_Accessibility = TRUE;", "latency_sec": 2.312035083770752, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 836, "prompt_eval_sec": null, "tokens_completion": 319, "completion_eval_sec": null, "tokens_total": 1155, "tokens_per_sec": 499.55989340623825, "retrieval_latency_sec": 0.10879993438720703, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an INNER JOIN between Singapore_Properties and Singapore_Neighborhoods on Neighborhood_Name, filter where Wheelchair_Accessibility is true, and select the maximum Property_Price. The generated query uses table aliases (sp/sn) but retains the same logical structure, conditions, and output as the reference query."}
{"example_id": 3859, "sql_complexity": "aggregation", "prompt": "What is the total number of mental health parity violations by month and year?", "context": "CREATE TABLE mental_health_parity_reports (report_id INT, violation_date DATE); INSERT INTO mental_health_parity_reports (report_id, violation_date) VALUES (1, '2022-01-01'), (2, '2022-02-15'), (3, '2022-03-05'), (4, '2022-04-20'), (5, '2021-06-12'), (6, '2021-07-28');", "reference_sql": "SELECT EXTRACT(MONTH FROM violation_date) AS month, EXTRACT(YEAR FROM violation_date) AS year, COUNT(*) FROM mental_health_parity_reports GROUP BY month, year;", "generated_sql": "SELECT \n  EXTRACT(YEAR FROM violation_date) AS violation_year, \n  EXTRACT(MONTH FROM violation_date) AS violation_month, \n  COUNT(*) AS total_violations\nFROM mental_health_parity_reports\nGROUP BY \n  EXTRACT(YEAR FROM violation_date), \n  EXTRACT(MONTH FROM violation_date)\nORDER BY \n  violation_year, \n  violation_month;", "raw_model_output": "SELECT \n  EXTRACT(YEAR FROM violation_date) AS violation_year, \n  EXTRACT(MONTH FROM violation_date) AS violation_month, \n  COUNT(*) AS total_violations\nFROM mental_health_parity_reports\nGROUP BY \n  EXTRACT(YEAR FROM violation_date), \n  EXTRACT(MONTH FROM violation_date)\nORDER BY \n  violation_year, \n  violation_month;", "latency_sec": 3.0572071075439453, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 631, "prompt_eval_sec": null, "tokens_completion": 357, "completion_eval_sec": null, "tokens_total": 988, "tokens_per_sec": 323.17077817921376, "retrieval_latency_sec": 0.10914206504821777, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries group by year and month extracted from violation_date, count the violations, and produce the same data. The differences are in column aliases (month/year vs violation_month/violation_year) and the generated query adds an ORDER BY. Since semantic equivalence focuses on the data returned (not column names or order), the queries are equivalent. The GROUP BY order (month/year vs year/month) does not affect grouping logic."}
{"example_id": 3551, "sql_complexity": "multiple_joins", "prompt": "List all artists who have performed in New York and Chicago, along with their highest-earning performance.", "context": "CREATE TABLE artist_events (artist_id INT, event_id INT, earnings DECIMAL(5,2)); CREATE TABLE artists (id INT, name VARCHAR(50)); CREATE TABLE events (id INT, city VARCHAR(20));", "reference_sql": "SELECT artists.name, MAX(artist_events.earnings) FROM artists INNER JOIN artist_events ON artists.id = artist_events.artist_id INNER JOIN events ON artist_events.event_id = events.id WHERE city IN ('New York', 'Chicago') GROUP BY artists.name;", "generated_sql": "SELECT ar.name,\n       MAX(ae.earnings) AS highest_earning\nFROM artists ar\nJOIN artist_events ae\n  ON ar.id = ae.artist_id\nWHERE ar.id IN (\n    SELECT ae2.artist_id\n    FROM artist_events ae2\n    JOIN events e\n      ON ae2.event_id = e.id\n    WHERE e.city IN ('New York','Chicago')\n    GROUP BY ae2.artist_id\n    HAVING COUNT(DISTINCT e.city) = 2\n)\nGROUP BY ar.id, ar.name;", "raw_model_output": "SELECT ar.name,\n       MAX(ae.earnings) AS highest_earning\nFROM artists ar\nJOIN artist_events ae\n  ON ar.id = ae.artist_id\nWHERE ar.id IN (\n    SELECT ae2.artist_id\n    FROM artist_events ae2\n    JOIN events e\n      ON ae2.event_id = e.id\n    WHERE e.city IN ('New York','Chicago')\n    GROUP BY ae2.artist_id\n    HAVING COUNT(DISTINCT e.city) = 2\n)\nGROUP BY ar.id, ar.name;", "latency_sec": 11.845730066299438, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 745, "prompt_eval_sec": null, "tokens_completion": 1474, "completion_eval_sec": null, "tokens_total": 2219, "tokens_per_sec": 187.3248831081297, "retrieval_latency_sec": 0.10824012756347656, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in filtering criteria. The reference query includes artists with events in either 'New York' or 'Chicago', while the generated query only includes artists with events in both cities (due to HAVING COUNT(DISTINCT e.city) = 2). This makes the generated query more restrictive, resulting in different output."}
{"example_id": 5168, "sql_complexity": "aggregation", "prompt": "Get the number of renewable energy projects in Australia for each project type.", "context": "CREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT);", "reference_sql": "SELECT project_type, COUNT(*) FROM renewable_projects WHERE project_location = 'Australia' GROUP BY project_type;", "generated_sql": "SELECT \n  project_type, \n  COUNT(*) AS project_count \nFROM renewable_projects \nWHERE project_location = 'Australia' \nGROUP BY project_type;", "raw_model_output": "SELECT \n  project_type, \n  COUNT(*) AS project_count \nFROM renewable_projects \nWHERE project_location = 'Australia' \nGROUP BY project_type;", "latency_sec": 1.7518069744110107, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 539, "prompt_eval_sec": null, "tokens_completion": 178, "completion_eval_sec": null, "tokens_total": 717, "tokens_per_sec": 409.29166881589134, "retrieval_latency_sec": 0.10834503173828125, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data: counts of projects by type in Australia. The generated query adds an alias (project_count) to the COUNT(*) column, but this does not affect the semantic result set. The WHERE clause, GROUP BY, and aggregate logic are identical."}
{"example_id": 4916, "sql_complexity": "aggregation", "prompt": "What is the maximum revenue generated from selling Yttrium in India in the past 3 years?", "context": "CREATE TABLE Yttrium_Sales (id INT PRIMARY KEY, year INT, country VARCHAR(20), quantity INT, price PER_KG); INSERT INTO Yttrium_Sales (id, year, country, quantity, price) VALUES (1, 2019, 'India', 120, 40), (2, 2020, 'India', 130, 45), (3, 2021, 'India', 140, 50), (4, 2019, 'China', 150, 35), (5, 2020, 'China', 160, 40), (6, 2021, 'China', 170, 45);", "reference_sql": "SELECT MAX(quantity * price) FROM Yttrium_Sales WHERE country = 'India' GROUP BY year ORDER BY year DESC LIMIT 3;", "generated_sql": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India'\n  AND year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2;", "raw_model_output": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India'\n  AND year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2;", "latency_sec": 3.0664639472961426, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 796, "prompt_eval_sec": null, "tokens_completion": 380, "completion_eval_sec": null, "tokens_total": 1176, "tokens_per_sec": 383.5036120470091, "retrieval_latency_sec": 0.1121828556060791, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL groups by year and returns the maximum quantity*price per year, ordered descending with a limit of 3. The Generated SQL lacks a GROUP BY clause, calculates a single maximum value for India's sales in the last 2 years, and doesn't preserve per-year grouping. The year filtering logic also differs (EXTRACT(YEAR FROM CURRENT_DATE) - 2 vs. no explicit year filter in Reference)."}
{"example_id": 812, "sql_complexity": "multiple_joins", "prompt": "What is the average salary of 'engineer' workers in each factory?", "context": "CREATE TABLE factories (factory_id INT, factory_name VARCHAR(20)); INSERT INTO factories VALUES (1, 'Factory X'), (2, 'Factory Y'), (3, 'Factory Z'); CREATE TABLE roles (role_id INT, role_name VARCHAR(20)); INSERT INTO roles VALUES (1, 'engineer'), (2, 'manager'), (3, 'assistant'); CREATE TABLE workers (worker_id INT, factory_id INT, role_id INT, salary DECIMAL(5,2)); INSERT INTO workers VALUES (1, 1, 1, 50000.00), (2, 1, 2, 70000.00), (3, 2, 1, 55000.00), (4, 2, 3, 40000.00), (5, 3, 1, 60000.00);", "reference_sql": "SELECT f.factory_name, AVG(salary) FROM workers w INNER JOIN factories f ON w.factory_id = f.factory_id INNER JOIN roles r ON w.role_id = r.role_id WHERE r.role_name = 'engineer' GROUP BY f.factory_name;", "generated_sql": "SELECT\n  f.factory_name,\n  AVG(w.salary) AS avg_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY\n  f.factory_name;", "raw_model_output": "SELECT\n  f.factory_name,\n  AVG(w.salary) AS avg_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY\n  f.factory_name;", "latency_sec": 2.531613826751709, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 801, "prompt_eval_sec": null, "tokens_completion": 336, "completion_eval_sec": null, "tokens_total": 1137, "tokens_per_sec": 449.1206312689777, "retrieval_latency_sec": 0.10801506042480469, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the average salary per factory for workers with the 'engineer' role. They use identical table aliases (w, f, r), same JOIN conditions, WHERE clause filtering on role_name = 'engineer', and group by factory_name. The only differences are minor formatting variations (alias naming and spacing) that do not affect semantic meaning."}
{"example_id": 5784, "sql_complexity": "set operations", "prompt": "List the number of users who have completed a workout of a specific type (e.g. Running) and have a membership status of 'Active'.", "context": "CREATE TABLE workouts (id INT, user_id INT, workout_type VARCHAR(20)); CREATE TABLE members (id INT, name VARCHAR(50), membership_status VARCHAR(20), state VARCHAR(20)); INSERT INTO workouts (id, user_id, workout_type) VALUES (1, 1, 'Running'), (2, 1, 'Cycling'), (3, 2, 'Running'), (4, 3, 'Cycling'), (5, 3, 'Swimming'), (6, 4, 'Running'), (7, 4, 'Swimming'); INSERT INTO members (id, name, membership_status, state) VALUES (1, 'John Doe', 'Active', 'Texas'), (2, 'Jane Doe', 'Inactive', 'California'), (3, 'Bob Smith', 'Active', 'Texas'), (4, 'Alice Johnson', 'Active', 'California');", "reference_sql": "SELECT COUNT(*) FROM (SELECT user_id FROM workouts WHERE workout_type = 'Running' INTERSECT SELECT id FROM members WHERE membership_status = 'Active') AS user_set;", "generated_sql": "SELECT COUNT(DISTINCT w.user_id)  \nFROM workouts w  \nJOIN members m  \n  ON w.user_id = m.id  \nWHERE w.workout_type = 'Running'  \n  AND m.membership_status = 'Active';", "raw_model_output": "SELECT COUNT(DISTINCT w.user_id)  \nFROM workouts w  \nJOIN members m  \n  ON w.user_id = m.id  \nWHERE w.workout_type = 'Running'  \n  AND m.membership_status = 'Active';", "latency_sec": 2.4641058444976807, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1172, "prompt_eval_sec": null, "tokens_completion": 194, "completion_eval_sec": null, "tokens_total": 1366, "tokens_per_sec": 554.3593036193075, "retrieval_latency_sec": 0.11194300651550293, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the distinct user_ids that have at least one 'Running' workout and are active members. The Reference SQL uses INTERSECT to find common user_ids between 'Running' workouts and active members, while the Generated SQL joins the tables with explicit conditions. Since INTERSECT inherently removes duplicates and the JOIN with COUNT(DISTINCT) achieves the same result, they produce identical counts."}
{"example_id": 3038, "sql_complexity": "subqueries", "prompt": "What is the total assets of clients who have invested in mutual funds but not in stocks?", "context": "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks'), (3, 'Mutual Funds');", "reference_sql": "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type = 'Mutual Funds' AND c.client_id NOT IN (SELECT client_id FROM investments WHERE investment_type = 'Stocks');", "generated_sql": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nWHERE c.client_id IN (\n    SELECT client_id\n    FROM investments\n    WHERE investment_type = 'Mutual Funds'\n)\nAND c.client_id NOT IN (\n    SELECT client_id\n    FROM investments\n    WHERE investment_type = 'Stocks'\n);", "raw_model_output": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nWHERE c.client_id IN (\n    SELECT client_id\n    FROM investments\n    WHERE investment_type = 'Mutual Funds'\n)\nAND c.client_id NOT IN (\n    SELECT client_id\n    FROM investments\n    WHERE investment_type = 'Stocks'\n);", "latency_sec": 4.498416900634766, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1033, "prompt_eval_sec": null, "tokens_completion": 404, "completion_eval_sec": null, "tokens_total": 1437, "tokens_per_sec": 319.44571429056003, "retrieval_latency_sec": 0.11199307441711426, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects individual client.total_assets values, while the Generated SQL aggregates them with SUM(). The Reference query returns rows of individual asset values, whereas the Generated query returns a single summed value. Additionally, the Generated SQL's structure with IN clauses may include clients with multiple 'Mutual Funds' investments, but the SUM would still differ from the original's row-based output."}
{"example_id": 1078, "sql_complexity": "basic SQL", "prompt": "What is the maximum and minimum temperature difference between any two Arctic research stations?", "context": "CREATE TABLE arctic_stations (id INT, name TEXT, location TEXT, temperature DECIMAL(5,2)); INSERT INTO arctic_stations (id, name, location, temperature) VALUES (1, 'Station A', 'Greenland', 2.3), (2, 'Station B', 'Canada', -5.2);", "reference_sql": "SELECT a.name as station1, b.name as station2, MAX(ABS(a.temperature - b.temperature)) as temp_diff FROM arctic_stations a, arctic_stations b ORDER BY temp_diff DESC LIMIT 1", "generated_sql": "SELECT \n  MAX(ABS(a.temperature - b.temperature)) AS max_temp_diff,\n  MIN(ABS(a.temperature - b.temperature)) AS min_temp_diff\nFROM arctic_stations a\nJOIN arctic_stations b\n  ON a.id < b.id;", "raw_model_output": "SELECT \n  MAX(ABS(a.temperature - b.temperature)) AS max_temp_diff,\n  MIN(ABS(a.temperature - b.temperature)) AS min_temp_diff\nFROM arctic_stations a\nJOIN arctic_stations b\n  ON a.id < b.id;", "latency_sec": 3.3885879516601562, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 744, "prompt_eval_sec": null, "tokens_completion": 393, "completion_eval_sec": null, "tokens_total": 1137, "tokens_per_sec": 335.5379928807675, "retrieval_latency_sec": 0.11131691932678223, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query returns the specific station pair with the maximum temperature difference, while the generated query calculates both max and min temperature differences without station names. The generated query also uses a more efficient a.id < b.id join condition, but the output structure and purpose differ significantly."}
{"example_id": 5015, "sql_complexity": "basic SQL", "prompt": "Calculate the average recycling rate", "context": "CREATE TABLE recycling_rates (id INT PRIMARY KEY, location VARCHAR(50), rate FLOAT);", "reference_sql": "SELECT AVG(rate) FROM recycling_rates;", "generated_sql": "SELECT AVG(rate) AS average_rate\nFROM recycling_rates;", "raw_model_output": "SELECT AVG(rate) AS average_rate\nFROM recycling_rates;", "latency_sec": 7.067684888839722, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 690, "prompt_eval_sec": null, "tokens_completion": 159, "completion_eval_sec": null, "tokens_total": 849, "tokens_per_sec": 120.12420097288428, "retrieval_latency_sec": 0.10997891426086426, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average of the 'rate' column. The generated query adds an alias 'average_rate' to the result, but this does not affect the computed value. The semantic result (the average value) remains the same."}
{"example_id": 1533, "sql_complexity": "subqueries", "prompt": "Which programs had the highest volunteer participation rate in the last quarter?", "context": "CREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), NumVolunteers INT); CREATE TABLE VolunteerEvents (EventID INT, ProgramID INT, EventDate DATE, NumVolunteers INT);", "reference_sql": "SELECT p.ProgramName, COUNT(v.EventID) / (SELECT COUNT(*) FROM VolunteerEvents WHERE EventDate >= DATEADD(quarter, -1, GETDATE())) * 100.0 AS VolunteerParticipationRate FROM Programs p INNER JOIN VolunteerEvents v ON p.ProgramID = v.ProgramID WHERE v.EventDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.ProgramName ORDER BY VolunteerParticipationRate DESC;", "generated_sql": "SELECT\n    p.ProgramID,\n    p.ProgramName,\n    SUM(e.NumVolunteers) / NULLIF(p.NumVolunteers, 0) AS participation_rate\n  FROM Programs AS p\n  JOIN VolunteerEvents AS e\n    ON p.ProgramID = e.ProgramID\n  WHERE e.EventDate >= CURRENT_DATE - INTERVAL '3' MONTH\n  GROUP BY p.ProgramID, p.ProgramName\n)\nSELECT ProgramID, ProgramName, participation_rate\nFROM participation\nWHERE participation_rate = (\n  SELECT MAX(participation_rate)\n  FROM participation\n);", "raw_model_output": "WITH participation AS (\n  SELECT\n    p.ProgramID,\n    p.ProgramName,\n    SUM(e.NumVolunteers) / NULLIF(p.NumVolunteers, 0) AS participation_rate\n  FROM Programs AS p\n  JOIN VolunteerEvents AS e\n    ON p.ProgramID = e.ProgramID\n  WHERE e.EventDate >= CURRENT_DATE - INTERVAL '3' MONTH\n  GROUP BY p.ProgramID, p.ProgramName\n)\nSELECT ProgramID, ProgramName, participation_rate\nFROM participation\nWHERE participation_rate = (\n  SELECT MAX(participation_rate)\n  FROM participation\n);", "latency_sec": 7.152360200881958, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 725, "prompt_eval_sec": null, "tokens_completion": 1036, "completion_eval_sec": null, "tokens_total": 1761, "tokens_per_sec": 246.21243205604367, "retrieval_latency_sec": 0.11029386520385742, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates a participation rate as (event count in last quarter / total events in last quarter) * 100, while the generated query computes (sum of volunteers in events / program's total volunteers). Additionally, the reference query returns all programs ordered by rate, whereas the generated query only returns the program with the maximum rate. The calculation logic, output columns, and result set structure differ significantly."}
{"example_id": 4021, "sql_complexity": "subqueries", "prompt": "What is the percentage of energy efficiency improvement, per sector, compared to 2015 levels?", "context": "CREATE TABLE energy_efficiency (id INT, sector VARCHAR(50), year INT, efficiency FLOAT); INSERT INTO energy_efficiency (id, sector, year, efficiency) VALUES (1, 'Industry', 2015, 100.0), (2, 'Industry', 2020, 105.0), (3, 'Residential', 2015, 100.0), (4, 'Residential', 2020, 103.0);", "reference_sql": "SELECT sector, (SUM(efficiency) / (SELECT SUM(efficiency) FROM energy_efficiency WHERE year = 2015 AND sector = e.sector) * 100.0) - 100.0 AS improvement FROM energy_efficiency e WHERE year = 2020 GROUP BY sector;", "generated_sql": "SELECT e2020.sector,\n       (e2020.efficiency - e2015.efficiency) / e2015.efficiency * 100 AS pct_improvement\nFROM energy_efficiency e2015\nJOIN energy_efficiency e2020\n  ON e2015.sector = e2020.sector\nWHERE e2015.year = 2015\n  AND e2020.year = 2020;", "raw_model_output": "SELECT e2020.sector,\n       (e2020.efficiency - e2015.efficiency) / e2015.efficiency * 100 AS pct_improvement\nFROM energy_efficiency e2015\nJOIN energy_efficiency e2020\n  ON e2015.sector = e2020.sector\nWHERE e2015.year = 2015\n  AND e2020.year = 2020;", "latency_sec": 7.1614110469818115, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 750, "prompt_eval_sec": null, "tokens_completion": 1132, "completion_eval_sec": null, "tokens_total": 1882, "tokens_per_sec": 262.7973715868707, "retrieval_latency_sec": 0.11347508430480957, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL calculates the percentage improvement of the total efficiency per sector between 2015 and 2020 using aggregated sums, while the Generated SQL computes individual row-level percentage changes by joining 2015 and 2020 data. This leads to different results when there are multiple entries per sector/year. For example, if a sector has multiple 2015 or 2020 entries, the Generated SQL would produce multiple rows with varying percentages, whereas the Reference SQL groups by sector and returns a single aggregated value."}
{"example_id": 1551, "sql_complexity": "single join", "prompt": "How many unique donors made donations in the healthcare industry in Q3 2022?", "context": "CREATE TABLE donations (id INT, donor_id INT, amount FLOAT, donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 7, 100, '2022-07-01'); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (2, 8, 200, '2022-09-15'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (7, 'Charlie Davis', 'Healthcare', '2022-07-01'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (8, 'Dana Wilson', 'Healthcare', '2022-09-15');", "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE industry = 'Healthcare' AND donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "generated_sql": "SELECT COUNT(DISTINCT d.donor_id) AS unique_donors\nFROM donations d\nJOIN donors dr ON d.donor_id = dr.id\nWHERE dr.industry = 'Healthcare'\n  AND d.donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "raw_model_output": "SELECT COUNT(DISTINCT d.donor_id) AS unique_donors\nFROM donations d\nJOIN donors dr ON d.donor_id = dr.id\nWHERE dr.industry = 'Healthcare'\n  AND d.donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "latency_sec": 4.906742095947266, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 895, "prompt_eval_sec": null, "tokens_completion": 595, "completion_eval_sec": null, "tokens_total": 1490, "tokens_per_sec": 303.6638100931917, "retrieval_latency_sec": 0.1133120059967041, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count distinct donor_ids from donations joined with donors where industry is 'Healthcare' and donation_date falls within the specified range. The differences (alias names, column qualification) do not affect the result since columns are unambiguous and the logic remains identical."}
{"example_id": 2592, "sql_complexity": "window functions", "prompt": "What is the third highest account balance for Shariah-compliant finance customers?", "context": "CREATE TABLE shariah_compliant_finance(customer_id INT, account_balance DECIMAL(10, 2)); INSERT INTO shariah_compliant_finance VALUES (1, 5000), (2, 7000), (3, 6000), (4, 8000), (5, 9000);", "reference_sql": "SELECT account_balance FROM (SELECT account_balance, RANK() OVER (ORDER BY account_balance DESC) as rn FROM shariah_compliant_finance) t WHERE rn = 3;", "generated_sql": "SELECT account_balance\nFROM (\n  SELECT\n    account_balance,\n    ROW_NUMBER() OVER (ORDER BY account_balance DESC) AS rn\n  FROM shariah_compliant_finance\n) t\nWHERE rn = 3;", "raw_model_output": "SELECT account_balance\nFROM (\n  SELECT\n    account_balance,\n    ROW_NUMBER() OVER (ORDER BY account_balance DESC) AS rn\n  FROM shariah_compliant_finance\n) t\nWHERE rn = 3;", "latency_sec": 3.706007957458496, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 827, "prompt_eval_sec": null, "tokens_completion": 450, "completion_eval_sec": null, "tokens_total": 1277, "tokens_per_sec": 344.5756227883926, "retrieval_latency_sec": 0.1047830581665039, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their use of RANK() vs. ROW_NUMBER(). RANK() assigns the same rank to ties and skips subsequent ranks, while ROW_NUMBER() assigns unique ranks without skipping. In the given data, all account_balances are unique, so both would return the 3rd highest value (7000). However, semantically, they are not equivalent because their behavior diverges when there are duplicate account_balance values."}
{"example_id": 3795, "sql_complexity": "single join", "prompt": "What is the total quantity of unsold garments for each manufacturer based in 'Italy' or 'Spain'?", "context": "CREATE TABLE manufacturers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE garments (id INT PRIMARY KEY, manufacturer_id INT, quantity_manufactured INT, quantity_sold INT);", "reference_sql": "SELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) as total_unsold_quantity FROM manufacturers m JOIN garments g ON m.id = g.manufacturer_id WHERE m.country IN ('Italy', 'Spain') GROUP BY m.name;", "generated_sql": "SELECT m.name AS manufacturer_name,\n       SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold_quantity\nFROM manufacturers m\nJOIN garments g\n  ON g.manufacturer_id = m.id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "raw_model_output": "SELECT m.name AS manufacturer_name,\n       SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold_quantity\nFROM manufacturers m\nJOIN garments g\n  ON g.manufacturer_id = m.id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "latency_sec": 3.5879101753234863, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 896, "prompt_eval_sec": null, "tokens_completion": 206, "completion_eval_sec": null, "tokens_total": 1102, "tokens_per_sec": 307.1425833286486, "retrieval_latency_sec": 0.11014199256896973, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. Both perform the same operations: joining manufacturers with garments on manufacturer_id, filtering by country in ('Italy', 'Spain'), grouping by manufacturer name, and calculating the sum of (quantity_manufactured - quantity_sold). The only differences are syntax variations (column alias naming and JOIN condition order) which do not affect the result."}
{"example_id": 4138, "sql_complexity": "window functions", "prompt": "How many lifelong learning courses has a student with ID '2' completed, in chronological order?", "context": "CREATE TABLE lifelong_learning (student_id INT, course_id INT, completion_date DATE); INSERT INTO lifelong_learning VALUES (2, 1001, '2015-01-01'), (2, 1002, '2016-01-01');", "reference_sql": "SELECT student_id, course_id, COUNT(course_id) OVER (PARTITION BY student_id ORDER BY completion_date) as completed_courses FROM lifelong_learning WHERE student_id = 2;", "generated_sql": "SELECT \n  student_id, \n  course_id, \n  COUNT(course_id) OVER (\n    PARTITION BY student_id \n    ORDER BY completion_date\n  ) AS completed_courses \nFROM lifelong_learning \nWHERE student_id = 2 \nORDER BY completion_date;", "raw_model_output": "SELECT \n  student_id, \n  course_id, \n  COUNT(course_id) OVER (\n    PARTITION BY student_id \n    ORDER BY completion_date\n  ) AS completed_courses \nFROM lifelong_learning \nWHERE student_id = 2 \nORDER BY completion_date;", "latency_sec": 3.555164098739624, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 925, "prompt_eval_sec": null, "tokens_completion": 393, "completion_eval_sec": null, "tokens_total": 1318, "tokens_per_sec": 370.72831616049933, "retrieval_latency_sec": 0.1026308536529541, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns and apply the same window function (COUNT(course_id) over student_id partition with completion_date ordering). The only difference is the added ORDER BY completion_date in the Generated SQL, which affects result set ordering but not the computed values. Since semantic equivalence focuses on data content (not row order), the queries produce identical results."}
{"example_id": 312, "sql_complexity": "aggregation", "prompt": "List the top 3 most represented ethnicities in movies produced in the USA.", "context": "CREATE TABLE movies (title VARCHAR(255), production_country VARCHAR(64), lead_actor_ethnicity VARCHAR(64));", "reference_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count FROM movies WHERE production_country = 'USA' GROUP BY lead_actor_ethnicity ORDER BY count DESC LIMIT 3;", "generated_sql": "SELECT \n  lead_actor_ethnicity, \n  COUNT(*) AS movie_count \nFROM movies \nWHERE production_country = 'USA' \nGROUP BY lead_actor_ethnicity \nORDER BY movie_count DESC \nLIMIT 3;", "raw_model_output": "SELECT \n  lead_actor_ethnicity, \n  COUNT(*) AS movie_count \nFROM movies \nWHERE production_country = 'USA' \nGROUP BY lead_actor_ethnicity \nORDER BY movie_count DESC \nLIMIT 3;", "latency_sec": 2.614107847213745, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 769, "prompt_eval_sec": null, "tokens_completion": 255, "completion_eval_sec": null, "tokens_total": 1024, "tokens_per_sec": 391.72064040564874, "retrieval_latency_sec": 0.10926389694213867, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The only difference is the column alias name ('count' vs 'movie_count'), which does not affect the result's content or structure. Both queries filter by production_country = 'USA', group by lead_actor_ethnicity, order by count descending, and limit to 3 results."}
{"example_id": 4298, "sql_complexity": "single join", "prompt": "How many users joined the gym in Q1 2023?", "context": "CREATE TABLE memberships (id INT, user_id INT, join_date DATE); INSERT INTO memberships (id, user_id, join_date) VALUES (1, 5, '2023-01-15'), (2, 6, '2023-02-03'), (3, 7, '2023-03-20'), (4, 8, '2022-12-31');", "reference_sql": "SELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "generated_sql": "SELECT COUNT(*) AS users_joined_q1_2023\nFROM memberships\nWHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "raw_model_output": "SELECT COUNT(*) AS users_joined_q1_2023\nFROM memberships\nWHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "latency_sec": 2.0028469562530518, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1123, "prompt_eval_sec": null, "tokens_completion": 184, "completion_eval_sec": null, "tokens_total": 1307, "tokens_per_sec": 652.5710793425525, "retrieval_latency_sec": 0.1142730712890625, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the number of memberships with join_date between '2023-01-01' and '2023-03-31'. The generated query adds an alias to the COUNT(*) result, which doesn't affect the semantic meaning or result set structure."}
{"example_id": 5211, "sql_complexity": "multiple_joins", "prompt": "What is the average transaction value in the last week, split by product category and customer demographics?", "context": "CREATE TABLE transactions (transaction_id INT, customer_id INT, product_id INT, category_id INT, transaction_date DATE, amount DECIMAL(10,2)); CREATE TABLE customers (customer_id INT, age INT, gender VARCHAR(10), location VARCHAR(255)); CREATE TABLE products (product_id INT, name VARCHAR(255), category_id INT);", "reference_sql": "SELECT c.age, c.gender, p.category_id, AVG(t.amount) as avg_transaction_value FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id INNER JOIN products p ON t.product_id = p.product_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY c.age, c.gender, p.category_id;", "generated_sql": "SELECT\n  t.category_id,\n  c.gender,\n  c.age,\n  AVG(t.amount) AS avg_transaction_value\nFROM transactions t\nJOIN customers c\n  ON t.customer_id = c.customer_id\nWHERE t.transaction_date >= CURRENT_DATE - INTERVAL '7' DAY\nGROUP BY\n  t.category_id,\n  c.gender,\n  c.age;", "raw_model_output": "SELECT\n  t.category_id,\n  c.gender,\n  c.age,\n  AVG(t.amount) AS avg_transaction_value\nFROM transactions t\nJOIN customers c\n  ON t.customer_id = c.customer_id\nWHERE t.transaction_date >= CURRENT_DATE - INTERVAL '7' DAY\nGROUP BY\n  t.category_id,\n  c.gender,\n  c.age;", "latency_sec": 8.162398099899292, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 835, "prompt_eval_sec": null, "tokens_completion": 989, "completion_eval_sec": null, "tokens_total": 1824, "tokens_per_sec": 223.46373917029416, "retrieval_latency_sec": 0.11053919792175293, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the generated SQL omits the join with the products table, which is required in the reference query to access p.category_id. Second, the generated SQL uses t.category_id (from transactions) instead of p.category_id (from products). These differences in table joins and column sources make the queries non-equivalent."}
{"example_id": 382, "sql_complexity": "window functions", "prompt": "What is the average annual precipitation in the past 10 years for each weather station?", "context": "CREATE TABLE WeatherStation (ID INT, Name VARCHAR(100), Location VARCHAR(100), Elevation FLOAT, AnnualPrecipitation FLOAT); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (1, 'Station A', 'Arctic Circle', 100, 450); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (2, 'Station B', 'North Pole', 200, 300);", "reference_sql": "SELECT Name, AVG(AnnualPrecipitation) OVER (PARTITION BY Name ORDER BY Name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AvgAnnualPrecipitation FROM WeatherStation WHERE YEAR(CurrentDate) - YEAR(DateInstalled) BETWEEN 1 AND 10;", "generated_sql": "SELECT \n  Name,\n  AnnualPrecipitation AS AverageAnnualPrecipitation\nFROM \n  WeatherStation;", "raw_model_output": "SELECT \n  Name,\n  AnnualPrecipitation AS AverageAnnualPrecipitation\nFROM \n  WeatherStation;", "latency_sec": 4.814824104309082, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1001, "prompt_eval_sec": null, "tokens_completion": 426, "completion_eval_sec": null, "tokens_total": 1427, "tokens_per_sec": 296.3763512612828, "retrieval_latency_sec": 0.10927104949951172, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL contains a window function with invalid column references (DateInstalled does not exist in the schema) and a WHERE clause that filters based on a non-existent column. The Generated SQL simply selects raw AnnualPrecipitation values without any aggregation or filtering. Additionally, the Reference SQL's window function would return the same value for all rows in the partition (since ROWS BETWEEN UNBOUNDED PRECEDING AND FOLLOWING is equivalent to the entire partition), but the Generated SQL returns individual values, not averages."}
{"example_id": 2190, "sql_complexity": "single join", "prompt": "What is the total number of humanitarian assistance events by each country in the last 3 years?", "context": "CREATE TABLE Humanitarian_Assistance (id INT, country VARCHAR(50), year INT, events INT); CREATE TABLE Countries (id INT, name VARCHAR(50), region VARCHAR(50));", "reference_sql": "SELECT co.name, SUM(ha.events) FROM Humanitarian_Assistance ha INNER JOIN Countries co ON ha.country = co.name WHERE ha.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) GROUP BY co.name;", "generated_sql": "SELECT country,\n       SUM(events) AS total_events\nFROM Humanitarian_Assistance\nWHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2\nGROUP BY country;", "raw_model_output": "SELECT country,\n       SUM(events) AS total_events\nFROM Humanitarian_Assistance\nWHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2\nGROUP BY country;", "latency_sec": 5.158987045288086, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 940, "prompt_eval_sec": null, "tokens_completion": 823, "completion_eval_sec": null, "tokens_total": 1763, "tokens_per_sec": 341.733752095815, "retrieval_latency_sec": 0.11074209213256836, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year range filters. The Reference SQL uses BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) (4 years: -3 to 0), while the Generated SQL uses >= EXTRACT(YEAR FROM CURRENT_DATE) - 2 (3 years: -2 to 0). Additionally, the Reference SQL joins with the Countries table and groups by co.name, whereas the Generated SQL groups by country directly. These differences in filtering and grouping logic make them non-equivalent."}
{"example_id": 1852, "sql_complexity": "set operations", "prompt": "Compare coal production and employment rates in China and India between 2018 and 2020.", "context": "CREATE TABLE china_coal_production (year INT, production FLOAT); INSERT INTO china_coal_production (year, production) VALUES (2018, 3500.0), (2019, 3600.0), (2020, 3700.0); CREATE TABLE china_employment (year INT, employment FLOAT); INSERT INTO china_employment (year, employment) VALUES (2018, 8000000.0), (2019, 8100000.0), (2020, 8200000.0); CREATE TABLE india_coal_production (year INT, production FLOAT); INSERT INTO india_coal_production (year, production) VALUES (2018, 700.0), (2019, 750.0), (2020, 800.0); CREATE TABLE india_employment (year INT, employment FLOAT); INSERT INTO india_employment (year, employment) VALUES (2018, 1000000.0), (2019, 1050000.0), (2020, 1100000.0);", "reference_sql": "SELECT 'China' AS country, china_coal_production.production, china_employment.employment FROM china_coal_production INNER JOIN china_employment ON china_coal_production.year = china_employment.year WHERE china_coal_production.year BETWEEN 2018 AND 2020 UNION ALL SELECT 'India', india_coal_production.production, india_employment.employment FROM india_coal_production INNER JOIN india_employment ON india_coal_production.year = india_employment.year WHERE india_coal_production.year BETWEEN 2018 AND 2020;", "generated_sql": "SELECT country, year, coal_production, employment_rate\nFROM (\n  SELECT\n    'China' AS country,\n    ccp.year,\n    ccp.production AS coal_production,\n    ce.employment AS employment_rate\n  FROM china_coal_production AS ccp\n  JOIN china_employment AS ce\n    ON ccp.year = ce.year\n  WHERE ccp.year BETWEEN 2018 AND 2020\n  UNION ALL\n  SELECT\n    'India' AS country,\n    icp.year,\n    icp.production AS coal_production,\n    ie.employment AS employment_rate\n  FROM india_coal_production AS icp\n  JOIN india_employment AS ie\n    ON icp.year = ie.year\n  WHERE icp.year BETWEEN 2018 AND 2020\n) AS combined\nORDER BY country, year;", "raw_model_output": "SELECT country, year, coal_production, employment_rate\nFROM (\n  SELECT\n    'China' AS country,\n    ccp.year,\n    ccp.production AS coal_production,\n    ce.employment AS employment_rate\n  FROM china_coal_production AS ccp\n  JOIN china_employment AS ce\n    ON ccp.year = ce.year\n  WHERE ccp.year BETWEEN 2018 AND 2020\n  UNION ALL\n  SELECT\n    'India' AS country,\n    icp.year,\n    icp.production AS coal_production,\n    ie.employment AS employment_rate\n  FROM india_coal_production AS icp\n  JOIN india_employment AS ie\n    ON icp.year = ie.year\n  WHERE icp.year BETWEEN 2018 AND 2020\n) AS combined\nORDER BY country, year;", "latency_sec": 5.421030759811401, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1118, "prompt_eval_sec": null, "tokens_completion": 643, "completion_eval_sec": null, "tokens_total": 1761, "tokens_per_sec": 324.8459708170454, "retrieval_latency_sec": 0.10958504676818848, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL returns three columns (country, production, employment), while the Generated SQL returns four columns (country, year, coal_production, employment_rate). Additionally, the Generated SQL includes an ORDER BY clause, which affects the result ordering. The structural differences in output columns and ordering make them non-equivalent."}
{"example_id": 2535, "sql_complexity": "subqueries", "prompt": "What is the maximum safety rating for vehicles in the vehiclesafety schema?", "context": "CREATE TABLE VehicleSafety (id INT, vehicle_id INT, safetyrating INT, PRIMARY KEY (id)); CREATE TABLE Vehicles (id INT, make VARCHAR(50), model VARCHAR(50), PRIMARY KEY (id)); CREATE TABLE LuxuryVehicles (id INT, vehicle_id INT, PRIMARY KEY (id), FOREIGN KEY (vehicle_id) REFERENCES Vehicles(id));", "reference_sql": "SELECT MAX(safetyrating) FROM vehicleSafety JOIN Vehicles ON vehicleSafety.vehicle_id = Vehicles.id WHERE EXISTS (SELECT * FROM LuxuryVehicles WHERE Vehicles.id = LuxuryVehicles.vehicle_id);", "generated_sql": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "raw_model_output": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "latency_sec": 2.336106061935425, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 726, "prompt_eval_sec": null, "tokens_completion": 228, "completion_eval_sec": null, "tokens_total": 954, "tokens_per_sec": 408.3718695587079, "retrieval_latency_sec": 0.10951995849609375, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters vehicles using an EXISTS clause to only include those present in LuxuryVehicles, while the Generated SQL retrieves the maximum safetyrating from all VehicleSafety records without any filtering. The Generated SQL lacks the critical WHERE condition that restricts results to luxury vehicles, leading to potentially different outputs."}
{"example_id": 2140, "sql_complexity": "aggregation", "prompt": "What was the total amount of minerals extracted in the 'north' region for each month in 2020?", "context": "CREATE TABLE extraction(id INT, location TEXT, month INT, year INT, minerals_extracted FLOAT);INSERT INTO extraction(id, location, month, year, minerals_extracted) VALUES (1, 'north', 1, 2020, 1500), (2, 'north', 2, 2020, 1800), (3, 'south', 1, 2020, 1200);", "reference_sql": "SELECT month, SUM(minerals_extracted) FROM extraction WHERE location = 'north' AND year = 2020 GROUP BY month;", "generated_sql": "SELECT \n  month, \n  SUM(minerals_extracted) AS total_minerals_extracted \nFROM extraction \nWHERE location = 'north' \n  AND year = 2020 \nGROUP BY month \nORDER BY month;", "raw_model_output": "SELECT \n  month, \n  SUM(minerals_extracted) AS total_minerals_extracted \nFROM extraction \nWHERE location = 'north' \n  AND year = 2020 \nGROUP BY month \nORDER BY month;", "latency_sec": 1.933669090270996, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 859, "prompt_eval_sec": null, "tokens_completion": 195, "completion_eval_sec": null, "tokens_total": 1054, "tokens_per_sec": 545.0777515672478, "retrieval_latency_sec": 0.11233901977539062, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of minerals_extracted per month for 'north' location in 2020. The generated query adds an ORDER BY clause, which affects result ordering but not the semantic content. The core aggregation and filtering logic are identical."}
{"example_id": 4779, "sql_complexity": "window functions", "prompt": "What is the average CO2 emission for the top 3 highest emitting countries since 2015?", "context": "CREATE TABLE emissions (country VARCHAR(50), year INT, co2_emission INT); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2015, 5373978000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2015, 10498600000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2015, 2633830000); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2016, 5518004000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2016, 10813000000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2016, 2799280000);", "reference_sql": "SELECT AVG(co2_emission) as avg_emission FROM (SELECT country, year, co2_emission, ROW_NUMBER() OVER (ORDER BY co2_emission DESC) as rn FROM emissions WHERE year >= 2015) t WHERE rn <= 3 GROUP BY country;", "generated_sql": "SELECT AVG(avg_emission) AS average_co2_emission\nFROM (\n  SELECT AVG(co2_emission) AS avg_emission\n  FROM emissions\n  WHERE year >= 2015\n  GROUP BY country\n  ORDER BY avg_emission DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top3;", "raw_model_output": "SELECT AVG(avg_emission) AS average_co2_emission\nFROM (\n  SELECT AVG(co2_emission) AS avg_emission\n  FROM emissions\n  WHERE year >= 2015\n  GROUP BY country\n  ORDER BY avg_emission DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top3;", "latency_sec": 10.146894216537476, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 945, "prompt_eval_sec": null, "tokens_completion": 726, "completion_eval_sec": null, "tokens_total": 1671, "tokens_per_sec": 164.680932346431, "retrieval_latency_sec": 0.11368107795715332, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average of the top 3 co2_emission values (globally ranked) grouped by country, while the Generated SQL first computes country averages, then takes the top 3 country averages and averages them. The Reference SQL returns per-country averages for entries in the global top 3, whereas the Generated SQL returns a single average of the top 3 country averages. The result structures and calculations differ fundamentally."}
{"example_id": 1015, "sql_complexity": "subqueries", "prompt": "List the top 3 most expensive eco-friendly products in Europe and their suppliers.", "context": "CREATE TABLE Suppliers (supplierID INT, supplierName VARCHAR(50), country VARCHAR(50)); CREATE TABLE Products (productID INT, productName VARCHAR(50), price DECIMAL(10,2), ecoFriendly BOOLEAN, supplierID INT);", "reference_sql": "SELECT P.productName, P.price, S.supplierName FROM (SELECT * FROM Products WHERE ecoFriendly = TRUE ORDER BY price DESC LIMIT 3) P JOIN Suppliers S ON P.supplierID = S.supplierID;", "generated_sql": "SELECT p.productName,\n       s.supplierName,\n       p.price\n  FROM Products p\n  JOIN Suppliers s\n    ON p.supplierID = s.supplierID\n WHERE p.ecoFriendly = TRUE\n   AND s.country = 'Europe'\n ORDER BY p.price DESC\n FETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT p.productName,\n       s.supplierName,\n       p.price\n  FROM Products p\n  JOIN Suppliers s\n    ON p.supplierID = s.supplierID\n WHERE p.ecoFriendly = TRUE\n   AND s.country = 'Europe'\n ORDER BY p.price DESC\n FETCH FIRST 3 ROWS ONLY;", "latency_sec": 6.938863754272461, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 819, "prompt_eval_sec": null, "tokens_completion": 598, "completion_eval_sec": null, "tokens_total": 1417, "tokens_per_sec": 204.21210880924298, "retrieval_latency_sec": 0.10751509666442871, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in filtering conditions. The Reference SQL only filters for ecoFriendly = TRUE, while the Generated SQL adds an additional condition WHERE s.country = 'Europe'. This makes the Generated SQL more restrictive, potentially returning fewer rows. Both use similar ordering and limit mechanisms (ORDER BY price DESC LIMIT 3 vs FETCH FIRST 3 ROWS ONLY), which are semantically equivalent. However, the extra country filter in the Generated SQL means they are not equivalent."}
{"example_id": 3715, "sql_complexity": "aggregation", "prompt": "What is the average age of engines still in service for each engine type?", "context": "CREATE TABLE Engine (id INT, aircraft_id INT, engine_type VARCHAR(255), hours_since_last_service INT, manufacture_year INT); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (1, 1, 'GE90-115B', 500, 2000); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (2, 2, 'CFM56-5B', 1000, 1995); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (3, 1, 'GE90-115B', 700, 2002);", "reference_sql": "SELECT engine_type, AVG(YEAR(CURRENT_DATE) - manufacture_year) as avg_age FROM Engine GROUP BY engine_type;", "generated_sql": "SELECT \n  engine_type, \n  AVG(EXTRACT(YEAR FROM CURRENT_DATE) - manufacture_year) AS avg_age\nFROM Engine\nGROUP BY engine_type;", "raw_model_output": "SELECT \n  engine_type, \n  AVG(EXTRACT(YEAR FROM CURRENT_DATE) - manufacture_year) AS avg_age\nFROM Engine\nGROUP BY engine_type;", "latency_sec": 2.8233530521392822, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 647, "prompt_eval_sec": null, "tokens_completion": 308, "completion_eval_sec": null, "tokens_total": 955, "tokens_per_sec": 338.2502940170331, "retrieval_latency_sec": 0.11214709281921387, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of engines by subtracting the manufacture_year from the current year. The Reference SQL uses YEAR(CURRENT_DATE) while the Generated SQL uses EXTRACT(YEAR FROM CURRENT_DATE). These functions are semantically equivalent for this purpose, as they both return the current year as an integer. The GROUP BY clause and overall structure are identical, ensuring the same aggregation result."}
{"example_id": 1957, "sql_complexity": "set operations", "prompt": "What is the average temperature recorded for the 'polar_bear' species in the 'Arctic_Animals' table compared to the 'penguin' species in the 'Antarctic_Animals' table?", "context": "CREATE TABLE Arctic_Animals (species TEXT, avg_temp FLOAT); CREATE TABLE Antarctic_Animals (species TEXT, avg_temp FLOAT);", "reference_sql": "SELECT AVG(Arctic_Animals.avg_temp) FROM Arctic_Animals WHERE Arctic_Animals.species = 'polar_bear' INTERSECT SELECT AVG(Antarctic_Animals.avg_temp) FROM Antarctic_Animals WHERE Antarctic_Animals.species = 'penguin'", "generated_sql": "SELECT\n  (SELECT AVG(avg_temp) \n     FROM Arctic_Animals \n    WHERE species = 'polar_bear') AS polar_bear_avg_temp,\n  (SELECT AVG(avg_temp) \n     FROM Antarctic_Animals \n    WHERE species = 'penguin') AS penguin_avg_temp;", "raw_model_output": "SELECT\n  (SELECT AVG(avg_temp) \n     FROM Arctic_Animals \n    WHERE species = 'polar_bear') AS polar_bear_avg_temp,\n  (SELECT AVG(avg_temp) \n     FROM Antarctic_Animals \n    WHERE species = 'penguin') AS penguin_avg_temp;", "latency_sec": 3.8480958938598633, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 619, "prompt_eval_sec": null, "tokens_completion": 399, "completion_eval_sec": null, "tokens_total": 1018, "tokens_per_sec": 264.5464219393158, "retrieval_latency_sec": 0.1118159294128418, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses INTERSECT to find common rows between two aggregated values, returning only when the averages are equal. The Generated SQL returns both averages as separate columns regardless of their values. The first query's result depends on equality between the two averages, while the second always returns both values in a single row."}
{"example_id": 1311, "sql_complexity": "basic SQL", "prompt": "What is the total number of veteran job applications in Texas in the last year?", "context": "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", "reference_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);", "generated_sql": "SELECT COUNT(*) \nFROM veteran_jobs \nWHERE state = 'Texas' \n  AND application_date >= CURRENT_DATE - INTERVAL '1' YEAR;", "raw_model_output": "SELECT COUNT(*) \nFROM veteran_jobs \nWHERE state = 'Texas' \n  AND application_date >= CURRENT_DATE - INTERVAL '1' YEAR;", "latency_sec": 3.115622043609619, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 727, "prompt_eval_sec": null, "tokens_completion": 369, "completion_eval_sec": null, "tokens_total": 1096, "tokens_per_sec": 351.77565977490127, "retrieval_latency_sec": 0.10636329650878906, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the same date condition by subtracting one year from the current date. DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) and CURRENT_DATE - INTERVAL '1' YEAR are functionally equivalent in most SQL implementations for this purpose, resulting in the same filtered count of Texas applications."}
{"example_id": 2997, "sql_complexity": "window functions", "prompt": "What is the earliest capture time for each satellite image in the 'satellite_images' table?", "context": "CREATE TABLE satellite_images (image_id INT, image_url TEXT, capture_time TIMESTAMP); INSERT INTO satellite_images (image_id, image_url, capture_time) VALUES (1, 'image1.jpg', '2022-01-01 10:00:00'), (2, 'image2.jpg', '2021-05-01 10:00:00');", "reference_sql": "SELECT image_id, MIN(capture_time) OVER (PARTITION BY image_id) FROM satellite_images;", "generated_sql": "SELECT \n  image_id,\n  MIN(capture_time) AS earliest_capture_time\nFROM satellite_images\nGROUP BY image_id;", "raw_model_output": "SELECT \n  image_id,\n  MIN(capture_time) AS earliest_capture_time\nFROM satellite_images\nGROUP BY image_id;", "latency_sec": 3.7149062156677246, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 660, "prompt_eval_sec": null, "tokens_completion": 365, "completion_eval_sec": null, "tokens_total": 1025, "tokens_per_sec": 275.91544456143544, "retrieval_latency_sec": 0.10757207870483398, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to return all rows with the minimum capture_time per image_id, while the Generated SQL groups by image_id, returning one row per image_id. If there are multiple rows with the same image_id, the Generated SQL would aggregate results, whereas the Reference SQL would retain all rows. Thus, they are not semantically equivalent in general cases."}
{"example_id": 3743, "sql_complexity": "aggregation", "prompt": "What is the maximum budget spent on peacekeeping operations by each department?", "context": "CREATE TABLE DepartmentPeacekeeping (id INT, department VARCHAR(50), budget INT);", "reference_sql": "SELECT department, MAX(budget) FROM DepartmentPeacekeeping GROUP BY department;", "generated_sql": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "raw_model_output": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "latency_sec": 2.73376202583313, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 532, "prompt_eval_sec": null, "tokens_completion": 231, "completion_eval_sec": null, "tokens_total": 763, "tokens_per_sec": 279.10256737415585, "retrieval_latency_sec": 0.10844683647155762, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data: the department and maximum budget per department. The generated query adds an explicit alias (max_budget) for the MAX(budget) column, but this does not affect the semantic result set. The GROUP BY clause and aggregate function remain identical."}
{"example_id": 4664, "sql_complexity": "multiple_joins", "prompt": "Calculate the total number of volunteer hours contributed by volunteers from 'California' in 'Health' projects in 2021.", "context": "CREATE TABLE volunteers (volunteer_id INT, name VARCHAR(255), state VARCHAR(255));", "reference_sql": "SELECT SUM(vh.hours) as total_hours FROM volunteer_projects vp JOIN volunteer_hours vh ON vp.project_id = vh.project_id JOIN volunteers vol ON vh.volunteer_id = vol.volunteer_id WHERE vp.cause = 'Health' AND vol.state = 'California' AND vh.volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';", "generated_sql": "SELECT SUM(vh.hours) AS total_hours\nFROM volunteer_hours vh\nJOIN volunteers v\n  ON vh.volunteer_id = v.volunteer_id\nWHERE v.state = 'California'\n  AND vh.program = 'Health'\n  AND EXTRACT(YEAR FROM vh.hours_date) = 2021;", "raw_model_output": "SELECT SUM(vh.hours) AS total_hours\nFROM volunteer_hours vh\nJOIN volunteers v\n  ON vh.volunteer_id = v.volunteer_id\nWHERE v.state = 'California'\n  AND vh.program = 'Health'\n  AND EXTRACT(YEAR FROM vh.hours_date) = 2021;", "latency_sec": 5.0985400676727295, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 859, "prompt_eval_sec": null, "tokens_completion": 785, "completion_eval_sec": null, "tokens_total": 1644, "tokens_per_sec": 322.44524475227223, "retrieval_latency_sec": 0.11367964744567871, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in table joins, filter conditions, and date handling. The Reference SQL joins three tables (volunteer_projects, volunteer_hours, volunteers) with conditions on vp.cause and volunteer_date, while the Generated SQL joins only two tables (volunteer_hours, volunteers) with conditions on vh.program and EXTRACT(YEAR FROM hours_date). The column names (cause vs program) and date logic (date range vs year extraction) also differ, leading to non-equivalent results."}
{"example_id": 251, "sql_complexity": "set operations", "prompt": "Compare the number of economic diversification projects in two regions, one in Europe and one in Oceania, by showing the project type and the number of projects in each region.", "context": "CREATE TABLE economic_diversification (region VARCHAR(50), project_type VARCHAR(50), project_start_date DATE);", "reference_sql": "SELECT 'Europe' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Europe' UNION ALL SELECT 'Oceania' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Oceania';", "generated_sql": "SELECT\n  region,\n  project_type,\n  COUNT(*) AS project_count\nFROM economic_diversification\nWHERE region IN ('Europe', 'Oceania')\nGROUP BY\n  region,\n  project_type;", "raw_model_output": "SELECT\n  region,\n  project_type,\n  COUNT(*) AS project_count\nFROM economic_diversification\nWHERE region IN ('Europe', 'Oceania')\nGROUP BY\n  region,\n  project_type;", "latency_sec": 3.28134822845459, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 699, "prompt_eval_sec": null, "tokens_completion": 318, "completion_eval_sec": null, "tokens_total": 1017, "tokens_per_sec": 309.93357888107306, "retrieval_latency_sec": 0.1108999252319336, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result by grouping project counts by region and project_type. The reference query achieves this with two separate SELECTs joined by UNION ALL, while the generated query uses a single GROUP BY clause. Both filter to only include 'Europe' and 'Oceania' regions, and the grouping logic is identical."}
{"example_id": 610, "sql_complexity": "subqueries", "prompt": "What is the percentage of community development projects completed in 'Caribbean' in 2020?", "context": "CREATE TABLE community_projects (project_id INT, project_name TEXT, location TEXT, completion_year INT); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (1, 'Community Center', 'Southern Region, Caribbean', 2020); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (2, 'Park Renovation', 'Northern Region, Caribbean', 2019); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (3, 'Library Construction', 'Caribbean', 2020);", "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects WHERE location = 'Caribbean')) FROM community_projects WHERE completion_year = 2020 AND location = 'Caribbean';", "generated_sql": "SELECT \n  COUNT(*) * 100.0 / (\n    SELECT COUNT(*) \n    FROM community_projects \n    WHERE location = 'Caribbean'\n  ) AS percentage\nFROM community_projects\nWHERE location = 'Caribbean'\n  AND completion_year = 2020;", "raw_model_output": "SELECT \n  COUNT(*) * 100.0 / (\n    SELECT COUNT(*) \n    FROM community_projects \n    WHERE location = 'Caribbean'\n  ) AS percentage\nFROM community_projects\nWHERE location = 'Caribbean'\n  AND completion_year = 2020;", "latency_sec": 4.0707409381866455, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 920, "prompt_eval_sec": null, "tokens_completion": 394, "completion_eval_sec": null, "tokens_total": 1314, "tokens_per_sec": 322.79135910459956, "retrieval_latency_sec": 0.11584591865539551, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of community projects in the 'Caribbean' location completed in 2020 relative to all Caribbean projects. The Reference SQL and Generated SQL use identical logic: counting projects with location='Caribbean' and completion_year=2020 (numerator) divided by total projects with location='Caribbean' (denominator). The Generated SQL adds an explicit alias ('percentage') which does not affect semantic equivalence."}
{"example_id": 421, "sql_complexity": "set operations", "prompt": "What is the combined landfill capacity for 'City A' and 'City B'?", "context": "CREATE TABLE landfill_capacity (city VARCHAR(255), capacity INT); INSERT INTO landfill_capacity (city, capacity) VALUES ('City A', 500000), ('City B', 600000);", "reference_sql": "SELECT SUM(capacity) FROM (SELECT capacity FROM landfill_capacity WHERE city = 'City A' UNION ALL SELECT capacity FROM landfill_capacity WHERE city = 'City B') AS combined_capacity;", "generated_sql": "SELECT SUM(capacity) AS combined_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "raw_model_output": "SELECT SUM(capacity) AS combined_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "latency_sec": 1.4849748611450195, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 711, "prompt_eval_sec": null, "tokens_completion": 107, "completion_eval_sec": null, "tokens_total": 818, "tokens_per_sec": 550.8510759362382, "retrieval_latency_sec": 0.11208510398864746, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of capacities for 'City A' and 'City B'. The reference query uses a subquery with UNION ALL to combine the capacities before summing, while the generated query directly filters and sums the capacities. Since the final result is the same (summing the same values), they are semantically equivalent."}
{"example_id": 880, "sql_complexity": "aggregation", "prompt": "Show veteran employment statistics for each state in the 'veteran_employment' table", "context": "CREATE TABLE veteran_employment (employee_id INT, state VARCHAR(2), job_title VARCHAR(50), employment_date DATE);", "reference_sql": "SELECT state, COUNT(*) as veteran_employees FROM veteran_employment WHERE state IN ('CA', 'NY', 'TX', 'FL', 'PA') GROUP BY state;", "generated_sql": "SELECT \n  state, \n  COUNT(*) AS veteran_count \nFROM veteran_employment \nGROUP BY \n  state;", "raw_model_output": "SELECT \n  state, \n  COUNT(*) AS veteran_count \nFROM veteran_employment \nGROUP BY \n  state;", "latency_sec": 2.8661081790924072, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 553, "prompt_eval_sec": null, "tokens_completion": 299, "completion_eval_sec": null, "tokens_total": 852, "tokens_per_sec": 297.2672162953031, "retrieval_latency_sec": 0.10782694816589355, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters results to only include records where state is in ('CA', 'NY', 'TX', 'FL', 'PA'), while the Generated SQL includes all states without filtering. This means the Generated SQL may return more states than the Reference SQL, making their results different."}
{"example_id": 454, "sql_complexity": "single join", "prompt": "Which excavation sites have more than 10 artifacts?", "context": "CREATE TABLE ExcavationSite (SiteID INT, SiteName VARCHAR(50)); INSERT INTO ExcavationSite (SiteID, SiteName) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE Artifact (ArtifactID INT, SiteID INT, ObjectType VARCHAR(50)); INSERT INTO Artifact (ArtifactID, SiteID, ObjectType) VALUES (1, 1, 'Pottery'), (2, 1, 'Tool'), (3, 2, 'Statue'), (4, 2, 'Bead'), (5, 3, 'Bead'), (6, 3, 'Bead'), (7, 3, 'Bead'), (8, 3, 'Bead'), (9, 3, 'Bead'), (10, 3, 'Bead'), (11, 3, 'Bead');", "reference_sql": "SELECT e.SiteName FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName HAVING COUNT(a.ArtifactID) > 10;", "generated_sql": "SELECT e.SiteName\nFROM ExcavationSite e\nJOIN Artifact a ON e.SiteID = a.SiteID\nGROUP BY e.SiteName\nHAVING COUNT(a.ArtifactID) > 10;", "raw_model_output": "SELECT e.SiteName\nFROM ExcavationSite e\nJOIN Artifact a ON e.SiteID = a.SiteID\nGROUP BY e.SiteName\nHAVING COUNT(a.ArtifactID) > 10;", "latency_sec": 2.1486480236053467, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1045, "prompt_eval_sec": null, "tokens_completion": 252, "completion_eval_sec": null, "tokens_total": 1297, "tokens_per_sec": 603.635395723719, "retrieval_latency_sec": 0.11084890365600586, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure, logic, and syntax. They perform the same join, grouping, and filtering operations. The only differences are whitespace and formatting, which do not affect semantic equivalence."}
{"example_id": 1086, "sql_complexity": "aggregation", "prompt": "What is the total CO2 emission for each equipment type, excluding equipment that is older than 8 years?", "context": "CREATE TABLE EmissionData (EquipmentID INT, EquipmentType VARCHAR(50), CO2Emission INT, Age INT); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (1, 'Excavator', 50, 8); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (2, 'Haul Truck', 70, 7); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (3, 'Shovel', 30, 6); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (4, 'Drilling Rig', 40, 3);", "reference_sql": "SELECT EquipmentType, SUM(CO2Emission) as TotalCO2Emission FROM EmissionData WHERE Age <= 8 GROUP BY EquipmentType;", "generated_sql": "SELECT EquipmentType, \n       SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "raw_model_output": "SELECT EquipmentType, \n       SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "latency_sec": 2.1246960163116455, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 804, "prompt_eval_sec": null, "tokens_completion": 181, "completion_eval_sec": null, "tokens_total": 985, "tokens_per_sec": 463.5957296657926, "retrieval_latency_sec": 0.1086568832397461, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (EquipmentType and SUM(CO2Emission)), apply the same WHERE condition (Age <= 8), and group by the same column (EquipmentType). The Generated SQL is identical in logic to the Reference SQL, with only formatting differences (line breaks) that do not affect semantic equivalence."}
{"example_id": 3455, "sql_complexity": "basic SQL", "prompt": "What are the names of all innovation projects in the 'rural_infrastructure' table, excluding those with a budget over 50000?", "context": "CREATE TABLE rural_infrastructure (name VARCHAR(255), budget INT); INSERT INTO rural_infrastructure (name, budget) VALUES ('Dam Construction', 40000), ('Well Digging', 30000), ('Irrigation System', 70000);", "reference_sql": "SELECT name FROM rural_infrastructure WHERE budget <= 50000;", "generated_sql": "SELECT name\nFROM rural_infrastructure\nWHERE budget <= 50000;", "raw_model_output": "SELECT name\nFROM rural_infrastructure\nWHERE budget <= 50000;", "latency_sec": 2.7468223571777344, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 815, "prompt_eval_sec": null, "tokens_completion": 290, "completion_eval_sec": null, "tokens_total": 1105, "tokens_per_sec": 402.28302245775717, "retrieval_latency_sec": 0.10975909233093262, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the 'name' column from the 'rural_infrastructure' table where the 'budget' is less than or equal to 50000. The structure and logic are identical, with only formatting differences (line breaks) that do not affect semantic meaning."}
{"example_id": 3936, "sql_complexity": "window functions", "prompt": "What is the total investment per client for each investment type?", "context": "CREATE TABLE clients (client_id INT, name TEXT, investment_type TEXT, investment FLOAT); INSERT INTO clients (client_id, name, investment_type, investment) VALUES (1, 'John Doe', 'Stocks', 3000.00), (1, 'John Doe', 'Bonds', 2000.00), (2, 'Jane Smith', 'Stocks', 5000.00);", "reference_sql": "SELECT client_id, name, investment_type, SUM(investment) OVER (PARTITION BY client_id, investment_type ORDER BY client_id) as total_investment FROM clients;", "generated_sql": "SELECT \n  client_id, \n  name, \n  investment_type, \n  SUM(investment) AS total_investment \nFROM clients \nGROUP BY \n  client_id, \n  name, \n  investment_type;", "raw_model_output": "SELECT \n  client_id, \n  name, \n  investment_type, \n  SUM(investment) AS total_investment \nFROM clients \nGROUP BY \n  client_id, \n  name, \n  investment_type;", "latency_sec": 2.8190839290618896, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 744, "prompt_eval_sec": null, "tokens_completion": 386, "completion_eval_sec": null, "tokens_total": 1130, "tokens_per_sec": 400.83943168589224, "retrieval_latency_sec": 0.11057114601135254, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate a running sum per client_id/investment_type group, retaining all original rows. The Generated SQL aggregates rows using GROUP BY, collapsing duplicates into single rows. While they may produce identical results for the given sample data (where each client_id/investment_type combination is unique), they differ in general: the window function preserves row count while the aggregation reduces it. This makes them semantically non-equivalent."}
{"example_id": 1838, "sql_complexity": "window functions", "prompt": "What are the top 3 species with the most sightings across all arctic research stations?", "context": "CREATE TABLE research_station (id INT, name TEXT); INSERT INTO research_station (id, name) VALUES (1, 'Station A'); INSERT INTO research_station (id, name) VALUES (2, 'Station B'); CREATE TABLE species_observations (station_id INT, species_name TEXT, sightings INT); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 1', 10); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 2', 5); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 1', 8); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 3', 15);", "reference_sql": "SELECT species_name, SUM(sightings) as total_sightings, RANK() OVER (ORDER BY SUM(sightings) DESC) as rank FROM species_observations GROUP BY species_name HAVING rank <= 3;", "generated_sql": "SELECT\n  species_name,\n  SUM(sightings) AS total_sightings\nFROM\n  species_observations\nGROUP BY\n  species_name\nORDER BY\n  total_sightings DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT\n  species_name,\n  SUM(sightings) AS total_sightings\nFROM\n  species_observations\nGROUP BY\n  species_name\nORDER BY\n  total_sightings DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 4.071624040603638, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1102, "prompt_eval_sec": null, "tokens_completion": 454, "completion_eval_sec": null, "tokens_total": 1556, "tokens_per_sec": 382.15709124492633, "retrieval_latency_sec": 0.10766005516052246, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a HAVING clause with RANK(), which is invalid because window functions like RANK() cannot be used in HAVING. The Generated SQL correctly uses ORDER BY and FETCH FIRST 3 ROWS ONLY to get top 3 results. The Reference SQL would likely fail syntactically, making them non-equivalent."}
{"example_id": 3091, "sql_complexity": "single join", "prompt": "Find the number of hybrid vehicles sold in the US, Germany, and Japan.", "context": "CREATE TABLE vehicle_sales (sale_id INT, vehicle_id INT, country VARCHAR(20), quantity INT); CREATE TABLE vehicles (vehicle_id INT, model VARCHAR(20), manufacture VARCHAR(20), vehicle_type VARCHAR(20));", "reference_sql": "SELECT SUM(vs.quantity) FROM vehicle_sales vs JOIN vehicles v ON vs.vehicle_id = v.vehicle_id WHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "generated_sql": "SELECT vs.country, SUM(vs.quantity) AS total_hybrid_sold\nFROM vehicle_sales AS vs\nJOIN vehicles AS v\n  ON vs.vehicle_id = v.vehicle_id\nWHERE v.vehicle_type = 'hybrid'\n  AND vs.country IN ('US', 'Germany', 'Japan')\nGROUP BY vs.country;", "raw_model_output": "SELECT vs.country, SUM(vs.quantity) AS total_hybrid_sold\nFROM vehicle_sales AS vs\nJOIN vehicles AS v\n  ON vs.vehicle_id = v.vehicle_id\nWHERE v.vehicle_type = 'hybrid'\n  AND vs.country IN ('US', 'Germany', 'Japan')\nGROUP BY vs.country;", "latency_sec": 3.825629949569702, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 718, "prompt_eval_sec": null, "tokens_completion": 404, "completion_eval_sec": null, "tokens_total": 1122, "tokens_per_sec": 293.2850314302354, "retrieval_latency_sec": 0.11247396469116211, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns a single total sum of quantities for hybrid vehicles sold in the specified countries, while the generated query groups the sum by individual countries, producing separate rows for each. The output structure and number of rows differ, making them non-equivalent."}
{"example_id": 2399, "sql_complexity": "set operations", "prompt": "What is the average duration of criminal trials for Indigenous defendants compared to non-Indigenous defendants in Canada and New Zealand?", "context": "CREATE TABLE canada_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO canada_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 60), (2, 'Non-Indigenous', 45);CREATE TABLE nz_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO nz_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 70), (2, 'Non-Indigenous', 50);", "reference_sql": "SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Non-Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Non-Indigenous';", "generated_sql": "SELECT country,\n       defendant_type,\n       AVG(days_to_completion) AS avg_duration\nFROM (\n  SELECT 'Canada' AS country,\n         defendant_type,\n         days_to_completion\n  FROM canada_criminal_trials\n  UNION ALL\n  SELECT 'New Zealand' AS country,\n         defendant_type,\n         days_to_completion\n  FROM nz_criminal_trials\n) AS combined\nGROUP BY country, defendant_type;", "raw_model_output": "SELECT country,\n       defendant_type,\n       AVG(days_to_completion) AS avg_duration\nFROM (\n  SELECT 'Canada' AS country,\n         defendant_type,\n         days_to_completion\n  FROM canada_criminal_trials\n  UNION ALL\n  SELECT 'New Zealand' AS country,\n         defendant_type,\n         days_to_completion\n  FROM nz_criminal_trials\n) AS combined\nGROUP BY country, defendant_type;", "latency_sec": 3.487267017364502, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 880, "prompt_eval_sec": null, "tokens_completion": 422, "completion_eval_sec": null, "tokens_total": 1302, "tokens_per_sec": 373.3582755541286, "retrieval_latency_sec": 0.11173391342163086, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns four rows with only the average duration values, while the Generated SQL returns four rows with three columns (country, defendant_type, avg_duration). The structure and column definitions differ, so they are not semantically equivalent despite calculating the same averages."}
{"example_id": 2972, "sql_complexity": "set operations", "prompt": "How many indigenous communities are in the Arctic Research Station 13 and 14?", "context": "CREATE TABLE Arctic_Research_Station_13 (id INT, community TEXT); CREATE TABLE Arctic_Research_Station_14 (id INT, community TEXT);", "reference_sql": "SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13; SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14; SELECT COUNT(DISTINCT community) FROM (SELECT * FROM Arctic_Research_Station_13 UNION ALL SELECT * FROM Arctic_Research_Station_14) AS Arctic_Communities;", "generated_sql": "SELECT COUNT(DISTINCT community) AS total_communities\nFROM (\n  SELECT community FROM Arctic_Research_Station_13\n  UNION ALL\n  SELECT community FROM Arctic_Research_Station_14\n) AS combined;", "raw_model_output": "SELECT COUNT(DISTINCT community) AS total_communities\nFROM (\n  SELECT community FROM Arctic_Research_Station_13\n  UNION ALL\n  SELECT community FROM Arctic_Research_Station_14\n) AS combined;", "latency_sec": 5.25962495803833, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 660, "prompt_eval_sec": null, "tokens_completion": 706, "completion_eval_sec": null, "tokens_total": 1366, "tokens_per_sec": 259.71433531821134, "retrieval_latency_sec": 0.10700201988220215, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count distinct 'community' values from both tables. The Reference SQL's third query uses SELECT * with UNION ALL, but COUNT(DISTINCT community) is unaffected by additional columns. The Generated SQL explicitly selects only 'community', achieving the same result. The first two queries in the Reference are separate counts and not part of the comparison."}
{"example_id": 5576, "sql_complexity": "window functions", "prompt": "Who are the top 5 users with the most followers, and what is their location?", "context": "CREATE TABLE user_data (user_id INT, name VARCHAR(50), followers INT, location VARCHAR(50)); INSERT INTO user_data (user_id, name, followers, location) VALUES (1, 'Alice', 10000, 'New York'), (2, 'Bob', 15000, 'California'), (3, 'Charlie', 12000, 'Texas'), (4, 'David', 8000, 'Florida'), (5, 'Eve', 9000, 'Illinois');", "reference_sql": "SELECT name, location FROM (SELECT name, location, ROW_NUMBER() OVER (ORDER BY followers DESC) AS rank FROM user_data) AS user_ranks WHERE rank <= 5;", "generated_sql": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "raw_model_output": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "latency_sec": 2.556530237197876, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 880, "prompt_eval_sec": null, "tokens_completion": 229, "completion_eval_sec": null, "tokens_total": 1109, "tokens_per_sec": 433.7910750531691, "retrieval_latency_sec": 0.11344528198242188, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the top 5 users by followers. The Reference SQL uses ROW_NUMBER() to assign ranks and filters with WHERE rank <= 5, while the Generated SQL uses ORDER BY with LIMIT 5. Since all followers values are unique in the data, both approaches produce identical results. The subquery in the Reference SQL effectively mimics the behavior of ORDER BY and LIMIT in the Generated SQL."}
{"example_id": 1560, "sql_complexity": "basic SQL", "prompt": "What is the average media literacy score for users in the 'Young Adult' age group who have completed at least one disinformation detection course?", "context": "CREATE TABLE users (id INT, age VARCHAR(20), media_literacy_score INT, courses_completed INT);", "reference_sql": "SELECT AVG(media_literacy_score) FROM users WHERE age = 'Young Adult' AND courses_completed > 0;", "generated_sql": "SELECT AVG(media_literacy_score) \nFROM users \nWHERE age = 'Young Adult' \n  AND courses_completed > 0;", "raw_model_output": "SELECT AVG(media_literacy_score) \nFROM users \nWHERE age = 'Young Adult' \n  AND courses_completed > 0;", "latency_sec": 1.707535982131958, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 537, "prompt_eval_sec": null, "tokens_completion": 175, "completion_eval_sec": null, "tokens_total": 712, "tokens_per_sec": 416.97510767007475, "retrieval_latency_sec": 0.11310720443725586, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The generated SQL is merely reformatted with line breaks and indentation, but the WHERE clause conditions (age = 'Young Adult' AND courses_completed > 0) and the aggregation function (AVG(media_literacy_score)) remain exactly the same. Semantic equivalence is preserved."}
{"example_id": 1201, "sql_complexity": "basic SQL", "prompt": "What is the maximum energy efficiency rating of hydroelectric dams in Canada?", "context": "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "generated_sql": "SELECT MAX(energy_efficiency_rating) \nFROM hydro_dams \nWHERE country = 'Canada';", "raw_model_output": "SELECT MAX(energy_efficiency_rating) \nFROM hydro_dams \nWHERE country = 'Canada';", "latency_sec": 1.6854181289672852, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 614, "prompt_eval_sec": null, "tokens_completion": 103, "completion_eval_sec": null, "tokens_total": 717, "tokens_per_sec": 425.41372237364686, "retrieval_latency_sec": 0.10967302322387695, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the maximum energy_efficiency_rating from the hydro_dams table where country is 'Canada'. The structure and logic are identical, with only formatting differences (whitespace/indentation) that do not affect semantic meaning."}
{"example_id": 4243, "sql_complexity": "single join", "prompt": "How many orders were placed by new and returning customers in each month of the year 2021?'", "context": "CREATE TABLE customer (id INT, first_order_date DATE, last_order_date DATE);", "reference_sql": "INSERT INTO customer (id, first_order_date, last_order_date) SELECT customer_id, MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id; SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, CASE WHEN DATEDIFF(last_order_date, first_order_date) > 30 THEN 'returning' ELSE 'new' END AS customer_type, COUNT(DISTINCT id) AS num_orders FROM orders JOIN customer ON orders.customer_id = customer.id WHERE YEAR(order_date) = 2021 GROUP BY year, month, customer_type;", "generated_sql": "SELECT\n  EXTRACT(YEAR FROM date_m)    AS year,\n  EXTRACT(MONTH FROM date_m)   AS month,\n  SUM(new_count)               AS new_customers,\n  SUM(return_count)            AS returning_customers\nFROM (\n  -- count a customer as \u201cnew\u201d in the month of their first_order_date\n  SELECT\n    first_order_date AS date_m,\n    1                AS new_count,\n    0                AS return_count\n  FROM customer\n  WHERE first_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n\n  UNION ALL\n\n  -- count a customer as \u201creturning\u201d in the month of their last_order_date,\n  -- but only if they had at least one prior order\n  SELECT\n    last_order_date  AS date_m,\n    0                AS new_count,\n    CASE WHEN last_order_date > first_order_date THEN 1 ELSE 0 END AS return_count\n  FROM customer\n  WHERE last_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n) AS combined\nGROUP BY\n  EXTRACT(YEAR FROM date_m),\n  EXTRACT(MONTH FROM date_m)\nORDER BY\n  year,\n  month;", "raw_model_output": "SELECT\n  EXTRACT(YEAR FROM date_m)    AS year,\n  EXTRACT(MONTH FROM date_m)   AS month,\n  SUM(new_count)               AS new_customers,\n  SUM(return_count)            AS returning_customers\nFROM (\n  -- count a customer as \u201cnew\u201d in the month of their first_order_date\n  SELECT\n    first_order_date AS date_m,\n    1                AS new_count,\n    0                AS return_count\n  FROM customer\n  WHERE first_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n\n  UNION ALL\n\n  -- count a customer as \u201creturning\u201d in the month of their last_order_date,\n  -- but only if they had at least one prior order\n  SELECT\n    last_order_date  AS date_m,\n    0                AS new_count,\n    CASE WHEN last_order_date > first_order_date THEN 1 ELSE 0 END AS return_count\n  FROM customer\n  WHERE last_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n) AS combined\nGROUP BY\n  EXTRACT(YEAR FROM date_m),\n  EXTRACT(MONTH FROM date_m)\nORDER BY\n  year,\n  month;", "latency_sec": 16.485527992248535, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 695, "prompt_eval_sec": null, "tokens_completion": 2719, "completion_eval_sec": null, "tokens_total": 3414, "tokens_per_sec": 207.09072840161724, "retrieval_latency_sec": 0.11348390579223633, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their approach to categorizing customers. The Reference SQL classifies each order as 'new' or 'returning' based on the customer's entire first/last order date difference, while the Generated SQL counts customers once per month of their first/last order dates. The Reference SQL aggregates orders (with COUNT(DISTINCT id)), whereas the Generated SQL aggregates customer events (summing 1s/0s). The logic for 'returning' in the Generated SQL is tied to last_order_date month, not the DATEDIFF condition in the Reference SQL."}
{"example_id": 2321, "sql_complexity": "subqueries", "prompt": "What are the names and types of vessels used in research expeditions in the regions with the lowest ocean acidification levels?", "context": "CREATE TABLE ocean_acidification (id INT PRIMARY KEY, region VARCHAR(255), year INT, acidification_level INT); INSERT INTO ocean_acidification (id, region, year, acidification_level) VALUES (1, 'Arctic Ocean', 2018, 20), (2, 'Southern Ocean', 2019, 22); CREATE TABLE expedition_vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), region VARCHAR(255)); INSERT INTO expedition_vessels (id, name, type, region) VALUES (1, 'Sea Researcher', 'Research Vessel', 'Arctic Ocean');", "reference_sql": "SELECT v.name, v.type FROM expedition_vessels v INNER JOIN ocean_acidification oa ON v.region = oa.region WHERE oa.acidification_level = (SELECT MIN(acidification_level) FROM ocean_acidification);", "generated_sql": "SELECT ev.name, ev.type\nFROM expedition_vessels ev\nWHERE ev.region IN (\n  SELECT oa.region\n  FROM ocean_acidification oa\n  WHERE oa.acidification_level = (\n    SELECT MIN(acidification_level) FROM ocean_acidification\n  )\n);", "raw_model_output": "SELECT ev.name, ev.type\nFROM expedition_vessels ev\nWHERE ev.region IN (\n  SELECT oa.region\n  FROM ocean_acidification oa\n  WHERE oa.acidification_level = (\n    SELECT MIN(acidification_level) FROM ocean_acidification\n  )\n);", "latency_sec": 3.499272108078003, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 854, "prompt_eval_sec": null, "tokens_completion": 333, "completion_eval_sec": null, "tokens_total": 1187, "tokens_per_sec": 339.21340305597647, "retrieval_latency_sec": 0.11046099662780762, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve expedition vessels located in regions where the ocean acidification level is the minimum. The Reference SQL uses an INNER JOIN with a subquery to filter by the minimum acidification level, while the Generated SQL uses a subquery with IN to achieve the same region filtering. Both approaches ensure only vessels in regions with the minimum acidification level are selected."}
{"example_id": 4349, "sql_complexity": "multiple_joins", "prompt": "Show the research grants awarded to professors in the Computer Science department.", "context": "CREATE TABLE departments (id INT, name VARCHAR(50)); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'), (2, 'Mathematics'); CREATE TABLE professors (id INT, name VARCHAR(50), department_id INT); INSERT INTO professors (id, name, department_id) VALUES (1, 'John Smith', 1), (2, 'Jane Doe', 2); CREATE TABLE grants (id INT, professor_id INT, year INT, amount FLOAT); INSERT INTO grants (id, professor_id, year, amount) VALUES (1, 1, 2021, 5000.0), (2, 2, 2020, 7000.0);", "reference_sql": "SELECT professors.name, grants.amount FROM professors INNER JOIN grants ON professors.id = grants.professor_id INNER JOIN departments ON professors.department_id = departments.id WHERE departments.name = 'Computer Science';", "generated_sql": "SELECT g.id,\n       g.professor_id,\n       p.name        AS professor_name,\n       g.year,\n       g.amount\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "raw_model_output": "SELECT g.id,\n       g.professor_id,\n       p.name        AS professor_name,\n       g.year,\n       g.amount\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "latency_sec": 2.886946678161621, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 838, "prompt_eval_sec": null, "tokens_completion": 272, "completion_eval_sec": null, "tokens_total": 1110, "tokens_per_sec": 384.4892627898611, "retrieval_latency_sec": 0.08701324462890625, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent because they select different columns. The Reference SQL returns only 'professors.name' and 'grants.amount', while the Generated SQL returns additional columns ('g.id', 'g.professor_id', 'g.year'). Although both filter for 'Computer Science' department professors, the result sets have different structures and data."}
{"example_id": 476, "sql_complexity": "basic SQL", "prompt": "Insert new food safety records for locations \"A123\", \"B456\", and \"C789\"", "context": "CREATE TABLE food_safety_records (id INT, location VARCHAR(255), inspection_date DATE, violation_count INT);", "reference_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', '2022-03-01', 0), ('B456', '2022-03-05', 2), ('C789', '2022-03-10', 1);", "generated_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count)\nVALUES\n  ('A123', CURRENT_DATE, 0),\n  ('B456', CURRENT_DATE, 0),\n  ('C789', CURRENT_DATE, 0);", "raw_model_output": "INSERT INTO food_safety_records (location, inspection_date, violation_count)\nVALUES\n  ('A123', CURRENT_DATE, 0),\n  ('B456', CURRENT_DATE, 0),\n  ('C789', CURRENT_DATE, 0);", "latency_sec": 3.8613739013671875, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 557, "prompt_eval_sec": null, "tokens_completion": 581, "completion_eval_sec": null, "tokens_total": 1138, "tokens_per_sec": 294.7137544999388, "retrieval_latency_sec": 0.10625123977661133, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses specific inspection dates (2022-03-01, 2022-03-05, 2022-03-10) and varying violation counts (0, 2, 1), while the Generated SQL uses CURRENT_DATE (which inserts the current date at execution time) and sets all violation_counts to 0. This results in different data being inserted."}
{"example_id": 2908, "sql_complexity": "single join", "prompt": "List all co-owners and the properties they own in New York, NY.", "context": "CREATE TABLE properties (id INT, city VARCHAR(50), price INT); CREATE TABLE co_owners (property_id INT, owner_name VARCHAR(50)); INSERT INTO properties (id, city, price) VALUES (1, 'New York', 800000), (2, 'Los Angeles', 600000); INSERT INTO co_owners (property_id, owner_name) VALUES (1, 'David'), (1, 'Ella'), (2, 'Frank');", "reference_sql": "SELECT properties.city, co_owners.owner_name FROM properties INNER JOIN co_owners ON properties.id = co_owners.property_id WHERE properties.city = 'New York';", "generated_sql": "SELECT co.owner_name,\n       p.id AS property_id,\n       p.price\nFROM properties p\nJOIN co_owners co\n  ON p.id = co.property_id\nWHERE p.city = 'New York';", "raw_model_output": "SELECT co.owner_name,\n       p.id AS property_id,\n       p.price\nFROM properties p\nJOIN co_owners co\n  ON p.id = co.property_id\nWHERE p.city = 'New York';", "latency_sec": 4.532871961593628, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 712, "prompt_eval_sec": null, "tokens_completion": 702, "completion_eval_sec": null, "tokens_total": 1414, "tokens_per_sec": 311.94351218843565, "retrieval_latency_sec": 0.10789704322814941, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries select different columns. The Reference SQL returns (city, owner_name), while the Generated SQL returns (owner_name, property_id, price). Although both filter properties in 'New York' and join the same tables, the result sets have different structures and data."}
{"example_id": 636, "sql_complexity": "set operations", "prompt": "Insert new data into the 'cosmetic_ingredients' table for a vegan eyeshadow product by brand 'Ara' with ingredients 'Mica', 'Iron Oxide', 'Titanium Dioxide' and 'Zinc Oxide'.", "context": "CREATE TABLE cosmetic_ingredients (ingredient_id INT, product_name TEXT, brand_name TEXT, ingredient_type TEXT);", "reference_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES (NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient'); INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type, ingredient_name) SELECT ingredient_id, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Mica' FROM cosmetic_ingredients WHERE ingredient_name = 'Mica' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Iron Oxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Titanium Dioxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Zinc Oxide';", "generated_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type)\nVALUES\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 1, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 2, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 3, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 4, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "raw_model_output": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type)\nVALUES\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 1, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 2, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 3, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n  ((SELECT MAX(ingredient_id) FROM cosmetic_ingredients) + 4, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "latency_sec": 11.624927997589111, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 713, "prompt_eval_sec": null, "tokens_completion": 1444, "completion_eval_sec": null, "tokens_total": 2157, "tokens_per_sec": 185.54953634528655, "retrieval_latency_sec": 0.11394286155700684, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL attempts to insert into a non-existent 'ingredient_name' column (schema mismatch) and includes a base insert with 'Ingredient' as the type. The Generated SQL inserts four rows with ingredient_type values like 'Mica', 'Iron Oxide', etc., but does not include the initial row from the Reference SQL. Additionally, the Reference SQL's structure is invalid due to the schema mismatch."}
{"example_id": 3404, "sql_complexity": "multiple_joins", "prompt": "What are the names of startups that have received funding from investors with over 3 million funds, and are involved in Genetic Research or Bioprocess Engineering?", "context": "CREATE TABLE public.investors ( id SERIAL PRIMARY KEY, name VARCHAR(100), type VARCHAR(50), funds INTEGER ); CREATE TABLE public.investments ( id SERIAL PRIMARY KEY, investor_id INTEGER, startup_id INTEGER ); CREATE TABLE public.startups ( id SERIAL PRIMARY KEY, name VARCHAR(100), industry VARCHAR(50), funding INTEGER );", "reference_sql": "SELECT startups.name FROM public.startups JOIN public.investments ON startups.id = investments.startup_id JOIN public.investors ON investments.investor_id = investors.id WHERE (startups.industry = 'Genetic Research' OR startups.industry = 'Bioprocess Engineering') AND investors.funds > 3000000;", "generated_sql": "SELECT DISTINCT s.name\nFROM public.startups AS s\nJOIN public.investments AS i\n  ON s.id = i.startup_id\nJOIN public.investors AS inv\n  ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "raw_model_output": "SELECT DISTINCT s.name\nFROM public.startups AS s\nJOIN public.investments AS i\n  ON s.id = i.startup_id\nJOIN public.investors AS inv\n  ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "latency_sec": 3.685434103012085, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 840, "prompt_eval_sec": null, "tokens_completion": 351, "completion_eval_sec": null, "tokens_total": 1191, "tokens_per_sec": 323.16410135419386, "retrieval_latency_sec": 0.11244916915893555, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their use of DISTINCT. The generated query uses SELECT DISTINCT which eliminates duplicates, while the reference query does not. If the underlying data contains multiple matching investments for the same startup, the reference query could return duplicate startup names. The IN clause is semantically equivalent to the OR conditions, but the DISTINCT clause in the generated query makes the result sets potentially different."}
{"example_id": 134, "sql_complexity": "subqueries", "prompt": "Who are the top 3 authors with the most citations in the Mathematics department in the past 5 years?", "context": "CREATE TABLE authors (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO authors (id, name, department) VALUES (1, 'Author Name', 'Mathematics'); CREATE TABLE publications (id INT, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), year INT, cites INT); INSERT INTO publications (id, title, author, journal, year, cites) VALUES (1, 'Publication Title', 'Author Name', 'Journal Name', 2021, 10);", "reference_sql": "SELECT author, SUM(cites) as total_cites FROM publications WHERE author IN (SELECT name FROM authors WHERE department = 'Mathematics') AND year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY author ORDER BY total_cites DESC LIMIT 3;", "generated_sql": "SELECT a.name, SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p\n  ON a.name = p.author\nWHERE a.department = 'Mathematics'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY a.name\nORDER BY total_citations DESC\nLIMIT 3;", "raw_model_output": "SELECT a.name, SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p\n  ON a.name = p.author\nWHERE a.department = 'Mathematics'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY a.name\nORDER BY total_citations DESC\nLIMIT 3;", "latency_sec": 3.557520866394043, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1006, "prompt_eval_sec": null, "tokens_completion": 539, "completion_eval_sec": null, "tokens_total": 1545, "tokens_per_sec": 434.2911982877659, "retrieval_latency_sec": 0.11082172393798828, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year filtering logic. The Reference SQL uses `BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE)` which explicitly includes both the lower and upper bounds (e.g., 2018-2023 if current year is 2023). The Generated SQL uses `p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5` which only enforces the lower bound but omits the upper bound. This means the Generated SQL could include publications from years beyond the current year (if such data exists), making the results potentially different."}
{"example_id": 592, "sql_complexity": "set operations", "prompt": "How many public healthcare facilities and public parks are there in total, in the 'StateData' schema's 'StateHealthcare' and 'StateParks' tables?", "context": "CREATE SCHEMA StateData; CREATE TABLE StateHealthcare (Name varchar(255), Type varchar(255)); INSERT INTO StateHealthcare (Name, Type) VALUES ('FacilityA', 'Public'), ('FacilityB', 'Public'), ('FacilityC', 'Private'); CREATE TABLE StateParks (Name varchar(255), Type varchar(255)); INSERT INTO StateParks (Name, Type) VALUES ('ParkA', 'Public'), ('ParkB', 'Public'), ('ParkC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public';", "generated_sql": "SELECT \n  (SELECT COUNT(*) \n   FROM StateData.StateHealthcare \n   WHERE Type = 'Public')\n  +\n  (SELECT COUNT(*) \n   FROM StateData.StateParks \n   WHERE Type = 'Public')\n  AS total_public;", "raw_model_output": "SELECT \n  (SELECT COUNT(*) \n   FROM StateData.StateHealthcare \n   WHERE Type = 'Public')\n  +\n  (SELECT COUNT(*) \n   FROM StateData.StateParks \n   WHERE Type = 'Public')\n  AS total_public;", "latency_sec": 3.5773167610168457, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 714, "prompt_eval_sec": null, "tokens_completion": 389, "completion_eval_sec": null, "tokens_total": 1103, "tokens_per_sec": 308.3316557313964, "retrieval_latency_sec": 0.11471223831176758, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts as individual rows via UNION ALL, while the Generated SQL returns a single row with the summed total. The output structure and values differ (e.g., [2, 2] vs 4 for the sample data)."}
{"example_id": 1989, "sql_complexity": "single join", "prompt": "What are the names and production dates of garments made from fabrics with a sustainability score over 70, produced after 2021-01-01?", "context": "CREATE TABLE fabrics (id INT, name VARCHAR(50), type VARCHAR(50), sustainability_score INT); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (1, 'Organic Linen', 'Natural', 80); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (2, 'Recycled Nylon', 'Synthetic', 72);", "reference_sql": "SELECT garments.name, garments.production_date FROM garments JOIN fabrics ON garments.fabric_id = fabrics.id WHERE fabrics.sustainability_score > 70 AND garments.production_date > '2021-01-01';", "generated_sql": "SELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70\n  AND g.production_date > DATE '2021-01-01';", "raw_model_output": "SELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70\n  AND g.production_date > DATE '2021-01-01';", "latency_sec": 2.0962510108947754, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 657, "prompt_eval_sec": null, "tokens_completion": 195, "completion_eval_sec": null, "tokens_total": 852, "tokens_per_sec": 406.43987555494493, "retrieval_latency_sec": 0.10888886451721191, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same inner join between garments and fabrics tables on fabric_id, apply identical filter conditions (sustainability_score > 70 and production_date > '2021-01-01'), and select the same columns. The differences are purely syntactic (table aliases and date literal formatting) and do not affect the result set."}
{"example_id": 1388, "sql_complexity": "aggregation", "prompt": "What was the total donation amount by each organization in the last 30 days?", "context": "CREATE TABLE organization_donations (id INT, organization TEXT, donation_date DATE, donation_amount DECIMAL(10,2)); INSERT INTO organization_donations (id, organization, donation_date, donation_amount) VALUES (1, 'Organization A', '2021-03-15', 100.00), (2, 'Organization B', '2021-03-25', 200.00);", "reference_sql": "SELECT organization, SUM(donation_amount) FROM organization_donations WHERE donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY organization;", "generated_sql": "SELECT \n  organization, \n  SUM(donation_amount) AS total_donation \nFROM \n  organization_donations \nWHERE \n  donation_date >= CURRENT_DATE - INTERVAL '30' DAY \nGROUP BY \n  organization;", "raw_model_output": "SELECT \n  organization, \n  SUM(donation_amount) AS total_donation \nFROM \n  organization_donations \nWHERE \n  donation_date >= CURRENT_DATE - INTERVAL '30' DAY \nGROUP BY \n  organization;", "latency_sec": 3.377121925354004, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 881, "prompt_eval_sec": null, "tokens_completion": 194, "completion_eval_sec": null, "tokens_total": 1075, "tokens_per_sec": 318.3183858211794, "retrieval_latency_sec": 0.11065912246704102, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of donations for each organization within the last 30 days. The date calculation syntax differs (DATE_SUB vs. CURRENT_DATE - INTERVAL), but both expressions evaluate to the same date range. The alias in the Generated SQL ('total_donation') does not affect semantic equivalence as column names are not part of the result data itself."}
{"example_id": 1628, "sql_complexity": "window functions", "prompt": "What is the ranking of national security measures for Russia based on the publication date?", "context": "CREATE TABLE national_security (id INT, title VARCHAR(255), description TEXT, agency VARCHAR(255), date DATE); INSERT INTO national_security (id, title, description, agency, date) VALUES (1, 'National Cyber Strategy', 'Outlines the approach to protecting the American people and the American way of life in the digital age', 'White House', '2018-09-20'); INSERT INTO national_security (id, title, description, agency, date) VALUES (2, 'Cybersecurity and Infrastructure Security Agency Act of 2018', 'Establishes the Cybersecurity and Infrastructure Security Agency within the Department of Homeland Security', 'Congress', '2018-11-16'); INSERT INTO national_security (id, title, description, agency, date) VALUES (3, 'Russian Military Doctrine', 'Outlines the country\u2019s stance on military security', 'Russian Government', '2014-12-26');", "reference_sql": "SELECT title, description, agency, date, ROW_NUMBER() OVER (PARTITION BY agency ORDER BY date DESC) as ranking FROM national_security WHERE agency = 'Russian Government';", "generated_sql": "SELECT title,\n       date,\n       RANK() OVER (ORDER BY date ASC) AS ranking\nFROM national_security\nWHERE agency = 'Russian Government';", "raw_model_output": "SELECT title,\n       date,\n       RANK() OVER (ORDER BY date ASC) AS ranking\nFROM national_security\nWHERE agency = 'Russian Government';", "latency_sec": 4.313546895980835, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1202, "prompt_eval_sec": null, "tokens_completion": 562, "completion_eval_sec": null, "tokens_total": 1764, "tokens_per_sec": 408.9442035842045, "retrieval_latency_sec": 0.10821866989135742, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses ROW_NUMBER() with PARTITION BY agency and ORDER BY date DESC, while the Generated SQL uses RANK() with ORDER BY date ASC. Additionally, the Reference SQL includes description and agency columns, whereas the Generated SQL only selects title and date. The ranking logic (ROW_NUMBER vs RANK) and ordering direction (DESC vs ASC) produce different results, and the selected columns differ."}
{"example_id": 2300, "sql_complexity": "aggregation", "prompt": "What is the minimum capacity for schools in each location ('community_development')?", "context": "CREATE TABLE community_development.schools (id INT, name VARCHAR(50), capacity INT, location VARCHAR(50));", "reference_sql": "SELECT location, MIN(capacity) FROM community_development.schools GROUP BY location;", "generated_sql": "SELECT \n  location, \n  MIN(capacity) AS min_capacity \nFROM community_development.schools \nGROUP BY location;", "raw_model_output": "SELECT \n  location, \n  MIN(capacity) AS min_capacity \nFROM community_development.schools \nGROUP BY location;", "latency_sec": 2.0949208736419678, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 453, "prompt_eval_sec": null, "tokens_completion": 173, "completion_eval_sec": null, "tokens_total": 626, "tokens_per_sec": 298.81796867664724, "retrieval_latency_sec": 0.10953402519226074, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (location and MIN(capacity)) and apply the same GROUP BY clause. The generated SQL adds an explicit alias (min_capacity) for the MIN(capacity) column, but this does not affect the semantic result set. The core data returned remains identical."}
{"example_id": 4976, "sql_complexity": "set operations", "prompt": "What is the most common hashtag used in posts made by users from Brazil?", "context": "CREATE TABLE posts (id INT, user_id INT, content TEXT, hashtags TEXT, post_date DATE); INSERT INTO posts (id, user_id, content, hashtags, post_date) VALUES (1, 1, 'Hello World', '#datascience', '2022-06-01'), (2, 1, 'I love data', '#ai', '2022-06-02'), (3, 2, 'Ol\u00e1 Mundo', '#brasil', '2022-06-03'); CREATE TABLE users (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO users (id, name, country) VALUES (1, 'Jo\u00e3o Silva', 'Brazil'), (2, 'Maria Souza', 'Brazil');", "reference_sql": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(hashtags, ' ', n.n), ' ', -1) hashtag, COUNT(*) count FROM posts JOIN users ON posts.user_id = users.id CROSS JOIN (SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) n WHERE users.country = 'Brazil' GROUP BY hashtag ORDER BY count DESC LIMIT 1;", "generated_sql": "SELECT p.hashtags AS hashtag,\n       COUNT(*) AS occurrences\nFROM posts p\nJOIN users u ON p.user_id = u.id\nWHERE u.country = 'Brazil'\nGROUP BY p.hashtags\nORDER BY occurrences DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "SELECT p.hashtags AS hashtag,\n       COUNT(*) AS occurrences\nFROM posts p\nJOIN users u ON p.user_id = u.id\nWHERE u.country = 'Brazil'\nGROUP BY p.hashtags\nORDER BY occurrences DESC\nFETCH FIRST 1 ROW ONLY;", "latency_sec": 2.585395097732544, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1261, "prompt_eval_sec": null, "tokens_completion": 264, "completion_eval_sec": null, "tokens_total": 1525, "tokens_per_sec": 589.8518185237773, "retrieval_latency_sec": 0.10607004165649414, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in how they handle multiple hashtags. The Reference SQL splits multi-value hashtags into individual entries using SUBSTRING_INDEX, while the Generated SQL treats the entire hashtags field as a single string. This means the Reference SQL would count individual hashtags in multi-tag posts, whereas the Generated SQL would count the entire hashtag string as one entry. The sample data only contains single-tag posts, but semantically they are not equivalent."}
{"example_id": 4637, "sql_complexity": "single join", "prompt": "What is the total value of transactions for each customer in the last 30 days?", "context": "CREATE TABLE transactions (id INT, customer_id INT, value DECIMAL(10, 2), transaction_date DATE); INSERT INTO transactions (id, customer_id, value, transaction_date) VALUES (1, 1, 100, '2022-01-01'), (2, 1, 200, '2022-01-15'), (3, 2, 50, '2022-01-05'), (4, 2, 150, '2022-01-30'), (5, 3, 300, '2022-01-20');", "reference_sql": "SELECT c.id, SUM(t.value) FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE t.transaction_date >= CURDATE() - INTERVAL 30 DAY GROUP BY c.id;", "generated_sql": "SELECT\n  customer_id,\n  SUM(value) AS total_value\nFROM\n  transactions\nWHERE\n  transaction_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY\n  customer_id;", "raw_model_output": "SELECT\n  customer_id,\n  SUM(value) AS total_value\nFROM\n  transactions\nWHERE\n  transaction_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY\n  customer_id;", "latency_sec": 2.187096118927002, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 948, "prompt_eval_sec": null, "tokens_completion": 253, "completion_eval_sec": null, "tokens_total": 1201, "tokens_per_sec": 549.1299580327615, "retrieval_latency_sec": 0.1099541187286377, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total transaction value per customer for the last 30 days. The Reference query uses an INNER JOIN with customers (though it's unnecessary since only transaction data is used) and groups by c.id. The Generated query directly groups by customer_id from transactions. Since customer_id in transactions corresponds to c.id in customers, and both filter transactions within the same date range, the results will be identical. The difference in column names (c.id vs customer_id) doesn't affect semantic equivalence as the data content remains the same."}
{"example_id": 4947, "sql_complexity": "aggregation", "prompt": "What is the total revenue for drugs approved between 2017 and 2019?", "context": "CREATE TABLE drug_sales_3 (drug_name TEXT, revenue FLOAT, year INT); INSERT INTO drug_sales_3 (drug_name, revenue, year) VALUES ('DrugG', 20000000, 2019), ('DrugG', 19000000, 2018), ('DrugH', 15000000, 2017), ('DrugH', 16000000, 2018);", "reference_sql": "SELECT drug_name, SUM(revenue) FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019 GROUP BY drug_name;", "generated_sql": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "raw_model_output": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "latency_sec": 2.8075180053710938, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 865, "prompt_eval_sec": null, "tokens_completion": 302, "completion_eval_sec": null, "tokens_total": 1167, "tokens_per_sec": 415.66964050360474, "retrieval_latency_sec": 0.10814690589904785, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query groups results by drug_name and calculates per-drug revenue sums, while the generated query calculates a single total revenue for all drugs combined. The generated query lacks a GROUP BY clause, so it returns a single aggregated value instead of per-drug totals."}
{"example_id": 4767, "sql_complexity": "window functions", "prompt": "List the top 2 AI algorithms with the highest explainability scores, by algorithm subtype, ordered by scores in descending order for the European region.", "context": "CREATE TABLE ai_algorithms (algorithm_id INT, algorithm_name VARCHAR(50), algorithm_subtype VARCHAR(50), region VARCHAR(50), explainability_score FLOAT); INSERT INTO ai_algorithms (algorithm_id, algorithm_name, algorithm_subtype, region, explainability_score) VALUES (1, 'AlgoA', 'Tree-based', 'Europe', 0.85), (2, 'AlgoB', 'Computer Vision', 'Europe', 0.92), (3, 'AlgoC', 'Tree-based', 'Europe', 0.78), (4, 'AlgoD', 'Transformer', 'Europe', 0.90), (5, 'AlgoE', 'Tree-based', 'Europe', 0.80);", "reference_sql": "SELECT algorithm_subtype, region, * FROM (SELECT algorithm_subtype, region, algorithm_id, algorithm_name, explainability_score, RANK() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rank FROM ai_algorithms WHERE region = 'Europe') ranked WHERE rank <= 2 ORDER BY algorithm_subtype, region, explainability_score DESC;", "generated_sql": "SELECT algorithm_name,\n       algorithm_subtype,\n       explainability_score\nFROM (\n  SELECT algorithm_name,\n         algorithm_subtype,\n         explainability_score,\n         ROW_NUMBER() OVER (\n           PARTITION BY algorithm_subtype\n           ORDER BY explainability_score DESC\n         ) AS rn\n  FROM ai_algorithms\n  WHERE region = 'Europe'\n) AS ranked\nWHERE rn <= 2\nORDER BY algorithm_subtype,\n         explainability_score DESC;", "raw_model_output": "SELECT algorithm_name,\n       algorithm_subtype,\n       explainability_score\nFROM (\n  SELECT algorithm_name,\n         algorithm_subtype,\n         explainability_score,\n         ROW_NUMBER() OVER (\n           PARTITION BY algorithm_subtype\n           ORDER BY explainability_score DESC\n         ) AS rn\n  FROM ai_algorithms\n  WHERE region = 'Europe'\n) AS ranked\nWHERE rn <= 2\nORDER BY algorithm_subtype,\n         explainability_score DESC;", "latency_sec": 3.8736319541931152, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 936, "prompt_eval_sec": null, "tokens_completion": 496, "completion_eval_sec": null, "tokens_total": 1432, "tokens_per_sec": 369.6789000436383, "retrieval_latency_sec": 0.11932897567749023, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects all columns (including algorithm_subtype, region, and *), while the Generated SQL only selects specific columns (algorithm_name, algorithm_subtype, explainability_score). Additionally, the Reference SQL uses RANK() while the Generated SQL uses ROW_NUMBER(), which could produce different results in case of ties. Although the data provided has unique explainability_scores, the column selection differences ensure the results are not identical."}
{"example_id": 4495, "sql_complexity": "basic SQL", "prompt": "Which countries are the top 3 sources of sustainable textiles?", "context": "CREATE TABLE Textile_Sources (Source_ID INT, Source_Country TEXT, Sustainable BOOLEAN, Quantity INT); INSERT INTO Textile_Sources (Source_ID, Source_Country, Sustainable, Quantity) VALUES (1, 'India', true, 1000), (2, 'Bangladesh', false, 800), (3, 'China', true, 1200), (4, 'Vietnam', false, 900), (5, 'Italy', true, 1100), (6, 'USA', false, 700);", "reference_sql": "SELECT Source_Country FROM Textile_Sources WHERE Sustainable = true ORDER BY Quantity DESC LIMIT 3;", "generated_sql": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nGROUP BY Source_Country\nORDER BY SUM(Quantity) DESC\nLIMIT 3;", "raw_model_output": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nGROUP BY Source_Country\nORDER BY SUM(Quantity) DESC\nLIMIT 3;", "latency_sec": 2.4189980030059814, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 754, "prompt_eval_sec": null, "tokens_completion": 244, "completion_eval_sec": null, "tokens_total": 998, "tokens_per_sec": 412.5675171123869, "retrieval_latency_sec": 0.11202001571655273, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects individual rows where Sustainable=true and orders by Quantity. The Generated SQL groups by Source_Country (which is unnecessary here since each country appears once) and orders by SUM(Quantity) instead of Quantity. While the results may appear similar with the given data, the Generated SQL's GROUP BY and SUM introduce semantic differences that could affect outcomes with duplicate countries or different data."}
{"example_id": 2513, "sql_complexity": "single join", "prompt": "What is the total number of concert ticket sales for artists who released their first album between 2015 and 2017?", "context": "CREATE TABLE ConcertTicketSales (id INT, year INT, artist_id INT); CREATE TABLE ArtistAlbums (id INT, artist_id INT, year INT);", "reference_sql": "SELECT COUNT(DISTINCT cts.artist_id) FROM ConcertTicketSales cts JOIN ArtistAlbums a ON cts.artist_id = a.artist_id WHERE a.year BETWEEN 2015 AND 2017;", "generated_sql": "SELECT COUNT(*) AS total_ticket_sales\nFROM ConcertTicketSales\nWHERE artist_id IN (\n  SELECT artist_id\n  FROM ArtistAlbums\n  GROUP BY artist_id\n  HAVING MIN(year) BETWEEN 2015 AND 2017\n);", "raw_model_output": "SELECT COUNT(*) AS total_ticket_sales\nFROM ConcertTicketSales\nWHERE artist_id IN (\n  SELECT artist_id\n  FROM ArtistAlbums\n  GROUP BY artist_id\n  HAVING MIN(year) BETWEEN 2015 AND 2017\n);", "latency_sec": 4.27847695350647, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 709, "prompt_eval_sec": null, "tokens_completion": 453, "completion_eval_sec": null, "tokens_total": 1162, "tokens_per_sec": 271.59197364559157, "retrieval_latency_sec": 0.10667300224304199, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query counts distinct artist_ids from ConcertTicketSales who have at least one matching album in ArtistAlbums between 2015-2017. The generated query counts all ticket sales where the artist_id has their earliest album in 2015-2017 (due to HAVING MIN(year) BETWEEN...). The subquery conditions differ: the first checks for any album in the range, while the second requires the minimum year to be in the range (making it more restrictive). Additionally, the reference query counts distinct artists while the generated query counts all ticket sales rows."}
{"example_id": 873, "sql_complexity": "subqueries", "prompt": "Identify attorneys who have never handled cases in the 'West' region but have in the 'North' or 'South'.", "context": "CREATE TABLE attorney_regions(attorney_id INT, region VARCHAR(20)); INSERT INTO attorney_regions(attorney_id, region) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'), (5, 'West'), (6, 'North'); CREATE TABLE handled_cases(attorney_id INT, case_id INT); INSERT INTO handled_cases(attorney_id, case_id) VALUES (1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (1, 107), (1, 108);", "reference_sql": "SELECT h.attorney_id FROM attorney_regions h LEFT JOIN handled_cases i ON h.attorney_id = i.attorney_id WHERE h.region IN ('North', 'South') AND h.region != 'West' AND i.attorney_id IS NOT NULL AND h.attorney_id NOT IN (SELECT attorney_id FROM attorney_regions WHERE region = 'West');", "generated_sql": "SELECT attorney_id\nFROM attorney_regions\nGROUP BY attorney_id\nHAVING SUM(CASE WHEN region = 'West' THEN 1 ELSE 0 END) = 0\n   AND SUM(CASE WHEN region IN ('North','South') THEN 1 ELSE 0 END) > 0;", "raw_model_output": "SELECT attorney_id\nFROM attorney_regions\nGROUP BY attorney_id\nHAVING SUM(CASE WHEN region = 'West' THEN 1 ELSE 0 END) = 0\n   AND SUM(CASE WHEN region IN ('North','South') THEN 1 ELSE 0 END) > 0;", "latency_sec": 6.879225015640259, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1032, "prompt_eval_sec": null, "tokens_completion": 1040, "completion_eval_sec": null, "tokens_total": 2072, "tokens_per_sec": 301.1967184223812, "retrieval_latency_sec": 0.10923409461975098, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a condition to ensure attorneys have at least one case (i.attorney_id IS NOT NULL) and excludes those with any 'West' region entries. The Generated SQL only checks region constraints without considering handled_cases. While the given data may overlap, the queries differ in semantics because the Generated SQL lacks the handled_cases filter, making them non-equivalent in general cases."}
{"example_id": 471, "sql_complexity": "set operations", "prompt": "Find the number of donations made by first-time donors in the last quarter.", "context": "CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationType TEXT, DonationAmount FLOAT); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationType, DonationAmount) VALUES (1, 1, '2021-01-01', 'Individual', 100), (2, 2, '2021-02-01', 'Corporate', 5000);", "reference_sql": "SELECT COUNT(*) FROM (SELECT DonationID FROM Donations WHERE DonationType = 'Individual' AND DonationDate >= DATEADD(quarter, -1, CURRENT_DATE) EXCEPT SELECT DonationID FROM PreviousDonations) AS FirstTimeDonors;", "generated_sql": "SELECT COUNT(*) AS num_donations\nFROM Donations d\nWHERE d.DonationDate >= CURRENT_DATE - INTERVAL '3' MONTH\n  AND d.DonationDate <= CURRENT_DATE\n  AND d.DonorID IN (\n    SELECT DonorID\n    FROM Donations\n    GROUP BY DonorID\n    HAVING MIN(DonationDate) >= CURRENT_DATE - INTERVAL '3' MONTH\n      AND MIN(DonationDate) <= CURRENT_DATE\n);", "raw_model_output": "SELECT COUNT(*) AS num_donations\nFROM Donations d\nWHERE d.DonationDate >= CURRENT_DATE - INTERVAL '3' MONTH\n  AND d.DonationDate <= CURRENT_DATE\n  AND d.DonorID IN (\n    SELECT DonorID\n    FROM Donations\n    GROUP BY DonorID\n    HAVING MIN(DonationDate) >= CURRENT_DATE - INTERVAL '3' MONTH\n      AND MIN(DonationDate) <= CURRENT_DATE\n);", "latency_sec": 9.126497983932495, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 925, "prompt_eval_sec": null, "tokens_completion": 1522, "completion_eval_sec": null, "tokens_total": 2447, "tokens_per_sec": 268.12036821878723, "retrieval_latency_sec": 0.11526083946228027, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the count of Individual donations in the last quarter excluding those in PreviousDonations (which is undefined in the schema). The Generated SQL counts donations where the donor's first donation was within the last 3 months. The logic and conditions differ: the first focuses on exclusion from an undefined table, while the second identifies first-time donors within a date range."}
{"example_id": 1301, "sql_complexity": "multiple_joins", "prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?", "context": "CREATE TABLE farmers (id INT, name VARCHAR(50), location VARCHAR(50), crops VARCHAR(50)); CREATE TABLE crops (id INT, name VARCHAR(50), yield INT); CREATE TABLE sales (id INT, farmer_id INT, crop_name VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO farmers VALUES (1, 'Jane Doe', 'Summerfield', 'Corn'); INSERT INTO crops VALUES (1, 'Corn', 100); INSERT INTO sales VALUES (1, 1, 'Corn', 50, 2.50);", "reference_sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';", "generated_sql": "SELECT SUM(s.quantity) AS total_quantity\nFROM sales s\nJOIN farmers f ON s.farmer_id = f.id\nWHERE f.location = 'Summerfield'\n  AND s.crop_name = 'Corn';", "raw_model_output": "SELECT SUM(s.quantity) AS total_quantity\nFROM sales s\nJOIN farmers f ON s.farmer_id = f.id\nWHERE f.location = 'Summerfield'\n  AND s.crop_name = 'Corn';", "latency_sec": 2.0952720642089844, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 870, "prompt_eval_sec": null, "tokens_completion": 190, "completion_eval_sec": null, "tokens_total": 1060, "tokens_per_sec": 505.9008890094545, "retrieval_latency_sec": 0.10811686515808105, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of quantities from sales where the farmer is from 'Summerfield' and the crop is 'Corn'. The Reference SQL joins with the crops table but filters on crops.name = 'Corn', which is equivalent to filtering on sales.crop_name = 'Corn' (since the join condition ensures sales.crop_name = crops.name). The Generated SQL omits the unnecessary join with crops while maintaining the same filtering logic, resulting in identical output."}
{"example_id": 4667, "sql_complexity": "aggregation", "prompt": "Find the number of unique organizations in each country in the Philanthropy Trends table?", "context": "CREATE TABLE PhilanthropyTrends (OrgID INT, Name TEXT, Country TEXT);", "reference_sql": "SELECT Country, COUNT(DISTINCT OrgID) as UniqueOrganizations FROM PhilanthropyTrends GROUP BY Country;", "generated_sql": "SELECT \n  Country, \n  COUNT(DISTINCT OrgID) AS UniqueOrgCount \nFROM PhilanthropyTrends \nGROUP BY \n  Country;", "raw_model_output": "SELECT \n  Country, \n  COUNT(DISTINCT OrgID) AS UniqueOrgCount \nFROM PhilanthropyTrends \nGROUP BY \n  Country;", "latency_sec": 2.265880823135376, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 763, "prompt_eval_sec": null, "tokens_completion": 243, "completion_eval_sec": null, "tokens_total": 1006, "tokens_per_sec": 443.9774544752816, "retrieval_latency_sec": 0.10623002052307129, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by 'Country' and count distinct 'OrgID's. The only differences are the column alias name ('UniqueOrganizations' vs 'UniqueOrgCount') and minor formatting (space after comma). Semantically, they produce identical results."}
{"example_id": 1006, "sql_complexity": "subqueries", "prompt": "What is the average word count of news articles written by investigative journalists?", "context": "CREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, position VARCHAR(20), country VARCHAR(50)); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (1, 'Anna Smith', 'Female', 35, 'News Reporter', 'USA'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (2, 'Mike Johnson', 'Male', 40, 'Investigative Journalist', 'Canada'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (3, 'Sofia Rodriguez', 'Female', 32, 'Investigative Journalist', 'Mexico'); CREATE TABLE news_articles (id INT, title VARCHAR(100), content TEXT, publication_date DATE, reporter_id INT); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (1, 'News Article 1', 'Content of News Article 1', '2021-01-01', 2); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (2, 'News Article 2', 'Content of News Article 2', '2021-02-01', 3);", "reference_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS avg_word_count FROM news_articles WHERE reporter_id IN (SELECT id FROM reporters WHERE position = 'Investigative Journalist');", "generated_sql": "SELECT AVG(LENGTH(na.content) \n           - LENGTH(REPLACE(na.content, ' ', '')) \n           + 1) AS average_word_count\nFROM news_articles AS na\nJOIN reporters AS r\n  ON na.reporter_id = r.id\nWHERE r.position = 'Investigative Journalist';", "raw_model_output": "SELECT AVG(LENGTH(na.content) \n           - LENGTH(REPLACE(na.content, ' ', '')) \n           + 1) AS average_word_count\nFROM news_articles AS na\nJOIN reporters AS r\n  ON na.reporter_id = r.id\nWHERE r.position = 'Investigative Journalist';", "latency_sec": 3.237107038497925, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 962, "prompt_eval_sec": null, "tokens_completion": 338, "completion_eval_sec": null, "tokens_total": 1300, "tokens_per_sec": 401.59314614546173, "retrieval_latency_sec": 0.11761903762817383, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average word count of news articles written by 'Investigative Journalists'. The Reference SQL uses a subquery to filter reporter_ids, while the Generated SQL uses a JOIN. Both approaches correctly identify the same subset of news_articles through equivalent logical conditions (reporter position matching 'Investigative Journalist'). The word count calculation (LENGTH(content) - LENGTH(REPLACE(...)) + 1) is identical in both queries."}
{"example_id": 3635, "sql_complexity": "set operations", "prompt": "Which brands have certifications related to cruelty-free, vegan, or organic products?", "context": "CREATE TABLE brands (brand_name VARCHAR(50), is_cruelty_free BOOLEAN, is_vegan BOOLEAN, is_organic BOOLEAN); INSERT INTO brands (brand_name, is_cruelty_free, is_vegan, is_organic) VALUES ('Lush', TRUE, TRUE, FALSE), ('The Body Shop', TRUE, FALSE, FALSE), ('Est\u00e9e Lauder', FALSE, FALSE, FALSE), ('Urban Decay', TRUE, TRUE, FALSE), ('Maybelline', FALSE, FALSE, FALSE), ('Kat Von D', TRUE, TRUE, FALSE), ('Tarte', TRUE, TRUE, TRUE);", "reference_sql": "SELECT brand_name, 'Cruelty-free' as certification FROM brands WHERE is_cruelty_free = TRUE UNION SELECT brand_name, 'Vegan' as certification FROM brands WHERE is_vegan = TRUE UNION SELECT brand_name, 'Organic' as certification FROM brands WHERE is_organic = TRUE;", "generated_sql": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "raw_model_output": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "latency_sec": 2.1147031784057617, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 945, "prompt_eval_sec": null, "tokens_completion": 116, "completion_eval_sec": null, "tokens_total": 1061, "tokens_per_sec": 501.72525905024156, "retrieval_latency_sec": 0.10857391357421875, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns brand names with their specific certification type (Cruelty-free/Vegan/Organic) as separate rows, allowing brands to appear multiple times if they meet multiple criteria. The Generated SQL returns only brand names once per brand (even if they meet multiple criteria) and omits the certification type column. The output structures and row counts differ."}
{"example_id": 4932, "sql_complexity": "basic SQL", "prompt": "Delete the workout row with the id of 2.", "context": "CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);", "reference_sql": "DELETE FROM Workouts WHERE id = 2;", "generated_sql": "DELETE FROM Workouts WHERE id = 2;", "raw_model_output": "DELETE FROM Workouts WHERE id = 2;", "latency_sec": 1.5712382793426514, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 694, "prompt_eval_sec": null, "tokens_completion": 157, "completion_eval_sec": null, "tokens_total": 851, "tokens_per_sec": 541.6110409148301, "retrieval_latency_sec": 0.11336207389831543, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They both delete the record from the Workouts table where the id is 2. The DELETE statement is exactly the same in both cases, so they will produce the same result."}
{"example_id": 365, "sql_complexity": "aggregation", "prompt": "Identify the total number of military personnel and their corresponding rank for each branch and country in the 'military_personnel' table, sorted by the total number of personnel in descending order.", "context": "CREATE TABLE military_personnel (id INT, branch VARCHAR(255), rank VARCHAR(255), country VARCHAR(255), personnel INT);", "reference_sql": "SELECT branch, country, SUM(personnel) as total_personnel FROM military_personnel GROUP BY branch, country ORDER BY total_personnel DESC;", "generated_sql": "SELECT \n  branch, \n  country, \n  rank, \n  SUM(personnel) AS total_personnel \nFROM military_personnel \nGROUP BY \n  branch, \n  country, \n  rank \nORDER BY \n  total_personnel DESC;", "raw_model_output": "SELECT \n  branch, \n  country, \n  rank, \n  SUM(personnel) AS total_personnel \nFROM military_personnel \nGROUP BY \n  branch, \n  country, \n  rank \nORDER BY \n  total_personnel DESC;", "latency_sec": 4.101043939590454, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 678, "prompt_eval_sec": null, "tokens_completion": 455, "completion_eval_sec": null, "tokens_total": 1133, "tokens_per_sec": 276.2711194245692, "retrieval_latency_sec": 0.11265277862548828, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query groups by only 'branch' and 'country', aggregating all ranks within each branch-country combination. The generated query adds 'rank' to the GROUP BY clause, creating separate aggregates for each (branch, country, rank) triplet. This results in more granular output with additional rows and potentially different sum values for each group."}
{"example_id": 521, "sql_complexity": "subqueries", "prompt": "How many vessels have not had an inspection in the past year?", "context": "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", "reference_sql": "SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());", "generated_sql": "SELECT COUNT(*) \nFROM vessels v\nWHERE NOT EXISTS (\n  SELECT 1 \n  FROM safety_records sr \n  WHERE sr.vessel_name = v.name \n    AND sr.inspection_date >= CURRENT_DATE - INTERVAL '1' YEAR\n);", "raw_model_output": "SELECT COUNT(*) \nFROM vessels v\nWHERE NOT EXISTS (\n  SELECT 1 \n  FROM safety_records sr \n  WHERE sr.vessel_name = v.name \n    AND sr.inspection_date >= CURRENT_DATE - INTERVAL '1' YEAR\n);", "latency_sec": 4.57831072807312, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 743, "prompt_eval_sec": null, "tokens_completion": 710, "completion_eval_sec": null, "tokens_total": 1453, "tokens_per_sec": 317.365964500956, "retrieval_latency_sec": 0.11054372787475586, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count vessels without a safety record in the last year. The NOT IN in the Reference SQL is equivalent to NOT EXISTS in the Generated SQL when no NULLs are present. The date conditions (BETWEEN with DATE_SUB/NOW vs. >= with CURRENT_DATE - INTERVAL) are functionally equivalent for DATE-typed inspection_date, as the upper bound (NOW()) is implicitly satisfied by the DATE type. Both queries exclude vessels with recent inspections."}
{"example_id": 5687, "sql_complexity": "multiple_joins", "prompt": "List organizations with more than 200 volunteers, and their average donation amounts, excluding donations less than $10.", "context": "CREATE TABLE organizations (org_id INT, org_name TEXT, social_impact_score INT);CREATE TABLE volunteers (vol_id INT, org_id INT, vol_country TEXT);CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount INT, donation_date DATE);", "reference_sql": "SELECT o.org_name, AVG(donation_amount) AS avg_donation_amount FROM organizations o JOIN volunteers v ON o.org_id = v.org_id JOIN donations don ON o.org_id = don.org_id WHERE donation_amount >= 10 GROUP BY o.org_name HAVING COUNT(v.vol_id) > 200;", "generated_sql": "SELECT \n  o.org_id, \n  o.org_name, \n  AVG(d.donation_amount) AS avg_donation_amount\nFROM organizations o\nJOIN (\n  SELECT org_id\n  FROM volunteers\n  GROUP BY org_id\n  HAVING COUNT(*) > 200\n) vcount ON o.org_id = vcount.org_id\nLEFT JOIN volunteers v \n  ON v.org_id = o.org_id\nLEFT JOIN donations d \n  ON d.donor_id = v.vol_id \n     AND d.donation_amount >= 10\nGROUP BY \n  o.org_id, \n  o.org_name;", "raw_model_output": "SELECT \n  o.org_id, \n  o.org_name, \n  AVG(d.donation_amount) AS avg_donation_amount\nFROM organizations o\nJOIN (\n  SELECT org_id\n  FROM volunteers\n  GROUP BY org_id\n  HAVING COUNT(*) > 200\n) vcount ON o.org_id = vcount.org_id\nLEFT JOIN volunteers v \n  ON v.org_id = o.org_id\nLEFT JOIN donations d \n  ON d.donor_id = v.vol_id \n     AND d.donation_amount >= 10\nGROUP BY \n  o.org_id, \n  o.org_name;", "latency_sec": 9.71824598312378, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 916, "prompt_eval_sec": null, "tokens_completion": 1616, "completion_eval_sec": null, "tokens_total": 2532, "tokens_per_sec": 260.5408429048765, "retrieval_latency_sec": 0.10863900184631348, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects. 1) The generated query incorrectly joins donations with volunteers on donor_id = vol_id, which is not supported by the schema. 2) The reference query's HAVING clause counts (volunteer, donation) pairs, not volunteers, due to the join with donations. 3) The generated query groups by org_id and org_name, while the reference query groups by org_name alone. 4) The generated query may include organizations with no qualifying donations, whereas the reference query filters out such organizations."}
{"example_id": 1281, "sql_complexity": "subqueries", "prompt": "Find the top 3 contributors with the lowest recycling rate in the 'waste_contributors' table.", "context": "CREATE TABLE waste_contributors (contributor VARCHAR(20), recycling_rate FLOAT); INSERT INTO waste_contributors (contributor, recycling_rate) VALUES ('Manufacturing', 0.4), ('Commercial', 0.38), ('Residential', 0.35), ('Institutional', 0.32), ('Agricultural', 0.2), ('Industrial', 0.15);", "reference_sql": "SELECT contributor FROM waste_contributors WHERE recycling_rate IN (SELECT MIN(recycling_rate) FROM waste_contributors) LIMIT 3;", "generated_sql": "SELECT contributor\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "raw_model_output": "SELECT contributor\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "latency_sec": 2.9319097995758057, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 791, "prompt_eval_sec": null, "tokens_completion": 229, "completion_eval_sec": null, "tokens_total": 1020, "tokens_per_sec": 347.8961051760786, "retrieval_latency_sec": 0.11144185066223145, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query selects contributors with the minimum recycling rate (only 'Industrial' in the data) and limits to 3 results. The generated query orders all contributors by ascending recycling rate and returns the top 3 (including 'Industrial', 'Agricultural', and 'Institutional'). The first query returns only the absolute minimum, while the second returns the three lowest values, making them non-equivalent."}
{"example_id": 5669, "sql_complexity": "window functions", "prompt": "What is the total number of new and returning volunteers in each program in each month?", "context": "CREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, ProgramID INT, VolunteerDate DATE, IsReturning BOOLEAN); INSERT INTO Volunteers (VolunteerID, VolunteerName, ProgramID, VolunteerDate, IsReturning) VALUES (6, 'David Kim', 1, '2022-03-01', FALSE), (7, 'Emily Chen', 2, '2022-03-15', TRUE), (8, 'James Lee', 2, '2022-04-01', FALSE), (9, 'Grace Park', 3, '2022-04-15', TRUE), (10, 'Daniel Kim', 1, '2022-04-01', FALSE);", "reference_sql": "SELECT ProgramID, EXTRACT(MONTH FROM VolunteerDate) AS Month, SUM(CASE WHEN IsReturning THEN 1 ELSE 0 END) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) + COUNT(DISTINCT VolunteerID) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) AS TotalVolunteers FROM Volunteers;", "generated_sql": "SELECT\n  ProgramID,\n  EXTRACT(MONTH FROM VolunteerDate) AS Month,\n  SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n  SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END)  AS ReturningVolunteers\nFROM Volunteers\nGROUP BY\n  ProgramID,\n  EXTRACT(MONTH FROM VolunteerDate)\nORDER BY\n  ProgramID,\n  Month;", "raw_model_output": "SELECT\n  ProgramID,\n  EXTRACT(MONTH FROM VolunteerDate) AS Month,\n  SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n  SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END)  AS ReturningVolunteers\nFROM Volunteers\nGROUP BY\n  ProgramID,\n  EXTRACT(MONTH FROM VolunteerDate)\nORDER BY\n  ProgramID,\n  Month;", "latency_sec": 4.888116836547852, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1060, "prompt_eval_sec": null, "tokens_completion": 753, "completion_eval_sec": null, "tokens_total": 1813, "tokens_per_sec": 370.8994814617402, "retrieval_latency_sec": 0.10801291465759277, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses window functions to calculate a cumulative sum and distinct count per group, returning all rows with aggregated values. The Generated SQL groups data, calculating separate counts for new and returning volunteers, and returns one row per group. Additionally, the Reference SQL's 'TotalVolunteers' combines returning counts with distinct volunteer counts, while the Generated SQL sums new and returning counts directly. The output structures and calculations differ significantly."}
{"example_id": 3576, "sql_complexity": "window functions", "prompt": "What is the difference in the number of eco-friendly hotels between the top 2 countries?", "context": "CREATE TABLE eco_hotel_count (country TEXT, num_hotels INT); INSERT INTO eco_hotel_count (country, num_hotels) VALUES ('France', 100), ('Italy', 120), ('Germany', 150), ('Spain', 110), ('UK', 160);", "reference_sql": "SELECT (MAX(num_hotels) OVER (PARTITION BY num_hotels <= 2) - MIN(num_hotels) OVER (PARTITION BY num_hotels <= 2)) AS hotel_difference FROM eco_hotel_count WHERE country IN ('France', 'Italy');", "generated_sql": "SELECT MAX(num_hotels) - MIN(num_hotels) AS difference\nFROM (\n  SELECT num_hotels\n  FROM eco_hotel_count\n  ORDER BY num_hotels DESC\n  FETCH FIRST 2 ROWS ONLY\n) AS top2;", "raw_model_output": "SELECT MAX(num_hotels) - MIN(num_hotels) AS difference\nFROM (\n  SELECT num_hotels\n  FROM eco_hotel_count\n  ORDER BY num_hotels DESC\n  FETCH FIRST 2 ROWS ONLY\n) AS top2;", "latency_sec": 4.790821075439453, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 664, "prompt_eval_sec": null, "tokens_completion": 711, "completion_eval_sec": null, "tokens_total": 1375, "tokens_per_sec": 287.0071702424983, "retrieval_latency_sec": 0.10811185836791992, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the difference between the maximum and minimum num_hotels for France and Italy (120 - 100 = 20), while the Generated SQL selects the top 2 hotels from the entire table (UK:160 and Germany:150) resulting in 160 - 150 = 10. The queries operate on different datasets and produce different results."}
{"example_id": 1970, "sql_complexity": "multiple_joins", "prompt": "List all players who have played a specific VR game, 'CyberSphere', and their ages.", "context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');", "reference_sql": "SELECT Players.Age, Players.PlayerID FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';", "generated_sql": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "raw_model_output": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "latency_sec": 3.431259870529175, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 954, "prompt_eval_sec": null, "tokens_completion": 390, "completion_eval_sec": null, "tokens_total": 1344, "tokens_per_sec": 391.6928623050419, "retrieval_latency_sec": 0.11691594123840332, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (PlayerID and Age) from the Players table, join with VRPlayers and VRGames using identical conditions, and apply the same WHERE clause filtering on VRGames.Title. The differences are purely syntactic (column order and alias names) and do not affect the result set."}
{"example_id": 2414, "sql_complexity": "window functions", "prompt": "List the policy areas with the lowest citizen satisfaction scores.", "context": "CREATE TABLE Policy (Area VARCHAR(20), Score INT); INSERT INTO Policy (Area, Score) VALUES ('Transportation', 70), ('Education', 85), ('Healthcare', 75), ('PublicSafety', 80);", "reference_sql": "SELECT Area, Score FROM (SELECT Area, Score, ROW_NUMBER() OVER (ORDER BY Score) AS RN FROM Policy) X WHERE RN IN (1, 2);", "generated_sql": "SELECT Area\nFROM Policy\nWHERE Score = (\n  SELECT MIN(Score)\n  FROM Policy\n);", "raw_model_output": "SELECT Area\nFROM Policy\nWHERE Score = (\n  SELECT MIN(Score)\n  FROM Policy\n);", "latency_sec": 2.1574018001556396, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 768, "prompt_eval_sec": null, "tokens_completion": 232, "completion_eval_sec": null, "tokens_total": 1000, "tokens_per_sec": 463.5205180267569, "retrieval_latency_sec": 0.11113500595092773, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns the top 2 policies with the lowest scores (using ROW_NUMBER()), while the Generated SQL only returns the policy with the absolute minimum score. The first query returns two rows (Transportation and Healthcare) and the second returns only one row (Transportation)."}
{"example_id": 1898, "sql_complexity": "single join", "prompt": "What are the total sales for each drug in Q2 2020?", "context": "CREATE TABLE drugs (drug_id INT, drug_name TEXT); INSERT INTO drugs (drug_id, drug_name) VALUES (1001, 'Ibuprofen'), (1002, 'Paracetamol'), (1003, 'Aspirin'); CREATE TABLE sales (sale_id INT, drug_id INT, sale_date DATE, revenue FLOAT); INSERT INTO sales (sale_id, drug_id, sale_date, revenue) VALUES (1, 1001, '2020-04-05', 1800.0), (2, 1002, '2020-04-10', 2300.0), (3, 1003, '2020-04-15', 1400.0), (4, 1001, '2020-05-20', 1900.0), (5, 1002, '2020-06-25', 2400.0);", "reference_sql": "SELECT drug_name, SUM(revenue) as total_sales FROM sales JOIN drugs ON sales.drug_id = drugs.drug_id WHERE sale_date BETWEEN '2020-04-01' AND '2020-06-30' GROUP BY drug_name;", "generated_sql": "SELECT d.drug_name, \n       SUM(s.revenue) AS total_sales\nFROM sales s\nJOIN drugs d \n  ON s.drug_id = d.drug_id\nWHERE s.sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY d.drug_name;", "raw_model_output": "SELECT d.drug_name, \n       SUM(s.revenue) AS total_sales\nFROM sales s\nJOIN drugs d \n  ON s.drug_id = d.drug_id\nWHERE s.sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY d.drug_name;", "latency_sec": 5.225799798965454, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1073, "prompt_eval_sec": null, "tokens_completion": 533, "completion_eval_sec": null, "tokens_total": 1606, "tokens_per_sec": 307.32137888595315, "retrieval_latency_sec": 0.10951709747314453, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operations: joining the 'sales' and 'drugs' tables on drug_id, filtering sales between '2020-04-01' and '2020-06-30', grouping by drug_name, and summing revenue. The only difference is the use of table aliases (s/d vs. implicit table names), which does not affect semantic equivalence."}
{"example_id": 2403, "sql_complexity": "multiple_joins", "prompt": "Who is the most frequent customer ordering vegetarian items?", "context": "CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50)); INSERT INTO customers VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); CREATE TABLE orders (order_id INT, customer_id INT, menu_id INT, order_date DATE); INSERT INTO orders VALUES (1, 1, 1, '2022-01-01'), (2, 2, 3, '2022-01-02'), (3, 3, 2, '2022-01-03'); CREATE TABLE menu (menu_id INT, item_name VARCHAR(50), is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu VALUES (1, 'Veggie Burger', true, 8.99), (2, 'Cheeseburger', false, 7.99), (3, 'Tofu Stir Fry', true, 11.99);", "reference_sql": "SELECT customers.customer_name, COUNT(orders.order_id) as order_count FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN menu ON orders.menu_id = menu.menu_id WHERE menu.is_vegetarian = true GROUP BY customers.customer_name ORDER BY order_count DESC LIMIT 1;", "generated_sql": "SELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "raw_model_output": "SELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "latency_sec": 4.4105918407440186, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 1025, "prompt_eval_sec": null, "tokens_completion": 653, "completion_eval_sec": null, "tokens_total": 1678, "tokens_per_sec": 380.447808500217, "retrieval_latency_sec": 0.10862278938293457, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the customer with the highest count of vegetarian orders. The Reference SQL explicitly selects the count and orders by it, while the Generated SQL uses COUNT(*) in the ORDER BY, which achieves the same ordering. The final result (customer name) is identical, and the GROUP BY and JOIN logic are equivalent. Although the SELECT clause differs, the core semantic intent and output (top customer) are the same."}
{"example_id": 124, "sql_complexity": "set operations", "prompt": "Find the intersection of AI and accessibility research projects in the EU and those in Africa.", "context": "CREATE SCHEMA if not exists accessibility; CREATE TABLE if not exists accessibility.research (id INT PRIMARY KEY, project_name VARCHAR(255), region VARCHAR(255)); INSERT INTO accessibility.research (id, project_name, region) VALUES (1, 'AI for Accessibility EU', 'EU'), (2, 'Accessibility Africa', 'Africa'), (3, 'AI for Accessibility Africa', 'Africa'), (4, 'Accessibility EU', 'EU');", "reference_sql": "SELECT project_name FROM accessibility.research WHERE region = 'EU' INTERSECT SELECT project_name FROM accessibility.research WHERE region = 'Africa';", "generated_sql": "SELECT project_name\nFROM accessibility.research\nWHERE region = 'EU'\n  AND project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%'\nINTERSECT\nSELECT project_name\nFROM accessibility.research\nWHERE region = 'Africa'\n  AND project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%';", "raw_model_output": "SELECT project_name\nFROM accessibility.research\nWHERE region = 'EU'\n  AND project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%'\nINTERSECT\nSELECT project_name\nFROM accessibility.research\nWHERE region = 'Africa'\n  AND project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%';", "latency_sec": 12.60784101486206, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 798, "prompt_eval_sec": null, "tokens_completion": 1494, "completion_eval_sec": null, "tokens_total": 2292, "tokens_per_sec": 181.79163246888993, "retrieval_latency_sec": 0.1106719970703125, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL retrieves project_names present in both 'EU' and 'Africa' regions without any additional filters. The Generated SQL adds constraints that project_name must contain both 'AI' and 'Accessibility' in both regions. This makes the Generated SQL more restrictive, so they are not semantically equivalent."}
{"example_id": 1231, "sql_complexity": "basic SQL", "prompt": "What is the average ticket price for performances at the 'Downtown Theater'?", "context": "CREATE TABLE DowntownTheater (show_name TEXT, date DATE, ticket_price FLOAT); INSERT INTO DowntownTheater (show_name, date, ticket_price) VALUES ('Play 1', '2022-01-01', 30.0), ('Play 2', '2022-01-02', 40.0), ('Concert 1', '2022-01-03', 50.0);", "reference_sql": "SELECT AVG(ticket_price) FROM DowntownTheater WHERE show_name = 'Downtown Theater'", "generated_sql": "SELECT AVG(ticket_price) AS average_ticket_price\nFROM DowntownTheater;", "raw_model_output": "SELECT AVG(ticket_price) AS average_ticket_price\nFROM DowntownTheater;", "latency_sec": 2.020028829574585, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 756, "prompt_eval_sec": null, "tokens_completion": 226, "completion_eval_sec": null, "tokens_total": 982, "tokens_per_sec": 486.1316757577206, "retrieval_latency_sec": 0.10812973976135254, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters for show_name = 'Downtown Theater' (which has no matching rows in the data), while the Generated SQL calculates the average across all rows. The first returns NULL/empty, the second returns 40.0."}
{"example_id": 1485, "sql_complexity": "set operations", "prompt": "How many public schools and public libraries exist in total, in the 'CityData' schema's 'CityEducation' and 'CityLibrary' tables?", "context": "CREATE SCHEMA CityData; CREATE TABLE CityEducation (Name varchar(255), Type varchar(255)); INSERT INTO CityEducation (Name, Type) VALUES ('SchoolA', 'Public'), ('SchoolB', 'Public'), ('SchoolC', 'Private'); CREATE TABLE CityLibrary (Name varchar(255), Type varchar(255)); INSERT INTO CityLibrary (Name, Type) VALUES ('LibraryA', 'Public'), ('LibraryB', 'Public'), ('LibraryC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public')\n  +\n  (SELECT COUNT(*) FROM CityData.CityLibrary   WHERE Type = 'Public')\n  AS TotalPublicInstitutions;", "raw_model_output": "SELECT \n  (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public')\n  +\n  (SELECT COUNT(*) FROM CityData.CityLibrary   WHERE Type = 'Public')\n  AS TotalPublicInstitutions;", "latency_sec": 4.393104076385498, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 714, "prompt_eval_sec": null, "tokens_completion": 511, "completion_eval_sec": null, "tokens_total": 1225, "tokens_per_sec": 278.84611397777076, "retrieval_latency_sec": 0.1114511489868164, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns two separate counts (one for CityEducation, one for CityLibrary) as two rows via UNION ALL, while the generated query returns a single row with the summed total of both counts. The output structure and values differ (e.g., 2 + 2 vs 2 and 2)."}
{"example_id": 5806, "sql_complexity": "single join", "prompt": "List the top 3 countries with the most veteran employment in the IT industry", "context": "CREATE TABLE veteran_employment (employee_id INT, industry VARCHAR(255), salary DECIMAL(10,2), state VARCHAR(2), country VARCHAR(255)); CREATE TABLE countries (country_id INT, country VARCHAR(255));", "reference_sql": "SELECT country, COUNT(*) as num_veterans FROM veteran_employment JOIN countries ON veteran_employment.country = countries.country WHERE industry = 'IT' GROUP BY country ORDER BY num_veterans DESC LIMIT 3;", "generated_sql": "SELECT ve.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nWHERE ve.industry = 'IT'\nGROUP BY ve.country\nORDER BY veteran_count DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT ve.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nWHERE ve.industry = 'IT'\nGROUP BY ve.country\nORDER BY veteran_count DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 4.881249904632568, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 930, "prompt_eval_sec": null, "tokens_completion": 638, "completion_eval_sec": null, "tokens_total": 1568, "tokens_per_sec": 321.2291996178855, "retrieval_latency_sec": 0.11538100242614746, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a redundant JOIN with the countries table that doesn't affect the output, while the Generated SQL omits this join. Although both queries group by country and filter for 'IT' industry, the JOIN in the Reference could exclude rows where veteran_employment.country doesn't exist in countries.country. The Generated SQL uses FETCH FIRST 3 ROWS ONLY (equivalent to LIMIT 3) but the core difference lies in the unnecessary JOIN in the Reference query, which might alter results if there are country values in veteran_employment not present in countries."}
{"example_id": 4126, "sql_complexity": "window functions", "prompt": "What is the average crime rate per capita in each neighborhood?", "context": "CREATE TABLE neighborhoods (name VARCHAR(255), population INT, crime_count INT); INSERT INTO neighborhoods (name, population, crime_count) VALUES ('Central Park', 1000, 25), ('Harlem', 2500, 75), ('Brooklyn', 5000, 120);", "reference_sql": "SELECT name, AVG(crime_count/population) OVER (PARTITION BY name) FROM neighborhoods;", "generated_sql": "SELECT \n  name, \n  CAST(crime_count AS DECIMAL) / population AS avg_crime_rate_per_capita \nFROM neighborhoods;", "raw_model_output": "SELECT \n  name, \n  CAST(crime_count AS DECIMAL) / population AS avg_crime_rate_per_capita \nFROM neighborhoods;", "latency_sec": 3.04714298248291, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 695, "prompt_eval_sec": null, "tokens_completion": 368, "completion_eval_sec": null, "tokens_total": 1063, "tokens_per_sec": 348.85136867907437, "retrieval_latency_sec": 0.10869717597961426, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the crime rate (crime_count/population) for each neighborhood. The reference query uses an unnecessary window function AVG() with PARTITION BY name, which for unique names (single-row partitions) returns the same value as the raw division. The generated query explicitly casts crime_count to DECIMAL for floating-point division, which matches the behavior of the reference query's division (assuming standard SQL division rules). The results are identical."}
{"example_id": 4559, "sql_complexity": "basic SQL", "prompt": "List the top 3 energy efficient appliances in the US by energy star rating?", "context": "CREATE TABLE appliances (id INT, name VARCHAR(255), country VARCHAR(255), energy_star_rating INT); INSERT INTO appliances (id, name, country, energy_star_rating) VALUES (1, 'Fridge A', 'USA', 5), (2, 'TV B', 'USA', 4), (3, 'Laptop C', 'USA', 5), (4, 'Microwave D', 'USA', 3);", "reference_sql": "SELECT name, energy_star_rating FROM appliances WHERE country = 'USA' ORDER BY energy_star_rating DESC LIMIT 3;", "generated_sql": "SELECT id,\n       name,\n       energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT id,\n       name,\n       energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 3.1484601497650146, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 726, "prompt_eval_sec": null, "tokens_completion": 310, "completion_eval_sec": null, "tokens_total": 1036, "tokens_per_sec": 329.04974200715924, "retrieval_latency_sec": 0.1089169979095459, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects only 'name' and 'energy_star_rating', while the Generated SQL includes an additional 'id' column. Both use similar filtering and ordering, but the Generated SQL uses 'FETCH FIRST 3 ROWS ONLY' instead of 'LIMIT 3' which is functionally equivalent but not syntactically identical. The extra column in the Generated SQL changes the result structure."}
{"example_id": 456, "sql_complexity": "window functions", "prompt": "List the intelligence operations and their corresponding threat levels, and rank them based on their threat level and budget.", "context": "CREATE TABLE intel_ops_threat (id INT, operation VARCHAR, threat VARCHAR, budget INT); INSERT INTO intel_ops_threat (id, operation, threat, budget) VALUES (1, 'Operation Red Folder', 'High', 5000000), (2, 'Operation Black Vault', 'Medium', 7000000), (3, 'Operation Blue Sail', 'Low', 6000000);", "reference_sql": "SELECT operation, threat, budget, ROW_NUMBER() OVER (PARTITION BY threat ORDER BY budget DESC) as rank FROM intel_ops_threat;", "generated_sql": "SELECT\n  operation,\n  threat,\n  ROW_NUMBER() OVER (\n    ORDER BY\n      CASE threat\n        WHEN 'High'   THEN 1\n        WHEN 'Medium' THEN 2\n        WHEN 'Low'    THEN 3\n      END,\n      budget DESC\n  ) AS rank\nFROM intel_ops_threat\nORDER BY rank;", "raw_model_output": "SELECT\n  operation,\n  threat,\n  ROW_NUMBER() OVER (\n    ORDER BY\n      CASE threat\n        WHEN 'High'   THEN 1\n        WHEN 'Medium' THEN 2\n        WHEN 'Low'    THEN 3\n      END,\n      budget DESC\n  ) AS rank\nFROM intel_ops_threat\nORDER BY rank;", "latency_sec": 5.650657892227173, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 721, "prompt_eval_sec": null, "tokens_completion": 860, "completion_eval_sec": null, "tokens_total": 1581, "tokens_per_sec": 279.79042974354593, "retrieval_latency_sec": 0.11228704452514648, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL partitions by 'threat' and orders by budget within each partition, while the Generated SQL orders by a custom priority (High/Medium/Low) and budget without partitioning. This results in different ranking logic: the Reference ranks within threat groups, whereas the Generated ranks across all rows. Additionally, the Generated SQL adds an ORDER BY rank which isn't present in the Reference."}
{"example_id": 459, "sql_complexity": "set operations", "prompt": "What is the total installed capacity of hydroelectric power plants in Brazil and Canada?", "context": "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", "reference_sql": "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');", "generated_sql": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "raw_model_output": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "latency_sec": 2.7779929637908936, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 801, "prompt_eval_sec": null, "tokens_completion": 170, "completion_eval_sec": null, "tokens_total": 971, "tokens_per_sec": 349.5329227454046, "retrieval_latency_sec": 0.1098940372467041, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns individual capacity values for Brazil and Canada as separate rows, while the Generated SQL returns the summed capacity of both countries as a single value. The output structures differ (two rows vs. one row with a total), so they are not semantically equivalent."}
{"example_id": 2356, "sql_complexity": "window functions", "prompt": "Find the total billing amount for attorneys in the 'Criminal Law' practice area, for the year 2020, partitioned by attorney's last name and ordered by the total billing amount in descending order.", "context": "CREATE TABLE Attorneys (AttorneyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), PracticeArea VARCHAR(50), TotalBilling FLOAT, BillingYear INT); INSERT INTO Attorneys (AttorneyID, FirstName, LastName, PracticeArea, TotalBilling, BillingYear) VALUES (1, 'Clara', 'Rivera', 'Personal Injury', 8000.00, 2020), (2, 'Jamal', 'Lee', 'Personal Injury', 6000.00, 2019), (3, 'Sophia', 'Gomez', 'Criminal Law', 9000.00, 2020);", "reference_sql": "SELECT LastName, SUM(TotalBilling) OVER (PARTITION BY PracticeArea, LastName, BillingYear) AS TotalBilling FROM Attorneys WHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020 ORDER BY TotalBilling DESC;", "generated_sql": "SELECT LastName,\n       SUM(TotalBilling) OVER (PARTITION BY LastName) AS TotalBilling\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law'\n  AND BillingYear = 2020\nORDER BY TotalBilling DESC;", "raw_model_output": "SELECT LastName,\n       SUM(TotalBilling) OVER (PARTITION BY LastName) AS TotalBilling\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law'\n  AND BillingYear = 2020\nORDER BY TotalBilling DESC;", "latency_sec": 5.184777021408081, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 901, "prompt_eval_sec": null, "tokens_completion": 580, "completion_eval_sec": null, "tokens_total": 1481, "tokens_per_sec": 285.64391368903847, "retrieval_latency_sec": 0.11946916580200195, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter to 'Criminal Law' and 2020, and the window function's partitioning in the Reference SQL (PracticeArea, LastName, BillingYear) becomes equivalent to partitioning by LastName alone in the Generated SQL. Since the WHERE clause ensures all rows have the same PracticeArea and BillingYear, the additional partitioning columns in the Reference SQL do not affect the result. Both queries sum TotalBilling per LastName, producing identical outputs."}
