{"example_id": 2656, "sql_complexity": "multiple_joins", "prompt": "Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.", "context": "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", "reference_sql": "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')", "generated_sql": "SELECT d.name, SUM(s.revenue) AS total_sales\nFROM sales s\nJOIN drugs d ON s.drug_id = d.id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(s2.revenue)\n    FROM sales s2\n    JOIN drugs d2 ON s2.drug_id = d2.id\n    WHERE d2.indication = 'Infectious_Diseases'\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT d.name, SUM(s.revenue) AS total_sales\nFROM sales s\nJOIN drugs d ON s.drug_id = d.id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(s2.revenue)\n    FROM sales s2\n    JOIN drugs d2 ON s2.drug_id = d2.id\n    WHERE d2.indication = 'Infectious_Diseases'\n);", "latency_sec": 8.294291019439697, "total_duration_sec": 8.28243994, "load_duration_sec": 5.637527785, "tokens_prompt": 210, "prompt_eval_sec": 0.176765677, "tokens_completion": 105, "completion_eval_sec": 2.45983077, "tokens_total": 315, "tokens_per_sec": 37.977929549580615, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL selects 'drug_id' and 'name', while the Generated SQL only selects 'name'. Second, the Reference SQL groups by 'drug_id' whereas the Generated SQL groups by 'd.name'. Although drug_id and name may be functionally dependent (assuming unique names), SQL grouping by different columns can produce different results if names are not unique. Additionally, the output columns differ, making the result sets structurally unequal."}
{"example_id": 3008, "sql_complexity": "multiple_joins", "prompt": "Who are the users who used electric vehicles and their trip details?", "context": "CREATE TABLE users (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), city VARCHAR(50));CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(20), is_electric BOOLEAN);CREATE TABLE trips (id INT, user_id INT, vehicle_id INT, trip_distance FLOAT, trip_duration INT, departure_time TIMESTAMP, arrival_time TIMESTAMP);INSERT INTO users (id, name, age, gender, city) VALUES (3, 'Alex', 30, 'Female', 'New York');INSERT INTO vehicles (id, vehicle_type, is_electric) VALUES (1, 'Tesla', true), (2, 'Bike', false);INSERT INTO trips (id, user_id, vehicle_id, trip_distance, trip_duration, departure_time, arrival_time) VALUES (3, 3, 1, 15.3, 25, '2022-01-03 12:00:00', '2022-01-03 12:25:00');", "reference_sql": "SELECT u.name, v.vehicle_type, t.trip_distance, t.trip_duration FROM users u JOIN trips t ON u.id = t.user_id JOIN vehicles v ON t.vehicle_id = v.id WHERE v.is_electric = true;", "generated_sql": "SELECT u.name, t.trip_distance, t.trip_duration, t.departure_time, t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = true;", "raw_model_output": "<think>\n\n</think>\n\nSELECT u.name, t.trip_distance, t.trip_duration, t.departure_time, t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = true;", "latency_sec": 1.7423830032348633, "total_duration_sec": 1.592003037, "load_duration_sec": 0.020315147, "tokens_prompt": 312, "prompt_eval_sec": 0.059822746, "tokens_completion": 61, "completion_eval_sec": 1.509505539, "tokens_total": 373, "tokens_per_sec": 214.0746318734158, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent because the Generated SQL includes additional columns (departure_time, arrival_time) in the SELECT clause that are not present in the Reference SQL. While both queries join the same tables and apply the same WHERE condition, the difference in selected columns results in different output structures."}
{"example_id": 2531, "sql_complexity": "basic SQL", "prompt": "Who is the top customer by sales in 2022?", "context": "CREATE TABLE customers (customer_id INT, total_sales_2022 FLOAT); INSERT INTO customers (customer_id, total_sales_2022) VALUES (1, 25000.0), (2, 30000.0), (3, 22000.0), (4, 35000.0);", "reference_sql": "SELECT customer_id, total_sales_2022 FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "generated_sql": "SELECT customer_id FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT customer_id FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "latency_sec": 0.6916139125823975, "total_duration_sec": 0.627969885, "load_duration_sec": 0.019024132, "tokens_prompt": 167, "prompt_eval_sec": 0.029009692, "tokens_completion": 24, "completion_eval_sec": 0.577972364, "tokens_total": 191, "tokens_per_sec": 276.16564173330545, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query selects both customer_id and total_sales_2022, while the generated query only selects customer_id. The additional column in the reference query makes the result sets semantically different."}
{"example_id": 3792, "sql_complexity": "single join", "prompt": "What is the maximum distance traveled by an electric vehicle in a single trip, grouped by vehicle model?", "context": "CREATE TABLE Trips (trip_id INT, vehicle_id INT, distance FLOAT); CREATE TABLE ElectricVehicleModels (vehicle_id INT, vehicle_model TEXT);", "reference_sql": "SELECT evm.vehicle_model, MAX(trips.distance) AS max_distance_traveled FROM Trips trips INNER JOIN ElectricVehicleModels evm ON trips.vehicle_id = evm.vehicle_id GROUP BY 1;", "generated_sql": "SELECT e.vehicle_model, MAX(t.distance) AS max_distance\nFROM Trips t\nJOIN ElectricVehicleModels e ON t.vehicle_id = e.vehicle_id\nGROUP BY e.vehicle_model;", "raw_model_output": "<think>\n\n</think>\n\nSELECT e.vehicle_model, MAX(t.distance) AS max_distance\nFROM Trips t\nJOIN ElectricVehicleModels e ON t.vehicle_id = e.vehicle_id\nGROUP BY e.vehicle_model;", "latency_sec": 1.158257007598877, "total_duration_sec": 1.062263965, "load_duration_sec": 0.024192031, "tokens_prompt": 122, "prompt_eval_sec": 0.028432487, "tokens_completion": 43, "completion_eval_sec": 1.007540325, "tokens_total": 165, "tokens_per_sec": 142.45542994128135, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an inner join between Trips and ElectricVehicleModels on vehicle_id, group by vehicle_model, and calculate the maximum distance. The differences are solely in table aliases (trips/t vs evm/e) and column alias names (max_distance_traveled vs max_distance), which do not affect the semantic result."}
{"example_id": 2311, "sql_complexity": "subqueries", "prompt": "Determine the percentage of sales from each ingredient category", "context": "CREATE TABLE Sales_Details (sale_id INT, ingredient_id INT, quantity INT); INSERT INTO Sales_Details (sale_id, ingredient_id, quantity) VALUES (1, 1, 2), (1, 2, 8), (2, 1, 3), (2, 2, 7); CREATE TABLE Ingredient_Categories (ingredient_id INT, ingredient_category VARCHAR(255)); INSERT INTO Ingredient_Categories (ingredient_id, ingredient_category) VALUES (1, 'Legumes'), (2, 'Poultry');", "reference_sql": "SELECT ingredient_category, SUM(quantity) AS total_quantity, SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales FROM Sales_Details, Ingredient_Categories WHERE Sales_Details.ingredient_id = Ingredient_Categories.ingredient_id GROUP BY ingredient_category;", "generated_sql": "SELECT \n    IC.ingredient_category,\n    SUM(SD.quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales\nFROM \n    Sales_Details SD\nJOIN \n    Ingredient_Categories IC ON SD.ingredient_id = IC.ingredient_id\nGROUP BY \n    IC.ingredient_category;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    IC.ingredient_category,\n    SUM(SD.quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales\nFROM \n    Sales_Details SD\nJOIN \n    Ingredient_Categories IC ON SD.ingredient_id = IC.ingredient_id\nGROUP BY \n    IC.ingredient_category;", "latency_sec": 2.0647459030151367, "total_duration_sec": 1.849233538, "load_duration_sec": 0.018686895, "tokens_prompt": 194, "prompt_eval_sec": 0.038992386, "tokens_completion": 75, "completion_eval_sec": 1.78955335, "tokens_total": 269, "tokens_per_sec": 130.28237499209024, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an additional column 'total_quantity' in the SELECT clause, while the Generated SQL omits it. Although both calculate the percentage_of_sales correctly, the result sets differ in column structure, making them not semantically equivalent."}
{"example_id": 3329, "sql_complexity": "set operations", "prompt": "Which causes received funding from donors in both the United States and Canada?", "context": "CREATE TABLE donor_location (donor_id INT, country VARCHAR(50), cause VARCHAR(50), donation DECIMAL(10,2)); INSERT INTO donor_location (donor_id, country, cause, donation) VALUES (1, 'United States', 'Global Health', 1000.00), (2, 'Canada', 'Education', 2000.00), (3, 'United States', 'Environment', 1500.00), (4, 'Canada', 'Animal Welfare', 2500.00);", "reference_sql": "SELECT cause FROM donor_location WHERE country = 'United States' INTERSECT SELECT cause FROM donor_location WHERE country = 'Canada';", "generated_sql": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "raw_model_output": "<think>\n\n</think>\n\nSELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "latency_sec": 1.2322509288787842, "total_duration_sec": 0.977440224, "load_duration_sec": 0.017678829, "tokens_prompt": 209, "prompt_eval_sec": 0.039317381, "tokens_completion": 38, "completion_eval_sec": 0.918453111, "tokens_total": 247, "tokens_per_sec": 200.4461869018378, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve causes that exist in both 'United States' and 'Canada'. The reference uses INTERSECT to find common causes between the two countries, while the generated query groups by cause and ensures there are entries in both countries using COUNT(DISTINCT country) = 2. Both approaches logically achieve the same result."}
{"example_id": 2912, "sql_complexity": "single join", "prompt": "Which company has manufactured the most satellites?", "context": "CREATE TABLE manufacturers (id INT, name TEXT); CREATE TABLE satellites (id INT, manufacturer_id INT, name TEXT, launch_date DATE); INSERT INTO manufacturers (id, name) VALUES (1, 'SpaceX'), (2, 'Blue Origin'), (3, 'ISRO'), (4, 'CAST'); INSERT INTO satellites (id, manufacturer_id, name, launch_date) VALUES (1, 1, 'StarDragon', '2012-05-25'), (2, 1, 'Falcon', '2015-12-21'), (3, 2, 'New Glenn', '2022-01-11'), (4, 3, 'ChinaSat 1E', '2000-12-05'), (5, 3, 'ChinaSat 2A', '2003-08-13'), (6, 4, 'Shijian 9', '2017-11-19'), (7, 1, 'StarLink', '2020-05-24'), (8, 1, 'StarLink', '2020-06-13');", "reference_sql": "SELECT m.name, COUNT(s.id) FROM manufacturers m JOIN satellites s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY COUNT(s.id) DESC;", "generated_sql": "SELECT m.name, COUNT(*) AS num_satellites\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.id\nORDER BY num_satellites DESC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT m.name, COUNT(*) AS num_satellites\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.id\nORDER BY num_satellites DESC\nLIMIT 1;", "latency_sec": 1.5622529983520508, "total_duration_sec": 1.306167008, "load_duration_sec": 0.022465828, "tokens_prompt": 344, "prompt_eval_sec": 0.067913763, "tokens_completion": 48, "completion_eval_sec": 1.213685639, "tokens_total": 392, "tokens_per_sec": 250.91966564538706, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL groups by 'm.name' while the Generated SQL groups by 'm.id'. Although the sample data has unique names, the schema doesn't enforce name uniqueness, so grouping by name could combine manufacturers with identical names. Second, the Generated SQL includes a 'LIMIT 1' clause which restricts output to a single row, whereas the Reference SQL returns all manufacturers sorted by satellite count. These differences in grouping strategy and result limitation make the queries non-equivalent."}
{"example_id": 3170, "sql_complexity": "aggregation", "prompt": "Determine the total production quantity of silver for mining sites in Mexico, between the dates '2017-05-01' and '2017-09-30', having less than 40 employees.", "context": "CREATE TABLE silver_mine_2 (site_id INT, country VARCHAR(50), num_employees INT, extraction_date DATE, quantity INT); INSERT INTO silver_mine_2 (site_id, country, num_employees, extraction_date, quantity) VALUES (1, 'Mexico', 35, '2017-05-02', 1200), (2, 'Mexico', 30, '2017-08-31', 1800), (3, 'Mexico', 37, '2017-07-04', 2200);", "reference_sql": "SELECT country, SUM(quantity) as total_silver_prod FROM silver_mine_2 WHERE num_employees < 40 AND country = 'Mexico' AND extraction_date >= '2017-05-01' AND extraction_date <= '2017-09-30' GROUP BY country;", "generated_sql": "SELECT SUM(quantity) AS total_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(quantity) AS total_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "latency_sec": 1.914639949798584, "total_duration_sec": 1.680818913, "load_duration_sec": 0.022800575, "tokens_prompt": 259, "prompt_eval_sec": 0.051413117, "tokens_completion": 66, "completion_eval_sec": 1.604541084, "tokens_total": 325, "tokens_per_sec": 169.74470841590312, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'country' in the SELECT and GROUP BY, producing a two-column result (country, total_silver_prod) with one row for Mexico. The Generated SQL omits the 'country' column and returns a single-column result (total_production). While both calculate the same sum, their output structures differ, making them non-equivalent."}
{"example_id": 3518, "sql_complexity": "basic SQL", "prompt": "Insert new records of ticket sales for a new event, including event and salesperson information.", "context": "CREATE TABLE salesperson (salesperson_id INT, name VARCHAR(50), position VARCHAR(50)); CREATE TABLE tickets (ticket_id INT, salesperson_id INT, event_id INT, price DECIMAL(5,2), quantity INT); CREATE TABLE events (event_id INT, name VARCHAR(50), date DATE); INSERT INTO salesperson VALUES (1, 'John Doe', 'Senior Salesperson'); INSERT INTO events VALUES (2, 'New Event', '2023-04-15');", "reference_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) VALUES (2, 1, 2, 75, 50), (3, 2, 2, 65, 75); INSERT INTO events (event_id, name, date) VALUES (2, 'New Event', '2023-04-15');", "generated_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (3, 1, 2, 19.99, 100);", "raw_model_output": "<think>\n\n</think>\n\nINSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (3, 1, 2, 19.99, 100);", "latency_sec": 1.4388678073883057, "total_duration_sec": 1.14154313, "load_duration_sec": 0.019485002, "tokens_prompt": 197, "prompt_eval_sec": 0.039070309, "tokens_completion": 45, "completion_eval_sec": 1.080993968, "tokens_total": 242, "tokens_per_sec": 168.1877923443538, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts two rows into the tickets table and one row into the events table, while the Generated SQL only inserts a single row into the tickets table. The values in the tickets rows (ticket_id, salesperson_id, price, quantity) differ between the two queries, and the Generated SQL does not insert into the events table at all. The semantic meaning of the queries is not equivalent as they modify different data."}
{"example_id": 3925, "sql_complexity": "set operations", "prompt": "What is the total number of students and staff with accommodations in the \"disability_services\" schema, excluding the \"accessibility_parking\" type?", "context": "CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));", "reference_sql": "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking') +\n  (SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking') AS total_accommodations;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n  (SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking') +\n  (SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking') AS total_accommodations;", "latency_sec": 1.5330159664154053, "total_duration_sec": 1.243307592, "load_duration_sec": 0.014253901, "tokens_prompt": 146, "prompt_eval_sec": 0.025279215, "tokens_completion": 51, "completion_eval_sec": 1.201720435, "tokens_total": 197, "tokens_per_sec": 128.5048586027697, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (staff and students) as two rows via UNION, while the Generated SQL returns a single summed total. The structure and output format differ: Reference produces two rows, Generated produces one row with the combined count."}
{"example_id": 3340, "sql_complexity": "subqueries", "prompt": "Calculate the total revenue for garments manufactured in the US and sold in California.", "context": "CREATE TABLE garment_manufacturing(id INT PRIMARY KEY, garment_id INT, country VARCHAR(50), material VARCHAR(50), manufacturing_date DATE, quantity INT); CREATE TABLE garment_sales(id INT PRIMARY KEY, garment_id INT, store_id INT, sale_date DATE, units INT, revenue DECIMAL(10,2));", "reference_sql": "SELECT SUM(gs.revenue) FROM garment_manufacturing gm JOIN garment_sales gs ON gm.garment_id = gs.garment_id WHERE gm.country = 'United States' AND gs.store_id IN (SELECT id FROM stores WHERE region = 'California');", "generated_sql": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US' AND gs.store_id IN (\n    SELECT store_id FROM stores WHERE state = 'California'\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US' AND gs.store_id IN (\n    SELECT store_id FROM stores WHERE state = 'California'\n);", "latency_sec": 1.8896000385284424, "total_duration_sec": 1.5967577, "load_duration_sec": 0.01390964, "tokens_prompt": 154, "prompt_eval_sec": 0.027537658, "tokens_completion": 66, "completion_eval_sec": 1.55332146, "tokens_total": 220, "tokens_per_sec": 116.4267546116948, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects: 1) The country condition uses 'United States' vs 'US' which may not match the same data, and 2) The subquery references 'region' vs 'state' in the stores table. Without knowing if these columns/values are equivalent in the actual database, the queries cannot be guaranteed to produce the same results."}
{"example_id": 596, "sql_complexity": "basic SQL", "prompt": "What is the minimum energy production cost of wind farms in Spain?", "context": "CREATE TABLE wind_farm_costs (id INT, name TEXT, country TEXT, energy_production_cost FLOAT); INSERT INTO wind_farm_costs (id, name, country, energy_production_cost) VALUES (1, 'Las Tiesas', 'Spain', 0.045), (2, 'Eolo', 'Spain', 0.050);", "reference_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "generated_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "raw_model_output": "<think>\n\n</think>\n\nSELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "latency_sec": 0.7238020896911621, "total_duration_sec": 0.602591359, "load_duration_sec": 0.024014344, "tokens_prompt": 160, "prompt_eval_sec": 0.025306873, "tokens_completion": 23, "completion_eval_sec": 0.551243438, "tokens_total": 183, "tokens_per_sec": 252.83154415606063, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They select the minimum energy_production_cost from the wind_farm_costs table where country equals 'Spain'. The sample data shows two Spanish entries with values 0.045 and 0.050, so both would return 0.045 as the minimum. No syntactic or semantic differences exist between the queries."}
{"example_id": 2604, "sql_complexity": "subqueries", "prompt": "What is the maximum number of virtual tours taken by a single user in the UK?", "context": "CREATE TABLE virtual_tour_data (user_id INT, hotel_id INT, tour_date DATE); INSERT INTO virtual_tour_data (user_id, hotel_id, tour_date) VALUES (1, 10, '2022-01-01'), (2, 11, '2022-01-03'), (3, 12, '2022-01-05'), (4, 10, '2022-01-07'), (5, 10, '2022-01-09'); CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT); INSERT INTO hotels (hotel_id, hotel_name, country) VALUES (10, 'Royal Park Hotel', 'UK'), (11, 'The Ritz London', 'UK'), (12, 'Hotel de Crillon', 'France');", "reference_sql": "SELECT MAX(vt.user_tours) FROM (SELECT user_id, COUNT(DISTINCT hotel_id) as user_tours FROM virtual_tour_data WHERE country = 'UK' GROUP BY user_id) as vt;", "generated_sql": "SELECT MAX(tour_count) AS max_tours\nFROM (\n    SELECT vt.user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data vt\n    JOIN hotels h ON vt.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY vt.user_id\n) AS user_tour_counts;", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(tour_count) AS max_tours\nFROM (\n    SELECT vt.user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data vt\n    JOIN hotels h ON vt.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY vt.user_id\n) AS user_tour_counts;", "latency_sec": 1.9757449626922607, "total_duration_sec": 1.901564643, "load_duration_sec": 0.023967696, "tokens_prompt": 286, "prompt_eval_sec": 0.051270642, "tokens_completion": 75, "completion_eval_sec": 1.824268963, "tokens_total": 361, "tokens_per_sec": 182.7158903688061, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'country' column in the virtual_tour_data table, which does not exist in the schema. The Generated SQL correctly joins with the hotels table to filter by country. Additionally, the Reference SQL uses COUNT(DISTINCT hotel_id) while the Generated SQL uses COUNT(*), which would produce different results if users visited the same hotel multiple times."}
{"example_id": 5812, "sql_complexity": "single join", "prompt": "Calculate the percentage of Shariah-compliant investments held by each investor in the top 5 countries with the highest percentage?", "context": "CREATE TABLE investors (investor_id INT, investor_name TEXT, country TEXT); INSERT INTO investors (investor_id, investor_name, country) VALUES (1, 'Al Thani', 'Qatar'), (2, 'Saudi Investment Group', 'Saudi Arabia'), (3, 'Temasek Holdings', 'Singapore'); CREATE TABLE investments (investment_id INT, investor_id INT, investment_type TEXT, investment_value DECIMAL, is_shariah_compliant BOOLEAN); INSERT INTO investments (investment_id, investor_id, investment_type, investment_value, is_shariah_compliant) VALUES (1, 1, 'Real Estate', 15000000, true), (2, 2, 'Stocks', 20000000, false);", "reference_sql": "SELECT investor_name, ROUND((SUM(CASE WHEN is_shariah_compliant THEN investment_value ELSE 0 END) / SUM(investment_value)) * 100, 2) AS percentage FROM investments JOIN investors ON investments.investor_id = investors.investor_id GROUP BY investor_name ORDER BY percentage DESC LIMIT 5;", "generated_sql": "SELECT \n    i.country,\n    ROUND((COUNT(CASE WHEN iv.is_shariah_compliant THEN 1 END) * 100.0 / COUNT(*)), 2) AS shariah_compliance_percentage\nFROM investors i\nJOIN investments iv ON i.investor_id = iv.investor_id\nGROUP BY i.country\nORDER BY shariah_compliance_percentage DESC\nLIMIT 5;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    i.country,\n    ROUND((COUNT(CASE WHEN iv.is_shariah_compliant THEN 1 END) * 100.0 / COUNT(*)), 2) AS shariah_compliance_percentage\nFROM investors i\nJOIN investments iv ON i.investor_id = iv.investor_id\nGROUP BY i.country\nORDER BY shariah_compliance_percentage DESC\nLIMIT 5;", "latency_sec": 2.543588876724243, "total_duration_sec": 2.275475399, "load_duration_sec": 0.017405191, "tokens_prompt": 259, "prompt_eval_sec": 0.05091821, "tokens_completion": 91, "completion_eval_sec": 2.205005587, "tokens_total": 350, "tokens_per_sec": 137.60085334653095, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the percentage of investment value compliant with Shariah for each investor, while the Generated SQL calculates the percentage of compliant investments (count-based) per country. Key differences: 1) Grouping by investor_name vs country, 2) Calculation method (value-based vs count-based), 3) Output columns differ."}
{"example_id": 4706, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 customers by total spend on makeup products from Italy and Spain?", "context": "CREATE TABLE customers (customer_id INT, customer_name TEXT, country TEXT); INSERT INTO customers (customer_id, customer_name, country) VALUES (1, 'Alessandro Martini', 'IT'), (2, 'Laura Rossi', 'ES'), (3, 'Daniela Gonzalez', 'MX'), (4, 'Jose Hernandez', 'ES'), (5, 'Sophia Rodriguez', 'IT'); CREATE TABLE sales (sale_id INT, customer_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, customer_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 1, 100, 'IT'), (2, 2, 2, 150, 'ES'), (3, 3, 3, 200, 'MX'), (4, 4, 4, 250, 'ES'), (5, 5, 5, 300, 'IT'); CREATE TABLE products (product_id INT, product_name TEXT, category TEXT); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Eyeshadow Palette', 'makeup'), (2, 'Liquid Lipstick', 'makeup'), (3, 'BB Cream', 'makeup'), (4, 'Volumizing Mascara', 'makeup'), (5, 'Nourishing Lip Balm', 'makeup');", "reference_sql": "SELECT c.customer_name, SUM(s.sale_quantity) as total_spent_on_makeup FROM sales s JOIN customers c ON s.customer_id = c.customer_id JOIN products p ON s.product_id = p.product_id WHERE c.country IN ('IT', 'ES') AND p.category = 'makeup' GROUP BY c.customer_name ORDER BY total_spent_on_makeup DESC LIMIT 3;", "generated_sql": "SELECT c.customer_name, SUM(s.sale_quantity) AS total_spend\nFROM sales s\nJOIN customers c ON s.customer_id = c.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE p.category = 'makeup' AND c.country IN ('IT', 'ES')\nGROUP BY c.customer_name\nORDER BY total_spend DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT c.customer_name, SUM(s.sale_quantity) AS total_spend\nFROM sales s\nJOIN customers c ON s.customer_id = c.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE p.category = 'makeup' AND c.country IN ('IT', 'ES')\nGROUP BY c.customer_name\nORDER BY total_spend DESC\nLIMIT 3;", "latency_sec": 2.266505002975464, "total_duration_sec": 2.16923713, "load_duration_sec": 0.014002406, "tokens_prompt": 395, "prompt_eval_sec": 0.082440875, "tokens_completion": 83, "completion_eval_sec": 2.070276374, "tokens_total": 478, "tokens_per_sec": 210.89739461085787, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining the same tables (sales, customers, products) with identical conditions. The only differences are the alias names for the aggregated column ('total_spent_on_makeup' vs 'total_spend') and the order of conditions in the WHERE clause, which do not affect the result. The GROUP BY, ORDER BY, and LIMIT clauses are identical in logic and structure."}
{"example_id": 1515, "sql_complexity": "multiple_joins", "prompt": "What is the average age of clients who lost cases in the 'personal injury' category?", "context": "CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50)); INSERT INTO Cases (CaseID, ClientID, Category) VALUES (701, 7, 'Personal Injury'); CREATE TABLE Clients (ClientID int, Age int, Gender varchar(10)); INSERT INTO Clients (ClientID, Age, Gender) VALUES (7, 45, 'Male'); CREATE TABLE CaseOutcomes (CaseID int, Outcome varchar(50)); INSERT INTO CaseOutcomes (CaseID, Outcome) VALUES (701, 'Lost');", "reference_sql": "SELECT AVG(C.Age) as AvgAge FROM Clients C INNER JOIN Cases CA ON C.ClientID = CA.ClientID INNER JOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID WHERE CA.Category = 'Personal Injury' AND CO.Outcome = 'Lost';", "generated_sql": "SELECT AVG(Clients.Age) AS AverageAge\nFROM Clients\nJOIN Cases ON Clients.ClientID = Cases.ClientID\nJOIN CaseOutcomes ON Cases.CaseID = CaseOutcomes.CaseID\nWHERE Cases.Category = 'Personal Injury' AND CaseOutcomes.Outcome = 'Lost';", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(Clients.Age) AS AverageAge\nFROM Clients\nJOIN Cases ON Clients.ClientID = Cases.ClientID\nJOIN CaseOutcomes ON Cases.CaseID = CaseOutcomes.CaseID\nWHERE Cases.Category = 'Personal Injury' AND CaseOutcomes.Outcome = 'Lost';", "latency_sec": 1.6620030403137207, "total_duration_sec": 1.588255143, "load_duration_sec": 0.014089276, "tokens_prompt": 208, "prompt_eval_sec": 0.039993914, "tokens_completion": 64, "completion_eval_sec": 1.532083428, "tokens_total": 272, "tokens_per_sec": 163.65794369946346, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of clients with 'Personal Injury' cases that resulted in 'Lost'. The structure, join conditions, filter criteria, and aggregation are identical. The only differences are table aliases (C/CA/CO vs Clients/Cases/CaseOutcomes) and column alias names (AvgAge vs AverageAge), which do not affect semantic equivalence."}
{"example_id": 4388, "sql_complexity": "subqueries", "prompt": "Insert a new drug with a price 10% higher than the average price", "context": "CREATE TABLE drugs (drug_id INT, drug_name VARCHAR(50), price DECIMAL(10, 2)); INSERT INTO drugs (drug_id, drug_name, price) VALUES (1, 'DrugA', 50), (2, 'DrugB', 75), (3, 'DrugC', 100)", "reference_sql": "INSERT INTO drugs (drug_id, drug_name, price) VALUES ((SELECT MAX(drug_id) FROM drugs) + 1, 'DrugD', (SELECT AVG(price) * 1.1 FROM drugs))", "generated_sql": "INSERT INTO drugs (drug_name, price) \nVALUES ('NewDrug', (SELECT ROUND(AVG(price) * 1.1, 2) FROM drugs));", "raw_model_output": "<think>\n\n</think>\n\nINSERT INTO drugs (drug_name, price) \nVALUES ('NewDrug', (SELECT ROUND(AVG(price) * 1.1, 2) FROM drugs));", "latency_sec": 1.236332893371582, "total_duration_sec": 0.980379227, "load_duration_sec": 0.024902104, "tokens_prompt": 161, "prompt_eval_sec": 0.027332363, "tokens_completion": 39, "completion_eval_sec": 0.925951132, "tokens_total": 200, "tokens_per_sec": 161.76872836779702, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL explicitly calculates drug_id as MAX(drug_id) + 1, while the Generated SQL omits drug_id and relies on auto-increment, which may produce different values if there are gaps or different auto-increment settings. Additionally, the Generated SQL uses ROUND on the price calculation, whereas the Reference SQL does not, potentially leading to different price values when the average price has more decimal places."}
{"example_id": 5431, "sql_complexity": "basic SQL", "prompt": "What is the average CO2 emission of ride-hailing vehicles in San Francisco?", "context": "CREATE TABLE SFRideHailing (id INT, company VARCHAR(20), co2_emission DECIMAL(5,2));", "reference_sql": "SELECT AVG(co2_emission) FROM SFRideHailing WHERE company = 'Uber';", "generated_sql": "SELECT AVG(co2_emission) AS average_co2_emission FROM SFRideHailing;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(co2_emission) AS average_co2_emission FROM SFRideHailing;", "latency_sec": 0.7693393230438232, "total_duration_sec": 0.628035813, "load_duration_sec": 0.017298502, "tokens_prompt": 116, "prompt_eval_sec": 0.022868159, "tokens_completion": 25, "completion_eval_sec": 0.585809759, "tokens_total": 141, "tokens_per_sec": 183.27413636176288, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters results to only include rows where company = 'Uber', while the Generated SQL calculates the average for all companies without any filtering. The presence of the WHERE clause in the Reference query ensures it only considers Uber's CO2 emissions, whereas the Generated query includes all entries in the table."}
{"example_id": 3531, "sql_complexity": "single join", "prompt": "What is the total number of workouts and total workout time per user for users with a membership type of 'Basic'?", "context": "CREATE TABLE Members (id INT, user_name VARCHAR, membership_type VARCHAR, signup_date DATE); CREATE TABLE Workouts (id INT, user_id INT, workout_date DATE, workout_duration INT); INSERT INTO Members (id, user_name, membership_type, signup_date) VALUES (1, 'John Doe', 'Premium', '2020-01-01'), (2, 'Jane Smith', 'Basic', '2019-06-15'), (3, 'Alice Johnson', 'Premium', '2020-03-20'); INSERT INTO Workouts (id, user_id, workout_date, workout_duration) VALUES (1, 1, '2020-01-01', 60), (2, 1, '2020-01-02', 70), (3, 2, '2019-06-15', 90), (4, 3, '2020-03-20', 65), (5, 3, '2020-03-21', 70);", "reference_sql": "SELECT Members.user_name, SUM(Workouts.workout_duration) AS total_workout_time, COUNT(Workouts.id) AS total_workouts FROM Members JOIN Workouts ON Members.id = Workouts.user_id WHERE Members.membership_type = 'Basic' GROUP BY Members.user_name;", "generated_sql": "SELECT \n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    SUM(w.workout_duration) AS total_workout_time\nFROM \n    Members m\nJOIN \n    Workouts w ON m.id = w.user_id\nWHERE \n    m.membership_type = 'Basic'\nGROUP BY \n    m.user_name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    SUM(w.workout_duration) AS total_workout_time\nFROM \n    Members m\nJOIN \n    Workouts w ON m.id = w.user_id\nWHERE \n    m.membership_type = 'Basic'\nGROUP BY \n    m.user_name;", "latency_sec": 2.0431580543518066, "total_duration_sec": 1.91972467, "load_duration_sec": 0.013312596, "tokens_prompt": 344, "prompt_eval_sec": 0.067633955, "tokens_completion": 74, "completion_eval_sec": 1.83650633, "tokens_total": 418, "tokens_per_sec": 204.58524934460382, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining Members and Workouts tables on user_id, filtering for 'Basic' membership type, and grouping by user_name. The generated query uses table aliases and reorders the selected columns, but these are syntactic variations that do not affect the semantic result. Aggregation functions (SUM and COUNT) are applied to the same columns in both queries."}
{"example_id": 5678, "sql_complexity": "set operations", "prompt": "How many public works projects are there in 'Sydney' and 'Melbourne' combined?", "context": "CREATE TABLE PublicWorksC(id INT, city VARCHAR(20), project VARCHAR(30)); INSERT INTO PublicWorksC(id, city, project) VALUES (1, 'Sydney', 'Park Renovation'), (2, 'Melbourne', 'Sidewalk Repair');", "reference_sql": "SELECT COUNT(*) FROM (SELECT city FROM PublicWorksC WHERE city = 'Sydney' UNION ALL SELECT city FROM PublicWorksC WHERE city = 'Melbourne') AS Total;", "generated_sql": "SELECT COUNT(*) FROM PublicWorksC WHERE city IN ('Sydney', 'Melbourne');", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM PublicWorksC WHERE city IN ('Sydney', 'Melbourne');", "latency_sec": 0.8676879405975342, "total_duration_sec": 0.593317165, "load_duration_sec": 0.014257808, "tokens_prompt": 148, "prompt_eval_sec": 0.027241385, "tokens_completion": 23, "completion_eval_sec": 0.549696014, "tokens_total": 171, "tokens_per_sec": 197.0754599657576, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the total number of rows where the city is either 'Sydney' or 'Melbourne'. The Reference SQL uses a UNION ALL to combine results from two separate selects, while the Generated SQL uses IN to achieve the same condition. Since UNION ALL includes all rows (without deduplication) and the IN clause directly filters the rows, the final count remains identical in both cases."}
{"example_id": 5792, "sql_complexity": "multiple_joins", "prompt": "How many cases were handled by attorneys in the 'Los Angeles' office?", "context": "CREATE TABLE offices (office_id INT, office_name VARCHAR(20), city VARCHAR(20), state VARCHAR(20)); INSERT INTO offices (office_id, office_name, city, state) VALUES (1, 'Boston', 'Boston', 'MA'), (2, 'New York', 'New York', 'NY'), (3, 'Los Angeles', 'Los Angeles', 'CA'); CREATE TABLE attorneys (attorney_id INT, office_id INT); INSERT INTO attorneys (attorney_id, office_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3);", "reference_sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.attorney_id JOIN offices ON attorneys.office_id = offices.office_id WHERE offices.city = 'Los Angeles';", "generated_sql": "SELECT COUNT(*) FROM cases \nJOIN attorneys ON cases.attorney_id = attorneys.attorney_id \nJOIN offices ON attorneys.office_id = offices.office_id \nWHERE offices.city = 'Los Angeles';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM cases \nJOIN attorneys ON cases.attorney_id = attorneys.attorney_id \nJOIN offices ON attorneys.office_id = offices.office_id \nWHERE offices.city = 'Los Angeles';", "latency_sec": 1.4898598194122314, "total_duration_sec": 1.122384617, "load_duration_sec": 0.015314577, "tokens_prompt": 253, "prompt_eval_sec": 0.047366702, "tokens_completion": 43, "completion_eval_sec": 1.056610968, "tokens_total": 296, "tokens_per_sec": 198.67640978248258, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The Reference SQL and Generated SQL are identical in structure, JOIN conditions, and WHERE clause. Both queries perform the same three-table join (cases \u2192 attorneys \u2192 offices) with the same filter on offices.city = 'Los Angeles', resulting in the same count of matching records."}
{"example_id": 5148, "sql_complexity": "window functions", "prompt": "List the unique types of smart city technologies that have been implemented in the top 3 most populous countries in the world.", "context": "CREATE TABLE smart_city_tech (tech_type VARCHAR(255), country VARCHAR(255)); CREATE TABLE country_populations (country VARCHAR(255), population INT);", "reference_sql": "SELECT DISTINCT tech_type FROM smart_city_tech SCT WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY population DESC) as rank FROM country_populations) CP WHERE rank <= 3);", "generated_sql": "SELECT DISTINCT tech_type\nFROM smart_city_tech\nWHERE country IN (\n    SELECT country\n    FROM country_populations\n    ORDER BY population DESC\n    LIMIT 3\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT DISTINCT tech_type\nFROM smart_city_tech\nWHERE country IN (\n    SELECT country\n    FROM country_populations\n    ORDER BY population DESC\n    LIMIT 3\n);", "latency_sec": 1.1212761402130127, "total_duration_sec": 1.025838905, "load_duration_sec": 0.013814642, "tokens_prompt": 134, "prompt_eval_sec": 0.022452595, "tokens_completion": 42, "completion_eval_sec": 0.987273321, "tokens_total": 176, "tokens_per_sec": 156.9640106375265, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select distinct tech_type values from smart_city_tech where the country is among the top 3 most populous countries. The reference query uses a window function to rank countries by population and filters for rank <= 3, while the generated query uses ORDER BY population DESC with LIMIT 3. Both approaches effectively retrieve the same set of top 3 countries, making the queries semantically equivalent."}
{"example_id": 5547, "sql_complexity": "multiple_joins", "prompt": "Which species have a population growth rate higher than the average for protected areas?", "context": "CREATE TABLE species (id INT, name VARCHAR(50), population DECIMAL(5,2), protected_area_id INT, growth_rate DECIMAL(5,2)); INSERT INTO species (id, name, population, protected_area_id, growth_rate) VALUES (1, 'Species 1', 500.00, 1, 0.05), (2, 'Species 2', 800.00, 1, 0.03), (3, 'Species 3', 1200.00, 2, 0.07), (4, 'Species 4', 700.00, 2, 0.02); CREATE TABLE protected_areas (id INT, name VARCHAR(50)); INSERT INTO protected_areas (id, name) VALUES (1, 'Area 1'), (2, 'Area 2');", "reference_sql": "SELECT s.name, s.growth_rate FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id GROUP BY s.name, s.growth_rate HAVING s.growth_rate > (SELECT AVG(s.growth_rate) FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id);", "generated_sql": "SELECT s.name, s.growth_rate\nFROM species s\nWHERE s.growth_rate > (\n    SELECT AVG(growth_rate)\n    FROM species\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT s.name, s.growth_rate\nFROM species s\nWHERE s.growth_rate > (\n    SELECT AVG(growth_rate)\n    FROM species\n);", "latency_sec": 1.286458969116211, "total_duration_sec": 0.991272379, "load_duration_sec": 0.021850605, "tokens_prompt": 281, "prompt_eval_sec": 0.052857314, "tokens_completion": 37, "completion_eval_sec": 0.914137515, "tokens_total": 318, "tokens_per_sec": 247.1901612365173, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a JOIN with protected_areas in both the main query and the subquery, while the Generated SQL omits this JOIN. The subquery in the Reference SQL calculates the average growth_rate of species linked to protected areas (potentially excluding species with invalid protected_area_id), whereas the Generated SQL calculates the average growth_rate of all species regardless of their protected_area_id. This difference in subquery logic may lead to different average values, making the queries non-equivalent in general cases."}
{"example_id": 5498, "sql_complexity": "aggregation", "prompt": "Identify the destinations with the highest number of repeat visitors from the US.", "context": "CREATE TABLE RepeatTravelers (Visitor VARCHAR(20), Destination VARCHAR(20), VisitCount INT); INSERT INTO RepeatTravelers (Visitor, Destination, VisitCount) VALUES ('David', 'Paris', 3), ('Ella', 'London', 4), ('Fiona', 'Paris', 2);", "reference_sql": "SELECT Destination, AVG(VisitCount) AS AvgVisitCount FROM RepeatTravelers WHERE Visitor LIKE '%USA%' GROUP BY Destination ORDER BY AvgVisitCount DESC;", "generated_sql": "SELECT Destination, SUM(VisitCount) AS TotalVisits\nFROM RepeatTravelers\nGROUP BY Destination\nORDER BY TotalVisits DESC;", "raw_model_output": "<think>\n\n</think>\n\nSELECT Destination, SUM(VisitCount) AS TotalVisits\nFROM RepeatTravelers\nGROUP BY Destination\nORDER BY TotalVisits DESC;", "latency_sec": 1.0922677516937256, "total_duration_sec": 0.853830743, "load_duration_sec": 0.01779539, "tokens_prompt": 152, "prompt_eval_sec": 0.026626435, "tokens_completion": 34, "completion_eval_sec": 0.807108594, "tokens_total": 186, "tokens_per_sec": 170.28791677826155, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the average VisitCount (AVG) for travelers with 'USA' in their name, while the generated query calculates the total visits (SUM) without any filter. Additionally, the reference query groups by Destination and orders by AvgVisitCount, whereas the generated query orders by TotalVisits. The WHERE clause in the reference query excludes all rows (no visitors have 'USA' in their name), resulting in no output, while the generated query returns aggregated sums."}
{"example_id": 3546, "sql_complexity": "window functions", "prompt": "What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?", "context": "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", "reference_sql": "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';", "generated_sql": "SELECT ce.exchange_name, bc.company_name, bc.platform\nFROM cryptocurrency_exchanges ce\nJOIN blockchain_companies bc ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "raw_model_output": "<think>\n\n</think>\n\nSELECT ce.exchange_name, bc.company_name, bc.platform\nFROM cryptocurrency_exchanges ce\nJOIN blockchain_companies bc ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "latency_sec": 1.5267081260681152, "total_duration_sec": 1.335613482, "load_duration_sec": 0.013576863, "tokens_prompt": 293, "prompt_eval_sec": 0.057754873, "tokens_completion": 51, "completion_eval_sec": 1.262093337, "tokens_total": 344, "tokens_per_sec": 225.32139190608603, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes a ROW_NUMBER() column and selects exchange_id, while the Generated SQL includes platform in the select list and lacks the row number calculation. Additionally, the Generated SQL adds an ORDER BY clause not present in the Reference. The result sets differ in both column structure and content."}
{"example_id": 486, "sql_complexity": "single join", "prompt": "What is the average price of paintings from African artists in our collection?", "context": "CREATE TABLE Artworks (id INT, title VARCHAR(50), price DECIMAL(10,2), medium VARCHAR(50), artist_nationality VARCHAR(50)); CREATE TABLE Collections (id INT, name VARCHAR(50), continent VARCHAR(50));", "reference_sql": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Collections ON Artworks.artist_nationality = Collections.continent WHERE Artworks.medium = 'Painting' AND Collections.continent = 'Africa';", "generated_sql": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE artist_nationality IN (SELECT continent FROM Collections WHERE name = 'our collection') AND medium = 'painting';", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(price) AS average_price\nFROM Artworks\nWHERE artist_nationality IN (SELECT continent FROM Collections WHERE name = 'our collection') AND medium = 'painting';", "latency_sec": 1.1822912693023682, "total_duration_sec": 1.02816309, "load_duration_sec": 0.01435394, "tokens_prompt": 143, "prompt_eval_sec": 0.021505081, "tokens_completion": 42, "completion_eval_sec": 0.990167316, "tokens_total": 185, "tokens_per_sec": 156.4758235161142, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL joins Artworks with Collections on artist_nationality = continent and filters Collections.continent = 'Africa', while the Generated SQL uses a subquery to check artist_nationality against continents from Collections where name = 'our collection'. These conditions are not equivalent unless the 'our collection' entry specifically corresponds to 'Africa', which is not guaranteed by the schema. The filtering criteria differ semantically."}
{"example_id": 794, "sql_complexity": "multiple_joins", "prompt": "Which suppliers have provided raw materials for the production of chemicals with high environmental impact?", "context": "CREATE TABLE suppliers (id INT, name TEXT); INSERT INTO suppliers (id, name) VALUES (1, 'Supplier1'), (2, 'Supplier2'), (3, 'Supplier3'); CREATE TABLE chemicals (id INT, name TEXT, environmental_impact INT); INSERT INTO chemicals (id, name, environmental_impact) VALUES (1, 'ChemA', 10), (2, 'ChemB', 20), (3, 'ChemC', 15); CREATE TABLE raw_materials (chemical_id INT, supplier_id INT); INSERT INTO raw_materials (chemical_id, supplier_id) VALUES (1, 1), (1, 2), (2, 3), (3, 1);", "reference_sql": "SELECT s.name FROM suppliers s INNER JOIN raw_materials rm ON s.id = rm.supplier_id INNER JOIN chemicals c ON rm.chemical_id = c.id WHERE c.environmental_impact > 10;", "generated_sql": "SELECT DISTINCT s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > 15;", "raw_model_output": "<think>\n\n</think>\n\nSELECT DISTINCT s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > 15;", "latency_sec": 1.6418519020080566, "total_duration_sec": 1.311173898, "load_duration_sec": 0.025004081, "tokens_prompt": 240, "prompt_eval_sec": 0.045901734, "tokens_completion": 51, "completion_eval_sec": 1.237666108, "tokens_total": 291, "tokens_per_sec": 177.23888472772379, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the environmental impact threshold (10 vs 15) and the use of DISTINCT. The Reference SQL filters chemicals with environmental_impact > 10 (ChemB=20, ChemC=15) while the Generated SQL filters >15 (only ChemB=20). This changes the results: Reference returns suppliers linked to ChemB and ChemC (Suppliers 1 and 3), while Generated only returns supplier linked to ChemB (Supplier 3). The DISTINCT clause in Generated doesn't affect this specific case but adds unnecessary overhead."}
{"example_id": 3164, "sql_complexity": "set operations", "prompt": "What is the average age of patients who received therapy in 'clinic_a' and 'clinic_b'?", "context": "CREATE TABLE clinic_a (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_a (patient_id, age, therapy_received) VALUES (1, 35, true), (2, 42, true), (3, 28, false); CREATE TABLE clinic_b (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_b (patient_id, age, therapy_received) VALUES (4, 50, true), (5, 32, false), (6, 45, true);", "reference_sql": "SELECT AVG(age) FROM (SELECT age FROM clinic_a WHERE therapy_received = true UNION ALL SELECT age FROM clinic_b WHERE therapy_received = true) AS combined_clinics;", "generated_sql": "SELECT AVG(age) AS average_age\nFROM (\n  SELECT age FROM clinic_a WHERE therapy_received = true\n  UNION ALL\n  SELECT age FROM clinic_b WHERE therapy_received = true\n) AS combined_therapies;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(age) AS average_age\nFROM (\n  SELECT age FROM clinic_a WHERE therapy_received = true\n  UNION ALL\n  SELECT age FROM clinic_b WHERE therapy_received = true\n) AS combined_therapies;", "latency_sec": 1.289013147354126, "total_duration_sec": 1.279346315, "load_duration_sec": 0.013738242, "tokens_prompt": 207, "prompt_eval_sec": 0.040306209, "tokens_completion": 51, "completion_eval_sec": 1.223310026, "tokens_total": 258, "tokens_per_sec": 200.15311754544936, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of patients who received therapy by combining rows from clinic_a and clinic_b where therapy_received = true. The only differences are the table alias names (combined_clinics vs. combined_therapies) and a column alias (average_age), which do not affect the semantic result."}
{"example_id": 3704, "sql_complexity": "aggregation", "prompt": "What is the total sales revenue for each category of garments in the South America region in Q1 2022?", "context": "CREATE TABLE sales_category (sale_id INT, garment_category VARCHAR(50), sale_date DATE, total_sales DECIMAL(10, 2), region VARCHAR(50));", "reference_sql": "SELECT garment_category, SUM(total_sales) FROM sales_category WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31' AND region = 'South America' GROUP BY garment_category;", "generated_sql": "SELECT garment_category, SUM(total_sales) AS total_sales_revenue\nFROM sales_category\nWHERE region = 'South America'\n  AND sale_date BETWEEN '2022-01-01' AND '2022-03-31'\nGROUP BY garment_category;", "raw_model_output": "<think>\n\n</think>\n\nSELECT garment_category, SUM(total_sales) AS total_sales_revenue\nFROM sales_category\nWHERE region = 'South America'\n  AND sale_date BETWEEN '2022-01-01' AND '2022-03-31'\nGROUP BY garment_category;", "latency_sec": 1.6086089611053467, "total_duration_sec": 1.569207934, "load_duration_sec": 0.014868045, "tokens_prompt": 134, "prompt_eval_sec": 0.022448051, "tokens_completion": 65, "completion_eval_sec": 1.529858532, "tokens_total": 199, "tokens_per_sec": 123.70936928217674, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The generated query adds an alias 'total_sales_revenue' to the SUM column, but the aggregation logic, filtering conditions, and grouping remain identical. The order of conditions in the WHERE clause does not affect the result, and both queries compute the same summary statistics for garment categories in 'South America' during the specified date range."}
{"example_id": 2851, "sql_complexity": "single join", "prompt": "How many cases were handled by attorneys who joined the firm in 2015 or later?", "context": "CREATE TABLE attorneys (attorney_id INT, join_year INT); CREATE TABLE cases (case_id INT, attorney_id INT, billing_amount INT);", "reference_sql": "SELECT COUNT(DISTINCT cases.case_id) FROM cases INNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id WHERE attorneys.join_year >= 2015;", "generated_sql": "SELECT COUNT(*) FROM cases WHERE attorney_id IN (SELECT attorney_id FROM attorneys WHERE join_year >= 2015);", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM cases WHERE attorney_id IN (SELECT attorney_id FROM attorneys WHERE join_year >= 2015);", "latency_sec": 0.8797430992126465, "total_duration_sec": 0.750163765, "load_duration_sec": 0.019124455, "tokens_prompt": 121, "prompt_eval_sec": 0.023920719, "tokens_completion": 30, "completion_eval_sec": 0.703827978, "tokens_total": 151, "tokens_per_sec": 171.64101671856494, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of cases handled by attorneys who joined in 2015 or later. The reference query uses a JOIN and COUNT(DISTINCT) to ensure unique case IDs, while the generated query uses a subquery with IN and COUNT(*). Since each case_id is unique (implied by typical schema design), COUNT(DISTINCT case_id) equals COUNT(*) in this context, making the queries equivalent."}
{"example_id": 3246, "sql_complexity": "single join", "prompt": "What is the average eco-friendliness score of accommodations in Oceania by year?", "context": "CREATE TABLE Accommodations (Accommodation_ID INT, Accommodation_Name VARCHAR(50), City VARCHAR(30), Country VARCHAR(50), Eco_Friendliness_Score INT, Visit_Year INT); INSERT INTO Accommodations (Accommodation_ID, Accommodation_Name, City, Country, Eco_Friendliness_Score, Visit_Year) VALUES (1, 'EcoLodge', 'Sydney', 'Australia', 85, 2019), (2, 'GreenHotel', 'Melbourne', 'Australia', 90, 2019), (3, 'SustainableResort', 'Auckland', 'New Zealand', 80, 2019), (4, 'EcoVilla', 'Wellington', 'New Zealand', 88, 2019); CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(30)); INSERT INTO Countries (Country, Continent) VALUES ('Australia', 'Oceania'), ('New Zealand', 'Oceania');", "reference_sql": "SELECT C.Continent, V.Visit_Year, AVG(A.Eco_Friendliness_Score) AS Avg_Eco_Score  FROM Accommodations A  JOIN Countries C  ON A.Country = C.Country  WHERE C.Continent = 'Oceania'  GROUP BY C.Continent, V.Visit_Year  ORDER BY V.Visit_Year;", "generated_sql": "SELECT Visit_Year, AVG(Eco_Friendliness_Score) AS Average_Eco_Friendliness_Score\nFROM Accommodations\nJOIN Countries ON Accommodations.Country = Countries.Country\nWHERE Countries.Continent = 'Oceania'\nGROUP BY Visit_Year;", "raw_model_output": "<think>\n\n</think>\n\nSELECT Visit_Year, AVG(Eco_Friendliness_Score) AS Average_Eco_Friendliness_Score\nFROM Accommodations\nJOIN Countries ON Accommodations.Country = Countries.Country\nWHERE Countries.Continent = 'Oceania'\nGROUP BY Visit_Year;", "latency_sec": 1.6635141372680664, "total_duration_sec": 1.582772589, "load_duration_sec": 0.024951259, "tokens_prompt": 312, "prompt_eval_sec": 0.057606944, "tokens_completion": 61, "completion_eval_sec": 1.498067845, "tokens_total": 373, "tokens_per_sec": 224.22412388545456, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'Continent' in both the SELECT and GROUP BY clauses, while the Generated SQL omits it. Although the WHERE clause restricts to 'Oceania', the result sets differ in structure (columns) because the Reference includes the 'Continent' column. Semantic equivalence requires identical result sets, including column structure, which is not the case here."}
{"example_id": 3056, "sql_complexity": "multiple_joins", "prompt": "Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.", "context": "CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);", "reference_sql": "SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;", "generated_sql": "SELECT DISTINCT s.id, s.name\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE AND r.numStars >= 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT DISTINCT s.id, s.name\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE AND r.numStars >= 1;", "latency_sec": 1.3976480960845947, "total_duration_sec": 1.363738432, "load_duration_sec": 0.020089534, "tokens_prompt": 143, "prompt_eval_sec": 0.021673947, "tokens_completion": 56, "completion_eval_sec": 1.320059114, "tokens_total": 199, "tokens_per_sec": 142.38204921359204, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in three key aspects: 1) The Reference SQL filters for Restaurants.numStars > 2 while the Generated SQL uses r.numStars >= 1, leading to different restaurant criteria. 2) The Reference SQL selects only Suppliers.name, whereas the Generated SQL selects both s.id and s.name. 3) The Generated SQL includes DISTINCT, which could eliminate duplicates not present in the Reference SQL. These differences in filtering, column selection, and deduplication make the queries non-equivalent."}
{"example_id": 264, "sql_complexity": "set operations", "prompt": "List the number of community health centers and infectious disease tracking facilities in 'southwest' regions.", "context": "CREATE TABLE centers (id INT, name TEXT, region TEXT); INSERT INTO centers (id, name, region) VALUES (1, 'Center A', 'southwest'); INSERT INTO centers (id, name, region) VALUES (2, 'Center B', 'northeast'); INSERT INTO centers (id, name, region) VALUES (3, 'Center C', 'northwest'); CREATE TABLE diseases (id INT, name TEXT, region TEXT); INSERT INTO diseases (id, name, region) VALUES (1, 'Disease A', 'southwest'); INSERT INTO diseases (id, name, region) VALUES (2, 'Disease B', 'southeast');", "reference_sql": "SELECT COUNT(*) FROM ( (SELECT * FROM centers WHERE region = 'southwest') UNION (SELECT * FROM diseases WHERE region = 'southwest') );", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS community_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS infectious_disease_facilities;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS community_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS infectious_disease_facilities;", "latency_sec": 1.5207109451293945, "total_duration_sec": 1.220954947, "load_duration_sec": 0.025408037, "tokens_prompt": 230, "prompt_eval_sec": 0.051096818, "tokens_completion": 47, "completion_eval_sec": 1.139201848, "tokens_total": 277, "tokens_per_sec": 182.15164485215865, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single count of all unique rows from both tables where region = 'southwest', while the Generated SQL returns two separate counts (one for centers and one for diseases). The structure and output format differ, so they are not semantically equivalent."}
{"example_id": 2838, "sql_complexity": "basic SQL", "prompt": "What is the minimum safety rating of electric vehicles in the 'green_cars' table?", "context": "CREATE TABLE green_cars (id INT, make VARCHAR(50), model VARCHAR(50), type VARCHAR(50), safety_rating INT);", "reference_sql": "SELECT MIN(safety_rating) FROM green_cars WHERE type = 'Electric';", "generated_sql": "SELECT MIN(safety_rating) FROM green_cars WHERE type = 'electric';", "raw_model_output": "<think>\n\n</think>\n\nSELECT MIN(safety_rating) FROM green_cars WHERE type = 'electric';", "latency_sec": 0.5957241058349609, "total_duration_sec": 0.534089605, "load_duration_sec": 0.019372238, "tokens_prompt": 121, "prompt_eval_sec": 0.022119233, "tokens_completion": 21, "completion_eval_sec": 0.490415378, "tokens_total": 142, "tokens_per_sec": 238.3653751949054, "match_exact": true, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The difference in case ('Electric' vs 'electric') does not affect the result under standard SQL practices, as string comparisons are typically case-insensitive unless explicitly configured otherwise. Both queries select the minimum safety_rating from the same table with the same logical condition."}
{"example_id": 1187, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 authors with the highest number of articles published in The Guardian?", "context": "CREATE TABLE authors (id INT, name VARCHAR(100), publisher VARCHAR(50)); CREATE TABLE articles_authors (article_id INT, author_id INT); INSERT INTO authors (id, name, publisher) VALUES (1, 'Author1', 'The Guardian'), (2, 'Author2', 'The Guardian'), (3, 'Author3', 'The Guardian'); INSERT INTO articles_authors (article_id, author_id) VALUES (1, 1), (2, 2), (3, 1), (3, 2), (3, 3); INSERT INTO articles (id, title, publication_date, publisher) VALUES (1, 'Article1', '2021-01-01', 'The Guardian'), (2, 'Article2', '2021-01-02', 'The Guardian'), (3, 'Article3', '2021-01-03', 'The Guardian');", "reference_sql": "SELECT a.name, COUNT(aa.article_id) AS articles_count FROM authors a JOIN articles_authors aa ON a.id = aa.author_id JOIN articles ar ON aa.article_id = ar.id WHERE ar.publisher = 'The Guardian' GROUP BY a.name ORDER BY articles_count DESC LIMIT 3;", "generated_sql": "SELECT a.name, COUNT(*) AS article_count\nFROM authors a\nJOIN articles_authors aa ON a.id = aa.author_id\nJOIN articles art ON aa.article_id = art.id\nWHERE art.publisher = 'The Guardian'\nGROUP BY a.name\nORDER BY article_count DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT a.name, COUNT(*) AS article_count\nFROM authors a\nJOIN articles_authors aa ON a.id = aa.author_id\nJOIN articles art ON aa.article_id = art.id\nWHERE art.publisher = 'The Guardian'\nGROUP BY a.name\nORDER BY article_count DESC\nLIMIT 3;", "latency_sec": 1.9799330234527588, "total_duration_sec": 1.700998487, "load_duration_sec": 0.022246181, "tokens_prompt": 294, "prompt_eval_sec": 0.05802535, "tokens_completion": 66, "completion_eval_sec": 1.618129968, "tokens_total": 360, "tokens_per_sec": 181.82433230605167, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining identical tables with equivalent conditions. The only differences are the table alias names ('ar' vs 'art') and the column alias ('articles_count' vs 'article_count'), which do not affect the semantic result. The COUNT(*) in the generated query is equivalent to COUNT(aa.article_id) in the reference query since each row in the join represents a valid article-author relationship."}
{"example_id": 360, "sql_complexity": "window functions", "prompt": "What is the change in crime rate for each category, between this year and last year, for the same time period?", "context": "CREATE TABLE CrimeStatistics (ID INT, CrimeType VARCHAR(50), Date TIMESTAMP, Count INT); INSERT INTO CrimeStatistics (ID, CrimeType, Date, Count) VALUES (1, 'Theft', '2022-01-01 00:00:00', 100), (2, 'Vandalism', '2022-01-01 00:00:00', 50), (3, 'Theft', '2022-01-02 00:00:00', 120), (4, 'Vandalism', '2022-01-02 00:00:00', 60), (5, 'Theft', '2021-01-01 00:00:00', 80), (6, 'Vandalism', '2021-01-01 00:00:00', 40), (7, 'Theft', '2021-01-02 00:00:00', 90), (8, 'Vandalism', '2021-01-02 00:00:00', 45);", "reference_sql": "SELECT CrimeType, (SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date) ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) - SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date)) AS CrimeRateChange FROM CrimeStatistics WHERE Date BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND CURRENT_DATE;", "generated_sql": "SELECT \n    CrimeType,\n    SUM(CASE WHEN Date >= '2022-01-01' AND Date < '2023-01-01' THEN Count ELSE 0 END) AS ThisYearCount,\n    SUM(CASE WHEN Date >= '2021-01-01' AND Date < '2022-01-01' THEN Count ELSE 0 END) AS LastYearCount,\n    (SUM(CASE WHEN Date >= '2022-01-01' AND Date < '2023-01-01' THEN Count ELSE 0 END) - SUM(CASE WHEN Date >= '2021-01-01' AND Date < '2022-01-01' THEN Count ELSE 0 END)) AS ChangeInCrimeRate\nFROM CrimeStatistics\nGROUP BY CrimeType;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    CrimeType,\n    SUM(CASE WHEN Date >= '2022-01-01' AND Date < '2023-01-01' THEN Count ELSE 0 END) AS ThisYearCount,\n    SUM(CASE WHEN Date >= '2021-01-01' AND Date < '2022-01-01' THEN Count ELSE 0 END) AS LastYearCount,\n    (SUM(CASE WHEN Date >= '2022-01-01' AND Date < '2023-01-01' THEN Count ELSE 0 END) - SUM(CASE WHEN Date >= '2021-01-01' AND Date < '2022-01-01' THEN Count ELSE 0 END)) AS ChangeInCrimeRate\nFROM CrimeStatistics\nGROUP BY CrimeType;", "latency_sec": 5.2066590785980225, "total_duration_sec": 4.971651218, "load_duration_sec": 0.016616658, "tokens_prompt": 394, "prompt_eval_sec": 0.076618151, "tokens_completion": 201, "completion_eval_sec": 4.876440822, "tokens_total": 595, "tokens_per_sec": 114.27673504603905, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses window functions to calculate a moving difference between consecutive years, but its ordering and framing may not correctly capture annual totals. The Generated SQL explicitly aggregates counts for specific years (2021 and 2022) and calculates the difference, which is more precise. Additionally, the Reference SQL's WHERE clause filters a dynamic date range while the Generated SQL uses fixed date literals, leading to different data subsets."}
{"example_id": 335, "sql_complexity": "single join", "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000", "context": "CREATE TABLE policies (policy_number INT);CREATE TABLE claims (claim_id INT, policy_number INT, claim_amount DECIMAL(10,2), claim_date DATE);", "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "generated_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date\nFROM policies p\nJOIN claims c ON p.policy_number = c.policy_number\nWHERE p.policy_number IN (\n    SELECT policy_number\n    FROM claims\n    GROUP BY policy_number\n    HAVING COUNT(*) > 2 AND SUM(claim_amount) > 5000\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT p.policy_number, c.claim_amount, c.claim_date\nFROM policies p\nJOIN claims c ON p.policy_number = c.policy_number\nWHERE p.policy_number IN (\n    SELECT policy_number\n    FROM claims\n    GROUP BY policy_number\n    HAVING COUNT(*) > 2 AND SUM(claim_amount) > 5000\n);", "latency_sec": 1.9471533298492432, "total_duration_sec": 1.896857906, "load_duration_sec": 0.017870965, "tokens_prompt": 137, "prompt_eval_sec": 0.021289015, "tokens_completion": 79, "completion_eval_sec": 1.855643257, "tokens_total": 216, "tokens_per_sec": 110.93117151525178, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query groups by policy_number, claim_amount, and claim_date, checking for groups with >2 claims and sum >5000. The generated query filters policies with total claims >2 and sum >5000, then returns all their claims. The reference query's HAVING clause operates on per-group aggregates, while the generated query's subquery uses overall policy-level aggregates. This leads to different results when claims have varying amounts/dates within the same policy."}
{"example_id": 2866, "sql_complexity": "basic SQL", "prompt": "What is the number of hospitals in 'rural_healthcare' table?", "context": "CREATE TABLE rural_healthcare (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO rural_healthcare (name, type, location) VALUES ('Rural General Hospital', 'Hospital', 'Bushland'), ('Rural Community Hospital', 'Hospital', 'Forest Region');", "reference_sql": "SELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "generated_sql": "SELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "latency_sec": 0.7809867858886719, "total_duration_sec": 0.475971366, "load_duration_sec": 0.014576287, "tokens_prompt": 153, "prompt_eval_sec": 0.026388793, "tokens_completion": 18, "completion_eval_sec": 0.432931587, "tokens_total": 171, "tokens_per_sec": 218.95376860367995, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They both count the number of rows in the 'rural_healthcare' table where the 'type' column equals 'Hospital'. The result will be the same (2) as there are two entries matching the condition."}
{"example_id": 4440, "sql_complexity": "multiple_joins", "prompt": "What is the average session length for each game genre in the last month, sorted by average session length.", "context": "CREATE TABLE game_sessions(id INT, user_id INT, game_name VARCHAR(50), start_time DATETIME, end_time DATETIME); CREATE TABLE games(id INT, name VARCHAR(50), genre VARCHAR(50));", "reference_sql": "SELECT genres.genre, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) as avg_session_length FROM game_sessions JOIN games ON game_sessions.game_name = games.name JOIN (SELECT DISTINCT game_name, genre FROM game_sessions JOIN games ON game_sessions.game_name = games.name) genres ON games.name = genres.game_name WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY genres.genre ORDER BY avg_session_length DESC;", "generated_sql": "SELECT g.genre, AVG(JULIANDAY(gs.end_time) - JULIANDAY(gs.start_time)) * 24 * 60 AS average_session_length\nFROM game_sessions gs\nJOIN games g ON gs.game_name = g.name\nWHERE gs.start_time >= DATE('now', '-1 month')\nGROUP BY g.genre\nORDER BY average_session_length;", "raw_model_output": "<think>\n\n</think>\n\nSELECT g.genre, AVG(JULIANDAY(gs.end_time) - JULIANDAY(gs.start_time)) * 24 * 60 AS average_session_length\nFROM game_sessions gs\nJOIN games g ON gs.game_name = g.name\nWHERE gs.start_time >= DATE('now', '-1 month')\nGROUP BY g.genre\nORDER BY average_session_length;", "latency_sec": 1.9723310470581055, "total_duration_sec": 1.9373292, "load_duration_sec": 0.019031946, "tokens_prompt": 139, "prompt_eval_sec": 0.020979837, "tokens_completion": 81, "completion_eval_sec": 1.895320881, "tokens_total": 220, "tokens_per_sec": 111.54314095909415, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects: 1) The Reference uses TIMESTAMPDIFF(SECOND, ...) to calculate session length in seconds, while the Generated uses JULIANDAY(...) * 24 * 60 which converts days to minutes (a 60x difference in units). 2) The Reference orders results in DESC order, while the Generated uses default ASC order. These differences in calculation units and sorting direction make the queries non-equivalent."}
{"example_id": 451, "sql_complexity": "single join", "prompt": "Which customers have made a transaction over 500 in the \"risk_management\" category?", "context": "CREATE TABLE customers (id INT, name VARCHAR(50), category VARCHAR(50)); INSERT INTO customers (id, name, category) VALUES (1, 'John Doe', 'risk_management'); INSERT INTO customers (id, name, category) VALUES (2, 'Jane Smith', 'compliance'); INSERT INTO customers (id, name, category) VALUES (3, 'Jim Brown', 'risk_management'); CREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10, 2)); INSERT INTO transactions (id, customer_id, amount) VALUES (1, 1, 500.00); INSERT INTO transactions (id, customer_id, amount) VALUES (2, 1, 200.00); INSERT INTO transactions (id, customer_id, amount) VALUES (3, 2, 100.00); INSERT INTO transactions (id, customer_id, amount) VALUES (4, 3, 750.00);", "reference_sql": "SELECT c.name FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE c.category = 'risk_management' AND t.amount > 500;", "generated_sql": "SELECT c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management' AND t.amount > 500;", "raw_model_output": "<think>\n\n</think>\n\nSELECT c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management' AND t.amount > 500;", "latency_sec": 1.220214605331421, "total_duration_sec": 1.098526238, "load_duration_sec": 0.018639333, "tokens_prompt": 301, "prompt_eval_sec": 0.058144672, "tokens_completion": 41, "completion_eval_sec": 1.019720996, "tokens_total": 342, "tokens_per_sec": 280.2785661683748, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. The only difference is the use of 'INNER JOIN' versus 'JOIN' (which is syntactically equivalent in SQL), and the WHERE clause conditions are identical. Both queries select customer names from the 'risk_management' category with transaction amounts exceeding 500, producing the same result set."}
{"example_id": 2879, "sql_complexity": "basic SQL", "prompt": "Update the FoodSafetyRecords.OrganicFarms table to include a new record for a certified organic farm in Kenya.", "context": "CREATE TABLE FoodSafetyRecords.OrganicFarms (farmName TEXT, country TEXT, certified BOOLEAN);", "reference_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) VALUES ('Ngong Organic Farm', 'Kenya', TRUE);", "generated_sql": "UPDATE FoodSafetyRecords.OrganicFarms\nSET farmName = 'NewCertifiedFarm', country = 'Kenya', certified = TRUE\nWHERE farmName = 'NewCertifiedFarm';", "raw_model_output": "<think>\n\n</think>\n\nUPDATE FoodSafetyRecords.OrganicFarms\nSET farmName = 'NewCertifiedFarm', country = 'Kenya', certified = TRUE\nWHERE farmName = 'NewCertifiedFarm';", "latency_sec": 1.416975736618042, "total_duration_sec": 1.099271865, "load_duration_sec": 0.023477172, "tokens_prompt": 117, "prompt_eval_sec": 0.020271016, "tokens_completion": 45, "completion_eval_sec": 1.053165289, "tokens_total": 162, "tokens_per_sec": 114.32799857720393, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts a new record with farmName 'Ngong Organic Farm', while the Generated SQL updates existing records where farmName = 'NewCertifiedFarm'. They operate on different data (insert vs update) and target different farm names. The update would only affect existing rows with the specific farmName, whereas the insert creates a new row. The queries have fundamentally different purposes and effects."}
{"example_id": 5688, "sql_complexity": "single join", "prompt": "What is the total amount donated to a specific cause?", "context": "CREATE TABLE causes (id INT, name TEXT); CREATE TABLE donations (id INT, donor_id INT, cause_id INT, donation_amount DECIMAL(10,2)); INSERT INTO causes (id, name) VALUES (1, 'Cause A'), (2, 'Cause B'); INSERT INTO donations (id, donor_id, cause_id, donation_amount) VALUES (1, 1, 1, 50.00), (2, 2, 1, 100.00);", "reference_sql": "SELECT SUM(donation_amount) FROM donations JOIN causes ON donations.cause_id = causes.id WHERE causes.name = 'Cause A';", "generated_sql": "SELECT SUM(donation_amount) AS total_donation FROM donations WHERE cause_id = 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(donation_amount) AS total_donation FROM donations WHERE cause_id = 1;", "latency_sec": 0.7318072319030762, "total_duration_sec": 0.627314596, "load_duration_sec": 0.013616329, "tokens_prompt": 190, "prompt_eval_sec": 0.032430535, "tokens_completion": 24, "completion_eval_sec": 0.57908274, "tokens_total": 214, "tokens_per_sec": 292.4267357176693, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total donations for 'Cause A'. The Reference SQL uses a JOIN with the causes table to filter by name, while the Generated SQL directly uses the known cause_id (1) corresponding to 'Cause A'. Since the data ensures cause_id 1 maps to 'Cause A', both queries sum the same donations (50.00 + 100.00 = 150.00)."}
{"example_id": 3273, "sql_complexity": "multiple_joins", "prompt": "List all departments, the number of chemicals they handle, and the number of machines used in their manufacturing processes.", "context": "CREATE TABLE Departments (DepartmentID INT, DepartmentName VARCHAR(20)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Manufacturing'), (2, 'Engineering'), (3, 'Chemical Safety'), (4, 'Product Development'); CREATE TABLE Chemicals (ChemicalID INT, ChemicalName VARCHAR(20), DepartmentID INT); INSERT INTO Chemicals (ChemicalID, ChemicalName, DepartmentID) VALUES (1, 'Hydrochloric Acid', 1), (2, 'Nitric Acid', 2), (3, 'Sodium Hydroxide', 3), (4, 'New Chemical', 4); CREATE TABLE Machinery (MachineID INT, MachineName VARCHAR(20), DepartmentID INT); INSERT INTO Machinery (MachineID, MachineName, DepartmentID) VALUES (1, 'Mixer 1', 1), (2, 'Cutter 2', 2), (3, 'Dispenser 3', 3), (4, 'Innovator 4', 4);", "reference_sql": "SELECT D.DepartmentName, COUNT(C.ChemicalID) AS ChemicalCount, COUNT(M.MachineID) AS MachineCount FROM Departments D LEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID LEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID GROUP BY D.DepartmentName;", "generated_sql": "SELECT \n    D.DepartmentName,\n    COUNT(C.ChemicalID) AS NumberOfChemicals,\n    COUNT(M.MachineID) AS NumberOfMachines\nFROM Departments D\nLEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID\nLEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID\nGROUP BY D.DepartmentName;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    D.DepartmentName,\n    COUNT(C.ChemicalID) AS NumberOfChemicals,\n    COUNT(M.MachineID) AS NumberOfMachines\nFROM Departments D\nLEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID\nLEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID\nGROUP BY D.DepartmentName;", "latency_sec": 2.0865681171417236, "total_duration_sec": 1.902788393, "load_duration_sec": 0.023546898, "tokens_prompt": 314, "prompt_eval_sec": 0.060061394, "tokens_completion": 74, "completion_eval_sec": 1.815992012, "tokens_total": 388, "tokens_per_sec": 185.95127415801798, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries perform the same LEFT JOIN operations between Departments, Chemicals, and Machinery tables, group by DepartmentName, and count chemical and machine IDs. The only difference is the column aliases (ChemicalCount/MachineCount vs. NumberOfChemicals/NumberOfMachines), which do not affect the semantic result."}
{"example_id": 1895, "sql_complexity": "window functions", "prompt": "What is the average safety score of chemical production sites in the United States, partitioned by state and ranked in descending order?", "context": "CREATE TABLE production_sites (site_id INT, site_name TEXT, country TEXT, state TEXT, safety_score FLOAT); INSERT INTO production_sites (site_id, site_name, country, state, safety_score) VALUES (1, 'Site A', 'USA', 'NY', 92.5), (2, 'Site B', 'USA', 'CA', 87.4), (3, 'Site C', 'USA', 'TX', 95.3), (4, 'Site D', 'USA', 'FL', 89.2);", "reference_sql": "SELECT state, AVG(safety_score) as avg_safety_score, ROW_NUMBER() OVER (ORDER BY AVG(safety_score) DESC) as rank FROM production_sites WHERE country = 'USA' GROUP BY state ORDER BY rank;", "generated_sql": "SELECT state, AVG(safety_score) AS average_safety_score\nFROM production_sites\nWHERE country = 'USA'\nGROUP BY state\nORDER BY average_safety_score DESC;", "raw_model_output": "<think>\n\n</think>\n\nSELECT state, AVG(safety_score) AS average_safety_score\nFROM production_sites\nWHERE country = 'USA'\nGROUP BY state\nORDER BY average_safety_score DESC;", "latency_sec": 1.1484379768371582, "total_duration_sec": 1.062003624, "load_duration_sec": 0.030591246, "tokens_prompt": 215, "prompt_eval_sec": 0.040845458, "tokens_completion": 41, "completion_eval_sec": 0.988486116, "tokens_total": 256, "tokens_per_sec": 222.91147207186035, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a 'rank' column generated by ROW_NUMBER() and orders by this rank, while the Generated SQL only calculates the average safety score and orders by it directly. The presence of the additional 'rank' column in the Reference SQL makes the result sets different. Additionally, the Reference SQL's ORDER BY 'rank' may not function as intended because window functions cannot be directly referenced in ORDER BY in some SQL dialects."}
{"example_id": 4669, "sql_complexity": "set operations", "prompt": "Identify the number of IoT devices in each country and the total number of devices.", "context": "CREATE TABLE device_country (device_id INT, country TEXT); INSERT INTO device_country (device_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'), (4, 'Brazil'); CREATE TABLE device_info (device_id INT, device_type TEXT); INSERT INTO device_info (device_id, device_type) VALUES (1, 'Soil Sensor'), (2, 'Temperature Sensor'), (3, 'Humidity Sensor'), (4, 'Precision Sprayer');", "reference_sql": "SELECT country, COUNT(*) AS device_count FROM device_country GROUP BY country UNION SELECT 'Total' AS country, COUNT(*) FROM device_country;", "generated_sql": "SELECT \n    country, \n    COUNT(device_id) AS device_count\nFROM \n    device_country\nGROUP BY \n    country\nUNION ALL\nSELECT \n    'Total' AS country, \n    COUNT(device_id) AS device_count\nFROM \n    device_country;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    country, \n    COUNT(device_id) AS device_count\nFROM \n    device_country\nGROUP BY \n    country\nUNION ALL\nSELECT \n    'Total' AS country, \n    COUNT(device_id) AS device_count\nFROM \n    device_country;", "latency_sec": 1.8073840141296387, "total_duration_sec": 1.501788928, "load_duration_sec": 0.014130982, "tokens_prompt": 192, "prompt_eval_sec": 0.031905987, "tokens_completion": 61, "completion_eval_sec": 1.453815903, "tokens_total": 253, "tokens_per_sec": 139.98131997523188, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result by grouping device counts by country and adding a total row. The Reference SQL uses UNION (which removes duplicates) while the Generated SQL uses UNION ALL (which includes duplicates). However, since the two result sets (country groups and total) are inherently distinct, the output remains identical. Additionally, COUNT(*) and COUNT(device_id) yield the same results here because device_id is a non-nullable primary key."}
{"example_id": 5302, "sql_complexity": "multiple_joins", "prompt": "Find the supplier with the lowest average delivery time for orders in the last month.", "context": "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", "reference_sql": "SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;", "generated_sql": "SELECT s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 month'\nGROUP BY s.SupplierName\nORDER BY AvgDeliveryTime ASC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT s.SupplierName, AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= CURRENT_DATE - INTERVAL '1 month'\nGROUP BY s.SupplierName\nORDER BY AvgDeliveryTime ASC\nLIMIT 1;", "latency_sec": 2.0845649242401123, "total_duration_sec": 2.058723739, "load_duration_sec": 0.015303133, "tokens_prompt": 232, "prompt_eval_sec": 0.046828693, "tokens_completion": 83, "completion_eval_sec": 1.994361997, "tokens_total": 315, "tokens_per_sec": 151.11066886766653, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. 1) The Generated query includes a LIMIT 1 clause, which restricts the result to a single row, while the Reference query returns all matching rows. 2) The date filtering uses different functions (DATEADD vs. CURRENT_DATE - INTERVAL), which might produce slightly different results depending on the database system. These differences mean the queries are not semantically equivalent."}
{"example_id": 267, "sql_complexity": "subqueries", "prompt": "What is the total number of disability support programs offered in urban and rural areas, and the percentage of total programs for each area type?", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(255), area_type VARCHAR(255));", "reference_sql": "SELECT area_type, COUNT(*) as total_programs, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs) , 2) as percentage_of_total FROM programs WHERE area_type IN ('urban', 'rural') GROUP BY area_type;", "generated_sql": "SELECT \n    area_type,\n    COUNT(*) AS total_programs,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs), 2) AS percentage_of_total\nFROM programs\nGROUP BY area_type;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    area_type,\n    COUNT(*) AS total_programs,\n    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs), 2) AS percentage_of_total\nFROM programs\nGROUP BY area_type;", "latency_sec": 1.4250710010528564, "total_duration_sec": 1.343584474, "load_duration_sec": 0.026344067, "tokens_prompt": 123, "prompt_eval_sec": 0.025287374, "tokens_completion": 55, "completion_eval_sec": 1.288723457, "tokens_total": 178, "tokens_per_sec": 124.90605721995034, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a WHERE clause filtering area_type to ('urban', 'rural'), while the Generated SQL omits this filter. This means the Generated SQL will group all area_type values (not just 'urban' and 'rural'), leading to different results when other area_type values exist in the table. The percentage calculation also depends on the filtered count in the subquery, but the main discrepancy is the filtering condition."}
{"example_id": 3028, "sql_complexity": "basic SQL", "prompt": "What is the number of startups founded by non-binary individuals in the technology industry?", "context": "CREATE TABLE company (id INT, name TEXT, founder_gender TEXT, industry TEXT); INSERT INTO company (id, name, founder_gender, industry) VALUES (1, 'CodeForAll', 'Non-binary', 'Technology'); INSERT INTO company (id, name, founder_gender, industry) VALUES (2, 'TechVillage', 'Male', 'Technology');", "reference_sql": "SELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "generated_sql": "SELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "latency_sec": 0.7048032283782959, "total_duration_sec": 0.625444097, "load_duration_sec": 0.018290149, "tokens_prompt": 162, "prompt_eval_sec": 0.028303641, "tokens_completion": 24, "completion_eval_sec": 0.576734014, "tokens_total": 186, "tokens_per_sec": 263.90344497708, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The Reference SQL and Generated SQL are identical in structure, conditions, and logic. Both queries select the count of companies where founder_gender is 'Non-binary' and industry is 'Technology', ensuring they produce the same result."}
{"example_id": 3282, "sql_complexity": "aggregation", "prompt": "Which marine species have been observed in both the Arctic and Antarctic oceans?", "context": "CREATE TABLE marine_species (id INT, species_name VARCHAR(50), common_name VARCHAR(50), region VARCHAR(20));INSERT INTO marine_species (id, species_name, common_name, region) VALUES (1, 'Orcinus_orca', 'Killer Whale', 'Arctic');INSERT INTO marine_species (id, species_name, common_name, region) VALUES (2, 'Balaenoptera_bonaerensis', 'Antarctic Minke Whale', 'Antarctic');", "reference_sql": "SELECT species_name FROM marine_species WHERE region IN ('Arctic', 'Antarctic') GROUP BY species_name HAVING COUNT(DISTINCT region) = 2;", "generated_sql": "SELECT species_name, common_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name, common_name\nHAVING COUNT(DISTINCT region) = 2;", "raw_model_output": "<think>\n\n</think>\n\nSELECT species_name, common_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name, common_name\nHAVING COUNT(DISTINCT region) = 2;", "latency_sec": 1.502622127532959, "total_duration_sec": 1.205031645, "load_duration_sec": 0.020954817, "tokens_prompt": 192, "prompt_eval_sec": 0.034719272, "tokens_completion": 48, "completion_eval_sec": 1.146673839, "tokens_total": 240, "tokens_per_sec": 159.7207944714868, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query selects only 'species_name', while the generated query selects both 'species_name' and 'common_name'. Additionally, the generated query groups by both columns, which could yield different results if a species_name had multiple common_names across regions. Even with the sample data, the output structures differ (1 column vs. 2 columns)."}
{"example_id": 3474, "sql_complexity": "subqueries", "prompt": "What is the total transaction volume for the top 3 digital assets by market capitalization in the 'developed_markets' schema?", "context": "CREATE SCHEMA developed_markets; CREATE TABLE developed_markets.digital_assets (asset_name VARCHAR(10), market_cap BIGINT, daily_transaction_volume BIGINT); INSERT INTO developed_markets.digital_assets (asset_name, market_cap, daily_transaction_volume) VALUES ('AssetG', 30000000, 15000000), ('AssetH', 25000000, 12000000), ('AssetI', 20000000, 10000000), ('AssetJ', 15000000, 8000000), ('AssetK', 10000000, 6000000);", "reference_sql": "SELECT SUM(daily_transaction_volume) FROM (SELECT daily_transaction_volume FROM developed_markets.digital_assets ORDER BY market_cap DESC FETCH NEXT 3 ROWS ONLY) t;", "generated_sql": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n    SELECT daily_transaction_volume\n    FROM developed_markets.digital_assets\n    ORDER BY market_cap DESC\n    LIMIT 3\n) AS top_assets;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n    SELECT daily_transaction_volume\n    FROM developed_markets.digital_assets\n    ORDER BY market_cap DESC\n    LIMIT 3\n) AS top_assets;", "latency_sec": 1.6199028491973877, "total_duration_sec": 1.296987704, "load_duration_sec": 0.014819087, "tokens_prompt": 269, "prompt_eval_sec": 0.054135119, "tokens_completion": 50, "completion_eval_sec": 1.225840274, "tokens_total": 319, "tokens_per_sec": 196.9253897899215, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries order digital_assets by market_cap in descending order, select the top 3 rows, and calculate the sum of their daily_transaction_volume. The difference in syntax (FETCH NEXT 3 ROWS ONLY vs LIMIT 3) does not affect the semantic result, as both achieve the same row limitation behavior."}
{"example_id": 1626, "sql_complexity": "aggregation", "prompt": "Find the total value of social impact bonds issued by each organization.", "context": "CREATE TABLE social_impact_bonds (id INT, organization_name VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO social_impact_bonds (id, organization_name, issue_year, value) VALUES (1, 'Acme Corp', 2018, 2000000), (2, 'XYZ Foundation', 2019, 3000000), (3, 'Global Giving', 2018, 1500000), (4, 'Acme Corp', 2019, 2500000), (5, 'XYZ Foundation', 2018, 1000000);", "reference_sql": "SELECT organization_name, SUM(value) as total_value FROM social_impact_bonds GROUP BY organization_name;", "generated_sql": "SELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "latency_sec": 0.9327380657196045, "total_duration_sec": 0.765430445, "load_duration_sec": 0.023279626, "tokens_prompt": 242, "prompt_eval_sec": 0.045648312, "tokens_completion": 28, "completion_eval_sec": 0.694500807, "tokens_total": 270, "tokens_per_sec": 289.470334623575, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select organization_name and the sum of value with the same alias, grouping by organization_name. The only differences are whitespace and formatting, which do not affect semantic equivalence."}
{"example_id": 1315, "sql_complexity": "single join", "prompt": "List all the transactions made by clients living in New York with a transaction amount greater than $1000.", "context": "CREATE TABLE transactions (id INT, client_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (id, client_id, transaction_amount, transaction_date) VALUES (1, 3, 1500.00, '2022-01-01'), (2, 4, 800.00, '2022-01-02'), (3, 3, 1200.00, '2022-01-03'); CREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');", "reference_sql": "SELECT transactions.id, transactions.client_id, transactions.transaction_amount, transactions.transaction_date FROM transactions INNER JOIN clients ON transactions.client_id = clients.id WHERE clients.state = 'New York' AND transactions.transaction_amount > 1000.00;", "generated_sql": "SELECT t.id, t.client_id, t.transaction_amount, t.transaction_date\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York' AND t.transaction_amount > 1000;", "raw_model_output": "<think>\n\n</think>\n\n```sql\nSELECT t.id, t.client_id, t.transaction_amount, t.transaction_date\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York' AND t.transaction_amount > 1000;\n```", "latency_sec": 1.5441060066223145, "total_duration_sec": 1.5126732, "load_duration_sec": 0.013612776, "tokens_prompt": 270, "prompt_eval_sec": 0.054319966, "tokens_completion": 59, "completion_eval_sec": 1.442367296, "tokens_total": 329, "tokens_per_sec": 213.06827289641703, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an INNER JOIN between transactions and clients on client_id, filter for 'New York' state and transaction_amount > 1000, and select identical columns. The generated query uses table aliases (t/c) but maintains the same logical structure and conditions as the reference query."}
{"example_id": 520, "sql_complexity": "multiple_joins", "prompt": "What is the total number of electric vehicles sold in 'California' in the 'sales' schema?", "context": "CREATE TABLE sales_regions (id INT, name VARCHAR(50));   CREATE TABLE sales (id INT, region_id INT, vehicle_count INT);   CREATE TABLE vehicles (id INT, type VARCHAR(50));   INSERT INTO sales_regions VALUES (1, 'California');   INSERT INTO sales VALUES (1, 1, 5000);   INSERT INTO vehicles VALUES (1, 'electric');", "reference_sql": "SELECT SUM(sales.vehicle_count) FROM sales INNER JOIN sales_regions ON sales.region_id = sales_regions.id INNER JOIN vehicles ON sales.id = vehicles.id WHERE vehicles.type = 'electric' AND sales_regions.name = 'California';", "generated_sql": "SELECT SUM(s.vehicle_count) AS total_electric_vehicles\nFROM sales s\nJOIN sales_regions sr ON s.region_id = sr.id\nJOIN vehicles v ON v.id = s.id\nWHERE sr.name = 'California' AND v.type = 'electric';", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(s.vehicle_count) AS total_electric_vehicles\nFROM sales s\nJOIN sales_regions sr ON s.region_id = sr.id\nJOIN vehicles v ON v.id = s.id\nWHERE sr.name = 'California' AND v.type = 'electric';", "latency_sec": 1.494096040725708, "total_duration_sec": 1.425652644, "load_duration_sec": 0.018072012, "tokens_prompt": 176, "prompt_eval_sec": 0.030389792, "tokens_completion": 58, "completion_eval_sec": 1.374803073, "tokens_total": 234, "tokens_per_sec": 156.6164380479465, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of vehicle_count from the sales table where the region is 'California' and the vehicle type is 'electric'. They use equivalent JOIN conditions (sales.region_id = sales_regions.id and sales.id = vehicles.id) with identical WHERE clauses. The generated query uses table aliases (s, sr, v) and a column alias (total_electric_vehicles), but these do not affect the semantic result. The logical structure and conditions are identical."}
{"example_id": 3999, "sql_complexity": "single join", "prompt": "What is the total number of tickets sold for performances with a rating of 5?", "context": "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", "reference_sql": "SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;", "generated_sql": "SELECT COUNT(*) FROM performance WHERE rating = 5;", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM performance WHERE rating = 5;", "latency_sec": 0.756248950958252, "total_duration_sec": 0.439557376, "load_duration_sec": 0.024444733, "tokens_prompt": 158, "prompt_eval_sec": 0.026036566, "tokens_completion": 16, "completion_eval_sec": 0.387112024, "tokens_total": 174, "tokens_per_sec": 230.08296379059112, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the total tickets sold (sum of quantity) for performances with a rating of 5, while the Generated SQL counts the number of performances with a rating of 5. They aggregate different data (sum vs. count) and do not account for the ticket table's quantity field."}
{"example_id": 2261, "sql_complexity": "multiple_joins", "prompt": "What is the total number of animals that have been released into 'protected' habitats, and the average weight of those animals?", "context": "CREATE TABLE habitats (habitat_id INT, habitat_name VARCHAR(50), habitat_status VARCHAR(50)); INSERT INTO habitats (habitat_id, habitat_name, habitat_status) VALUES (1, 'Habitat A', 'protected'), (2, 'Habitat B', 'unprotected'); CREATE TABLE animal_habitats (animal_id INT, habitat_id INT, animal_weight FLOAT); INSERT INTO animal_habitats (animal_id, habitat_id, animal_weight) VALUES (101, 1, 25.5), (102, 2, 15.2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');", "reference_sql": "SELECT COUNT(*), AVG(animal_habitats.animal_weight) FROM animal_habitats INNER JOIN animals ON animal_habitats.animal_id = animals.animal_id INNER JOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id WHERE habitats.habitat_status = 'protected';", "generated_sql": "SELECT COUNT(*) AS total_animals, AVG(animal_weight) AS average_weight\nFROM animal_habitats\nJOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id\nWHERE habitats.habitat_status = 'protected';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) AS total_animals, AVG(animal_weight) AS average_weight\nFROM animal_habitats\nJOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id\nWHERE habitats.habitat_status = 'protected';", "latency_sec": 1.7141551971435547, "total_duration_sec": 1.436188608, "load_duration_sec": 0.014531942, "tokens_prompt": 266, "prompt_eval_sec": 0.052677209, "tokens_completion": 56, "completion_eval_sec": 1.365611563, "tokens_total": 322, "tokens_per_sec": 187.84763511295623, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the count and average animal weight for records where habitat_status is 'protected'. The generated query omits the unnecessary join with the animals table since animal_habitats.animal_weight is already available in the animal_habitats table. The core logic (filtering on protected habitats and aggregating animal weights) remains identical."}
{"example_id": 3439, "sql_complexity": "multiple_joins", "prompt": "How many menu items contain ingredients sourced from local suppliers for each restaurant?", "context": "CREATE TABLE restaurants (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO restaurants VALUES (1, 'Restaurant A', 'City A'); INSERT INTO restaurants VALUES (2, 'Restaurant B', 'City B'); CREATE TABLE menu_items (id INT, name VARCHAR(50), restaurant_id INT, price DECIMAL(5,2)); INSERT INTO menu_items VALUES (1, 'Item A', 1, 10.99); INSERT INTO menu_items VALUES (2, 'Item B', 1, 12.99); INSERT INTO menu_items VALUES (3, 'Item C', 2, 11.99); CREATE TABLE ingredients (id INT, name VARCHAR(50), local_source BOOLEAN, menu_item_id INT); INSERT INTO ingredients VALUES (1, 'Ingredient A', TRUE, 1); INSERT INTO ingredients VALUES (2, 'Ingredient B', FALSE, 1); INSERT INTO ingredients VALUES (3, 'Ingredient C', TRUE, 2); INSERT INTO ingredients VALUES (4, 'Ingredient D', FALSE, 2); INSERT INTO ingredients VALUES (5, 'Ingredient E', TRUE, 3);", "reference_sql": "SELECT r.name, COUNT(DISTINCT mi.id) as num_local_items FROM restaurants r JOIN menu_items mi ON r.id = mi.restaurant_id JOIN ingredients i ON mi.id = i.menu_item_id WHERE i.local_source = TRUE GROUP BY r.name;", "generated_sql": "SELECT r.name AS restaurant_name, COUNT(DISTINCT mi.id) AS menu_items_with_local_ingredients\nFROM restaurants r\nJOIN menu_items mi ON r.id = mi.restaurant_id\nJOIN ingredients i ON mi.id = i.menu_item_id\nWHERE i.local_source = TRUE\nGROUP BY r.name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT r.name AS restaurant_name, COUNT(DISTINCT mi.id) AS menu_items_with_local_ingredients\nFROM restaurants r\nJOIN menu_items mi ON r.id = mi.restaurant_id\nJOIN ingredients i ON mi.id = i.menu_item_id\nWHERE i.local_source = TRUE\nGROUP BY r.name;", "latency_sec": 1.8118457794189453, "total_duration_sec": 1.758091976, "load_duration_sec": 0.023984209, "tokens_prompt": 329, "prompt_eval_sec": 0.067073326, "tokens_completion": 67, "completion_eval_sec": 1.664795882, "tokens_total": 396, "tokens_per_sec": 218.56164829160917, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries perform identical operations: joining the same tables (restaurants, menu_items, ingredients) with the same conditions, filtering on i.local_source = TRUE, grouping by restaurant name, and counting distinct menu item IDs. The only differences are in column aliases (e.g., 'name' vs 'restaurant_name', 'num_local_items' vs 'menu_items_with_local_ingredients'), which do not affect the semantic result."}
{"example_id": 2265, "sql_complexity": "aggregation", "prompt": "Hourly revenue for a specific movie?", "context": "CREATE TABLE Movie_Revenue (id INT, movie_title VARCHAR(100), revenue_time TIME, revenue DECIMAL(10,2));", "reference_sql": "SELECT revenue_time, SUM(revenue) FROM Movie_Revenue WHERE movie_title = 'Spider-Man: No Way Home' GROUP BY revenue_time;", "generated_sql": "SELECT EXTRACT(HOUR FROM revenue_time) AS revenue_hour, SUM(revenue) AS total_revenue  \nFROM Movie_Revenue  \nWHERE movie_title = 'specific_movie'  \nGROUP BY EXTRACT(HOUR FROM revenue_time);", "raw_model_output": "<think>\n\n</think>\n\nSELECT EXTRACT(HOUR FROM revenue_time) AS revenue_hour, SUM(revenue) AS total_revenue  \nFROM Movie_Revenue  \nWHERE movie_title = 'specific_movie'  \nGROUP BY EXTRACT(HOUR FROM revenue_time);", "latency_sec": 1.3340039253234863, "total_duration_sec": 1.228269188, "load_duration_sec": 0.017969313, "tokens_prompt": 110, "prompt_eval_sec": 0.017534764, "tokens_completion": 51, "completion_eval_sec": 1.190819328, "tokens_total": 161, "tokens_per_sec": 120.68930004157122, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query groups by the full 'revenue_time' (exact time values), while the generated query groups by the hour part of 'revenue_time' (aggregating all times within the same hour). Additionally, the generated query uses a different movie title ('specific_movie' vs 'Spider-Man: No Way Home') and selects different columns (hour vs full time). These differences in grouping, column selection, and filter conditions result in distinct semantic behavior."}
{"example_id": 1763, "sql_complexity": "multiple_joins", "prompt": "What is the total food and beverage revenue last month for hotels in 'Bangkok'?", "context": "CREATE TABLE revenue (hotel_id INT, revenue_source VARCHAR(50), revenue INT, revenue_date DATE); INSERT INTO revenue (hotel_id, revenue_source, revenue, revenue_date) VALUES (5, 'Room revenue', 12000, '2022-03-01'), (5, 'Food and beverage', 4000, '2022-03-02'), (5, 'Other revenue', 1000, '2022-03-03'); CREATE TABLE hotels (hotel_id INT, city VARCHAR(50)); INSERT INTO hotels (hotel_id, city) VALUES (5, 'Bangkok'); CREATE TABLE dates (date DATE); INSERT INTO dates (date) VALUES ('2022-03-01'), ('2022-03-02'), ('2022-03-03');", "reference_sql": "SELECT SUM(revenue) FROM revenue JOIN hotels ON revenue.hotel_id = hotels.hotel_id JOIN dates ON revenue.revenue_date = dates.date WHERE hotels.city = 'Bangkok' AND revenue_source = 'Food and beverage' AND dates.date >= DATEADD(month, -1, GETDATE());", "generated_sql": "SELECT SUM(r.revenue) AS total_food_beverage_revenue\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE r.revenue_source = 'Food and beverage'\nAND h.city = 'Bangkok'\nAND r.revenue_date BETWEEN '2022-02-01' AND '2022-02-28';", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(r.revenue) AS total_food_beverage_revenue\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE r.revenue_source = 'Food and beverage'\nAND h.city = 'Bangkok'\nAND r.revenue_date BETWEEN '2022-02-01' AND '2022-02-28';", "latency_sec": 2.2724769115448, "total_duration_sec": 2.215576042, "load_duration_sec": 0.024405464, "tokens_prompt": 286, "prompt_eval_sec": 0.051744575, "tokens_completion": 88, "completion_eval_sec": 2.137264732, "tokens_total": 374, "tokens_per_sec": 164.5781297490762, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their date filtering logic. The Reference SQL uses DATEADD(month, -1, GETDATE()) to dynamically calculate a date range, while the Generated SQL uses hardcoded dates ('2022-02-01' to '2022-02-28'). The revenue data in the example has revenue_date values in March 2022, which would not match the hardcoded February range in the Generated SQL. Additionally, the Reference SQL joins with the dates table, which is not present in the Generated SQL. These differences mean the queries would produce different results."}
{"example_id": 5499, "sql_complexity": "set operations", "prompt": "How many legal aid clinics and community mediation centers are there in total, and what is the sum of cases handled by each type of center, for centers located in the state of California?", "context": "CREATE TABLE LegalAidClinics (ClinicName text, State text, NumCases int); INSERT INTO LegalAidClinics VALUES ('Clinic1', 'CA', 30, '2022-01-01'), ('Clinic2', 'CA', 25, '2022-01-01'); CREATE TABLE CommunityMediationCenters (CenterName text, State text, NumCases int); INSERT INTO CommunityMediationCenters VALUES ('CM1', 'CA', 22, '2022-01-01'), ('CM2', 'CA', 28, '2022-01-01');", "reference_sql": "SELECT State, 'Legal Aid Clinics' AS CenterType, COUNT(*) AS NumCenters, SUM(NumCases) AS TotalCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT State, 'Community Mediation Centers', COUNT(*), SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM LegalAidClinics WHERE State = 'CA') AS LegalAidClinicsCount,\n    (SELECT COUNT(*) FROM CommunityMediationCenters WHERE State = 'CA') AS CommunityMediationCentersCount,\n    (SELECT SUM(NumCases) FROM LegalAidClinics WHERE State = 'CA') AS TotalLegalAidCases,\n    (SELECT SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA') AS TotalCommunityMediationCases;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    (SELECT COUNT(*) FROM LegalAidClinics WHERE State = 'CA') AS LegalAidClinicsCount,\n    (SELECT COUNT(*) FROM CommunityMediationCenters WHERE State = 'CA') AS CommunityMediationCentersCount,\n    (SELECT SUM(NumCases) FROM LegalAidClinics WHERE State = 'CA') AS TotalLegalAidCases,\n    (SELECT SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA') AS TotalCommunityMediationCases;", "latency_sec": 3.001429796218872, "total_duration_sec": 2.763350218, "load_duration_sec": 0.024878609, "tokens_prompt": 258, "prompt_eval_sec": 0.053268651, "tokens_completion": 111, "completion_eval_sec": 2.682408597, "tokens_total": 369, "tokens_per_sec": 122.94140628071901, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows (one for each center type) with columns State, CenterType, NumCenters, TotalCases, while the Generated SQL returns a single row with four separate columns for counts and sums. The output structure and format differ, so they are not semantically equivalent."}
{"example_id": 2408, "sql_complexity": "aggregation", "prompt": "What is the average number of victories for players from Japan and South Korea, partitioned by game mode?", "context": "CREATE TABLE PlayerVictories (PlayerID INT, GameMode VARCHAR(255), Victories INT, Country VARCHAR(255)); INSERT INTO PlayerVictories (PlayerID, GameMode, Victories, Country) VALUES (1, 'Battle Royale', 25, 'Japan'), (2, 'Team Deathmatch', 18, 'South Korea');", "reference_sql": "SELECT GameMode, AVG(Victories) as AvgVictories FROM PlayerVictories WHERE Country IN ('Japan', 'South Korea') GROUP BY GameMode, Country WITH ROLLUP;", "generated_sql": "SELECT GameMode, AVG(Victories) AS AverageVictories\nFROM PlayerVictories\nWHERE Country IN ('Japan', 'South Korea')\nGROUP BY GameMode;", "raw_model_output": "<think>\n\n</think>\n\nSELECT GameMode, AVG(Victories) AS AverageVictories\nFROM PlayerVictories\nWHERE Country IN ('Japan', 'South Korea')\nGROUP BY GameMode;", "latency_sec": 1.1245951652526855, "total_duration_sec": 0.975244894, "load_duration_sec": 0.013214916, "tokens_prompt": 170, "prompt_eval_sec": 0.03043349, "tokens_completion": 39, "completion_eval_sec": 0.929546474, "tokens_total": 209, "tokens_per_sec": 185.84465455445894, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses GROUP BY GameMode, Country WITH ROLLUP, which creates subtotals for each GameMode/Country combination and a grand total. The Generated SQL uses GROUP BY GameMode, which aggregates across all countries for each GameMode. The grouping columns and ROLLUP addition make the results structurally and numerically different."}
{"example_id": 2729, "sql_complexity": "subqueries", "prompt": "Find the total number of trips made by shared autonomous vehicles in Seattle", "context": "CREATE TABLE shared_vehicles (id INT, vehicle_type VARCHAR(20), is_autonomous BOOLEAN, trip_count INT); INSERT INTO shared_vehicles (id, vehicle_type, is_autonomous, trip_count) VALUES (1, 'ebike', false, 1200), (2, 'escooter', false, 800), (3, 'car', true, 1500); CREATE TABLE city_data (city VARCHAR(20), has_autonomous_vehicles BOOLEAN); INSERT INTO city_data (city, has_autonomous_vehicles) VALUES ('Seattle', true), ('Denver', false), ('Portland', true);", "reference_sql": "SELECT SUM(trip_count) FROM shared_vehicles WHERE is_autonomous = true AND vehicle_type != 'ebike' AND vehicle_type != 'escooter' AND city IN (SELECT city FROM city_data WHERE has_autonomous_vehicles = true AND city = 'Seattle');", "generated_sql": "SELECT SUM(sv.trip_count) AS total_trips\nFROM shared_vehicles sv\nJOIN city_data cd ON sv.id = cd.city\nWHERE cd.city = 'Seattle' AND sv.is_autonomous = true;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(sv.trip_count) AS total_trips\nFROM shared_vehicles sv\nJOIN city_data cd ON sv.id = cd.city\nWHERE cd.city = 'Seattle' AND sv.is_autonomous = true;", "latency_sec": 1.287672996520996, "total_duration_sec": 1.230069556, "load_duration_sec": 0.027991148, "tokens_prompt": 220, "prompt_eval_sec": 0.041598016, "tokens_completion": 48, "completion_eval_sec": 1.15831076, "tokens_total": 268, "tokens_per_sec": 208.12737451517268, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL references a 'city' column in shared_vehicles, which does not exist in the schema. The Generated SQL incorrectly joins shared_vehicles.id (INT) with city_data.city (VARCHAR), and filters on cd.city = 'Seattle' without proper context. Additionally, the Reference SQL's subquery logic and conditions differ from the Generated SQL's JOIN-based approach, leading to different execution paths and results."}
{"example_id": 2952, "sql_complexity": "aggregation", "prompt": "Show the total budget allocated for each program category in 2023.", "context": "CREATE TABLE Budget (id INT, category TEXT, year INT, allocated_amount INT); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (1, 'Education', 2023, 30000); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (2, 'Healthcare', 2023, 50000);", "reference_sql": "SELECT category, SUM(allocated_amount) FROM Budget WHERE year = 2023 GROUP BY category;", "generated_sql": "SELECT category, SUM(allocated_amount) AS total_budget\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "raw_model_output": "<think>\n\n</think>\n\nSELECT category, SUM(allocated_amount) AS total_budget\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "latency_sec": 1.1016581058502197, "total_duration_sec": 0.832143041, "load_duration_sec": 0.014256959, "tokens_prompt": 172, "prompt_eval_sec": 0.03132847, "tokens_completion": 33, "completion_eval_sec": 0.784481239, "tokens_total": 205, "tokens_per_sec": 186.08314041477365, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (category and summed allocated_amount) from the Budget table where year is 2023, grouped by category. The only difference is the alias 'total_budget' in the generated query, which doesn't affect the semantic meaning of the result."}
{"example_id": 4328, "sql_complexity": "aggregation", "prompt": "What is the average cargo handling time in hours for each port?", "context": "CREATE TABLE cargo_handling (id INT, port_id INT, time_in_hours DECIMAL(5,2)); INSERT INTO cargo_handling (id, port_id, time_in_hours) VALUES (1, 1, 20.5), (2, 1, 22.3), (3, 2, 18.7);", "reference_sql": "SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id;", "generated_sql": "SELECT port_id, AVG(time_in_hours) AS average_time_in_hours\nFROM cargo_handling\nGROUP BY port_id;", "raw_model_output": "<think>\n\n</think>\n\nSELECT port_id, AVG(time_in_hours) AS average_time_in_hours\nFROM cargo_handling\nGROUP BY port_id;", "latency_sec": 0.9810278415679932, "total_duration_sec": 0.730297949, "load_duration_sec": 0.01408755, "tokens_prompt": 158, "prompt_eval_sec": 0.026248143, "tokens_completion": 29, "completion_eval_sec": 0.687848897, "tokens_total": 187, "tokens_per_sec": 190.61640462834856, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average time_in_hours per port_id. The generated query adds an alias for the average column, but this does not affect the computed values or grouping logic. The result set structure differs only in column naming, but the semantic output (grouped averages) remains identical."}
{"example_id": 4915, "sql_complexity": "window functions", "prompt": "Calculate the percentage of total Europium production for each country.", "context": "CREATE TABLE europium_production (country VARCHAR(50), quantity INT);", "reference_sql": "SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;", "generated_sql": "SELECT \n    country, \n    (quantity * 100.0 / SUM(quantity) OVER()) AS percentage_of_total\nFROM \n    europium_production;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    country, \n    (quantity * 100.0 / SUM(quantity) OVER()) AS percentage_of_total\nFROM \n    europium_production;", "latency_sec": 1.2676427364349365, "total_duration_sec": 0.941803317, "load_duration_sec": 0.014080107, "tokens_prompt": 99, "prompt_eval_sec": 0.017325178, "tokens_completion": 39, "completion_eval_sec": 0.908303495, "tokens_total": 138, "tokens_per_sec": 108.86348024846907, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of each country's production relative to the total production. The window function SUM(quantity) OVER() in the generated query is equivalent to SUM(quantity) OVER (PARTITION BY NULL) in the reference query, as PARTITION BY NULL creates a single partition covering all rows. The column alias difference ('percentage' vs 'percentage_of_total') does not affect semantic equivalence."}
{"example_id": 5030, "sql_complexity": "subqueries", "prompt": "What is the success rate of diverse-led startups (at least 1 female or underrepresented racial or ethnic group executive) in the past 3 years?", "context": "CREATE TABLE DiverseStartups(id INT, name TEXT, country TEXT, year INT, success BOOLEAN);   INSERT INTO DiverseStartups VALUES (1, 'FemTech', 'USA', 2020, true), (2, 'GreenCity', 'Canada', 2019, false), (3, 'AI-Health', 'UK', 2021, true), (4, 'SolarEnergy', 'USA', 2020, false), (5, 'DataAnalytics', 'Germany', 2019, true), (6, 'SmartGrid', 'USA', 2021, true), (7, 'CloudServices', 'India', 2020, false), (8, 'RenewableEnergy', 'USA', 2019, true);", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3) AS success_rate FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3 AND success = true;", "generated_sql": "SELECT \n    (COUNT(CASE WHEN success THEN 1 ELSE NULL END) * 1.0 / COUNT(*)) * 100 AS success_rate\nFROM \n    DiverseStartups\nWHERE \n    year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    (COUNT(CASE WHEN success THEN 1 ELSE NULL END) * 1.0 / COUNT(*)) * 100 AS success_rate\nFROM \n    DiverseStartups\nWHERE \n    year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2;", "latency_sec": 1.6727712154388428, "total_duration_sec": 1.641404421, "load_duration_sec": 0.022607103, "tokens_prompt": 280, "prompt_eval_sec": 0.05176903, "tokens_completion": 64, "completion_eval_sec": 1.564941965, "tokens_total": 344, "tokens_per_sec": 205.6467715519324, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year filtering conditions. The Reference SQL uses 'YEAR(CURRENT_DATE) - 3' (3-year window), while the Generated SQL uses 'EXTRACT(YEAR FROM CURRENT_DATE) - 2' (2-year window). This results in different datasets being analyzed, making their results non-equivalent. Additionally, the Generated SQL's calculation method (count(success)/count(*) * 100) is mathematically equivalent to the Reference's approach, but the differing time frames invalidate semantic equivalence."}
{"example_id": 4626, "sql_complexity": "aggregation", "prompt": "What was the maximum number of training hours for farmers in each country in 2020?", "context": "CREATE TABLE training (id INT, country_id INT, farmer_id INT, hours INT, date DATE);", "reference_sql": "SELECT country_id, MAX(hours) FROM training WHERE YEAR(date) = 2020 GROUP BY country_id;", "generated_sql": "SELECT country_id, MAX(hours) AS max_hours\nFROM training\nWHERE EXTRACT(YEAR FROM date) = 2020\nGROUP BY country_id;", "raw_model_output": "<think>\n\n</think>\n\n```sql\nSELECT country_id, MAX(hours) AS max_hours\nFROM training\nWHERE EXTRACT(YEAR FROM date) = 2020\nGROUP BY country_id;\n```", "latency_sec": 1.316619873046875, "total_duration_sec": 1.04775028, "load_duration_sec": 0.022247246, "tokens_prompt": 113, "prompt_eval_sec": 0.0204521, "tokens_completion": 43, "completion_eval_sec": 1.003149928, "tokens_total": 156, "tokens_per_sec": 118.48522355886239, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select country_id and max(hours) from training where the date is in 2020, grouped by country_id. The WHERE clause condition YEAR(date) = 2020 vs EXTRACT(YEAR FROM date) = 2020 are functionally equivalent for this purpose. The generated query adds an alias (max_hours) which doesn't affect the semantic result."}
{"example_id": 2703, "sql_complexity": "set operations", "prompt": "Identify the species unique to 'MarineResearchAreaA' and 'MarineResearchAreaB'", "context": "CREATE TABLE ResearchAreaSpecies (area VARCHAR(255), species VARCHAR(255)); INSERT INTO ResearchAreaSpecies (area, species) VALUES ('MarineResearchAreaA', 'Coral'), ('MarineResearchAreaA', 'Starfish'), ('MarineResearchAreaB', 'Jellyfish');", "reference_sql": "(SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB') UNION (SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA');", "generated_sql": "SELECT species\nFROM ResearchAreaSpecies\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\nGROUP BY species\nHAVING COUNT(DISTINCT area) = 2;", "raw_model_output": "<think>\n\n</think>\n\nSELECT species\nFROM ResearchAreaSpecies\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\nGROUP BY species\nHAVING COUNT(DISTINCT area) = 2;", "latency_sec": 1.458953857421875, "total_duration_sec": 1.134954824, "load_duration_sec": 0.013887536, "tokens_prompt": 158, "prompt_eval_sec": 0.027697339, "tokens_completion": 46, "completion_eval_sec": 1.090391951, "tokens_total": 204, "tokens_per_sec": 139.82621791787813, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL computes the symmetric difference (species in either area but not both) using EXCEPT and UNION, while the Generated SQL finds species present in both areas (intersection) via GROUP BY and HAVING COUNT(DISTINCT area) = 2. They return opposite results."}
{"example_id": 200, "sql_complexity": "window functions", "prompt": "List the top three categories of workforce development programs with the highest budget increases.", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(50), budget DECIMAL(10, 2), category VARCHAR(50), budget_date DATE);", "reference_sql": "SELECT category, SUM(budget - LAG(budget) OVER (PARTITION BY category ORDER BY budget_date)) as total_budget_increase FROM programs GROUP BY category ORDER BY total_budget_increase DESC LIMIT 3;", "generated_sql": "SELECT category, budget\nFROM programs\nORDER BY budget DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT category, budget\nFROM programs\nORDER BY budget DESC\nLIMIT 3;", "latency_sec": 0.8200399875640869, "total_duration_sec": 0.557701232, "load_duration_sec": 0.01386912, "tokens_prompt": 122, "prompt_eval_sec": 0.022446936, "tokens_completion": 22, "completion_eval_sec": 0.518984333, "tokens_total": 144, "tokens_per_sec": 175.60119284883808, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total budget increase per category using a window function and aggregation, while the generated query simply retrieves the top 3 programs by budget without any aggregation or category-specific calculations. The result structures and purposes differ significantly."}
{"example_id": 5131, "sql_complexity": "basic SQL", "prompt": "How many wells were drilled in the Eagle Ford Shale and Bakken Formation?", "context": "CREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), num_drilled INT); INSERT INTO wells (id, region, well_type, num_drilled) VALUES (1, 'Eagle Ford Shale', 'Oil', 2000), (2, 'Eagle Ford Shale', 'Gas', 1500), (3, 'Bakken Formation', 'Oil', 1000), (4, 'Bakken Formation', 'Gas', 1200);", "reference_sql": "SELECT SUM(num_drilled) as total_wells FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "generated_sql": "SELECT SUM(num_drilled) FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(num_drilled) FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "latency_sec": 0.860663890838623, "total_duration_sec": 0.773642168, "load_duration_sec": 0.024270545, "tokens_prompt": 205, "prompt_eval_sec": 0.038454286, "tokens_completion": 29, "completion_eval_sec": 0.708788483, "tokens_total": 234, "tokens_per_sec": 271.8831386919144, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of num_drilled for wells in the specified regions. The only difference is the column alias (total_wells vs. no alias), which doesn't affect the semantic result. The WHERE clause and aggregate function are identical."}
{"example_id": 1160, "sql_complexity": "subqueries", "prompt": "What is the total revenue generated from ads on Instagram in March 2021, for users in the 'brand' category who have posted more than 10 times?", "context": "CREATE TABLE ads (ad_id INT, user_id INT, platform VARCHAR(255), ad_revenue DECIMAL(10,2), post_count INT); INSERT INTO ads (ad_id, user_id, platform, ad_revenue, post_count) VALUES (1, 1, 'Instagram', 150.50, 12), (2, 2, 'Twitter', 80.00, 15), (3, 3, 'Instagram', 120.75, 8);", "reference_sql": "SELECT SUM(ad_revenue) FROM ads WHERE platform = 'Instagram' AND MONTH(ad_date) = 3 AND YEAR(ad_date) = 2021 AND user_id IN (SELECT user_id FROM users WHERE category = 'brand' AND post_count > 10);", "generated_sql": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10\n  AND user_id IN (\n    SELECT user_id\n    FROM users\n    WHERE category = 'brand'\n      AND registration_date BETWEEN '2021-03-01' AND '2021-03-31'\n  );", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10\n  AND user_id IN (\n    SELECT user_id\n    FROM users\n    WHERE category = 'brand'\n      AND registration_date BETWEEN '2021-03-01' AND '2021-03-31'\n  );", "latency_sec": 2.27154803276062, "total_duration_sec": 2.160703214, "load_duration_sec": 0.014571065, "tokens_prompt": 223, "prompt_eval_sec": 0.041074127, "tokens_completion": 88, "completion_eval_sec": 2.102987323, "tokens_total": 311, "tokens_per_sec": 136.9110384260907, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects: 1) The Reference SQL filters by ad_date (MONTH/ YEAR) while the Generated SQL uses registration_date between specific dates. 2) The Reference SQL applies post_count > 10 in the subquery, whereas the Generated SQL applies it in the main query. These differences in date fields and filter placement would produce different results."}
{"example_id": 4708, "sql_complexity": "subqueries", "prompt": "What is the maximum number of high-level threats reported by a single agency in a month?", "context": "CREATE TABLE Threat_Intelligence (Threat_ID INT, Threat_Type VARCHAR(50), Threat_Level VARCHAR(50), Reported_Date DATE, Reporting_Agency VARCHAR(50)); CREATE VIEW High_Level_Threats AS SELECT Threat_Type, Threat_Level, Reported_Date FROM Threat_Intelligence WHERE Threat_Level = 'High';", "reference_sql": "SELECT Reporting_Agency, MAX(Number_of_High_Level_Threats) as Max_High_Level_Threats_in_a_Month FROM (SELECT Reporting_Agency, TO_CHAR(Reported_Date, 'YYYY-MM') as Month, COUNT(*) as Number_of_High_Level_Threats FROM High_Level_Threats GROUP BY Reporting_Agency, Month) GROUP BY Reporting_Agency;", "generated_sql": "SELECT Reporting_Agency, COUNT(*) AS NumberOfThreats\nFROM Threat_Intelligence\nWHERE Threat_Level = 'High'\nGROUP BY Reporting_Agency\nORDER BY NumberOfThreats DESC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT Reporting_Agency, COUNT(*) AS NumberOfThreats\nFROM Threat_Intelligence\nWHERE Threat_Level = 'High'\nGROUP BY Reporting_Agency\nORDER BY NumberOfThreats DESC\nLIMIT 1;", "latency_sec": 1.2712469100952148, "total_duration_sec": 1.180877754, "load_duration_sec": 0.014080438, "tokens_prompt": 156, "prompt_eval_sec": 0.025323819, "tokens_completion": 48, "completion_eval_sec": 1.139311093, "tokens_total": 204, "tokens_per_sec": 160.4723664458863, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the maximum number of high-level threats per month for each agency, while the Generated SQL counts total high-level threats per agency and returns the top agency. The aggregation logic and output metrics differ fundamentally."}
{"example_id": 5608, "sql_complexity": "set operations", "prompt": "List the suppliers that provide materials for both product A and product C.", "context": "CREATE TABLE products (product_id INT, product_name TEXT); CREATE TABLE materials (material_id INT, material_name TEXT, product_id INT, supplier_id INT); INSERT INTO products (product_id, product_name) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'); INSERT INTO materials (material_id, material_name, product_id, supplier_id) VALUES (1, 'Material 1', 1, 101), (2, 'Material 2', 1, 102), (3, 'Material 3', 2, 103), (4, 'Material 4', 3, 101), (5, 'Material 5', 3, 102);", "reference_sql": "SELECT supplier_id FROM materials WHERE product_id = 1 INTERSECT SELECT supplier_id FROM materials WHERE product_id = 3;", "generated_sql": "SELECT DISTINCT supplier_id\nFROM materials\nWHERE product_id IN (\n    SELECT product_id FROM products WHERE product_name IN ('Product A', 'Product C')\n)\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT product_id) = 2;", "raw_model_output": "<think>\n\n</think>\n\nSELECT DISTINCT supplier_id\nFROM materials\nWHERE product_id IN (\n    SELECT product_id FROM products WHERE product_name IN ('Product A', 'Product C')\n)\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT product_id) = 2;", "latency_sec": 1.4950411319732666, "total_duration_sec": 1.396910181, "load_duration_sec": 0.013763286, "tokens_prompt": 247, "prompt_eval_sec": 0.047298011, "tokens_completion": 55, "completion_eval_sec": 1.333433727, "tokens_total": 302, "tokens_per_sec": 202.00113130091472, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve supplier_ids that have materials for both product_id 1 (Product A) and product_id 3 (Product C). The Reference SQL uses INTERSECT to find common supplier_ids between the two product_id conditions, while the Generated SQL identifies suppliers with materials for both products by counting distinct product_ids in a group. The result sets are identical in this context."}
{"example_id": 1506, "sql_complexity": "basic SQL", "prompt": "How many habitats are in the 'animal_habitats' table?", "context": "CREATE TABLE animal_habitats (id INT PRIMARY KEY, habitat_name VARCHAR, num_animals INT);", "reference_sql": "SELECT COUNT(*) FROM animal_habitats;", "generated_sql": "SELECT COUNT(*) FROM animal_habitats;", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM animal_habitats;", "latency_sec": 0.4916098117828369, "total_duration_sec": 0.361603169, "load_duration_sec": 0.015049361, "tokens_prompt": 107, "prompt_eval_sec": 0.018813388, "tokens_completion": 14, "completion_eval_sec": 0.325890636, "tokens_total": 121, "tokens_per_sec": 246.13015668094596, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical: they select the count of all rows from the 'animal_habitats' table using COUNT(*). The syntax and structure are exactly the same, so they will produce the same result."}
{"example_id": 3117, "sql_complexity": "aggregation", "prompt": "What is the percentage of the population that has access to clean water in each continent?", "context": "CREATE TABLE water_data (id INT, country VARCHAR(50), continent CHAR(2), access_to_clean_water BOOLEAN); INSERT INTO water_data VALUES (1, 'Canada', 'NA', true), (2, 'Mexico', 'NA', false), (3, 'Brazil', 'SA', true), (4, 'Russia', 'EU', true);", "reference_sql": "SELECT continent, COUNT(*) FILTER (WHERE access_to_clean_water) * 100.0 / COUNT(*) AS percentage FROM water_data GROUP BY continent;", "generated_sql": "SELECT \n    continent,\n    ROUND((COUNT(CASE WHEN access_to_clean_water = true THEN 1 END) * 100.0 / COUNT(*)), 2) AS percentage_with_access\nFROM water_data\nGROUP BY continent;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    continent,\n    ROUND((COUNT(CASE WHEN access_to_clean_water = true THEN 1 END) * 100.0 / COUNT(*)), 2) AS percentage_with_access\nFROM water_data\nGROUP BY continent;", "latency_sec": 1.4734351634979248, "total_duration_sec": 1.33646347, "load_duration_sec": 0.013661586, "tokens_prompt": 163, "prompt_eval_sec": 0.026422502, "tokens_completion": 55, "completion_eval_sec": 1.294244278, "tokens_total": 218, "tokens_per_sec": 147.9535750202062, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the use of the ROUND function in the generated SQL. The reference query calculates the exact percentage without rounding, while the generated query rounds the result to two decimal places. This difference in precision makes their outputs non-equivalent."}
{"example_id": 3542, "sql_complexity": "window functions", "prompt": "What is the average yield of crops for each country, ranked by average yield?", "context": "CREATE TABLE farming (id INT, name TEXT, country TEXT, crop TEXT, yield INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'USA', 'Corn', 120), (2, 'Brown Farm', 'Canada', 'Soybeans', 45), (3, 'Jones Farm', 'Mexico', 'Wheat', 80);", "reference_sql": "SELECT country, AVG(yield) as avg_yield, ROW_NUMBER() OVER (ORDER BY AVG(yield) DESC) as rank FROM farming GROUP BY country;", "generated_sql": "SELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "raw_model_output": "<think>\n\n</think>\n\nSELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "latency_sec": 1.0130021572113037, "total_duration_sec": 0.740016413, "load_duration_sec": 0.023489689, "tokens_prompt": 166, "prompt_eval_sec": 0.027919897, "tokens_completion": 29, "completion_eval_sec": 0.686528921, "tokens_total": 195, "tokens_per_sec": 192.49712215501694, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a ROW_NUMBER() column that ranks countries by average yield, while the Generated SQL only returns country and average_yield without the rank. The presence of the additional column in the Reference SQL makes the result sets structurally different."}
{"example_id": 2274, "sql_complexity": "subqueries", "prompt": "Add a new crop 'amaranth' to farm 'Nourishing Harvest' with yield 50 in 2023", "context": "CREATE TABLE farms (id INT, name TEXT, location TEXT, size FLOAT); INSERT INTO farms (id, name, location, size) VALUES (1, 'Nourishing Harvest', 'Mexico', 120.0); CREATE TABLE crops (id INT, farm_id INT, crop TEXT, yield INT, year INT);", "reference_sql": "INSERT INTO crops (id, farm_id, crop, yield, year) VALUES (5, (SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "generated_sql": "INSERT INTO crops (farm_id, crop, yield, year) \nSELECT id, 'amaranth', 50, 2023 \nFROM farms \nWHERE name = 'Nourishing Harvest';", "raw_model_output": "<think>\n\n</think>\n\nINSERT INTO crops (farm_id, crop, yield, year) \nSELECT id, 'amaranth', 50, 2023 \nFROM farms \nWHERE name = 'Nourishing Harvest';", "latency_sec": 1.4909110069274902, "total_duration_sec": 1.181479793, "load_duration_sec": 0.014087223, "tokens_prompt": 168, "prompt_eval_sec": 0.030995719, "tokens_completion": 48, "completion_eval_sec": 1.134310845, "tokens_total": 216, "tokens_per_sec": 144.8778625929784, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL explicitly sets the 'id' column to 5, while the Generated SQL omits the 'id' column and relies on the database's default behavior (e.g., auto-increment). This results in different values for the 'id' field in the inserted row, making the queries semantically distinct."}
{"example_id": 3705, "sql_complexity": "subqueries", "prompt": "What is the percentage of unions with collective bargaining agreements in the Midwest region?", "context": "CREATE TABLE collective_bargaining (bargaining_id INT, union_name VARCHAR(50), contract_start_date DATE, contract_end_date DATE, region VARCHAR(50));CREATE VIEW union_region AS SELECT DISTINCT union_name, region FROM collective_bargaining;", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) as percentage FROM union_region ur WHERE ur.region = 'Midwest' AND EXISTS (SELECT 1 FROM collective_bargaining cb WHERE cb.union_name = ur.union_name);", "generated_sql": "SELECT \n    (COUNT(DISTINCT CASE WHEN region = 'Midwest' THEN union_name END) * 100.0 / COUNT(DISTINCT union_name)) AS percentage_midwest_unions\nFROM \n    union_region;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    (COUNT(DISTINCT CASE WHEN region = 'Midwest' THEN union_name END) * 100.0 / COUNT(DISTINCT union_name)) AS percentage_midwest_unions\nFROM \n    union_region;", "latency_sec": 1.5677928924560547, "total_duration_sec": 1.306547485, "load_duration_sec": 0.015480446, "tokens_prompt": 140, "prompt_eval_sec": 0.021181112, "tokens_completion": 54, "completion_eval_sec": 1.26780382, "tokens_total": 194, "tokens_per_sec": 123.7408339669698, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the percentage of (union_name, region) pairs in the Midwest relative to total pairs in union_region, while the Generated SQL calculates the percentage of distinct union_names in the Midwest relative to total distinct union_names. The denominators differ: the Reference uses total rows (including multiple regions per union), while the Generated uses distinct union_names, leading to different results when a union exists in multiple regions."}
{"example_id": 240, "sql_complexity": "aggregation", "prompt": "What is the average capacity of renewable energy projects for each country?", "context": "CREATE TABLE projects (name TEXT, type TEXT, capacity INTEGER, country TEXT); INSERT INTO projects (name, type, capacity, country) VALUES ('Project 1', 'Wind', 100, 'USA'), ('Project 2', 'Solar', 200, 'Germany'), ('Project 3', 'Wind', 300, 'France');", "reference_sql": "SELECT country, AVG(capacity) FROM projects GROUP BY country", "generated_sql": "SELECT country, AVG(capacity) AS average_capacity\nFROM projects\nGROUP BY country;", "raw_model_output": "<think>\n\n</think>\n\nSELECT country, AVG(capacity) AS average_capacity\nFROM projects\nGROUP BY country;", "latency_sec": 0.8039531707763672, "total_duration_sec": 0.599577919, "load_duration_sec": 0.018130114, "tokens_prompt": 162, "prompt_eval_sec": 0.029507885, "tokens_completion": 23, "completion_eval_sec": 0.54948978, "tokens_total": 185, "tokens_per_sec": 230.11290548347225, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average capacity per country using AVG(capacity) and group by the country. The generated query adds an alias (average_capacity) for the calculated column, but this does not affect the semantic result. The grouping and aggregation logic remain identical."}
{"example_id": 2132, "sql_complexity": "set operations", "prompt": "What is the average caseload per attorney in community legal clinics in California, and how does it compare to the state average?", "context": "CREATE TABLE cali_community_legal_clinics(id INT, attorney_count INT, cases_handled INT, state VARCHAR(255));", "reference_sql": "SELECT state, AVG(cases_handled/attorney_count) AS avg_caseload FROM cali_community_legal_clinics WHERE state = 'California' GROUP BY state UNION ALL SELECT 'California', AVG(cases_handled/attorney_count) FROM cali_community_legal_clinics WHERE state = 'California';", "generated_sql": "SELECT \n  (AVG(cases_handled) / AVG(attorney_count)) AS avg_caseload_per_attorney,\n  (AVG(cases_handled) / AVG(attorney_count)) AS state_avg_caseload_per_attorney\nFROM cali_community_legal_clinics;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n  (AVG(cases_handled) / AVG(attorney_count)) AS avg_caseload_per_attorney,\n  (AVG(cases_handled) / AVG(attorney_count)) AS state_avg_caseload_per_attorney\nFROM cali_community_legal_clinics;", "latency_sec": 1.7024011611938477, "total_duration_sec": 1.567936738, "load_duration_sec": 0.020662817, "tokens_prompt": 125, "prompt_eval_sec": 0.021073223, "tokens_completion": 65, "completion_eval_sec": 1.524088094, "tokens_total": 190, "tokens_per_sec": 111.60706673082751, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the average of (cases_handled/attorney_count) per row for California, groups by state, and includes a redundant 'California' row. The Generated SQL computes the ratio of average cases_handled to average attorney_count across all records (not just California) and returns two identical columns. Additionally, the Reference SQL's approach (average of ratios) differs mathematically from the Generated SQL's approach (ratio of averages)."}
{"example_id": 3276, "sql_complexity": "basic SQL", "prompt": "What is the total energy consumption of the Chemical Plant B in the last quarter?", "context": "CREATE TABLE EnergyConsumption (EnergyID INT, Plant VARCHAR(255), EnergyQuantity DECIMAL(5,2), Timestamp DATETIME);", "reference_sql": "SELECT SUM(EnergyQuantity) FROM EnergyConsumption WHERE Plant = 'Chemical Plant B' AND Timestamp BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE();", "generated_sql": "SELECT SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp >= DATEADD(quarter, -1, GETDATE());", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp >= DATEADD(quarter, -1, GETDATE());", "latency_sec": 1.2589428424835205, "total_duration_sec": 1.108549299, "load_duration_sec": 0.013906159, "tokens_prompt": 118, "prompt_eval_sec": 0.019849475, "tokens_completion": 46, "completion_eval_sec": 1.072878961, "tokens_total": 164, "tokens_per_sec": 130.26802684423438, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their upper date boundary. The reference uses CURRENT_DATE() (which is the start of the current day, 00:00:00), while the generated query uses GETDATE() (which includes the current time). This means the generated query includes records up to the exact current moment, whereas the reference query only includes records up to midnight of the current day. Since Timestamp is a DATETIME field, this difference in upper bounds makes the queries non-equivalent."}
{"example_id": 3074, "sql_complexity": "multiple_joins", "prompt": "Find the top 5 players with the highest scores in the 'historical_tournaments' view, including their scores and the names of the tournaments they participated in.", "context": "CREATE VIEW historical_tournaments AS SELECT tournaments.tournament_name, players.player_name, players.score FROM tournaments JOIN players_scores ON tournaments.tournament_id = players_scores.tournament_id JOIN players ON players_scores.player_id = players.player_id;  CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT);  CREATE TABLE players_scores (player_id INT, tournament_id INT, score INT);  CREATE TABLE players (player_id INT, player_name TEXT);", "reference_sql": "SELECT players.player_name, MAX(players_scores.score) as high_score, tournaments.tournament_name FROM historical_tournaments JOIN players ON historical_tournaments.player_id = players.player_id JOIN players_scores ON historical_tournaments.player_id = players_scores.player_id JOIN tournaments ON players_scores.tournament_id = tournaments.tournament_id GROUP BY players.player_id, tournaments.tournament_name ORDER BY high_score DESC LIMIT 5;", "generated_sql": "SELECT player_name, score, tournament_name\nFROM historical_tournaments\nORDER BY score DESC\nLIMIT 5;", "raw_model_output": "<think>\n\n</think>\n\nSELECT player_name, score, tournament_name\nFROM historical_tournaments\nORDER BY score DESC\nLIMIT 5;", "latency_sec": 1.000265121459961, "total_duration_sec": 0.739507396, "load_duration_sec": 0.013970813, "tokens_prompt": 194, "prompt_eval_sec": 0.041705469, "tokens_completion": 28, "completion_eval_sec": 0.681754402, "tokens_total": 222, "tokens_per_sec": 221.941158635997, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses aggregation (MAX(score)) and groups by player_id and tournament_name to find each player's highest score per tournament, while the Generated SQL simply selects all entries from the view and orders them by score without aggregation. The Generated SQL lacks grouping/aggregation and would return all rows, not just the top score per player-tournament combination."}
{"example_id": 2219, "sql_complexity": "window functions", "prompt": "What is the average population of cities with a UNESCO World Heritage designation, ordered by designation date?", "context": "CREATE TABLE cities (name VARCHAR(255), population INT, designation_date DATE); INSERT INTO cities (name, population, designation_date) VALUES ('Paris', 2141000, '1991-09-16'); INSERT INTO cities (name, population, designation_date) VALUES ('Rio de Janeiro', 6727000, '2012-07-01');", "reference_sql": "SELECT AVG(population) FROM (SELECT population, ROW_NUMBER() OVER (ORDER BY designation_date) rn FROM cities WHERE name IN (SELECT name FROM heritagesites)) t WHERE rn % 2 = 1;", "generated_sql": "SELECT AVG(population) AS average_population\nFROM cities\nORDER BY designation_date;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(population) AS average_population\nFROM cities\nORDER BY designation_date;", "latency_sec": 0.8271210193634033, "total_duration_sec": 0.580115629, "load_duration_sec": 0.013602168, "tokens_prompt": 183, "prompt_eval_sec": 0.032137538, "tokens_completion": 22, "completion_eval_sec": 0.532321748, "tokens_total": 205, "tokens_per_sec": 247.84764889396595, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average of populations from cities in heritagesites, ordered by designation_date, and only includes odd-numbered rows (1st, 3rd, etc.). The Generated SQL averages all cities' populations without filtering or row-numbering. The absence of the heritagesites filter and row-numbering logic makes them non-equivalent."}
{"example_id": 3786, "sql_complexity": "aggregation", "prompt": "Display the names and average co-owner percentages for all properties in the 'property_coownership' table where the co-owner percentage is greater than 60.", "context": "CREATE TABLE property_coownership (property_id INT, owner VARCHAR(255), percentage INT); INSERT INTO property_coownership (property_id, owner, percentage) VALUES (1, 'Mohammed', 70), (1, 'Fatima', 30), (2, 'Jamal', 65), (2, 'Aisha', 35), (3, 'Ali', 75), (3, 'Khadija', 25);", "reference_sql": "SELECT owner, AVG(percentage) FROM property_coownership WHERE percentage > 60 GROUP BY owner;", "generated_sql": "SELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "raw_model_output": "<think>\n\n</think>\n\nSELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "latency_sec": 1.0463337898254395, "total_duration_sec": 0.840276595, "load_duration_sec": 0.015031509, "tokens_prompt": 203, "prompt_eval_sec": 0.039774435, "tokens_completion": 32, "completion_eval_sec": 0.783190153, "tokens_total": 235, "tokens_per_sec": 224.5937217025221, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The only difference is the addition of an alias (average_percentage) for the AVG(percentage) column in the generated SQL. Both queries select the same data, apply the same filter (percentage > 60), and group by the same column (owner). The alias does not affect the result's content or structure, only the column name in the output."}
{"example_id": 2357, "sql_complexity": "basic SQL", "prompt": "What is the total amount of climate finance invested in renewable energy projects by public and private sectors in Africa?", "context": "CREATE TABLE renewable_energy_projects (project_id INT, sector TEXT, investor_type TEXT, region TEXT, amount FLOAT); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (1, 'Renewable Energy', 'Public', 'Africa', 5000000); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (2, 'Renewable Energy', 'Private', 'Africa', 7000000);", "reference_sql": "SELECT SUM(amount) FROM renewable_energy_projects WHERE sector = 'Renewable Energy' AND region = 'Africa';", "generated_sql": "SELECT SUM(amount) AS total_amount FROM renewable_energy_projects WHERE region = 'Africa';", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(amount) AS total_amount FROM renewable_energy_projects WHERE region = 'Africa';", "latency_sec": 0.7754058837890625, "total_duration_sec": 0.605945772, "load_duration_sec": 0.022128803, "tokens_prompt": 202, "prompt_eval_sec": 0.038438934, "tokens_completion": 22, "completion_eval_sec": 0.54335127, "tokens_total": 224, "tokens_per_sec": 288.8809650313871, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a condition for both 'sector = 'Renewable Energy'' and 'region = 'Africa'', while the Generated SQL only filters by 'region = 'Africa''. If there were projects in the 'Africa' region with different sectors, the Generated SQL would include them in the sum, making the results different."}
{"example_id": 1009, "sql_complexity": "multiple_joins", "prompt": "Find the number of IoT sensors installed in each farm that use Sprinkler irrigation.", "context": "CREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, Farm_id) VALUES (1, 'Soil Moisture', 1), (2, 'Temperature', 1), (3, 'Humidity', 2); CREATE TABLE Irrigation (id INT, Farm_id INT, irrigation_type VARCHAR(50), duration INT); INSERT INTO Irrigation (id, Farm_id, irrigation_type, duration) VALUES (1, 1, 'Sprinkler', 30), (2, 2, 'Drip', 45);", "reference_sql": "SELECT f.id, COUNT(s.id) FROM Farmers f JOIN Irrigation i ON f.id = i.Farm_id JOIN IoT_Sensors s ON f.id = s.Farm_id WHERE i.irrigation_type = 'Sprinkler' GROUP BY f.id;", "generated_sql": "SELECT f.Farm_id, COUNT(s.id) AS sensor_count\nFROM IoT_Sensors s\nJOIN Irrigation i ON s.Farm_id = i.Farm_id\nWHERE i.irrigation_type = 'Sprinkler'\nGROUP BY f.Farm_id;", "raw_model_output": "<think>\n\n</think>\n\nSELECT f.Farm_id, COUNT(s.id) AS sensor_count\nFROM IoT_Sensors s\nJOIN Irrigation i ON s.Farm_id = i.Farm_id\nWHERE i.irrigation_type = 'Sprinkler'\nGROUP BY f.Farm_id;", "latency_sec": 1.7792408466339111, "total_duration_sec": 1.481353618, "load_duration_sec": 0.016978572, "tokens_prompt": 222, "prompt_eval_sec": 0.042406902, "tokens_completion": 59, "completion_eval_sec": 1.419738948, "tokens_total": 281, "tokens_per_sec": 157.9325252854974, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Generated SQL references 'f.Farm_id' but does not define 'f' in the FROM clause, making it syntactically invalid. The Reference SQL correctly joins the Farmers table (aliased as 'f') and groups by 'f.id'. The Generated SQL would fail to execute due to the undefined alias 'f', while the Reference SQL is valid. Additionally, even if 'f' were a typo, the grouping and join logic differ between the queries."}
{"example_id": 4217, "sql_complexity": "subqueries", "prompt": "Show consumer preference data for foundations, excluding products from the USA.", "context": "CREATE TABLE cosmetics (product_id INT, product_name VARCHAR(100), product_type VARCHAR(50), is_cruelty_free BOOLEAN, consumer_preference_score INT); INSERT INTO cosmetics (product_id, product_name, product_type, is_cruelty_free, consumer_preference_score) VALUES (1, 'Lipstick A', 'Lipstick', TRUE, 80), (2, 'Foundation B', 'Foundation', FALSE, 90), (3, 'Mascara C', 'Mascara', TRUE, 85), (4, 'Eyeshadow D', 'Eyeshadow', TRUE, 70), (5, 'Blush E', 'Blush', FALSE, 95); CREATE TABLE ingredient_sourcing (ingredient_id INT, ingredient_name VARCHAR(100), sourcing_country VARCHAR(50), is_organic BOOLEAN); INSERT INTO ingredient_sourcing (ingredient_id, ingredient_name, sourcing_country, is_organic) VALUES (1, 'Rosehip Oil', 'Chile', TRUE), (2, 'Shea Butter', 'Ghana', TRUE), (3, 'Jojoba Oil', 'India', TRUE), (4, 'Coconut Oil', 'Philippines', FALSE), (5, 'Aloe Vera', 'USA', TRUE);", "reference_sql": "SELECT * FROM cosmetics WHERE product_type = 'Foundation' AND product_id NOT IN (SELECT cosmetics.product_id FROM cosmetics INNER JOIN ingredient_sourcing ON cosmetics.product_id = ingredient_sourcing.ingredient_id WHERE ingredient_sourcing.sourcing_country = 'USA');", "generated_sql": "SELECT cp.product_id, cp.product_name, cp.consumer_preference_score\nFROM cosmetics cp\nJOIN ingredient_sourcing isrc ON cp.product_id = isrc.ingredient_id\nWHERE cp.product_type = 'Foundation' AND isrc.sourcing_country != 'USA';", "raw_model_output": "<think>\n\n</think>\n\nSELECT cp.product_id, cp.product_name, cp.consumer_preference_score\nFROM cosmetics cp\nJOIN ingredient_sourcing isrc ON cp.product_id = isrc.ingredient_id\nWHERE cp.product_type = 'Foundation' AND isrc.sourcing_country != 'USA';", "latency_sec": 1.646529197692871, "total_duration_sec": 1.543538815, "load_duration_sec": 0.013613802, "tokens_prompt": 359, "prompt_eval_sec": 0.074530289, "tokens_completion": 58, "completion_eval_sec": 1.452763916, "tokens_total": 417, "tokens_per_sec": 253.26000934833314, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL excludes 'Foundation' products that have any ingredients sourced from the USA (using NOT IN with a subquery). The Generated SQL selects 'Foundation' products that have at least one ingredient not from the USA (using JOIN and WHERE sourcing_country != 'USA'). These differ in logic: the first excludes products with any USA-sourced ingredients, while the second includes products with at least one non-USA ingredient. Additionally, the Generated SQL would exclude products with no ingredients (due to JOIN), whereas the Reference SQL would include them."}
{"example_id": 5620, "sql_complexity": "basic SQL", "prompt": "What is the recycling rate of plastic in the residential sector in the state of New York?", "context": "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", "reference_sql": "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "generated_sql": "SELECT recycling_rate \nFROM recycling_rates_city \nWHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "raw_model_output": "<think>\n\n</think>\n\nSELECT recycling_rate \nFROM recycling_rates_city \nWHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "latency_sec": 1.076272964477539, "total_duration_sec": 0.963598852, "load_duration_sec": 0.015702934, "tokens_prompt": 279, "prompt_eval_sec": 0.053399658, "tokens_completion": 36, "completion_eval_sec": 0.892480559, "tokens_total": 315, "tokens_per_sec": 292.6766818424285, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same column (recycling_rate) from the same table (recycling_rates_city) with identical WHERE conditions (sector = 'residential', material = 'plastic', and city = 'New York City'). The structure and logic are identical, so they will produce the same result."}
{"example_id": 3151, "sql_complexity": "basic SQL", "prompt": "List all biotech startups that received funding in 2022 and their respective funding amounts.", "context": "CREATE TABLE biotech_startups (name TEXT, funding FLOAT, date DATE); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupA', 3500000, '2022-02-28'); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupB', 4500000, '2022-07-12');", "reference_sql": "SELECT name, funding FROM biotech_startups WHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "generated_sql": "SELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "raw_model_output": "<think>\n\n</think>\n\nSELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "latency_sec": 0.8932738304138184, "total_duration_sec": 0.78876644, "load_duration_sec": 0.013634765, "tokens_prompt": 186, "prompt_eval_sec": 0.033250459, "tokens_completion": 31, "completion_eval_sec": 0.739684727, "tokens_total": 217, "tokens_per_sec": 242.9266285562989, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter records where the date falls within the year 2022. The BETWEEN clause explicitly checks if the date is between '2022-01-01' and '2022-12-31' (inclusive), while EXTRACT(YEAR FROM date) = 2022 achieves the same by checking the year part of the date. Since the date column is of DATE type (without time components), both conditions produce identical results."}
{"example_id": 2136, "sql_complexity": "window functions", "prompt": "What is the total military equipment sales revenue for each sales representative by fiscal year?", "context": "CREATE TABLE SalesReps (SalesRepID INT, SalesRepName VARCHAR(50), FiscalYear INT, Revenue DECIMAL(10,2)); INSERT INTO SalesReps (SalesRepID, SalesRepName, FiscalYear, Revenue) VALUES (1, 'John Doe', 2020, 150000.00), (2, 'Jane Smith', 2020, 200000.00), (1, 'John Doe', 2021, 180000.00), (2, 'Jane Smith', 2021, 250000.00);", "reference_sql": "SELECT SalesRepName, FiscalYear, SUM(Revenue) OVER (PARTITION BY SalesRepName ORDER BY FiscalYear) AS TotalRevenue FROM SalesReps;", "generated_sql": "SELECT SalesRepID, SalesRepName, FiscalYear, SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY SalesRepID, SalesRepName, FiscalYear;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SalesRepID, SalesRepName, FiscalYear, SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY SalesRepID, SalesRepName, FiscalYear;", "latency_sec": 1.2534279823303223, "total_duration_sec": 1.111859954, "load_duration_sec": 0.021821014, "tokens_prompt": 236, "prompt_eval_sec": 0.044775641, "tokens_completion": 43, "completion_eval_sec": 1.043226214, "tokens_total": 279, "tokens_per_sec": 222.58957350010215, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate a running total of Revenue per SalesRepName across FiscalYears, while the Generated SQL aggregates Revenue by exact SalesRepID/FiscalYear combinations. The Reference query returns cumulative sums (e.g., 2020: 150000, 2021: 150000+180000=330000 for John Doe) whereas the Generated SQL returns individual year totals (e.g., 2020: 150000, 2021: 180000 for John Doe). Additionally, the column sets differ (SalesRepID is missing in Reference, SalesRepName/FiscalYear are combined differently)."}
{"example_id": 5452, "sql_complexity": "basic SQL", "prompt": "What is the name of the farms with a size greater than 150 acres located in 'Texas'?", "context": "CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(50), size INT, location VARCHAR(50)); INSERT INTO farms (id, name, size, location) VALUES (1, 'Smith Farms', 200, 'Texas'), (2, 'Johnson Farms', 100, 'California');", "reference_sql": "SELECT name FROM farms WHERE size > 150 AND location = 'Texas'", "generated_sql": "SELECT name FROM farms WHERE size > 150 AND location = 'Texas';", "raw_model_output": "<think>\n\n</think>\n\nSELECT name FROM farms WHERE size > 150 AND location = 'Texas';", "latency_sec": 0.6810181140899658, "total_duration_sec": 0.574931138, "load_duration_sec": 0.014484278, "tokens_prompt": 162, "prompt_eval_sec": 0.029584502, "tokens_completion": 22, "completion_eval_sec": 0.527883473, "tokens_total": 184, "tokens_per_sec": 270.1837090572494, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select the 'name' column from the 'farms' table where 'size' is greater than 150 and 'location' is 'Texas'. The whitespace differences (e.g., trailing semicolon) do not affect semantic equivalence."}
{"example_id": 5152, "sql_complexity": "aggregation", "prompt": "How many international tourists visited Portugal in 2020, broken down by continent?", "context": "CREATE TABLE international_tourists(tourist_id INT, country TEXT, arrival_year INT, continent TEXT);INSERT INTO international_tourists (tourist_id, country, arrival_year, continent) VALUES (1, 'Spain', 2020, 'Europe'), (2, 'France', 2020, 'Europe'), (3, 'Brazil', 2020, 'South America'), (4, 'United States', 2020, 'North America'), (5, 'China', 2020, 'Asia');", "reference_sql": "SELECT continent, COUNT(*) FROM international_tourists WHERE arrival_year = 2020 GROUP BY continent;", "generated_sql": "SELECT continent, COUNT(*) AS number_of_tourists\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "raw_model_output": "<think>\n\n</think>\n\nSELECT continent, COUNT(*) AS number_of_tourists\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "latency_sec": 1.4144172668457031, "total_duration_sec": 1.132052199, "load_duration_sec": 0.025795284, "tokens_prompt": 209, "prompt_eval_sec": 0.040807581, "tokens_completion": 44, "completion_eval_sec": 1.063209861, "tokens_total": 253, "tokens_per_sec": 178.87225073560944, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL counts all tourists from 2020 grouped by continent, while the Generated SQL only includes tourists from 'Portugal' (which doesn't exist in the data) and 2020. Since there are no tourists from Portugal, the Generated SQL returns an empty result set, making them non-equivalent."}
{"example_id": 2477, "sql_complexity": "set operations", "prompt": "What is the carbon price in Europe and Australia for the last quarter of 2020?", "context": "CREATE TABLE CarbonPrices (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonPrices (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2020, 4, 25), ('Australia', 2020, 4, 15); CREATE TABLE CarbonTaxes (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonTaxes (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2019, 4, 20), ('Australia', 2019, 4, 10);", "reference_sql": "SELECT Context.Country, Context.CarbonPrice FROM ( SELECT * FROM CarbonPrices WHERE CarbonPrices.Country IN ('Europe', 'Australia') AND CarbonPrices.Year = 2020 AND CarbonPrices.Quarter = 4 UNION SELECT * FROM CarbonTaxes WHERE CarbonTaxes.Country IN ('Europe', 'Australia') AND CarbonTaxes.Year = 2020 AND CarbonTaxes.Quarter = 4 ) AS Context;", "generated_sql": "SELECT 'CarbonPrices' AS Source, Country, Year, Quarter, CarbonPrice \nFROM CarbonPrices \nWHERE Country IN ('Europe', 'Australia') AND Year = 2020 AND Quarter = 4\nUNION ALL\nSELECT 'CarbonTaxes' AS Source, Country, Year, Quarter, CarbonPrice \nFROM CarbonTaxes \nWHERE Country IN ('Europe', 'Australia') AND Year = 2020 AND Quarter = 4;", "raw_model_output": "<think>\n\n</think>\n\nSELECT 'CarbonPrices' AS Source, Country, Year, Quarter, CarbonPrice \nFROM CarbonPrices \nWHERE Country IN ('Europe', 'Australia') AND Year = 2020 AND Quarter = 4\nUNION ALL\nSELECT 'CarbonTaxes' AS Source, Country, Year, Quarter, CarbonPrice \nFROM CarbonTaxes \nWHERE Country IN ('Europe', 'Australia') AND Year = 2020 AND Quarter = 4;", "latency_sec": 2.6305580139160156, "total_duration_sec": 2.432366519, "load_duration_sec": 0.017386091, "tokens_prompt": 224, "prompt_eval_sec": 0.039960834, "tokens_completion": 99, "completion_eval_sec": 2.372307168, "tokens_total": 323, "tokens_per_sec": 122.78763604196727, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 'Country' and 'CarbonPrice' columns from a combined result of CarbonPrices and CarbonTaxes, while the Generated SQL adds a 'Source' column and includes additional columns (Year, Quarter) in the output. The structure of the result sets differs, making them non-equivalent despite similar filtering conditions."}
{"example_id": 4573, "sql_complexity": "subqueries", "prompt": "Find the names of all the indigenous communities in the 'Arctic_Communities' table that have a population size greater than the average population size in the 'Antarctic_Communities' table.", "context": "CREATE TABLE Arctic_Communities (name TEXT, population INTEGER); CREATE TABLE Antarctic_Communities (name TEXT, population INTEGER);", "reference_sql": "SELECT name FROM Arctic_Communities WHERE Arctic_Communities.population > (SELECT AVG(population) FROM Antarctic_Communities)", "generated_sql": "SELECT name\nFROM Arctic_Communities\nWHERE population > (SELECT AVG(population) FROM Antarctic_Communities);", "raw_model_output": "<think>\n\n</think>\n\nSELECT name\nFROM Arctic_Communities\nWHERE population > (SELECT AVG(population) FROM Antarctic_Communities);", "latency_sec": 0.6966230869293213, "total_duration_sec": 0.689193605, "load_duration_sec": 0.022795297, "tokens_prompt": 135, "prompt_eval_sec": 0.023158736, "tokens_completion": 27, "completion_eval_sec": 0.641211094, "tokens_total": 162, "tokens_per_sec": 232.55043227764338, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select names from Arctic_Communities where population exceeds the average population of Antarctic_Communities. The generated query omits table qualification for the population column, but since the FROM clause explicitly defines Arctic_Communities, the column reference is unambiguous. The subquery and logical conditions are identical in both queries."}
{"example_id": 3596, "sql_complexity": "window functions", "prompt": "What is the total revenue for each game in the \"Gaming\" category?", "context": "CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));", "reference_sql": "SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;", "generated_sql": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "raw_model_output": "<think>\n\n</think>\n\nSELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "latency_sec": 0.9747269153594971, "total_duration_sec": 0.80457558, "load_duration_sec": 0.027807896, "tokens_prompt": 117, "prompt_eval_sec": 0.021044526, "tokens_completion": 32, "completion_eval_sec": 0.75370471, "tokens_total": 149, "tokens_per_sec": 152.86332782248664, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates total revenue per category using a window function, returning Category and TotalRevenue for all games. The generated query filters to only 'Gaming' category, groups by GameName, and sums revenue per game, resulting in different columns, filtering, and aggregation logic."}
{"example_id": 5039, "sql_complexity": "subqueries", "prompt": "What is the total number of community policing events in 'City Park' in 2021?", "context": "CREATE TABLE locations (id INT, name VARCHAR(255)); CREATE TABLE community_policing (id INT, location_id INT, year INT, events INT); INSERT INTO locations (id, name) VALUES (1, 'City Park'); INSERT INTO community_policing (id, location_id, year, events) VALUES (1, 1, 2021, 5);", "reference_sql": "SELECT SUM(events) FROM community_policing WHERE location_id = (SELECT id FROM locations WHERE name = 'City Park') AND year = 2021;", "generated_sql": "SELECT SUM(events) AS total_events FROM community_policing INNER JOIN locations ON community_policing.location_id = locations.id WHERE locations.name = 'City Park' AND community_policing.year = 2021;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(events) AS total_events FROM community_policing INNER JOIN locations ON community_policing.location_id = locations.id WHERE locations.name = 'City Park' AND community_policing.year = 2021;", "latency_sec": 1.271681785583496, "total_duration_sec": 1.265205892, "load_duration_sec": 0.024957307, "tokens_prompt": 175, "prompt_eval_sec": 0.030433666, "tokens_completion": 51, "completion_eval_sec": 1.207903494, "tokens_total": 226, "tokens_per_sec": 177.71741528585517, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of 'events' for the location named 'City Park' in 2021. The reference query uses a subquery to get the location ID, while the generated query uses an INNER JOIN. Since the subquery returns a single ID (due to the unique name constraint in the sample data), both approaches produce the same result. The alias difference (total_events vs. SUM(events)) does not affect semantic equivalence."}
{"example_id": 2724, "sql_complexity": "basic SQL", "prompt": "What is the earliest installation date for solar panels in Italy?", "context": "CREATE TABLE solar_panels_italy (id INT, installation_date DATE); INSERT INTO solar_panels_italy (id, installation_date) VALUES (1, '2018-01-01'), (2, '2019-01-01'), (3, '2020-01-01');", "reference_sql": "SELECT MIN(installation_date) as earliest_date FROM solar_panels_italy;", "generated_sql": "SELECT MIN(installation_date) AS earliest_installation_date FROM solar_panels_italy;", "raw_model_output": "<think>\n\n</think>\n\nSELECT MIN(installation_date) AS earliest_installation_date FROM solar_panels_italy;", "latency_sec": 0.7197020053863525, "total_duration_sec": 0.637701638, "load_duration_sec": 0.013922937, "tokens_prompt": 160, "prompt_eval_sec": 0.02702355, "tokens_completion": 25, "completion_eval_sec": 0.59480902, "tokens_total": 185, "tokens_per_sec": 257.05083300509597, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the minimum installation_date from the solar_panels_italy table. The only difference is the column alias name (earliest_date vs. earliest_installation_date), which does not affect the semantic result."}
{"example_id": 2200, "sql_complexity": "single join", "prompt": "Which diversity programs are currently being participated in by employees in the HR department?", "context": "CREATE TABLE Employees (Employee_ID INT, First_Name VARCHAR(20), Last_Name VARCHAR(20), Department VARCHAR(20), Salary DECIMAL(10,2), Date_Hired DATE); CREATE TABLE Diversity_Programs (Program_ID INT, Program_Name VARCHAR(50), Participant_ID INT, Date_Started DATE, Date_Ended DATE);", "reference_sql": "SELECT dp.Program_Name FROM Diversity_Programs dp JOIN Employees e ON dp.Participant_ID = e.Employee_ID WHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "generated_sql": "SELECT DISTINCT dp.Program_Name\nFROM Diversity_Programs dp\nJOIN Employees e ON dp.Participant_ID = e.Employee_ID\nWHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "raw_model_output": "<think>\n\n</think>\n\nSELECT DISTINCT dp.Program_Name\nFROM Diversity_Programs dp\nJOIN Employees e ON dp.Participant_ID = e.Employee_ID\nWHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "latency_sec": 1.4390819072723389, "total_duration_sec": 1.112876212, "load_duration_sec": 0.022753924, "tokens_prompt": 160, "prompt_eval_sec": 0.025484793, "tokens_completion": 45, "completion_eval_sec": 1.062579267, "tokens_total": 205, "tokens_per_sec": 142.45193339172792, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The generated query adds a DISTINCT keyword which ensures unique Program_Name values, while the reference query may return duplicates. This makes them non-equivalent in cases where multiple Diversity_Programs entries exist for the same Program_Name under the given conditions."}
{"example_id": 4359, "sql_complexity": "window functions", "prompt": "Which destinations have the least hotel awards?", "context": "CREATE TABLE Destinations (destination_id INT, destination_name TEXT, country TEXT, awards INT); INSERT INTO Destinations (destination_id, destination_name, country, awards) VALUES (1, 'City A', 'Germany', 3), (2, 'City B', 'Switzerland', 5), (3, 'City C', 'Norway', 2);", "reference_sql": "SELECT destination_name, country, awards, RANK() OVER (PARTITION BY country ORDER BY awards ASC) AS rank FROM Destinations;", "generated_sql": "SELECT destination_name, country, awards\nFROM Destinations\nORDER BY awards ASC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT destination_name, country, awards\nFROM Destinations\nORDER BY awards ASC\nLIMIT 1;", "latency_sec": 0.7119441032409668, "total_duration_sec": 0.659532985, "load_duration_sec": 0.012729892, "tokens_prompt": 156, "prompt_eval_sec": 0.026497567, "tokens_completion": 26, "completion_eval_sec": 0.618377952, "tokens_total": 182, "tokens_per_sec": 255.6380468234593, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates a rank for each destination within its country based on awards, returning all rows with their respective ranks. The Generated SQL only returns the single destination with the lowest awards (LIMIT 1) and omits the rank column. The two queries differ in both result structure and logic."}
{"example_id": 1373, "sql_complexity": "subqueries", "prompt": "What is the total value of military equipment sales to Africa in the last 12 months?", "context": "CREATE TABLE Military_Equipment_Sales(sale_id INT, sale_date DATE, equipment_type VARCHAR(50), country VARCHAR(50), sale_value DECIMAL(10,2));", "reference_sql": "SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN (SELECT country FROM World_Countries WHERE continent = 'Africa') AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "generated_sql": "SELECT SUM(sale_value) AS total_sales_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\nAND sale_date >= CURRENT_DATE - INTERVAL '12 months';", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(sale_value) AS total_sales_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\nAND sale_date >= CURRENT_DATE - INTERVAL '12 months';", "latency_sec": 1.099757194519043, "total_duration_sec": 1.026160855, "load_duration_sec": 0.013904397, "tokens_prompt": 130, "prompt_eval_sec": 0.022701112, "tokens_completion": 42, "completion_eval_sec": 0.987455631, "tokens_total": 172, "tokens_per_sec": 156.3981584819009, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their country filtering logic. The Reference SQL uses a subquery to select countries in Africa from the World_Countries table, while the Generated SQL incorrectly filters where country = 'Africa' (assuming 'Africa' is a country name rather than a continent). This would produce different results unless the Military_Equipment_Sales table has a 'Africa' country entry, which is unlikely. The date conditions are equivalent."}
{"example_id": 904, "sql_complexity": "basic SQL", "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?", "context": "CREATE TABLE loans (id INT, amount DECIMAL, date DATE, loan_type VARCHAR); INSERT INTO loans (id, amount, date, loan_type) VALUES (1, 5000, '2021-09-05', 'Shariah-compliant'), (2, 7000, '2021-10-07', 'socially responsible'), (3, 9000, '2021-11-03', 'Shariah-compliant'), (4, 11000, '2021-12-31', 'Shariah-compliant');", "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';", "generated_sql": "SELECT MIN(amount) FROM loans WHERE loan_type = 'Shariah-compliant' AND date BETWEEN '2021-10-01' AND '2021-12-31';", "raw_model_output": "<think>\n\n</think>\n\nSELECT MIN(amount) FROM loans WHERE loan_type = 'Shariah-compliant' AND date BETWEEN '2021-10-01' AND '2021-12-31';", "latency_sec": 1.3503689765930176, "total_duration_sec": 1.290047226, "load_duration_sec": 0.025082344, "tokens_prompt": 237, "prompt_eval_sec": 0.045477645, "tokens_completion": 50, "completion_eval_sec": 1.217456888, "tokens_total": 287, "tokens_per_sec": 212.5345035133296, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter for 'Shariah-compliant' loans in the fourth quarter of 2021. The reference query uses EXTRACT(QUARTER) = 4, which corresponds to October-December, while the generated query uses a date range between '2021-10-01' and '2021-12-31'. These conditions are equivalent for the given data, and the date range implicitly ensures the year is 2021."}
{"example_id": 3299, "sql_complexity": "set operations", "prompt": "How many schools and hospitals are there in Colombia and which ones need repairs?", "context": "CREATE TABLE schools (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN); CREATE TABLE hospitals (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN);", "reference_sql": "SELECT 'Schools' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM schools WHERE country = 'Colombia' UNION ALL SELECT 'Hospitals' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM hospitals WHERE country = 'Colombia';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM schools WHERE country = 'Colombia') AS school_count,\n    (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia') AS hospital_count,\n    (SELECT COUNT(*) FROM schools WHERE country = 'Colombia' AND needs_repair = TRUE) AS schools_needing_repair,\n    (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia' AND needs_repair = TRUE) AS hospitals_needing_repair;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    (SELECT COUNT(*) FROM schools WHERE country = 'Colombia') AS school_count,\n    (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia') AS hospital_count,\n    (SELECT COUNT(*) FROM schools WHERE country = 'Colombia' AND needs_repair = TRUE) AS schools_needing_repair,\n    (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia' AND needs_repair = TRUE) AS hospitals_needing_repair;", "latency_sec": 2.543632984161377, "total_duration_sec": 2.454891358, "load_duration_sec": 0.014162657, "tokens_prompt": 135, "prompt_eval_sec": 0.023782731, "tokens_completion": 103, "completion_eval_sec": 2.414983142, "tokens_total": 238, "tokens_per_sec": 93.56695776551561, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows (one for Schools, one for Hospitals) with columns facility_type, total, and repairs_needed, while the Generated SQL returns a single row with four separate columns for counts and repairs needed. The structure and format of the results differ, so they are not semantically equivalent."}
{"example_id": 907, "sql_complexity": "set operations", "prompt": "What is the total quantity of items with type 'E' or type 'F' in warehouse O and warehouse P?", "context": "CREATE TABLE warehouse_o(item_id INT, item_type VARCHAR(10), quantity INT);CREATE TABLE warehouse_p(item_id INT, item_type VARCHAR(10), quantity INT);INSERT INTO warehouse_o(item_id, item_type, quantity) VALUES (1, 'E', 200), (2, 'F', 300), (3, 'E', 50), (4, 'F', 400);INSERT INTO warehouse_p(item_id, item_type, quantity) VALUES (1, 'E', 150), (2, 'F', 250), (3, 'E', 40), (4, 'F', 350);", "reference_sql": "SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F') UNION ALL SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F');", "generated_sql": "SELECT SUM(o.quantity + p.quantity) AS total_quantity\nFROM warehouse_o o\nJOIN warehouse_p p ON o.item_id = p.item_id\nWHERE o.item_type IN ('E', 'F') AND p.item_type IN ('E', 'F');", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(o.quantity + p.quantity) AS total_quantity\nFROM warehouse_o o\nJOIN warehouse_p p ON o.item_id = p.item_id\nWHERE o.item_type IN ('E', 'F') AND p.item_type IN ('E', 'F');", "latency_sec": 1.589972972869873, "total_duration_sec": 1.45265935, "load_duration_sec": 0.01938737, "tokens_prompt": 244, "prompt_eval_sec": 0.051230708, "tokens_completion": 57, "completion_eval_sec": 1.378183157, "tokens_total": 301, "tokens_per_sec": 189.3113940526299, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns all individual quantities from both tables (warehouse_o and warehouse_p) where item_type is 'E' or 'F', combining them with UNION ALL. The Generated SQL performs a JOIN between the two tables on item_id, sums the quantities from both tables for matching rows, and returns aggregated totals. The first query produces a list of individual values, while the second produces summed totals per item_id, resulting in different output structures and values."}
{"example_id": 1400, "sql_complexity": "single join", "prompt": "What is the maximum co-ownership duration for properties in the neighborhood of 'Chinatown' in San Francisco?'", "context": "CREATE TABLE sf_neighborhoods (neighborhood_id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO sf_neighborhoods (neighborhood_id, name, city) VALUES (1, 'Chinatown', 'San Francisco'); CREATE TABLE co_ownership (co_ownership_id INT, property_id INT, co_owner_id INT, start_date DATE, end_date DATE); INSERT INTO co_ownership (co_ownership_id, property_id, co_owner_id, start_date, end_date) VALUES (1, 1, 2, '2010-01-01', '2020-01-01'), (2, 2, 3, '2015-01-01', '2022-01-01'); CREATE TABLE properties (property_id INT, city VARCHAR(255)); INSERT INTO properties (property_id, city) VALUES (1, 'San Francisco'), (2, 'San Francisco');", "reference_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) as max_duration FROM co_ownership JOIN properties ON co_ownership.property_id = properties.property_id WHERE properties.city = 'San Francisco' AND name = 'Chinatown';", "generated_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) AS max_co_ownership_duration\nFROM co_ownership\nJOIN properties ON co_ownership.property_id = properties.property_id\nJOIN sf_neighborhoods ON properties.city = sf_neighborhoods.city\nWHERE sf_neighborhoods.name = 'Chinatown' AND sf_neighborhoods.city = 'San Francisco';", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(DATEDIFF(end_date, start_date)) AS max_co_ownership_duration\nFROM co_ownership\nJOIN properties ON co_ownership.property_id = properties.property_id\nJOIN sf_neighborhoods ON properties.city = sf_neighborhoods.city\nWHERE sf_neighborhoods.name = 'Chinatown' AND sf_neighborhoods.city = 'San Francisco';", "latency_sec": 2.1870830059051514, "total_duration_sec": 2.006768884, "load_duration_sec": 0.014531582, "tokens_prompt": 308, "prompt_eval_sec": 0.058115651, "tokens_completion": 79, "completion_eval_sec": 1.931879048, "tokens_total": 387, "tokens_per_sec": 176.9480165842335, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'name' column in the WHERE clause that doesn't exist in the joined tables (co_ownership and properties). The Generated SQL correctly joins with sf_neighborhoods to access the 'name' column. Additionally, the Generated SQL explicitly filters on sf_neighborhoods.city, while the Reference SQL only filters on properties.city. These differences in schema usage and filtering conditions make the queries non-equivalent."}
{"example_id": 5248, "sql_complexity": "window functions", "prompt": "Find the top 5 games by rating", "context": "CREATE TABLE games (game_id INT PRIMARY KEY, name VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2));", "reference_sql": "SELECT * FROM (SELECT name, rating, ROW_NUMBER() OVER (ORDER BY rating DESC) as rn FROM games) t WHERE rn <= 5;", "generated_sql": "SELECT * FROM games ORDER BY rating DESC LIMIT 5;", "raw_model_output": "<think>\n\n</think>\n\nSELECT * FROM games ORDER BY rating DESC LIMIT 5;", "latency_sec": 0.7237319946289062, "total_duration_sec": 0.442501485, "load_duration_sec": 0.020342403, "tokens_prompt": 111, "prompt_eval_sec": 0.022058795, "tokens_completion": 17, "completion_eval_sec": 0.398200921, "tokens_total": 128, "tokens_per_sec": 176.86104932480154, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query returns three columns (name, rating, rn) from a subquery, while the generated query returns all columns from the games table. Additionally, the reference query explicitly uses ROW_NUMBER() for ranking, whereas the generated query relies on LIMIT, which may behave differently in edge cases (e.g., ties). The result sets have different structures and may differ in data returned."}
{"example_id": 778, "sql_complexity": "single join", "prompt": "What is the maximum property price in wheelchair-accessible neighborhoods in Singapore?", "context": "CREATE TABLE Singapore_Neighborhoods (Neighborhood_Name TEXT, Wheelchair_Accessibility BOOLEAN); INSERT INTO Singapore_Neighborhoods (Neighborhood_Name, Wheelchair_Accessibility) VALUES ('Orchard', true), ('Marina Bay', true), ('Chinatown', false), ('Little India', false), ('Bugis', true); CREATE TABLE Singapore_Properties (Neighborhood_Name TEXT, Property_Price INTEGER); INSERT INTO Singapore_Properties (Neighborhood_Name, Property_Price) VALUES ('Orchard', 2000000), ('Marina Bay', 3000000), ('Chinatown', 1500000), ('Little India', 1200000), ('Bugis', 1800000);", "reference_sql": "SELECT MAX(Singapore_Properties.Property_Price) FROM Singapore_Properties INNER JOIN Singapore_Neighborhoods ON Singapore_Properties.Neighborhood_Name = Singapore_Neighborhoods.Neighborhood_Name WHERE Singapore_Neighborhoods.Wheelchair_Accessibility = true;", "generated_sql": "SELECT MAX(sp.Property_Price)\nFROM Singapore_Properties sp\nJOIN Singapore_Neighborhoods sn ON sp.Neighborhood_Name = sn.Neighborhood_Name\nWHERE sn.Wheelchair_Accessibility = true;", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(sp.Property_Price)\nFROM Singapore_Properties sp\nJOIN Singapore_Neighborhoods sn ON sp.Neighborhood_Name = sn.Neighborhood_Name\nWHERE sn.Wheelchair_Accessibility = true;", "latency_sec": 1.337864875793457, "total_duration_sec": 1.230814284, "load_duration_sec": 0.01465608, "tokens_prompt": 255, "prompt_eval_sec": 0.046229733, "tokens_completion": 48, "completion_eval_sec": 1.167751587, "tokens_total": 303, "tokens_per_sec": 226.4802712757502, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum property price from Singapore_Properties where the neighborhood has wheelchair accessibility. The generated query uses table aliases (sp and sn) but maintains the same JOIN condition, WHERE filter, and aggregate function as the reference query. The semantic logic remains unchanged."}
{"example_id": 3859, "sql_complexity": "aggregation", "prompt": "What is the total number of mental health parity violations by month and year?", "context": "CREATE TABLE mental_health_parity_reports (report_id INT, violation_date DATE); INSERT INTO mental_health_parity_reports (report_id, violation_date) VALUES (1, '2022-01-01'), (2, '2022-02-15'), (3, '2022-03-05'), (4, '2022-04-20'), (5, '2021-06-12'), (6, '2021-07-28');", "reference_sql": "SELECT EXTRACT(MONTH FROM violation_date) AS month, EXTRACT(YEAR FROM violation_date) AS year, COUNT(*) FROM mental_health_parity_reports GROUP BY month, year;", "generated_sql": "SELECT EXTRACT(YEAR FROM violation_date) AS year, EXTRACT(MONTH FROM violation_date) AS month, COUNT(*) AS total_violations\nFROM mental_health_parity_reports\nGROUP BY EXTRACT(YEAR FROM violation_date), EXTRACT(MONTH FROM violation_date)\nORDER BY year, month;", "raw_model_output": "<think>\n\n</think>\n\nSELECT EXTRACT(YEAR FROM violation_date) AS year, EXTRACT(MONTH FROM violation_date) AS month, COUNT(*) AS total_violations\nFROM mental_health_parity_reports\nGROUP BY EXTRACT(YEAR FROM violation_date), EXTRACT(MONTH FROM violation_date)\nORDER BY year, month;", "latency_sec": 1.9351449012756348, "total_duration_sec": 1.718102882, "load_duration_sec": 0.026371124, "tokens_prompt": 208, "prompt_eval_sec": 0.040282604, "tokens_completion": 69, "completion_eval_sec": 1.649466525, "tokens_total": 277, "tokens_per_sec": 143.14173570020697, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries group by year and month extracted from violation_date, count the number of violations, and return the same data. The differences are in column order (month/year), column aliases (COUNT(*) vs total_violations), and the addition of ORDER BY in the generated query. These do not affect the semantic result set's content, only presentation."}
{"example_id": 3551, "sql_complexity": "multiple_joins", "prompt": "List all artists who have performed in New York and Chicago, along with their highest-earning performance.", "context": "CREATE TABLE artist_events (artist_id INT, event_id INT, earnings DECIMAL(5,2)); CREATE TABLE artists (id INT, name VARCHAR(50)); CREATE TABLE events (id INT, city VARCHAR(20));", "reference_sql": "SELECT artists.name, MAX(artist_events.earnings) FROM artists INNER JOIN artist_events ON artists.id = artist_events.artist_id INNER JOIN events ON artist_events.event_id = events.id WHERE city IN ('New York', 'Chicago') GROUP BY artists.name;", "generated_sql": "SELECT a.name, MAX(ae.earnings) AS highest_earning_performance\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nJOIN events e ON ae.event_id = e.id\nWHERE e.city IN ('New York', 'Chicago')\nGROUP BY a.name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT a.name, MAX(ae.earnings) AS highest_earning_performance\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nJOIN events e ON ae.event_id = e.id\nWHERE e.city IN ('New York', 'Chicago')\nGROUP BY a.name;", "latency_sec": 1.6825120449066162, "total_duration_sec": 1.568148506, "load_duration_sec": 0.018436104, "tokens_prompt": 139, "prompt_eval_sec": 0.022582818, "tokens_completion": 65, "completion_eval_sec": 1.525087583, "tokens_total": 204, "tokens_per_sec": 121.24727464362523, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum earnings per artist for events in 'New York' or 'Chicago'. They use equivalent JOIN conditions, WHERE clauses, and GROUP BY logic. The differences are purely syntactic (aliases and column naming) and do not affect the result set's content or structure."}
{"example_id": 5168, "sql_complexity": "aggregation", "prompt": "Get the number of renewable energy projects in Australia for each project type.", "context": "CREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT);", "reference_sql": "SELECT project_type, COUNT(*) FROM renewable_projects WHERE project_location = 'Australia' GROUP BY project_type;", "generated_sql": "SELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "raw_model_output": "<think>\n\n</think>\n\nSELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "latency_sec": 0.9355041980743408, "total_duration_sec": 0.775255327, "load_duration_sec": 0.02324144, "tokens_prompt": 125, "prompt_eval_sec": 0.021512007, "tokens_completion": 31, "completion_eval_sec": 0.728389806, "tokens_total": 156, "tokens_per_sec": 166.75499727431827, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (project_type and COUNT(*)), apply the same WHERE condition (project_location = 'Australia'), and group by the same column (project_type). The generated query adds an alias (project_count) for the COUNT(*) column, but this does not affect the semantic result set's data content, only the column name in the output."}
{"example_id": 4916, "sql_complexity": "aggregation", "prompt": "What is the maximum revenue generated from selling Yttrium in India in the past 3 years?", "context": "CREATE TABLE Yttrium_Sales (id INT PRIMARY KEY, year INT, country VARCHAR(20), quantity INT, price PER_KG); INSERT INTO Yttrium_Sales (id, year, country, quantity, price) VALUES (1, 2019, 'India', 120, 40), (2, 2020, 'India', 130, 45), (3, 2021, 'India', 140, 50), (4, 2019, 'China', 150, 35), (5, 2020, 'China', 160, 40), (6, 2021, 'China', 170, 45);", "reference_sql": "SELECT MAX(quantity * price) FROM Yttrium_Sales WHERE country = 'India' GROUP BY year ORDER BY year DESC LIMIT 3;", "generated_sql": "SELECT MAX(revenue) AS max_revenue\nFROM (\n    SELECT quantity * price AS revenue\n    FROM Yttrium_Sales\n    WHERE country = 'India' AND year >= 2019 AND year <= 2021\n) AS revenue_subquery;", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(revenue) AS max_revenue\nFROM (\n    SELECT quantity * price AS revenue\n    FROM Yttrium_Sales\n    WHERE country = 'India' AND year >= 2019 AND year <= 2021\n) AS revenue_subquery;", "latency_sec": 1.92112398147583, "total_duration_sec": 1.639283858, "load_duration_sec": 0.024849509, "tokens_prompt": 270, "prompt_eval_sec": 0.051719344, "tokens_completion": 64, "completion_eval_sec": 1.560660288, "tokens_total": 334, "tokens_per_sec": 173.85655648492673, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the maximum revenue per year for India and returns the top 3 years in descending order, while the Generated SQL calculates the overall maximum revenue across all years. The Reference query returns multiple rows (3) with per-year maxima, whereas the Generated query returns a single row with the global maximum. Additionally, the Generated query lacks grouping and ordering logic present in the Reference query."}
{"example_id": 812, "sql_complexity": "multiple_joins", "prompt": "What is the average salary of 'engineer' workers in each factory?", "context": "CREATE TABLE factories (factory_id INT, factory_name VARCHAR(20)); INSERT INTO factories VALUES (1, 'Factory X'), (2, 'Factory Y'), (3, 'Factory Z'); CREATE TABLE roles (role_id INT, role_name VARCHAR(20)); INSERT INTO roles VALUES (1, 'engineer'), (2, 'manager'), (3, 'assistant'); CREATE TABLE workers (worker_id INT, factory_id INT, role_id INT, salary DECIMAL(5,2)); INSERT INTO workers VALUES (1, 1, 1, 50000.00), (2, 1, 2, 70000.00), (3, 2, 1, 55000.00), (4, 2, 3, 40000.00), (5, 3, 1, 60000.00);", "reference_sql": "SELECT f.factory_name, AVG(salary) FROM workers w INNER JOIN factories f ON w.factory_id = f.factory_id INNER JOIN roles r ON w.role_id = r.role_id WHERE r.role_name = 'engineer' GROUP BY f.factory_name;", "generated_sql": "SELECT f.factory_name, AVG(w.salary) AS average_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY f.factory_name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT f.factory_name, AVG(w.salary) AS average_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY f.factory_name;", "latency_sec": 1.804157018661499, "total_duration_sec": 1.564771923, "load_duration_sec": 0.013627973, "tokens_prompt": 288, "prompt_eval_sec": 0.054483647, "tokens_completion": 61, "completion_eval_sec": 1.49340273, "tokens_total": 349, "tokens_per_sec": 193.44214300090272, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining the same tables (workers, factories, roles) with identical conditions. They filter for 'engineer' roles, group by factory_name, and calculate the average salary. The differences (column alias, JOIN syntax) do not affect the result set."}
{"example_id": 5784, "sql_complexity": "set operations", "prompt": "List the number of users who have completed a workout of a specific type (e.g. Running) and have a membership status of 'Active'.", "context": "CREATE TABLE workouts (id INT, user_id INT, workout_type VARCHAR(20)); CREATE TABLE members (id INT, name VARCHAR(50), membership_status VARCHAR(20), state VARCHAR(20)); INSERT INTO workouts (id, user_id, workout_type) VALUES (1, 1, 'Running'), (2, 1, 'Cycling'), (3, 2, 'Running'), (4, 3, 'Cycling'), (5, 3, 'Swimming'), (6, 4, 'Running'), (7, 4, 'Swimming'); INSERT INTO members (id, name, membership_status, state) VALUES (1, 'John Doe', 'Active', 'Texas'), (2, 'Jane Doe', 'Inactive', 'California'), (3, 'Bob Smith', 'Active', 'Texas'), (4, 'Alice Johnson', 'Active', 'California');", "reference_sql": "SELECT COUNT(*) FROM (SELECT user_id FROM workouts WHERE workout_type = 'Running' INTERSECT SELECT id FROM members WHERE membership_status = 'Active') AS user_set;", "generated_sql": "SELECT COUNT(DISTINCT w.user_id) \nFROM workouts w\nJOIN members m ON w.user_id = m.id\nWHERE w.workout_type = 'Running' AND m.membership_status = 'Active';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(DISTINCT w.user_id) \nFROM workouts w\nJOIN members m ON w.user_id = m.id\nWHERE w.workout_type = 'Running' AND m.membership_status = 'Active';", "latency_sec": 1.339914083480835, "total_duration_sec": 1.26180628, "load_duration_sec": 0.01378894, "tokens_prompt": 291, "prompt_eval_sec": 0.057747898, "tokens_completion": 48, "completion_eval_sec": 1.188079387, "tokens_total": 339, "tokens_per_sec": 253.00129626173063, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct user_ids that have at least one 'Running' workout and are active members. The Reference SQL uses INTERSECT to find common user_ids between active members and Running workouts, while the Generated SQL joins the tables and counts distinct user_ids meeting both conditions. Both approaches yield the same result."}
{"example_id": 3038, "sql_complexity": "subqueries", "prompt": "What is the total assets of clients who have invested in mutual funds but not in stocks?", "context": "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks'), (3, 'Mutual Funds');", "reference_sql": "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type = 'Mutual Funds' AND c.client_id NOT IN (SELECT client_id FROM investments WHERE investment_type = 'Stocks');", "generated_sql": "SELECT SUM(c.total_assets)\nFROM clients c\nWHERE c.client_id IN (\n    SELECT i.client_id\n    FROM investments i\n    WHERE i.investment_type = 'Mutual Funds'\n    AND i.client_id NOT IN (\n        SELECT i2.client_id\n        FROM investments i2\n        WHERE i2.investment_type = 'Stocks'\n    )\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(c.total_assets)\nFROM clients c\nWHERE c.client_id IN (\n    SELECT i.client_id\n    FROM investments i\n    WHERE i.investment_type = 'Mutual Funds'\n    AND i.client_id NOT IN (\n        SELECT i2.client_id\n        FROM investments i2\n        WHERE i2.investment_type = 'Stocks'\n    )\n);", "latency_sec": 2.311791181564331, "total_duration_sec": 1.981279259, "load_duration_sec": 0.024629725, "tokens_prompt": 216, "prompt_eval_sec": 0.040352774, "tokens_completion": 80, "completion_eval_sec": 1.91431291, "tokens_total": 296, "tokens_per_sec": 128.03924608783404, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns individual client assets, while the Generated SQL aggregates them with SUM. The Reference selects rows from clients where the client has 'Mutual Funds' investments and no 'Stocks' investments, whereas the Generated SQL sums the total_assets of such clients. The result structures differ (row-level vs. aggregated total)."}
{"example_id": 1078, "sql_complexity": "basic SQL", "prompt": "What is the maximum and minimum temperature difference between any two Arctic research stations?", "context": "CREATE TABLE arctic_stations (id INT, name TEXT, location TEXT, temperature DECIMAL(5,2)); INSERT INTO arctic_stations (id, name, location, temperature) VALUES (1, 'Station A', 'Greenland', 2.3), (2, 'Station B', 'Canada', -5.2);", "reference_sql": "SELECT a.name as station1, b.name as station2, MAX(ABS(a.temperature - b.temperature)) as temp_diff FROM arctic_stations a, arctic_stations b ORDER BY temp_diff DESC LIMIT 1", "generated_sql": "SELECT MAX(temperature) - MIN(temperature) AS temperature_difference FROM arctic_stations;", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(temperature) - MIN(temperature) AS temperature_difference FROM arctic_stations;", "latency_sec": 0.8086650371551514, "total_duration_sec": 0.624632474, "load_duration_sec": 0.022735658, "tokens_prompt": 158, "prompt_eval_sec": 0.025267464, "tokens_completion": 24, "completion_eval_sec": 0.574511594, "tokens_total": 182, "tokens_per_sec": 225.06228368703577, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the maximum temperature difference between any two stations (with station names), while the Generated SQL computes the overall temperature range (max - min) without considering specific station pairs. The result structures differ: the first returns three columns (station1, station2, temp_diff) and the second returns a single column (temperature_difference). Additionally, the Generated SQL's value (max - min) equals the Reference SQL's temp_diff only when the maximum and minimum temperatures are from different stations, which isn't guaranteed in all cases."}
{"example_id": 5015, "sql_complexity": "basic SQL", "prompt": "Calculate the average recycling rate", "context": "CREATE TABLE recycling_rates (id INT PRIMARY KEY, location VARCHAR(50), rate FLOAT);", "reference_sql": "SELECT AVG(rate) FROM recycling_rates;", "generated_sql": "SELECT AVG(rate) AS average_recycling_rate FROM recycling_rates;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(rate) AS average_recycling_rate FROM recycling_rates;", "latency_sec": 0.5544719696044922, "total_duration_sec": 0.454281998, "load_duration_sec": 0.015827851, "tokens_prompt": 97, "prompt_eval_sec": 0.017999931, "tokens_completion": 18, "completion_eval_sec": 0.418308523, "tokens_total": 115, "tokens_per_sec": 207.4045331489527, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average of the 'rate' column from the recycling_rates table. The generated query adds an alias ('average_recycling_rate') to the computed value, but this does not affect the actual result set's content. The semantic meaning remains the same as the core computation (AVG(rate)) is identical."}
{"example_id": 1533, "sql_complexity": "subqueries", "prompt": "Which programs had the highest volunteer participation rate in the last quarter?", "context": "CREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), NumVolunteers INT); CREATE TABLE VolunteerEvents (EventID INT, ProgramID INT, EventDate DATE, NumVolunteers INT);", "reference_sql": "SELECT p.ProgramName, COUNT(v.EventID) / (SELECT COUNT(*) FROM VolunteerEvents WHERE EventDate >= DATEADD(quarter, -1, GETDATE())) * 100.0 AS VolunteerParticipationRate FROM Programs p INNER JOIN VolunteerEvents v ON p.ProgramID = v.ProgramID WHERE v.EventDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.ProgramName ORDER BY VolunteerParticipationRate DESC;", "generated_sql": "SELECT P.ProgramID, P.ProgramName, SUM(VE.NumVolunteers) AS TotalVolunteers\nFROM Programs P\nJOIN VolunteerEvents VE ON P.ProgramID = VE.ProgramID\nWHERE VE.EventDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) AND CURRENT_DATE\nGROUP BY P.ProgramID, P.ProgramName\nORDER BY TotalVolunteers DESC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT P.ProgramID, P.ProgramName, SUM(VE.NumVolunteers) AS TotalVolunteers\nFROM Programs P\nJOIN VolunteerEvents VE ON P.ProgramID = VE.ProgramID\nWHERE VE.EventDate BETWEEN DATE_TRUNC('quarter', CURRENT_DATE) AND CURRENT_DATE\nGROUP BY P.ProgramID, P.ProgramName\nORDER BY TotalVolunteers DESC\nLIMIT 1;", "latency_sec": 2.0164198875427246, "total_duration_sec": 1.939513246, "load_duration_sec": 0.014225077, "tokens_prompt": 133, "prompt_eval_sec": 0.024149404, "tokens_completion": 81, "completion_eval_sec": 1.899040758, "tokens_total": 214, "tokens_per_sec": 106.12868942727371, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates a participation rate percentage by comparing event counts in the last quarter, while the generated query sums volunteer numbers in the current quarter. They differ in: 1) Aggregation (count vs sum) 2) Date ranges (last quarter vs current quarter) 3) Output columns (program name with rate vs program ID/name with total volunteers) 4) Ordering (rate descending vs total volunteers descending) 5) The generated query has a LIMIT 1 clause not present in the reference."}
{"example_id": 4021, "sql_complexity": "subqueries", "prompt": "What is the percentage of energy efficiency improvement, per sector, compared to 2015 levels?", "context": "CREATE TABLE energy_efficiency (id INT, sector VARCHAR(50), year INT, efficiency FLOAT); INSERT INTO energy_efficiency (id, sector, year, efficiency) VALUES (1, 'Industry', 2015, 100.0), (2, 'Industry', 2020, 105.0), (3, 'Residential', 2015, 100.0), (4, 'Residential', 2020, 103.0);", "reference_sql": "SELECT sector, (SUM(efficiency) / (SELECT SUM(efficiency) FROM energy_efficiency WHERE year = 2015 AND sector = e.sector) * 100.0) - 100.0 AS improvement FROM energy_efficiency e WHERE year = 2020 GROUP BY sector;", "generated_sql": "SELECT \n    sector,\n    (efficiency - LAG(efficiency) OVER (PARTITION BY sector ORDER BY year)) / LAG(efficiency) OVER (PARTITION BY sector ORDER BY year) * 100 AS percentage_improvement\nFROM \n    energy_efficiency\nWHERE \n    year = 2020;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    sector,\n    (efficiency - LAG(efficiency) OVER (PARTITION BY sector ORDER BY year)) / LAG(efficiency) OVER (PARTITION BY sector ORDER BY year) * 100 AS percentage_improvement\nFROM \n    energy_efficiency\nWHERE \n    year = 2020;", "latency_sec": 2.073223829269409, "total_duration_sec": 1.906963094, "load_duration_sec": 0.020948617, "tokens_prompt": 207, "prompt_eval_sec": 0.040188576, "tokens_completion": 77, "completion_eval_sec": 1.843833884, "tokens_total": 284, "tokens_per_sec": 136.98472687345088, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the percentage improvement for each sector by comparing the total efficiency in 2020 to the total efficiency in 2015 (using SUM and a subquery). The Generated SQL calculates the percentage improvement for each individual row in 2020 by comparing it to the previous year's efficiency (using LAG). While they produce the same results for the provided sample data (where each sector has one entry per year), they differ in general cases. For example, if multiple entries exist per sector/year, the Reference SQL aggregates values while the Generated SQL processes individual rows, leading to different results and output structures."}
{"example_id": 1551, "sql_complexity": "single join", "prompt": "How many unique donors made donations in the healthcare industry in Q3 2022?", "context": "CREATE TABLE donations (id INT, donor_id INT, amount FLOAT, donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 7, 100, '2022-07-01'); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (2, 8, 200, '2022-09-15'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (7, 'Charlie Davis', 'Healthcare', '2022-07-01'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (8, 'Dana Wilson', 'Healthcare', '2022-09-15');", "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE industry = 'Healthcare' AND donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "generated_sql": "SELECT COUNT(DISTINCT d.id) \nFROM donors d\nJOIN donations do ON d.id = do.donor_id\nWHERE d.industry = 'Healthcare' \n  AND do.donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(DISTINCT d.id) \nFROM donors d\nJOIN donations do ON d.id = do.donor_id\nWHERE d.industry = 'Healthcare' \n  AND do.donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "latency_sec": 1.9029150009155273, "total_duration_sec": 1.824313352, "load_duration_sec": 0.014599381, "tokens_prompt": 266, "prompt_eval_sec": 0.060522269, "tokens_completion": 72, "completion_eval_sec": 1.747104042, "tokens_total": 338, "tokens_per_sec": 177.62222686635084, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count distinct donors in the 'Healthcare' industry who made donations between the specified dates. The Reference SQL counts distinct donor_id from donations, while the Generated SQL counts distinct d.id from donors. Since the join ensures donor_id matches d.id, and the WHERE conditions are equivalent, both produce the same result. The difference in table aliases and count columns does not affect the outcome."}
{"example_id": 2592, "sql_complexity": "window functions", "prompt": "What is the third highest account balance for Shariah-compliant finance customers?", "context": "CREATE TABLE shariah_compliant_finance(customer_id INT, account_balance DECIMAL(10, 2)); INSERT INTO shariah_compliant_finance VALUES (1, 5000), (2, 7000), (3, 6000), (4, 8000), (5, 9000);", "reference_sql": "SELECT account_balance FROM (SELECT account_balance, RANK() OVER (ORDER BY account_balance DESC) as rn FROM shariah_compliant_finance) t WHERE rn = 3;", "generated_sql": "SELECT account_balance\nFROM shariah_compliant_finance\nORDER BY account_balance DESC\nOFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY;", "raw_model_output": "<think>\n\n</think>\n\nSELECT account_balance\nFROM shariah_compliant_finance\nORDER BY account_balance DESC\nOFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY;", "latency_sec": 1.1336579322814941, "total_duration_sec": 0.924810347, "load_duration_sec": 0.013868441, "tokens_prompt": 166, "prompt_eval_sec": 0.029261379, "tokens_completion": 37, "completion_eval_sec": 0.879456831, "tokens_total": 203, "tokens_per_sec": 179.06636051269993, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the third highest account balance. The reference query uses RANK() to find the third distinct value, while the generated query uses OFFSET/FETCH to get the third row after sorting. With unique values, they produce the same result."}
{"example_id": 3795, "sql_complexity": "single join", "prompt": "What is the total quantity of unsold garments for each manufacturer based in 'Italy' or 'Spain'?", "context": "CREATE TABLE manufacturers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE garments (id INT PRIMARY KEY, manufacturer_id INT, quantity_manufactured INT, quantity_sold INT);", "reference_sql": "SELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) as total_unsold_quantity FROM manufacturers m JOIN garments g ON m.id = g.manufacturer_id WHERE m.country IN ('Italy', 'Spain') GROUP BY m.name;", "generated_sql": "SELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold\nFROM manufacturers m\nJOIN garments g ON m.id = g.manufacturer_id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold\nFROM manufacturers m\nJOIN garments g ON m.id = g.manufacturer_id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "latency_sec": 1.4473490715026855, "total_duration_sec": 1.357958652, "load_duration_sec": 0.013739882, "tokens_prompt": 140, "prompt_eval_sec": 0.023924573, "tokens_completion": 56, "completion_eval_sec": 1.318173307, "tokens_total": 196, "tokens_per_sec": 135.41999221826035, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. They both retrieve the same data by joining the manufacturers and garments tables, filtering for manufacturers in Italy and Spain, and calculating the total unsold quantity as the sum of (quantity_manufactured - quantity_sold). The only difference is the column alias name ('total_unsold_quantity' vs 'total_unsold'), which does not affect the result's content."}
{"example_id": 4138, "sql_complexity": "window functions", "prompt": "How many lifelong learning courses has a student with ID '2' completed, in chronological order?", "context": "CREATE TABLE lifelong_learning (student_id INT, course_id INT, completion_date DATE); INSERT INTO lifelong_learning VALUES (2, 1001, '2015-01-01'), (2, 1002, '2016-01-01');", "reference_sql": "SELECT student_id, course_id, COUNT(course_id) OVER (PARTITION BY student_id ORDER BY completion_date) as completed_courses FROM lifelong_learning WHERE student_id = 2;", "generated_sql": "SELECT COUNT(*) FROM lifelong_learning WHERE student_id = 2 ORDER BY completion_date;", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM lifelong_learning WHERE student_id = 2 ORDER BY completion_date;", "latency_sec": 0.6082000732421875, "total_duration_sec": 0.572412694, "load_duration_sec": 0.015859056, "tokens_prompt": 155, "prompt_eval_sec": 0.026663069, "tokens_completion": 22, "completion_eval_sec": 0.52771149, "tokens_total": 177, "tokens_per_sec": 291.0226548583758, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns multiple rows with a cumulative count per course completion, while the Generated SQL returns a single aggregated count. The first query provides row-level cumulative counts (e.g., 1 and 2 for two courses), whereas the second query only returns the total count (e.g., 2). The result structures and outputs differ significantly."}
{"example_id": 312, "sql_complexity": "aggregation", "prompt": "List the top 3 most represented ethnicities in movies produced in the USA.", "context": "CREATE TABLE movies (title VARCHAR(255), production_country VARCHAR(64), lead_actor_ethnicity VARCHAR(64));", "reference_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count FROM movies WHERE production_country = 'USA' GROUP BY lead_actor_ethnicity ORDER BY count DESC LIMIT 3;", "generated_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY count DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT lead_actor_ethnicity, COUNT(*) AS count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY count DESC\nLIMIT 3;", "latency_sec": 1.1518688201904297, "total_duration_sec": 1.068136049, "load_duration_sec": 0.014082865, "tokens_prompt": 116, "prompt_eval_sec": 0.021635269, "tokens_completion": 44, "completion_eval_sec": 1.030482759, "tokens_total": 160, "tokens_per_sec": 138.90470615703308, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select the lead_actor_ethnicity and count, filter for production_country = 'USA', group by lead_actor_ethnicity, order by count descending, and limit to 3 results. There are no semantic differences between them."}
{"example_id": 4298, "sql_complexity": "single join", "prompt": "How many users joined the gym in Q1 2023?", "context": "CREATE TABLE memberships (id INT, user_id INT, join_date DATE); INSERT INTO memberships (id, user_id, join_date) VALUES (1, 5, '2023-01-15'), (2, 6, '2023-02-03'), (3, 7, '2023-03-20'), (4, 8, '2022-12-31');", "reference_sql": "SELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "generated_sql": "SELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "latency_sec": 1.1571199893951416, "total_duration_sec": 0.98239623, "load_duration_sec": 0.014557149, "tokens_prompt": 187, "prompt_eval_sec": 0.032351591, "tokens_completion": 39, "completion_eval_sec": 0.933236064, "tokens_total": 226, "tokens_per_sec": 195.31250179001438, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They count the number of records in the 'memberships' table where 'join_date' falls between '2023-01-01' and '2023-03-31', inclusive. The sample data confirms this would return 3 records (ids 1, 2, 3), and the queries are syntactically identical."}
{"example_id": 5211, "sql_complexity": "multiple_joins", "prompt": "What is the average transaction value in the last week, split by product category and customer demographics?", "context": "CREATE TABLE transactions (transaction_id INT, customer_id INT, product_id INT, category_id INT, transaction_date DATE, amount DECIMAL(10,2)); CREATE TABLE customers (customer_id INT, age INT, gender VARCHAR(10), location VARCHAR(255)); CREATE TABLE products (product_id INT, name VARCHAR(255), category_id INT);", "reference_sql": "SELECT c.age, c.gender, p.category_id, AVG(t.amount) as avg_transaction_value FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id INNER JOIN products p ON t.product_id = p.product_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY c.age, c.gender, p.category_id;", "generated_sql": "SELECT \n    c.category_id,\n    p.name AS category_name,\n    c.gender,\n    AVG(t.amount) AS average_transaction_value\nFROM \n    transactions t\nJOIN \n    customers cu ON t.customer_id = cu.customer_id\nJOIN \n    products p ON t.product_id = p.product_id\nWHERE \n    t.transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY \n    c.category_id, p.name, c.gender;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    c.category_id,\n    p.name AS category_name,\n    c.gender,\n    AVG(t.amount) AS average_transaction_value\nFROM \n    transactions t\nJOIN \n    customers cu ON t.customer_id = cu.customer_id\nJOIN \n    products p ON t.product_id = p.product_id\nWHERE \n    t.transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY \n    c.category_id, p.name, c.gender;", "latency_sec": 2.539655923843384, "total_duration_sec": 2.311781157, "load_duration_sec": 0.014063763, "tokens_prompt": 167, "prompt_eval_sec": 0.029528804, "tokens_completion": 96, "completion_eval_sec": 2.266070737, "tokens_total": 263, "tokens_per_sec": 103.55733527949306, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The generated SQL references 'c.category_id' where 'c' is an undefined alias (customers are aliased as 'cu'), causing a syntax error. Even if this were corrected, the selected columns differ: the reference includes 'age' and 'category_id' from products, while the generated query includes 'category_id' from an invalid source, 'product name', and 'gender'. The grouping columns also differ, leading to different aggregation results."}
{"example_id": 382, "sql_complexity": "window functions", "prompt": "What is the average annual precipitation in the past 10 years for each weather station?", "context": "CREATE TABLE WeatherStation (ID INT, Name VARCHAR(100), Location VARCHAR(100), Elevation FLOAT, AnnualPrecipitation FLOAT); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (1, 'Station A', 'Arctic Circle', 100, 450); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (2, 'Station B', 'North Pole', 200, 300);", "reference_sql": "SELECT Name, AVG(AnnualPrecipitation) OVER (PARTITION BY Name ORDER BY Name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AvgAnnualPrecipitation FROM WeatherStation WHERE YEAR(CurrentDate) - YEAR(DateInstalled) BETWEEN 1 AND 10;", "generated_sql": "SELECT Name, AVG(AnnualPrecipitation) AS AverageAnnualPrecipitation\nFROM WeatherStation\nGROUP BY Name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT Name, AVG(AnnualPrecipitation) AS AverageAnnualPrecipitation\nFROM WeatherStation\nGROUP BY Name;", "latency_sec": 1.097722053527832, "total_duration_sec": 0.790423303, "load_duration_sec": 0.02044431, "tokens_prompt": 205, "prompt_eval_sec": 0.03818227, "tokens_completion": 30, "completion_eval_sec": 0.729564204, "tokens_total": 235, "tokens_per_sec": 214.07969280088963, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL contains a WHERE clause referencing a non-existent 'DateInstalled' column, making it invalid. Additionally, even if this were resolved, the Reference SQL uses a window function to calculate a moving average (which would return the same value for each row in the partition) while the Generated SQL uses GROUP BY to aggregate values. The presence of the invalid WHERE clause and differing aggregation logic ensure they are not equivalent."}
{"example_id": 2190, "sql_complexity": "single join", "prompt": "What is the total number of humanitarian assistance events by each country in the last 3 years?", "context": "CREATE TABLE Humanitarian_Assistance (id INT, country VARCHAR(50), year INT, events INT); CREATE TABLE Countries (id INT, name VARCHAR(50), region VARCHAR(50));", "reference_sql": "SELECT co.name, SUM(ha.events) FROM Humanitarian_Assistance ha INNER JOIN Countries co ON ha.country = co.name WHERE ha.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) GROUP BY co.name;", "generated_sql": "SELECT c.name AS country, SUM(ha.events) AS total_events\nFROM Humanitarian_Assistance ha\nJOIN Countries c ON ha.country = c.name\nWHERE ha.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2\nGROUP BY c.name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT c.name AS country, SUM(ha.events) AS total_events\nFROM Humanitarian_Assistance ha\nJOIN Countries c ON ha.country = c.name\nWHERE ha.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2\nGROUP BY c.name;", "latency_sec": 1.6479990482330322, "total_duration_sec": 1.418897691, "load_duration_sec": 0.022770616, "tokens_prompt": 132, "prompt_eval_sec": 0.026906636, "tokens_completion": 58, "completion_eval_sec": 1.3638898, "tokens_total": 190, "tokens_per_sec": 115.29132871995046, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query uses WHERE ha.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) which includes 4 years (e.g., 2020-2023 when current year is 2023). The generated query uses WHERE ha.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2 which includes 3 years (e.g., 2021-2023). The generated query excludes the earliest year in the reference query's range, making them non-equivalent."}
{"example_id": 1852, "sql_complexity": "set operations", "prompt": "Compare coal production and employment rates in China and India between 2018 and 2020.", "context": "CREATE TABLE china_coal_production (year INT, production FLOAT); INSERT INTO china_coal_production (year, production) VALUES (2018, 3500.0), (2019, 3600.0), (2020, 3700.0); CREATE TABLE china_employment (year INT, employment FLOAT); INSERT INTO china_employment (year, employment) VALUES (2018, 8000000.0), (2019, 8100000.0), (2020, 8200000.0); CREATE TABLE india_coal_production (year INT, production FLOAT); INSERT INTO india_coal_production (year, production) VALUES (2018, 700.0), (2019, 750.0), (2020, 800.0); CREATE TABLE india_employment (year INT, employment FLOAT); INSERT INTO india_employment (year, employment) VALUES (2018, 1000000.0), (2019, 1050000.0), (2020, 1100000.0);", "reference_sql": "SELECT 'China' AS country, china_coal_production.production, china_employment.employment FROM china_coal_production INNER JOIN china_employment ON china_coal_production.year = china_employment.year WHERE china_coal_production.year BETWEEN 2018 AND 2020 UNION ALL SELECT 'India', india_coal_production.production, india_employment.employment FROM india_coal_production INNER JOIN india_employment ON india_coal_production.year = india_employment.year WHERE india_coal_production.year BETWEEN 2018 AND 2020;", "generated_sql": "SELECT \n    'China' AS country,\n    c.year,\n    c.production AS coal_production,\n    e.employment AS employment\nFROM \n    china_coal_production c\nJOIN \n    china_employment e ON c.year = e.year\nWHERE \n    c.year BETWEEN 2018 AND 2020\nUNION ALL\nSELECT \n    'India' AS country,\n    i.year,\n    i.production AS coal_production,\n    e.employment AS employment\nFROM \n    india_coal_production i\nJOIN \n    india_employment e ON i.year = e.year\nWHERE \n    i.year BETWEEN 2018 AND 2020\nORDER BY \n    country, year;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    'China' AS country,\n    c.year,\n    c.production AS coal_production,\n    e.employment AS employment\nFROM \n    china_coal_production c\nJOIN \n    china_employment e ON c.year = e.year\nWHERE \n    c.year BETWEEN 2018 AND 2020\nUNION ALL\nSELECT \n    'India' AS country,\n    i.year,\n    i.production AS coal_production,\n    e.employment AS employment\nFROM \n    india_coal_production i\nJOIN \n    india_employment e ON i.year = e.year\nWHERE \n    i.year BETWEEN 2018 AND 2020\nORDER BY \n    country, year;", "latency_sec": 4.163767099380493, "total_duration_sec": 3.836273557, "load_duration_sec": 0.017490577, "tokens_prompt": 374, "prompt_eval_sec": 0.073788047, "tokens_completion": 153, "completion_eval_sec": 3.742878264, "tokens_total": 527, "tokens_per_sec": 126.568078238192, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL returns 3 columns (country, production, employment), while the Generated SQL returns 4 columns (country, year, coal_production, employment). The additional 'year' column in the Generated SQL changes the result structure, making them incompatible. Additionally, the Generated SQL includes an ORDER BY clause, which affects result ordering but not semantic equivalence. The core difference in column count and names makes the queries produce different outputs."}
{"example_id": 2535, "sql_complexity": "subqueries", "prompt": "What is the maximum safety rating for vehicles in the vehiclesafety schema?", "context": "CREATE TABLE VehicleSafety (id INT, vehicle_id INT, safetyrating INT, PRIMARY KEY (id)); CREATE TABLE Vehicles (id INT, make VARCHAR(50), model VARCHAR(50), PRIMARY KEY (id)); CREATE TABLE LuxuryVehicles (id INT, vehicle_id INT, PRIMARY KEY (id), FOREIGN KEY (vehicle_id) REFERENCES Vehicles(id));", "reference_sql": "SELECT MAX(safetyrating) FROM vehicleSafety JOIN Vehicles ON vehicleSafety.vehicle_id = Vehicles.id WHERE EXISTS (SELECT * FROM LuxuryVehicles WHERE Vehicles.id = LuxuryVehicles.vehicle_id);", "generated_sql": "SELECT MAX(safetyrating) AS max_safety_rating FROM VehicleSafety;", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(safetyrating) AS max_safety_rating FROM VehicleSafety;", "latency_sec": 0.6506640911102295, "total_duration_sec": 0.524623674, "load_duration_sec": 0.014326688, "tokens_prompt": 159, "prompt_eval_sec": 0.027554767, "tokens_completion": 20, "completion_eval_sec": 0.479711189, "tokens_total": 179, "tokens_per_sec": 275.10354796831024, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters vehicles using a WHERE EXISTS clause with LuxuryVehicles, while the Generated SQL selects from VehicleSafety without any filtering. The Reference query only considers vehicles linked to LuxuryVehicles, whereas the Generated query includes all VehicleSafety records. This difference in filtering makes them non-equivalent."}
{"example_id": 2140, "sql_complexity": "aggregation", "prompt": "What was the total amount of minerals extracted in the 'north' region for each month in 2020?", "context": "CREATE TABLE extraction(id INT, location TEXT, month INT, year INT, minerals_extracted FLOAT);INSERT INTO extraction(id, location, month, year, minerals_extracted) VALUES (1, 'north', 1, 2020, 1500), (2, 'north', 2, 2020, 1800), (3, 'south', 1, 2020, 1200);", "reference_sql": "SELECT month, SUM(minerals_extracted) FROM extraction WHERE location = 'north' AND year = 2020 GROUP BY month;", "generated_sql": "SELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month\nORDER BY month;", "raw_model_output": "<think>\n\n</think>\n\nSELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month\nORDER BY month;", "latency_sec": 1.3118641376495361, "total_duration_sec": 1.199632991, "load_duration_sec": 0.02621247, "tokens_prompt": 195, "prompt_eval_sec": 0.039281121, "tokens_completion": 47, "completion_eval_sec": 1.132038246, "tokens_total": 242, "tokens_per_sec": 184.47032208197322, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The generated query includes an additional ORDER BY clause, which does not affect the semantic result set. Both queries group by 'month', filter for 'north' location and 2020 year, and calculate the same SUM aggregation. The ORDER BY is purely for result ordering and doesn't change the data returned."}
{"example_id": 4779, "sql_complexity": "window functions", "prompt": "What is the average CO2 emission for the top 3 highest emitting countries since 2015?", "context": "CREATE TABLE emissions (country VARCHAR(50), year INT, co2_emission INT); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2015, 5373978000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2015, 10498600000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2015, 2633830000); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2016, 5518004000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2016, 10813000000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2016, 2799280000);", "reference_sql": "SELECT AVG(co2_emission) as avg_emission FROM (SELECT country, year, co2_emission, ROW_NUMBER() OVER (ORDER BY co2_emission DESC) as rn FROM emissions WHERE year >= 2015) t WHERE rn <= 3 GROUP BY country;", "generated_sql": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM (\n    SELECT co2_emission\n    FROM emissions\n    WHERE year >= 2015\n    ORDER BY co2_emission DESC\n    LIMIT 3\n) AS top_emitters;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(co2_emission) AS average_co2_emission\nFROM (\n    SELECT co2_emission\n    FROM emissions\n    WHERE year >= 2015\n    ORDER BY co2_emission DESC\n    LIMIT 3\n) AS top_emitters;", "latency_sec": 1.8836119174957275, "total_duration_sec": 1.631246722, "load_duration_sec": 0.017831521, "tokens_prompt": 325, "prompt_eval_sec": 0.068162583, "tokens_completion": 62, "completion_eval_sec": 1.542862955, "tokens_total": 387, "tokens_per_sec": 205.45633439956075, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average of top 3 co2_emission values per country (grouped by country), while the Generated SQL calculates the average of the top 3 co2_emission values overall. The Reference SQL's subquery assigns row numbers to all emissions (across countries) and groups by country in the outer query, leading to per-country averages. The Generated SQL directly takes the top 3 emissions (regardless of country) and averages them as a single value. The grouping logic and result structure differ significantly."}
{"example_id": 1015, "sql_complexity": "subqueries", "prompt": "List the top 3 most expensive eco-friendly products in Europe and their suppliers.", "context": "CREATE TABLE Suppliers (supplierID INT, supplierName VARCHAR(50), country VARCHAR(50)); CREATE TABLE Products (productID INT, productName VARCHAR(50), price DECIMAL(10,2), ecoFriendly BOOLEAN, supplierID INT);", "reference_sql": "SELECT P.productName, P.price, S.supplierName FROM (SELECT * FROM Products WHERE ecoFriendly = TRUE ORDER BY price DESC LIMIT 3) P JOIN Suppliers S ON P.supplierID = S.supplierID;", "generated_sql": "SELECT p.productName, p.price, s.supplierName, s.country\nFROM Products p\nJOIN Suppliers s ON p.supplierID = s.supplierID\nWHERE p.ecoFriendly = TRUE AND s.country = 'Europe'\nORDER BY p.price DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT p.productName, p.price, s.supplierName, s.country\nFROM Products p\nJOIN Suppliers s ON p.supplierID = s.supplierID\nWHERE p.ecoFriendly = TRUE AND s.country = 'Europe'\nORDER BY p.price DESC\nLIMIT 3;", "latency_sec": 1.8331449031829834, "total_duration_sec": 1.526188382, "load_duration_sec": 0.017903568, "tokens_prompt": 140, "prompt_eval_sec": 0.023002076, "tokens_completion": 63, "completion_eval_sec": 1.483178962, "tokens_total": 203, "tokens_per_sec": 110.73865445525921, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The generated query adds a WHERE condition (s.country = 'Europe') and includes an extra column (s.country) in the SELECT. The reference query only filters on ecoFriendly = TRUE and does not restrict by supplier country. These differences in filtering and selected columns make the results distinct."}
{"example_id": 3715, "sql_complexity": "aggregation", "prompt": "What is the average age of engines still in service for each engine type?", "context": "CREATE TABLE Engine (id INT, aircraft_id INT, engine_type VARCHAR(255), hours_since_last_service INT, manufacture_year INT); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (1, 1, 'GE90-115B', 500, 2000); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (2, 2, 'CFM56-5B', 1000, 1995); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (3, 1, 'GE90-115B', 700, 2002);", "reference_sql": "SELECT engine_type, AVG(YEAR(CURRENT_DATE) - manufacture_year) as avg_age FROM Engine GROUP BY engine_type;", "generated_sql": "SELECT engine_type, AVG(CURRENT_YEAR - manufacture_year) AS average_age\nFROM Engine\nGROUP BY engine_type;", "raw_model_output": "<think>\n\n</think>\n\nSELECT engine_type, AVG(CURRENT_YEAR - manufacture_year) AS average_age\nFROM Engine\nGROUP BY engine_type;", "latency_sec": 1.0748040676116943, "total_duration_sec": 0.803485768, "load_duration_sec": 0.022694313, "tokens_prompt": 260, "prompt_eval_sec": 0.051742934, "tokens_completion": 29, "completion_eval_sec": 0.726874376, "tokens_total": 289, "tokens_per_sec": 268.88621722671974, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of engines by subtracting the manufacture_year from the current year. The Reference SQL uses YEAR(CURRENT_DATE) to get the current year, while the Generated SQL uses CURRENT_YEAR. Assuming CURRENT_YEAR is a valid function/variable representing the current year, both queries perform the same calculation and grouping, resulting in identical output."}
{"example_id": 1957, "sql_complexity": "set operations", "prompt": "What is the average temperature recorded for the 'polar_bear' species in the 'Arctic_Animals' table compared to the 'penguin' species in the 'Antarctic_Animals' table?", "context": "CREATE TABLE Arctic_Animals (species TEXT, avg_temp FLOAT); CREATE TABLE Antarctic_Animals (species TEXT, avg_temp FLOAT);", "reference_sql": "SELECT AVG(Arctic_Animals.avg_temp) FROM Arctic_Animals WHERE Arctic_Animals.species = 'polar_bear' INTERSECT SELECT AVG(Antarctic_Animals.avg_temp) FROM Antarctic_Animals WHERE Antarctic_Animals.species = 'penguin'", "generated_sql": "SELECT \n    (SELECT avg_temp FROM Arctic_Animals WHERE species = 'polar_bear') AS polar_bear_avg_temp,\n    (SELECT avg_temp FROM Antarctic_Animals WHERE species = 'penguin') AS penguin_avg_temp;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    (SELECT avg_temp FROM Arctic_Animals WHERE species = 'polar_bear') AS polar_bear_avg_temp,\n    (SELECT avg_temp FROM Antarctic_Animals WHERE species = 'penguin') AS penguin_avg_temp;", "latency_sec": 1.4006900787353516, "total_duration_sec": 1.320779825, "load_duration_sec": 0.026515944, "tokens_prompt": 141, "prompt_eval_sec": 0.022819864, "tokens_completion": 54, "completion_eval_sec": 1.26927394, "tokens_total": 195, "tokens_per_sec": 139.21709231785283, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses INTERSECT to find common values between two aggregated results (polar bear and penguin average temps), returning a single column with matching values. The Generated SQL retrieves both averages as separate columns in a single row. The first checks for equality between the two averages, while the second simply returns both values independently. Their output structures and logical purposes differ."}
{"example_id": 1311, "sql_complexity": "basic SQL", "prompt": "What is the total number of veteran job applications in Texas in the last year?", "context": "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", "reference_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);", "generated_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= CURRENT_DATE - INTERVAL '1 year';", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= CURRENT_DATE - INTERVAL '1 year';", "latency_sec": 0.9556980133056641, "total_duration_sec": 0.74044538, "load_duration_sec": 0.013520975, "tokens_prompt": 173, "prompt_eval_sec": 0.030636912, "tokens_completion": 29, "completion_eval_sec": 0.693950819, "tokens_total": 202, "tokens_per_sec": 211.36383793590002, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the date one year before the current date. DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) and CURRENT_DATE - INTERVAL '1 year' produce the same result, so the WHERE clauses are semantically equivalent."}
{"example_id": 2997, "sql_complexity": "window functions", "prompt": "What is the earliest capture time for each satellite image in the 'satellite_images' table?", "context": "CREATE TABLE satellite_images (image_id INT, image_url TEXT, capture_time TIMESTAMP); INSERT INTO satellite_images (image_id, image_url, capture_time) VALUES (1, 'image1.jpg', '2022-01-01 10:00:00'), (2, 'image2.jpg', '2021-05-01 10:00:00');", "reference_sql": "SELECT image_id, MIN(capture_time) OVER (PARTITION BY image_id) FROM satellite_images;", "generated_sql": "SELECT image_id, image_url, capture_time FROM satellite_images ORDER BY capture_time ASC;", "raw_model_output": "<think>\n\n</think>\n\nSELECT image_id, image_url, capture_time FROM satellite_images ORDER BY capture_time ASC;", "latency_sec": 1.3458530902862549, "total_duration_sec": 0.603891849, "load_duration_sec": 0.017067022, "tokens_prompt": 181, "prompt_eval_sec": 0.032216118, "tokens_completion": 23, "completion_eval_sec": 0.55265173, "tokens_total": 204, "tokens_per_sec": 151.57672220867022, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query selects image_id and a window function calculating MIN(capture_time) over image_id partitions (which simplifies to capture_time itself for unique image_ids), resulting in two columns. The generated query selects all three columns (image_id, image_url, capture_time) and orders results by capture_time. Column counts differ (2 vs 3 columns) and the generated query includes additional data and sorting not present in the reference query."}
{"example_id": 3743, "sql_complexity": "aggregation", "prompt": "What is the maximum budget spent on peacekeeping operations by each department?", "context": "CREATE TABLE DepartmentPeacekeeping (id INT, department VARCHAR(50), budget INT);", "reference_sql": "SELECT department, MAX(budget) FROM DepartmentPeacekeeping GROUP BY department;", "generated_sql": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "raw_model_output": "<think>\n\n</think>\n\nSELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "latency_sec": 0.6300840377807617, "total_duration_sec": 0.617572307, "load_duration_sec": 0.015787401, "tokens_prompt": 104, "prompt_eval_sec": 0.019329923, "tokens_completion": 25, "completion_eval_sec": 0.58024573, "tokens_total": 129, "tokens_per_sec": 204.73459453814263, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by 'department' and calculate the maximum 'budget' for each group. The only difference is the alias 'max_budget' in the generated query, which does not affect the semantic result set. The output data (department and max budget values) remains identical."}
{"example_id": 4664, "sql_complexity": "multiple_joins", "prompt": "Calculate the total number of volunteer hours contributed by volunteers from 'California' in 'Health' projects in 2021.", "context": "CREATE TABLE volunteers (volunteer_id INT, name VARCHAR(255), state VARCHAR(255));", "reference_sql": "SELECT SUM(vh.hours) as total_hours FROM volunteer_projects vp JOIN volunteer_hours vh ON vp.project_id = vh.project_id JOIN volunteers vol ON vh.volunteer_id = vol.volunteer_id WHERE vp.cause = 'Health' AND vol.state = 'California' AND vh.volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';", "generated_sql": "SELECT COUNT(*) AS total_volunteer_hours\nFROM volunteers\nWHERE state = 'California' AND project_type = 'Health' AND year = 2021;", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) AS total_volunteer_hours\nFROM volunteers\nWHERE state = 'California' AND project_type = 'Health' AND year = 2021;", "latency_sec": 0.9577572345733643, "total_duration_sec": 0.948368081, "load_duration_sec": 0.01449446, "tokens_prompt": 121, "prompt_eval_sec": 0.022017794, "tokens_completion": 39, "completion_eval_sec": 0.909816594, "tokens_total": 160, "tokens_per_sec": 167.05694744375643, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query sums 'hours' from volunteer_hours via joins, filtering by 'Health' cause, California state, and 2021 dates. The generated query counts volunteers but references non-existent columns 'project_type' and 'year' in the volunteers table. Additionally, the generated query lacks necessary joins and incorrectly uses COUNT(*) instead of SUM(hours)."}
{"example_id": 251, "sql_complexity": "set operations", "prompt": "Compare the number of economic diversification projects in two regions, one in Europe and one in Oceania, by showing the project type and the number of projects in each region.", "context": "CREATE TABLE economic_diversification (region VARCHAR(50), project_type VARCHAR(50), project_start_date DATE);", "reference_sql": "SELECT 'Europe' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Europe' UNION ALL SELECT 'Oceania' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Oceania';", "generated_sql": "SELECT \n    project_type,\n    COUNT(*) FILTER (WHERE region = 'Europe') AS europe_project_count,\n    COUNT(*) FILTER (WHERE region = 'Oceania') AS oceania_project_count\nFROM economic_diversification\nWHERE region IN ('Europe', 'Oceania')\nGROUP BY project_type;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    project_type,\n    COUNT(*) FILTER (WHERE region = 'Europe') AS europe_project_count,\n    COUNT(*) FILTER (WHERE region = 'Oceania') AS oceania_project_count\nFROM economic_diversification\nWHERE region IN ('Europe', 'Oceania')\nGROUP BY project_type;", "latency_sec": 1.9338030815124512, "total_duration_sec": 1.669867042, "load_duration_sec": 0.02373577, "tokens_prompt": 133, "prompt_eval_sec": 0.021920069, "tokens_completion": 69, "completion_eval_sec": 1.622035502, "tokens_total": 202, "tokens_per_sec": 104.4573782776338, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries produce different result structures. The Reference SQL returns two rows per project_type (one for Europe and one for Oceania), while the Generated SQL returns one row per project_type with separate columns for Europe and Oceania counts. The semantic output format differs (vertical vs. horizontal layout)."}
{"example_id": 610, "sql_complexity": "subqueries", "prompt": "What is the percentage of community development projects completed in 'Caribbean' in 2020?", "context": "CREATE TABLE community_projects (project_id INT, project_name TEXT, location TEXT, completion_year INT); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (1, 'Community Center', 'Southern Region, Caribbean', 2020); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (2, 'Park Renovation', 'Northern Region, Caribbean', 2019); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (3, 'Library Construction', 'Caribbean', 2020);", "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects WHERE location = 'Caribbean')) FROM community_projects WHERE completion_year = 2020 AND location = 'Caribbean';", "generated_sql": "SELECT \n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects)) AS percentage_completed_in_caribbean_2020\nFROM community_projects\nWHERE location = 'Caribbean' AND completion_year = 2020;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n  (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects)) AS percentage_completed_in_caribbean_2020\nFROM community_projects\nWHERE location = 'Caribbean' AND completion_year = 2020;", "latency_sec": 1.6075339317321777, "total_duration_sec": 1.5036234, "load_duration_sec": 0.020761212, "tokens_prompt": 220, "prompt_eval_sec": 0.040421462, "tokens_completion": 60, "completion_eval_sec": 1.440432919, "tokens_total": 280, "tokens_per_sec": 174.1798381190558, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the percentage of Caribbean projects completed in 2020 relative to all Caribbean projects (denominator: COUNT(*) WHERE location = 'Caribbean'). The Generated SQL calculates it relative to all projects (denominator: COUNT(*) FROM community_projects). Since the denominators differ, the results will not match."}
{"example_id": 421, "sql_complexity": "set operations", "prompt": "What is the combined landfill capacity for 'City A' and 'City B'?", "context": "CREATE TABLE landfill_capacity (city VARCHAR(255), capacity INT); INSERT INTO landfill_capacity (city, capacity) VALUES ('City A', 500000), ('City B', 600000);", "reference_sql": "SELECT SUM(capacity) FROM (SELECT capacity FROM landfill_capacity WHERE city = 'City A' UNION ALL SELECT capacity FROM landfill_capacity WHERE city = 'City B') AS combined_capacity;", "generated_sql": "SELECT SUM(capacity) AS combined_capacity FROM landfill_capacity WHERE city IN ('City A', 'City B');", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(capacity) AS combined_capacity FROM landfill_capacity WHERE city IN ('City A', 'City B');", "latency_sec": 0.7790331840515137, "total_duration_sec": 0.687404966, "load_duration_sec": 0.024104492, "tokens_prompt": 138, "prompt_eval_sec": 0.024023153, "tokens_completion": 27, "completion_eval_sec": 0.637101755, "tokens_total": 165, "tokens_per_sec": 211.80099048141363, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of capacities for 'City A' and 'City B'. The reference query uses a subquery with UNION ALL to combine the capacities before summing, while the generated query directly sums the capacities where the city is in the specified list. Since both approaches aggregate the same set of values, they produce identical results."}
{"example_id": 880, "sql_complexity": "aggregation", "prompt": "Show veteran employment statistics for each state in the 'veteran_employment' table", "context": "CREATE TABLE veteran_employment (employee_id INT, state VARCHAR(2), job_title VARCHAR(50), employment_date DATE);", "reference_sql": "SELECT state, COUNT(*) as veteran_employees FROM veteran_employment WHERE state IN ('CA', 'NY', 'TX', 'FL', 'PA') GROUP BY state;", "generated_sql": "SELECT state, COUNT(*) AS total_employees, MIN(employment_date) AS earliest_employment, MAX(employment_date) AS latest_employment\nFROM veteran_employment\nGROUP BY state;", "raw_model_output": "<think>\n\n</think>\n\nSELECT state, COUNT(*) AS total_employees, MIN(employment_date) AS earliest_employment, MAX(employment_date) AS latest_employment\nFROM veteran_employment\nGROUP BY state;", "latency_sec": 1.315575122833252, "total_duration_sec": 1.076256861, "load_duration_sec": 0.023048539, "tokens_prompt": 116, "prompt_eval_sec": 0.020954129, "tokens_completion": 44, "completion_eval_sec": 1.030143218, "tokens_total": 160, "tokens_per_sec": 121.61981267585877, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL only returns 'state' and 'veteran_employees' (count), while the Generated SQL adds 'earliest_employment' and 'latest_employment' columns. Additionally, the Generated SQL lacks the WHERE state IN (...) filter present in the Reference SQL, potentially including more states. The result sets differ in both structure and content."}
{"example_id": 454, "sql_complexity": "single join", "prompt": "Which excavation sites have more than 10 artifacts?", "context": "CREATE TABLE ExcavationSite (SiteID INT, SiteName VARCHAR(50)); INSERT INTO ExcavationSite (SiteID, SiteName) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE Artifact (ArtifactID INT, SiteID INT, ObjectType VARCHAR(50)); INSERT INTO Artifact (ArtifactID, SiteID, ObjectType) VALUES (1, 1, 'Pottery'), (2, 1, 'Tool'), (3, 2, 'Statue'), (4, 2, 'Bead'), (5, 3, 'Bead'), (6, 3, 'Bead'), (7, 3, 'Bead'), (8, 3, 'Bead'), (9, 3, 'Bead'), (10, 3, 'Bead'), (11, 3, 'Bead');", "reference_sql": "SELECT e.SiteName FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName HAVING COUNT(a.ArtifactID) > 10;", "generated_sql": "SELECT es.SiteName, COUNT(a.ArtifactID) AS ArtifactCount\nFROM ExcavationSite es\nJOIN Artifact a ON es.SiteID = a.SiteID\nGROUP BY es.SiteID, es.SiteName\nHAVING COUNT(a.ArtifactID) > 10;", "raw_model_output": "<think>\n\n</think>\n\n```sql\nSELECT es.SiteName, COUNT(a.ArtifactID) AS ArtifactCount\nFROM ExcavationSite es\nJOIN Artifact a ON es.SiteID = a.SiteID\nGROUP BY es.SiteID, es.SiteName\nHAVING COUNT(a.ArtifactID) > 10;\n```", "latency_sec": 1.7328529357910156, "total_duration_sec": 1.68206088, "load_duration_sec": 0.017930479, "tokens_prompt": 278, "prompt_eval_sec": 0.051110842, "tokens_completion": 66, "completion_eval_sec": 1.610916838, "tokens_total": 344, "tokens_per_sec": 198.5165578075847, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects only SiteName, while the Generated SQL includes an additional count column (ArtifactCount). Although both queries filter sites with more than 10 artifacts, the result sets differ in structure (number of columns), making them non-equivalent."}
{"example_id": 1086, "sql_complexity": "aggregation", "prompt": "What is the total CO2 emission for each equipment type, excluding equipment that is older than 8 years?", "context": "CREATE TABLE EmissionData (EquipmentID INT, EquipmentType VARCHAR(50), CO2Emission INT, Age INT); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (1, 'Excavator', 50, 8); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (2, 'Haul Truck', 70, 7); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (3, 'Shovel', 30, 6); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (4, 'Drilling Rig', 40, 3);", "reference_sql": "SELECT EquipmentType, SUM(CO2Emission) as TotalCO2Emission FROM EmissionData WHERE Age <= 8 GROUP BY EquipmentType;", "generated_sql": "SELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "raw_model_output": "<think>\n\n</think>\n\nSELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "latency_sec": 1.2196159362792969, "total_duration_sec": 1.043898314, "load_duration_sec": 0.023324068, "tokens_prompt": 259, "prompt_eval_sec": 0.053522602, "tokens_completion": 39, "completion_eval_sec": 0.964080697, "tokens_total": 298, "tokens_per_sec": 244.33921461301472, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select EquipmentType and sum CO2Emission for rows where Age is <=8, grouping by EquipmentType. The only differences are formatting (capitalization of keywords and line breaks), which do not affect semantic meaning."}
{"example_id": 3455, "sql_complexity": "basic SQL", "prompt": "What are the names of all innovation projects in the 'rural_infrastructure' table, excluding those with a budget over 50000?", "context": "CREATE TABLE rural_infrastructure (name VARCHAR(255), budget INT); INSERT INTO rural_infrastructure (name, budget) VALUES ('Dam Construction', 40000), ('Well Digging', 30000), ('Irrigation System', 70000);", "reference_sql": "SELECT name FROM rural_infrastructure WHERE budget <= 50000;", "generated_sql": "SELECT name FROM rural_infrastructure WHERE budget <= 50000;", "raw_model_output": "<think>\n\n</think>\n\nSELECT name FROM rural_infrastructure WHERE budget <= 50000;", "latency_sec": 0.7590229511260986, "total_duration_sec": 0.552387454, "load_duration_sec": 0.013557067, "tokens_prompt": 166, "prompt_eval_sec": 0.032418864, "tokens_completion": 21, "completion_eval_sec": 0.503437298, "tokens_total": 187, "tokens_per_sec": 246.36936172030607, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They select the 'name' column from the 'rural_infrastructure' table where the 'budget' is less than or equal to 50000. The result set will contain the same rows ('Dam Construction' and 'Well Digging') as both queries apply the exact same filter condition."}
{"example_id": 3936, "sql_complexity": "window functions", "prompt": "What is the total investment per client for each investment type?", "context": "CREATE TABLE clients (client_id INT, name TEXT, investment_type TEXT, investment FLOAT); INSERT INTO clients (client_id, name, investment_type, investment) VALUES (1, 'John Doe', 'Stocks', 3000.00), (1, 'John Doe', 'Bonds', 2000.00), (2, 'Jane Smith', 'Stocks', 5000.00);", "reference_sql": "SELECT client_id, name, investment_type, SUM(investment) OVER (PARTITION BY client_id, investment_type ORDER BY client_id) as total_investment FROM clients;", "generated_sql": "SELECT client_id, name, investment_type, SUM(investment) AS total_investment\nFROM clients\nGROUP BY client_id, name, investment_type;", "raw_model_output": "<think>\n\n</think>\n\nSELECT client_id, name, investment_type, SUM(investment) AS total_investment\nFROM clients\nGROUP BY client_id, name, investment_type;", "latency_sec": 1.0902659893035889, "total_duration_sec": 0.912183548, "load_duration_sec": 0.017693762, "tokens_prompt": 177, "prompt_eval_sec": 0.031330895, "tokens_completion": 36, "completion_eval_sec": 0.860251732, "tokens_total": 213, "tokens_per_sec": 195.36516968309218, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to retain all rows while adding a running total, whereas the Generated SQL aggregates rows into groups, reducing the number of rows. For example, if there were multiple entries per client_id/investment_type, the Reference SQL would show all rows with the same total, while the Generated SQL would collapse them into a single row. The two queries differ in both output structure and behavior."}
{"example_id": 1838, "sql_complexity": "window functions", "prompt": "What are the top 3 species with the most sightings across all arctic research stations?", "context": "CREATE TABLE research_station (id INT, name TEXT); INSERT INTO research_station (id, name) VALUES (1, 'Station A'); INSERT INTO research_station (id, name) VALUES (2, 'Station B'); CREATE TABLE species_observations (station_id INT, species_name TEXT, sightings INT); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 1', 10); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 2', 5); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 1', 8); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 3', 15);", "reference_sql": "SELECT species_name, SUM(sightings) as total_sightings, RANK() OVER (ORDER BY SUM(sightings) DESC) as rank FROM species_observations GROUP BY species_name HAVING rank <= 3;", "generated_sql": "SELECT species_name, SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT species_name, SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nLIMIT 3;", "latency_sec": 1.2083780765533447, "total_duration_sec": 1.116415906, "load_duration_sec": 0.029030093, "tokens_prompt": 258, "prompt_eval_sec": 0.052773203, "tokens_completion": 42, "completion_eval_sec": 1.032450231, "tokens_total": 300, "tokens_per_sec": 248.26666903432212, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains a HAVING clause that references the alias 'rank', which is not allowed in standard SQL. The HAVING clause filters based on aggregate values, but 'rank' is a window function result, not an aggregate. The Generated SQL correctly uses ORDER BY and LIMIT to achieve the same result. Since the Reference SQL is invalid, the queries are not semantically equivalent."}
{"example_id": 3091, "sql_complexity": "single join", "prompt": "Find the number of hybrid vehicles sold in the US, Germany, and Japan.", "context": "CREATE TABLE vehicle_sales (sale_id INT, vehicle_id INT, country VARCHAR(20), quantity INT); CREATE TABLE vehicles (vehicle_id INT, model VARCHAR(20), manufacture VARCHAR(20), vehicle_type VARCHAR(20));", "reference_sql": "SELECT SUM(vs.quantity) FROM vehicle_sales vs JOIN vehicles v ON vs.vehicle_id = v.vehicle_id WHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "generated_sql": "SELECT COUNT(*) AS total_hybrid_sales\nFROM vehicle_sales vs\nJOIN vehicles v ON vs.vehicle_id = v.vehicle_id\nWHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) AS total_hybrid_sales\nFROM vehicle_sales vs\nJOIN vehicles v ON vs.vehicle_id = v.vehicle_id\nWHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "latency_sec": 1.5788588523864746, "total_duration_sec": 1.288619138, "load_duration_sec": 0.018208339, "tokens_prompt": 137, "prompt_eval_sec": 0.023112899, "tokens_completion": 53, "completion_eval_sec": 1.244454987, "tokens_total": 190, "tokens_per_sec": 120.34007961687738, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their aggregate functions. The Reference SQL uses SUM(vs.quantity) to calculate total units sold, while the Generated SQL uses COUNT(*) to count the number of sales records. This results in different numerical outputs unless every sale record represents exactly one unit (which is not guaranteed by the schema)."}
{"example_id": 2399, "sql_complexity": "set operations", "prompt": "What is the average duration of criminal trials for Indigenous defendants compared to non-Indigenous defendants in Canada and New Zealand?", "context": "CREATE TABLE canada_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO canada_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 60), (2, 'Non-Indigenous', 45);CREATE TABLE nz_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO nz_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 70), (2, 'Non-Indigenous', 50);", "reference_sql": "SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Non-Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Non-Indigenous';", "generated_sql": "SELECT \n    'Canada' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM canada_criminal_trials\nUNION\nSELECT \n    'New Zealand' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM nz_criminal_trials;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    'Canada' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM canada_criminal_trials\nUNION\nSELECT \n    'New Zealand' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM nz_criminal_trials;", "latency_sec": 3.709153890609741, "total_duration_sec": 3.433172391, "load_duration_sec": 0.014249544, "tokens_prompt": 224, "prompt_eval_sec": 0.042394162, "tokens_completion": 141, "completion_eval_sec": 3.374210844, "tokens_total": 365, "tokens_per_sec": 98.40519179429309, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries produce different result structures. The Reference SQL returns four rows with a single average value each, while the Generated SQL returns two rows with two average values per row. Although the calculated averages are numerically equivalent for corresponding groups, the output format differs (4 rows vs. 2 rows with multiple columns), making them structurally and semantically distinct."}
{"example_id": 2972, "sql_complexity": "set operations", "prompt": "How many indigenous communities are in the Arctic Research Station 13 and 14?", "context": "CREATE TABLE Arctic_Research_Station_13 (id INT, community TEXT); CREATE TABLE Arctic_Research_Station_14 (id INT, community TEXT);", "reference_sql": "SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13; SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14; SELECT COUNT(DISTINCT community) FROM (SELECT * FROM Arctic_Research_Station_13 UNION ALL SELECT * FROM Arctic_Research_Station_14) AS Arctic_Communities;", "generated_sql": "SELECT COUNT(DISTINCT community) FROM (SELECT community FROM Arctic_Research_Station_13 UNION SELECT community FROM Arctic_Research_Station_14) AS combined_communities;", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(DISTINCT community) FROM (SELECT community FROM Arctic_Research_Station_13 UNION SELECT community FROM Arctic_Research_Station_14) AS combined_communities;", "latency_sec": 1.175271987915039, "total_duration_sec": 1.052865985, "load_duration_sec": 0.018409804, "tokens_prompt": 124, "prompt_eval_sec": 0.022330823, "tokens_completion": 43, "completion_eval_sec": 1.010179289, "tokens_total": 167, "tokens_per_sec": 142.09476760886818, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct 'community' values from the combined data of Arctic_Research_Station_13 and Arctic_Research_Station_14. The Reference's third query uses UNION ALL (which includes duplicates) but applies COUNT(DISTINCT), while the Generated query uses UNION (which removes duplicates between the tables) and also applies COUNT(DISTINCT). In both cases, the final result is the same: the count of unique communities across both tables."}
{"example_id": 5576, "sql_complexity": "window functions", "prompt": "Who are the top 5 users with the most followers, and what is their location?", "context": "CREATE TABLE user_data (user_id INT, name VARCHAR(50), followers INT, location VARCHAR(50)); INSERT INTO user_data (user_id, name, followers, location) VALUES (1, 'Alice', 10000, 'New York'), (2, 'Bob', 15000, 'California'), (3, 'Charlie', 12000, 'Texas'), (4, 'David', 8000, 'Florida'), (5, 'Eve', 9000, 'Illinois');", "reference_sql": "SELECT name, location FROM (SELECT name, location, ROW_NUMBER() OVER (ORDER BY followers DESC) AS rank FROM user_data) AS user_ranks WHERE rank <= 5;", "generated_sql": "SELECT name, location, followers\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "raw_model_output": "<think>\n\n</think>\n\nSELECT name, location, followers\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "latency_sec": 0.7811739444732666, "total_duration_sec": 0.678484779, "load_duration_sec": 0.023262227, "tokens_prompt": 210, "prompt_eval_sec": 0.041340381, "tokens_completion": 25, "completion_eval_sec": 0.611689387, "tokens_total": 235, "tokens_per_sec": 300.82928605415384, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 'name' and 'location' columns, while the Generated SQL includes an additional 'followers' column. Both queries order by followers descending and limit to 5 results, but the differing column sets make their result schemas incompatible."}
{"example_id": 1560, "sql_complexity": "basic SQL", "prompt": "What is the average media literacy score for users in the 'Young Adult' age group who have completed at least one disinformation detection course?", "context": "CREATE TABLE users (id INT, age VARCHAR(20), media_literacy_score INT, courses_completed INT);", "reference_sql": "SELECT AVG(media_literacy_score) FROM users WHERE age = 'Young Adult' AND courses_completed > 0;", "generated_sql": "SELECT AVG(media_literacy_score) AS average_media_literacy_score\nFROM users\nWHERE age = 'Young Adult' AND courses_completed >= 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(media_literacy_score) AS average_media_literacy_score\nFROM users\nWHERE age = 'Young Adult' AND courses_completed >= 1;", "latency_sec": 0.9715609550476074, "total_duration_sec": 0.936816329, "load_duration_sec": 0.014798605, "tokens_prompt": 124, "prompt_eval_sec": 0.0214219, "tokens_completion": 38, "completion_eval_sec": 0.898509623, "tokens_total": 162, "tokens_per_sec": 166.74198274266985, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The WHERE clauses 'courses_completed > 0' and 'courses_completed >= 1' are mathematically equivalent for integer values. Both conditions filter rows where courses_completed is a positive integer. The generated query adds an alias for the output column, which does not affect the semantic result."}
{"example_id": 1201, "sql_complexity": "basic SQL", "prompt": "What is the maximum energy efficiency rating of hydroelectric dams in Canada?", "context": "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "generated_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "raw_model_output": "<think>\n\n</think>\n\nSELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "latency_sec": 0.8018679618835449, "total_duration_sec": 0.60657617, "load_duration_sec": 0.024656405, "tokens_prompt": 160, "prompt_eval_sec": 0.027523247, "tokens_completion": 23, "completion_eval_sec": 0.54761879, "tokens_total": 183, "tokens_per_sec": 228.2171238892533, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They select the maximum energy_efficiency_rating from the hydro_dams table where the country is 'Canada'. The SQL syntax, table name, column names, and conditions are exactly the same in both queries."}
{"example_id": 4243, "sql_complexity": "single join", "prompt": "How many orders were placed by new and returning customers in each month of the year 2021?'", "context": "CREATE TABLE customer (id INT, first_order_date DATE, last_order_date DATE);", "reference_sql": "INSERT INTO customer (id, first_order_date, last_order_date) SELECT customer_id, MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id; SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, CASE WHEN DATEDIFF(last_order_date, first_order_date) > 30 THEN 'returning' ELSE 'new' END AS customer_type, COUNT(DISTINCT id) AS num_orders FROM orders JOIN customer ON orders.customer_id = customer.id WHERE YEAR(order_date) = 2021 GROUP BY year, month, customer_type;", "generated_sql": "SELECT \n    EXTRACT(MONTH FROM order_date) AS month,\n    COUNT(DISTINCT CASE WHEN customer.first_order_date = order_date THEN customer.id END) AS new_customers,\n    COUNT(DISTINCT CASE WHEN customer.first_order_date < order_date THEN customer.id END) AS returning_customers\nFROM \n    orders\nJOIN \n    customer ON orders.customer_id = customer.id\nWHERE \n    EXTRACT(YEAR FROM order_date) = 2021\nGROUP BY \n    EXTRACT(MONTH FROM order_date)\nORDER BY \n    month;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    EXTRACT(MONTH FROM order_date) AS month,\n    COUNT(DISTINCT CASE WHEN customer.first_order_date = order_date THEN customer.id END) AS new_customers,\n    COUNT(DISTINCT CASE WHEN customer.first_order_date < order_date THEN customer.id END) AS returning_customers\nFROM \n    orders\nJOIN \n    customer ON orders.customer_id = customer.id\nWHERE \n    EXTRACT(YEAR FROM order_date) = 2021\nGROUP BY \n    EXTRACT(MONTH FROM order_date)\nORDER BY \n    month;", "latency_sec": 3.2150559425354004, "total_duration_sec": 2.888756265, "load_duration_sec": 0.014872165, "tokens_prompt": 111, "prompt_eval_sec": 0.018888608, "tokens_completion": 122, "completion_eval_sec": 2.853000837, "tokens_total": 233, "tokens_per_sec": 72.47152278670949, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query classifies customers as 'new' or 'returning' based on the entire duration between their first and last order dates (using DATEDIFF), while the generated query uses a per-order approach: 'new' customers are those whose first_order_date matches the order_date, and 'returning' customers have a first_order_date earlier than the order_date. Additionally, the reference query groups by year, month, and customer_type, whereas the generated query groups only by month, leading to different result structures and aggregation logic."}
{"example_id": 2321, "sql_complexity": "subqueries", "prompt": "What are the names and types of vessels used in research expeditions in the regions with the lowest ocean acidification levels?", "context": "CREATE TABLE ocean_acidification (id INT PRIMARY KEY, region VARCHAR(255), year INT, acidification_level INT); INSERT INTO ocean_acidification (id, region, year, acidification_level) VALUES (1, 'Arctic Ocean', 2018, 20), (2, 'Southern Ocean', 2019, 22); CREATE TABLE expedition_vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), region VARCHAR(255)); INSERT INTO expedition_vessels (id, name, type, region) VALUES (1, 'Sea Researcher', 'Research Vessel', 'Arctic Ocean');", "reference_sql": "SELECT v.name, v.type FROM expedition_vessels v INNER JOIN ocean_acidification oa ON v.region = oa.region WHERE oa.acidification_level = (SELECT MIN(acidification_level) FROM ocean_acidification);", "generated_sql": "SELECT e.name, e.type\nFROM expedition_vessels e\nWHERE e.region = (\n    SELECT region\n    FROM ocean_acidification\n    ORDER BY acidification_level ASC\n    LIMIT 1\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT e.name, e.type\nFROM expedition_vessels e\nWHERE e.region = (\n    SELECT region\n    FROM ocean_acidification\n    ORDER BY acidification_level ASC\n    LIMIT 1\n);", "latency_sec": 1.3136928081512451, "total_duration_sec": 1.255887605, "load_duration_sec": 0.017792713, "tokens_prompt": 243, "prompt_eval_sec": 0.046593815, "tokens_completion": 49, "completion_eval_sec": 1.189408607, "tokens_total": 292, "tokens_per_sec": 222.27418631523946, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL joins on regions where acidification_level equals the minimum value (potentially multiple regions with the same minimum), while the Generated SQL selects vessels in a single region (LIMIT 1) that has the lowest acidification_level. If multiple regions share the minimum acidification_level, the Generated SQL would miss some regions, making the results different."}
{"example_id": 4349, "sql_complexity": "multiple_joins", "prompt": "Show the research grants awarded to professors in the Computer Science department.", "context": "CREATE TABLE departments (id INT, name VARCHAR(50)); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'), (2, 'Mathematics'); CREATE TABLE professors (id INT, name VARCHAR(50), department_id INT); INSERT INTO professors (id, name, department_id) VALUES (1, 'John Smith', 1), (2, 'Jane Doe', 2); CREATE TABLE grants (id INT, professor_id INT, year INT, amount FLOAT); INSERT INTO grants (id, professor_id, year, amount) VALUES (1, 1, 2021, 5000.0), (2, 2, 2020, 7000.0);", "reference_sql": "SELECT professors.name, grants.amount FROM professors INNER JOIN grants ON professors.id = grants.professor_id INNER JOIN departments ON professors.department_id = departments.id WHERE departments.name = 'Computer Science';", "generated_sql": "SELECT g.id, g.professor_id, g.year, g.amount\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "raw_model_output": "<think>\n\n</think>\n\nSELECT g.id, g.professor_id, g.year, g.amount\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "latency_sec": 1.5685210227966309, "total_duration_sec": 1.391276254, "load_duration_sec": 0.01361349, "tokens_prompt": 241, "prompt_eval_sec": 0.044249234, "tokens_completion": 55, "completion_eval_sec": 1.331233004, "tokens_total": 296, "tokens_per_sec": 188.71280378011124, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns. The Reference SQL selects professors.name and grants.amount, while the Generated SQL selects all columns from the grants table. Although both filter for 'Computer Science' department, the result sets have different structures (column counts and names)."}
{"example_id": 476, "sql_complexity": "basic SQL", "prompt": "Insert new food safety records for locations \"A123\", \"B456\", and \"C789\"", "context": "CREATE TABLE food_safety_records (id INT, location VARCHAR(255), inspection_date DATE, violation_count INT);", "reference_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', '2022-03-01', 0), ('B456', '2022-03-05', 2), ('C789', '2022-03-10', 1);", "generated_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', CURRENT_DATE, 0), ('B456', CURRENT_DATE, 0), ('C789', CURRENT_DATE, 0);", "raw_model_output": "<think>\n\n</think>\n\nINSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', CURRENT_DATE, 0), ('B456', CURRENT_DATE, 0), ('C789', CURRENT_DATE, 0);", "latency_sec": 1.475815773010254, "total_duration_sec": 1.371083661, "load_duration_sec": 0.016337011, "tokens_prompt": 123, "prompt_eval_sec": 0.021523661, "tokens_completion": 57, "completion_eval_sec": 1.331216496, "tokens_total": 180, "tokens_per_sec": 121.96644275785862, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts specific dates and violation counts, while the Generated SQL uses CURRENT_DATE (which would insert the current date) and sets all violation_counts to 0. This changes both the inspection_date values and violation_count values, making the results different."}
{"example_id": 2908, "sql_complexity": "single join", "prompt": "List all co-owners and the properties they own in New York, NY.", "context": "CREATE TABLE properties (id INT, city VARCHAR(50), price INT); CREATE TABLE co_owners (property_id INT, owner_name VARCHAR(50)); INSERT INTO properties (id, city, price) VALUES (1, 'New York', 800000), (2, 'Los Angeles', 600000); INSERT INTO co_owners (property_id, owner_name) VALUES (1, 'David'), (1, 'Ella'), (2, 'Frank');", "reference_sql": "SELECT properties.city, co_owners.owner_name FROM properties INNER JOIN co_owners ON properties.id = co_owners.property_id WHERE properties.city = 'New York';", "generated_sql": "SELECT co.owner_name, p.city, p.price\nFROM co_owners co\nJOIN properties p ON co.property_id = p.id\nWHERE p.city = 'New York';", "raw_model_output": "<think>\n\n</think>\n\nSELECT co.owner_name, p.city, p.price\nFROM co_owners co\nJOIN properties p ON co.property_id = p.id\nWHERE p.city = 'New York';", "latency_sec": 1.1867761611938477, "total_duration_sec": 1.045416511, "load_duration_sec": 0.014995384, "tokens_prompt": 194, "prompt_eval_sec": 0.041302212, "tokens_completion": 41, "completion_eval_sec": 0.986862597, "tokens_total": 235, "tokens_per_sec": 198.01543684834363, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent because the Generated SQL includes an additional 'price' column in the SELECT clause that is not present in the Reference SQL. While both queries join the same tables and apply the same filter, the result sets differ in column structure, making them semantically distinct."}
{"example_id": 636, "sql_complexity": "set operations", "prompt": "Insert new data into the 'cosmetic_ingredients' table for a vegan eyeshadow product by brand 'Ara' with ingredients 'Mica', 'Iron Oxide', 'Titanium Dioxide' and 'Zinc Oxide'.", "context": "CREATE TABLE cosmetic_ingredients (ingredient_id INT, product_name TEXT, brand_name TEXT, ingredient_type TEXT);", "reference_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES (NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient'); INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type, ingredient_name) SELECT ingredient_id, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Mica' FROM cosmetic_ingredients WHERE ingredient_name = 'Mica' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Iron Oxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Titanium Dioxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Zinc Oxide';", "generated_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) \nVALUES \n(1, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n(2, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n(3, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n(4, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "raw_model_output": "<think>\n\n</think>\n\nINSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) \nVALUES \n(1, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n(2, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n(3, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n(4, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "latency_sec": 2.6318821907043457, "total_duration_sec": 2.476044494, "load_duration_sec": 0.028192295, "tokens_prompt": 143, "prompt_eval_sec": 0.023304102, "tokens_completion": 103, "completion_eval_sec": 2.422347884, "tokens_total": 246, "tokens_per_sec": 93.46922931005713, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL attempts to insert into a non-existent 'ingredient_name' column (schema mismatch) and sets 'ingredient_type' to 'Ingredient' for all rows, while the Generated SQL directly assigns specific ingredient names to the 'ingredient_type' column. Additionally, the Generated SQL uses explicit ingredient_ids (1,2,3,4) whereas the Reference SQL relies on existing data and NULLs. The data structure and column assignments differ significantly."}
{"example_id": 3404, "sql_complexity": "multiple_joins", "prompt": "What are the names of startups that have received funding from investors with over 3 million funds, and are involved in Genetic Research or Bioprocess Engineering?", "context": "CREATE TABLE public.investors ( id SERIAL PRIMARY KEY, name VARCHAR(100), type VARCHAR(50), funds INTEGER ); CREATE TABLE public.investments ( id SERIAL PRIMARY KEY, investor_id INTEGER, startup_id INTEGER ); CREATE TABLE public.startups ( id SERIAL PRIMARY KEY, name VARCHAR(100), industry VARCHAR(50), funding INTEGER );", "reference_sql": "SELECT startups.name FROM public.startups JOIN public.investments ON startups.id = investments.startup_id JOIN public.investors ON investments.investor_id = investors.id WHERE (startups.industry = 'Genetic Research' OR startups.industry = 'Bioprocess Engineering') AND investors.funds > 3000000;", "generated_sql": "SELECT s.name\nFROM public.startups s\nJOIN public.investments i ON s.id = i.startup_id\nJOIN public.investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\nAND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "raw_model_output": "<think>\n\n</think>\n\nSELECT s.name\nFROM public.startups s\nJOIN public.investments i ON s.id = i.startup_id\nJOIN public.investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\nAND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "latency_sec": 1.9691288471221924, "total_duration_sec": 1.852636897, "load_duration_sec": 0.024837478, "tokens_prompt": 178, "prompt_eval_sec": 0.030341074, "tokens_completion": 76, "completion_eval_sec": 1.795278114, "tokens_total": 254, "tokens_per_sec": 128.99105123121396, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve startup names by joining startups with investments and investors. The WHERE clause conditions are logically equivalent: (industry = 'Genetic Research' OR industry = 'Bioprocess Engineering') matches the IN clause version. The funds filter (investors.funds > 3000000) is identical. Table aliases in the generated query don't affect semantic equivalence."}
{"example_id": 134, "sql_complexity": "subqueries", "prompt": "Who are the top 3 authors with the most citations in the Mathematics department in the past 5 years?", "context": "CREATE TABLE authors (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO authors (id, name, department) VALUES (1, 'Author Name', 'Mathematics'); CREATE TABLE publications (id INT, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), year INT, cites INT); INSERT INTO publications (id, title, author, journal, year, cites) VALUES (1, 'Publication Title', 'Author Name', 'Journal Name', 2021, 10);", "reference_sql": "SELECT author, SUM(cites) as total_cites FROM publications WHERE author IN (SELECT name FROM authors WHERE department = 'Mathematics') AND year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY author ORDER BY total_cites DESC LIMIT 3;", "generated_sql": "SELECT a.name, SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY a.name\nORDER BY total_citations DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT a.name, SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics' AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY a.name\nORDER BY total_citations DESC\nLIMIT 3;", "latency_sec": 1.9440031051635742, "total_duration_sec": 1.805127532, "load_duration_sec": 0.014495981, "tokens_prompt": 209, "prompt_eval_sec": 0.03971891, "tokens_completion": 73, "completion_eval_sec": 1.748903871, "tokens_total": 282, "tokens_per_sec": 145.06149668740971, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year filtering logic. The Reference SQL uses `BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE)` (inclusive of both bounds), while the Generated SQL uses `p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5` (only lower bound). This means the Generated SQL may include publications from years beyond the current year (if such data exists), whereas the Reference SQL explicitly limits to the last 5 years including the current year. Additionally, the Generated SQL uses a JOIN instead of a subquery, but this does not affect the result set's semantic equivalence."}
{"example_id": 592, "sql_complexity": "set operations", "prompt": "How many public healthcare facilities and public parks are there in total, in the 'StateData' schema's 'StateHealthcare' and 'StateParks' tables?", "context": "CREATE SCHEMA StateData; CREATE TABLE StateHealthcare (Name varchar(255), Type varchar(255)); INSERT INTO StateHealthcare (Name, Type) VALUES ('FacilityA', 'Public'), ('FacilityB', 'Public'), ('FacilityC', 'Private'); CREATE TABLE StateParks (Name varchar(255), Type varchar(255)); INSERT INTO StateParks (Name, Type) VALUES ('ParkA', 'Public'), ('ParkB', 'Public'), ('ParkC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public') + \n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public') AS TotalPublicFacilitiesAndParks;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public') + \n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public') AS TotalPublicFacilitiesAndParks;", "latency_sec": 1.586817979812622, "total_duration_sec": 1.324620931, "load_duration_sec": 0.02232683, "tokens_prompt": 219, "prompt_eval_sec": 0.043521658, "tokens_completion": 52, "completion_eval_sec": 1.256459104, "tokens_total": 271, "tokens_per_sec": 170.78203262607397, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (one for StateHealthcare and one for StateParks) as two rows via UNION ALL, while the Generated SQL returns a single row with the summed total of both counts. The result structures differ (two rows vs. one row), so they are not semantically equivalent."}
{"example_id": 1989, "sql_complexity": "single join", "prompt": "What are the names and production dates of garments made from fabrics with a sustainability score over 70, produced after 2021-01-01?", "context": "CREATE TABLE fabrics (id INT, name VARCHAR(50), type VARCHAR(50), sustainability_score INT); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (1, 'Organic Linen', 'Natural', 80); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (2, 'Recycled Nylon', 'Synthetic', 72);", "reference_sql": "SELECT garments.name, garments.production_date FROM garments JOIN fabrics ON garments.fabric_id = fabrics.id WHERE fabrics.sustainability_score > 70 AND garments.production_date > '2021-01-01';", "generated_sql": "SELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70 AND g.production_date > '2021-01-01';", "raw_model_output": "<think>\n\n</think>\n\n```sql\nSELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70 AND g.production_date > '2021-01-01';\n```", "latency_sec": 1.6267881393432617, "total_duration_sec": 1.467468081, "load_duration_sec": 0.029191712, "tokens_prompt": 190, "prompt_eval_sec": 0.033300134, "tokens_completion": 59, "completion_eval_sec": 1.401976879, "tokens_total": 249, "tokens_per_sec": 153.06234043513612, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operations: joining the 'garments' and 'fabrics' tables on fabric_id, filtering with the same conditions (sustainability_score > 70 and production_date > '2021-01-01'), and selecting the same columns. The only difference is the use of table aliases ('garments'/'fabrics' vs 'g'/'f'), which does not affect semantic equivalence."}
{"example_id": 1388, "sql_complexity": "aggregation", "prompt": "What was the total donation amount by each organization in the last 30 days?", "context": "CREATE TABLE organization_donations (id INT, organization TEXT, donation_date DATE, donation_amount DECIMAL(10,2)); INSERT INTO organization_donations (id, organization, donation_date, donation_amount) VALUES (1, 'Organization A', '2021-03-15', 100.00), (2, 'Organization B', '2021-03-25', 200.00);", "reference_sql": "SELECT organization, SUM(donation_amount) FROM organization_donations WHERE donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY organization;", "generated_sql": "SELECT organization, SUM(donation_amount) AS total_donation_amount\nFROM organization_donations\nWHERE donation_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY organization;", "raw_model_output": "<think>\n\n</think>\n\nSELECT organization, SUM(donation_amount) AS total_donation_amount\nFROM organization_donations\nWHERE donation_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY organization;", "latency_sec": 1.148207187652588, "total_duration_sec": 1.031994126, "load_duration_sec": 0.015224517, "tokens_prompt": 186, "prompt_eval_sec": 0.032186805, "tokens_completion": 41, "completion_eval_sec": 0.982332021, "tokens_total": 227, "tokens_per_sec": 197.69951141316423, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of donation_amount for each organization where donation_date is within the last 30 days. The date calculation syntax differs (DATE_SUB vs. CURRENT_DATE - INTERVAL), but both achieve the same temporal filtering. The column alias in the generated query does not affect semantic equivalence."}
{"example_id": 1628, "sql_complexity": "window functions", "prompt": "What is the ranking of national security measures for Russia based on the publication date?", "context": "CREATE TABLE national_security (id INT, title VARCHAR(255), description TEXT, agency VARCHAR(255), date DATE); INSERT INTO national_security (id, title, description, agency, date) VALUES (1, 'National Cyber Strategy', 'Outlines the approach to protecting the American people and the American way of life in the digital age', 'White House', '2018-09-20'); INSERT INTO national_security (id, title, description, agency, date) VALUES (2, 'Cybersecurity and Infrastructure Security Agency Act of 2018', 'Establishes the Cybersecurity and Infrastructure Security Agency within the Department of Homeland Security', 'Congress', '2018-11-16'); INSERT INTO national_security (id, title, description, agency, date) VALUES (3, 'Russian Military Doctrine', 'Outlines the country\u2019s stance on military security', 'Russian Government', '2014-12-26');", "reference_sql": "SELECT title, description, agency, date, ROW_NUMBER() OVER (PARTITION BY agency ORDER BY date DESC) as ranking FROM national_security WHERE agency = 'Russian Government';", "generated_sql": "SELECT id, title, description, agency, date, \n       ROW_NUMBER() OVER (ORDER BY date DESC) AS ranking\nFROM national_security\nWHERE agency = 'Russian Government';", "raw_model_output": "<think>\n\n</think>\n\nSELECT id, title, description, agency, date, \n       ROW_NUMBER() OVER (ORDER BY date DESC) AS ranking\nFROM national_security\nWHERE agency = 'Russian Government';", "latency_sec": 1.357090950012207, "total_duration_sec": 1.120253184, "load_duration_sec": 0.014110474, "tokens_prompt": 295, "prompt_eval_sec": 0.058134439, "tokens_completion": 42, "completion_eval_sec": 1.045590305, "tokens_total": 337, "tokens_per_sec": 248.32528726020072, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns (Generated includes 'id') and the ROW_NUMBER() logic. While the ranking values might coincide due to the WHERE clause filtering a single agency, the additional column in the Generated SQL makes the result sets non-equivalent."}
{"example_id": 2300, "sql_complexity": "aggregation", "prompt": "What is the minimum capacity for schools in each location ('community_development')?", "context": "CREATE TABLE community_development.schools (id INT, name VARCHAR(50), capacity INT, location VARCHAR(50));", "reference_sql": "SELECT location, MIN(capacity) FROM community_development.schools GROUP BY location;", "generated_sql": "SELECT location, MIN(capacity) AS min_capacity\nFROM community_development.schools\nGROUP BY location;", "raw_model_output": "<think>\n\n</think>\n\nSELECT location, MIN(capacity) AS min_capacity\nFROM community_development.schools\nGROUP BY location;", "latency_sec": 0.9426250457763672, "total_duration_sec": 0.667299397, "load_duration_sec": 0.013902506, "tokens_prompt": 114, "prompt_eval_sec": 0.020660403, "tokens_completion": 27, "completion_eval_sec": 0.630803127, "tokens_total": 141, "tokens_per_sec": 149.58227625266335, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by 'location' and calculate the minimum capacity for each group. The generated query adds an alias 'min_capacity' for the MIN(capacity) column, but this does not affect the semantic result set content. The core logic and output data remain identical."}
{"example_id": 4976, "sql_complexity": "set operations", "prompt": "What is the most common hashtag used in posts made by users from Brazil?", "context": "CREATE TABLE posts (id INT, user_id INT, content TEXT, hashtags TEXT, post_date DATE); INSERT INTO posts (id, user_id, content, hashtags, post_date) VALUES (1, 1, 'Hello World', '#datascience', '2022-06-01'), (2, 1, 'I love data', '#ai', '2022-06-02'), (3, 2, 'Ol\u00e1 Mundo', '#brasil', '2022-06-03'); CREATE TABLE users (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO users (id, name, country) VALUES (1, 'Jo\u00e3o Silva', 'Brazil'), (2, 'Maria Souza', 'Brazil');", "reference_sql": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(hashtags, ' ', n.n), ' ', -1) hashtag, COUNT(*) count FROM posts JOIN users ON posts.user_id = users.id CROSS JOIN (SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) n WHERE users.country = 'Brazil' GROUP BY hashtag ORDER BY count DESC LIMIT 1;", "generated_sql": "SELECT hashtags \nFROM posts \nWHERE user_id IN (\n    SELECT id \n    FROM users \n    WHERE country = 'Brazil'\n) \nORDER BY hashtags DESC \nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT hashtags \nFROM posts \nWHERE user_id IN (\n    SELECT id \n    FROM users \n    WHERE country = 'Brazil'\n) \nORDER BY hashtags DESC \nLIMIT 1;", "latency_sec": 1.2168338298797607, "total_duration_sec": 1.101769291, "load_duration_sec": 0.013382497, "tokens_prompt": 258, "prompt_eval_sec": 0.052524508, "tokens_completion": 42, "completion_eval_sec": 1.032624121, "tokens_total": 300, "tokens_per_sec": 246.54146904318395, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL splits multi-value hashtags into individual entries, counts their occurrences, and returns the most frequent one. The Generated SQL treats hashtags as single values without splitting, orders them lexicographically, and returns the top result. They differ in handling multi-hashtag posts, aggregation logic, and sorting criteria."}
{"example_id": 4637, "sql_complexity": "single join", "prompt": "What is the total value of transactions for each customer in the last 30 days?", "context": "CREATE TABLE transactions (id INT, customer_id INT, value DECIMAL(10, 2), transaction_date DATE); INSERT INTO transactions (id, customer_id, value, transaction_date) VALUES (1, 1, 100, '2022-01-01'), (2, 1, 200, '2022-01-15'), (3, 2, 50, '2022-01-05'), (4, 2, 150, '2022-01-30'), (5, 3, 300, '2022-01-20');", "reference_sql": "SELECT c.id, SUM(t.value) FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE t.transaction_date >= CURDATE() - INTERVAL 30 DAY GROUP BY c.id;", "generated_sql": "SELECT customer_id, SUM(value) AS total_value\nFROM transactions\nWHERE transaction_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY customer_id;", "raw_model_output": "<think>\n\n</think>\n\nSELECT customer_id, SUM(value) AS total_value\nFROM transactions\nWHERE transaction_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY customer_id;", "latency_sec": 1.0250890254974365, "total_duration_sec": 0.979899443, "load_duration_sec": 0.023432288, "tokens_prompt": 244, "prompt_eval_sec": 0.046591615, "tokens_completion": 37, "completion_eval_sec": 0.907618851, "tokens_total": 281, "tokens_per_sec": 274.12253278552214, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total transaction value per customer for the last 30 days. The Reference SQL uses an INNER JOIN between customers and transactions, but since the Generated SQL directly filters transactions and groups by customer_id, the result is the same. The date conditions (CURDATE() - INTERVAL 30 DAY vs. CURRENT_DATE - INTERVAL '30 days') are functionally equivalent in MySQL. The column names (c.id vs. customer_id) refer to the same data, and both queries exclude customers without recent transactions due to the INNER JOIN and WHERE clause."}
{"example_id": 4947, "sql_complexity": "aggregation", "prompt": "What is the total revenue for drugs approved between 2017 and 2019?", "context": "CREATE TABLE drug_sales_3 (drug_name TEXT, revenue FLOAT, year INT); INSERT INTO drug_sales_3 (drug_name, revenue, year) VALUES ('DrugG', 20000000, 2019), ('DrugG', 19000000, 2018), ('DrugH', 15000000, 2017), ('DrugH', 16000000, 2018);", "reference_sql": "SELECT drug_name, SUM(revenue) FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019 GROUP BY drug_name;", "generated_sql": "SELECT SUM(revenue) AS total_revenue FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019;", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(revenue) AS total_revenue FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019;", "latency_sec": 0.9203550815582275, "total_duration_sec": 0.887311477, "load_duration_sec": 0.018781433, "tokens_prompt": 205, "prompt_eval_sec": 0.041125234, "tokens_completion": 34, "completion_eval_sec": 0.824785052, "tokens_total": 239, "tokens_per_sec": 259.6823821468511, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query groups results by drug_name, returning individual drug totals, while the generated query returns a single total revenue without grouping. The absence of GROUP BY in the generated query changes the result structure and content."}
{"example_id": 4767, "sql_complexity": "window functions", "prompt": "List the top 2 AI algorithms with the highest explainability scores, by algorithm subtype, ordered by scores in descending order for the European region.", "context": "CREATE TABLE ai_algorithms (algorithm_id INT, algorithm_name VARCHAR(50), algorithm_subtype VARCHAR(50), region VARCHAR(50), explainability_score FLOAT); INSERT INTO ai_algorithms (algorithm_id, algorithm_name, algorithm_subtype, region, explainability_score) VALUES (1, 'AlgoA', 'Tree-based', 'Europe', 0.85), (2, 'AlgoB', 'Computer Vision', 'Europe', 0.92), (3, 'AlgoC', 'Tree-based', 'Europe', 0.78), (4, 'AlgoD', 'Transformer', 'Europe', 0.90), (5, 'AlgoE', 'Tree-based', 'Europe', 0.80);", "reference_sql": "SELECT algorithm_subtype, region, * FROM (SELECT algorithm_subtype, region, algorithm_id, algorithm_name, explainability_score, RANK() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rank FROM ai_algorithms WHERE region = 'Europe') ranked WHERE rank <= 2 ORDER BY algorithm_subtype, region, explainability_score DESC;", "generated_sql": "SELECT algorithm_subtype, algorithm_name, explainability_score\nFROM ai_algorithms\nWHERE region = 'Europe'\nORDER BY explainability_score DESC\nLIMIT 2;", "raw_model_output": "<think>\n\n</think>\n\nSELECT algorithm_subtype, algorithm_name, explainability_score\nFROM ai_algorithms\nWHERE region = 'Europe'\nORDER BY explainability_score DESC\nLIMIT 2;", "latency_sec": 1.1070809364318848, "total_duration_sec": 1.00571748, "load_duration_sec": 0.014307136, "tokens_prompt": 262, "prompt_eval_sec": 0.050962493, "tokens_completion": 38, "completion_eval_sec": 0.938358933, "tokens_total": 300, "tokens_per_sec": 270.9828975710649, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects top 2 entries per algorithm_subtype (using RANK()) and includes additional columns, while the Generated SQL returns only the top 2 overall entries in Europe without partitioning. The result sets differ in both row count and column selection."}
{"example_id": 4495, "sql_complexity": "basic SQL", "prompt": "Which countries are the top 3 sources of sustainable textiles?", "context": "CREATE TABLE Textile_Sources (Source_ID INT, Source_Country TEXT, Sustainable BOOLEAN, Quantity INT); INSERT INTO Textile_Sources (Source_ID, Source_Country, Sustainable, Quantity) VALUES (1, 'India', true, 1000), (2, 'Bangladesh', false, 800), (3, 'China', true, 1200), (4, 'Vietnam', false, 900), (5, 'Italy', true, 1100), (6, 'USA', false, 700);", "reference_sql": "SELECT Source_Country FROM Textile_Sources WHERE Sustainable = true ORDER BY Quantity DESC LIMIT 3;", "generated_sql": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = true\nORDER BY Quantity DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = true\nORDER BY Quantity DESC\nLIMIT 3;", "latency_sec": 0.8491988182067871, "total_duration_sec": 0.804564368, "load_duration_sec": 0.027352426, "tokens_prompt": 208, "prompt_eval_sec": 0.044795988, "tokens_completion": 30, "completion_eval_sec": 0.729649293, "tokens_total": 238, "tokens_per_sec": 280.26416770406405, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and capitalization) which do not affect SQL semantics. Both select Source_Country from Textile_Sources where Sustainable is true, ordered by Quantity descending with a limit of 3."}
{"example_id": 2513, "sql_complexity": "single join", "prompt": "What is the total number of concert ticket sales for artists who released their first album between 2015 and 2017?", "context": "CREATE TABLE ConcertTicketSales (id INT, year INT, artist_id INT); CREATE TABLE ArtistAlbums (id INT, artist_id INT, year INT);", "reference_sql": "SELECT COUNT(DISTINCT cts.artist_id) FROM ConcertTicketSales cts JOIN ArtistAlbums a ON cts.artist_id = a.artist_id WHERE a.year BETWEEN 2015 AND 2017;", "generated_sql": "SELECT COUNT(*) AS total_sales\nFROM ConcertTicketSales\nWHERE artist_id IN (\n    SELECT artist_id\n    FROM ArtistAlbums\n    WHERE year BETWEEN 2015 AND 2017\n    AND artist_id NOT IN (\n        SELECT artist_id\n        FROM ArtistAlbums\n        WHERE year < 2015\n    )\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) AS total_sales\nFROM ConcertTicketSales\nWHERE artist_id IN (\n    SELECT artist_id\n    FROM ArtistAlbums\n    WHERE year BETWEEN 2015 AND 2017\n    AND artist_id NOT IN (\n        SELECT artist_id\n        FROM ArtistAlbums\n        WHERE year < 2015\n    )\n);", "latency_sec": 2.0396900177001953, "total_duration_sec": 1.920739246, "load_duration_sec": 0.014062277, "tokens_prompt": 133, "prompt_eval_sec": 0.023334668, "tokens_completion": 80, "completion_eval_sec": 1.881302095, "tokens_total": 213, "tokens_per_sec": 104.42763270477892, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. 1) The reference query uses COUNT(DISTINCT cts.artist_id) while the generated query uses COUNT(*). This means the reference counts unique artists, while the generated counts all rows. 2) The generated query adds an additional condition that the artist_id is not present in a subquery where year < 2015. This filters out artists with any album before 2015, while the reference query doesn't have this restriction. These differences in aggregation and filtering mean the queries don't produce the same results."}
{"example_id": 873, "sql_complexity": "subqueries", "prompt": "Identify attorneys who have never handled cases in the 'West' region but have in the 'North' or 'South'.", "context": "CREATE TABLE attorney_regions(attorney_id INT, region VARCHAR(20)); INSERT INTO attorney_regions(attorney_id, region) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'), (5, 'West'), (6, 'North'); CREATE TABLE handled_cases(attorney_id INT, case_id INT); INSERT INTO handled_cases(attorney_id, case_id) VALUES (1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (1, 107), (1, 108);", "reference_sql": "SELECT h.attorney_id FROM attorney_regions h LEFT JOIN handled_cases i ON h.attorney_id = i.attorney_id WHERE h.region IN ('North', 'South') AND h.region != 'West' AND i.attorney_id IS NOT NULL AND h.attorney_id NOT IN (SELECT attorney_id FROM attorney_regions WHERE region = 'West');", "generated_sql": "SELECT ar.attorney_id\nFROM attorney_regions ar\nJOIN handled_cases hc ON ar.attorney_id = hc.attorney_id\nWHERE ar.region IN ('North', 'South')\nAND ar.attorney_id NOT IN (\n    SELECT ar2.attorney_id\n    FROM attorney_regions ar2\n    JOIN handled_cases hc2 ON ar2.attorney_id = hc2.attorney_id\n    WHERE ar2.region = 'West'\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT ar.attorney_id\nFROM attorney_regions ar\nJOIN handled_cases hc ON ar.attorney_id = hc.attorney_id\nWHERE ar.region IN ('North', 'South')\nAND ar.attorney_id NOT IN (\n    SELECT ar2.attorney_id\n    FROM attorney_regions ar2\n    JOIN handled_cases hc2 ON ar2.attorney_id = hc2.attorney_id\n    WHERE ar2.region = 'West'\n);", "latency_sec": 2.414271116256714, "total_duration_sec": 2.300159277, "load_duration_sec": 0.014665201, "tokens_prompt": 248, "prompt_eval_sec": 0.046930574, "tokens_completion": 93, "completion_eval_sec": 2.236232299, "tokens_total": 341, "tokens_per_sec": 141.24345758181238, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve attorney_ids from North/South regions who have handled cases. The Reference SQL uses a LEFT JOIN with a NOT NULL check (equivalent to INNER JOIN) and excludes West region attorneys (regardless of cases). The Generated SQL uses an INNER JOIN and excludes West region attorneys with cases. However, since the main query in both cases filters for North/South regions, the NOT IN conditions (which target West region attorneys) are redundant and do not affect the final result. Both queries effectively return the same set of attorneys with cases in North/South regions."}
{"example_id": 471, "sql_complexity": "set operations", "prompt": "Find the number of donations made by first-time donors in the last quarter.", "context": "CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationType TEXT, DonationAmount FLOAT); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationType, DonationAmount) VALUES (1, 1, '2021-01-01', 'Individual', 100), (2, 2, '2021-02-01', 'Corporate', 5000);", "reference_sql": "SELECT COUNT(*) FROM (SELECT DonationID FROM Donations WHERE DonationType = 'Individual' AND DonationDate >= DATEADD(quarter, -1, CURRENT_DATE) EXCEPT SELECT DonationID FROM PreviousDonations) AS FirstTimeDonors;", "generated_sql": "SELECT COUNT(*) AS FirstTimeDonorDonations\nFROM Donations d\nWHERE DonationDate >= DATE_TRUNC('quarter', CURRENT_DATE) AND DonationDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Donations d2\n    WHERE d2.DonorID = d.DonorID\n    AND d2.DonationDate < DATE_TRUNC('quarter', CURRENT_DATE)\n);", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) AS FirstTimeDonorDonations\nFROM Donations d\nWHERE DonationDate >= DATE_TRUNC('quarter', CURRENT_DATE) AND DonationDate < DATE_TRUNC('quarter', CURRENT_DATE) + INTERVAL '3 months'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Donations d2\n    WHERE d2.DonorID = d.DonorID\n    AND d2.DonationDate < DATE_TRUNC('quarter', CURRENT_DATE)\n);", "latency_sec": 2.3850200176239014, "total_duration_sec": 2.359438557, "load_duration_sec": 0.015502636, "tokens_prompt": 190, "prompt_eval_sec": 0.039077552, "tokens_completion": 97, "completion_eval_sec": 2.302854086, "tokens_total": 287, "tokens_per_sec": 120.3344197865167, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in both time frame logic and filtering conditions. The Reference SQL uses DATEADD(quarter, -1, CURRENT_DATE) to target the last quarter and checks for 'Individual' donations, while the Generated SQL uses DATE_TRUNC('quarter', CURRENT_DATE) for the current quarter and includes a NOT EXISTS clause to identify first-time donors. Additionally, the Reference SQL references an undefined 'PreviousDonations' table, making it invalid. These differences in time windows, conditions, and table references ensure they are not semantically equivalent."}
{"example_id": 1301, "sql_complexity": "multiple_joins", "prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?", "context": "CREATE TABLE farmers (id INT, name VARCHAR(50), location VARCHAR(50), crops VARCHAR(50)); CREATE TABLE crops (id INT, name VARCHAR(50), yield INT); CREATE TABLE sales (id INT, farmer_id INT, crop_name VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO farmers VALUES (1, 'Jane Doe', 'Summerfield', 'Corn'); INSERT INTO crops VALUES (1, 'Corn', 100); INSERT INTO sales VALUES (1, 1, 'Corn', 50, 2.50);", "reference_sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';", "generated_sql": "SELECT SUM(quantity) AS total_quantity_sold\nFROM sales\nJOIN farmers ON sales.farmer_id = farmers.id\nWHERE farmers.location = 'Summerfield' AND sales.crop_name = 'Corn';", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(quantity) AS total_quantity_sold\nFROM sales\nJOIN farmers ON sales.farmer_id = farmers.id\nWHERE farmers.location = 'Summerfield' AND sales.crop_name = 'Corn';", "latency_sec": 1.3335771560668945, "total_duration_sec": 1.14599247, "load_duration_sec": 0.013647404, "tokens_prompt": 214, "prompt_eval_sec": 0.040319073, "tokens_completion": 45, "completion_eval_sec": 1.089848088, "tokens_total": 259, "tokens_per_sec": 194.2144845701062, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an INNER JOIN with the 'crops' table and filters on 'crops.name = 'Corn'', while the Generated SQL omits the join with 'crops' and filters directly on 'sales.crop_name = 'Corn''. Although the join condition (sales.crop_name = crops.name) implies that 'sales.crop_name' must exist in 'crops.name', the absence of the explicit join in the Generated SQL means it could include sales entries with 'crop_name' values that don't exist in the 'crops' table (if such data exists). This makes the queries not strictly equivalent in all scenarios."}
{"example_id": 4667, "sql_complexity": "aggregation", "prompt": "Find the number of unique organizations in each country in the Philanthropy Trends table?", "context": "CREATE TABLE PhilanthropyTrends (OrgID INT, Name TEXT, Country TEXT);", "reference_sql": "SELECT Country, COUNT(DISTINCT OrgID) as UniqueOrganizations FROM PhilanthropyTrends GROUP BY Country;", "generated_sql": "SELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;", "raw_model_output": "<think>\n\n</think>\n\n```sql\nSELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;\n```", "latency_sec": 3.8805038928985596, "total_duration_sec": 0.864429335, "load_duration_sec": 0.0252164, "tokens_prompt": 107, "prompt_eval_sec": 0.021247137, "tokens_completion": 35, "completion_eval_sec": 0.816003351, "tokens_total": 142, "tokens_per_sec": 36.59318581276631, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks) and case sensitivity in the alias declaration ('as' vs 'AS'), which do not affect semantic equivalence in SQL."}
{"example_id": 1006, "sql_complexity": "subqueries", "prompt": "What is the average word count of news articles written by investigative journalists?", "context": "CREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, position VARCHAR(20), country VARCHAR(50)); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (1, 'Anna Smith', 'Female', 35, 'News Reporter', 'USA'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (2, 'Mike Johnson', 'Male', 40, 'Investigative Journalist', 'Canada'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (3, 'Sofia Rodriguez', 'Female', 32, 'Investigative Journalist', 'Mexico'); CREATE TABLE news_articles (id INT, title VARCHAR(100), content TEXT, publication_date DATE, reporter_id INT); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (1, 'News Article 1', 'Content of News Article 1', '2021-01-01', 2); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (2, 'News Article 2', 'Content of News Article 2', '2021-02-01', 3);", "reference_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS avg_word_count FROM news_articles WHERE reporter_id IN (SELECT id FROM reporters WHERE position = 'Investigative Journalist');", "generated_sql": "SELECT AVG(word_count) AS average_word_count\nFROM (\n    SELECT LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1 AS word_count\n    FROM news_articles\n    JOIN reporters ON news_articles.reporter_id = reporters.id\n    WHERE reporters.position = 'Investigative Journalist'\n) AS word_counts;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(word_count) AS average_word_count\nFROM (\n    SELECT LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1 AS word_count\n    FROM news_articles\n    JOIN reporters ON news_articles.reporter_id = reporters.id\n    WHERE reporters.position = 'Investigative Journalist'\n) AS word_counts;", "latency_sec": 1.9553987979888916, "total_duration_sec": 1.945161389, "load_duration_sec": 0.020394655, "tokens_prompt": 368, "prompt_eval_sec": 0.072848503, "tokens_completion": 74, "completion_eval_sec": 1.849542423, "tokens_total": 442, "tokens_per_sec": 226.04084673397193, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average word count of news articles written by 'Investigative Journalists'. The Reference SQL uses a subquery to filter reporter_ids, while the Generated SQL uses a JOIN. The word count calculation (LENGTH(content) - LENGTH(REPLACE(...)) + 1) is identical in both. The final AVG() operation produces the same result since they operate on the same subset of articles."}
{"example_id": 3635, "sql_complexity": "set operations", "prompt": "Which brands have certifications related to cruelty-free, vegan, or organic products?", "context": "CREATE TABLE brands (brand_name VARCHAR(50), is_cruelty_free BOOLEAN, is_vegan BOOLEAN, is_organic BOOLEAN); INSERT INTO brands (brand_name, is_cruelty_free, is_vegan, is_organic) VALUES ('Lush', TRUE, TRUE, FALSE), ('The Body Shop', TRUE, FALSE, FALSE), ('Est\u00e9e Lauder', FALSE, FALSE, FALSE), ('Urban Decay', TRUE, TRUE, FALSE), ('Maybelline', FALSE, FALSE, FALSE), ('Kat Von D', TRUE, TRUE, FALSE), ('Tarte', TRUE, TRUE, TRUE);", "reference_sql": "SELECT brand_name, 'Cruelty-free' as certification FROM brands WHERE is_cruelty_free = TRUE UNION SELECT brand_name, 'Vegan' as certification FROM brands WHERE is_vegan = TRUE UNION SELECT brand_name, 'Organic' as certification FROM brands WHERE is_organic = TRUE;", "generated_sql": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE OR is_vegan = TRUE OR is_organic = TRUE;", "raw_model_output": "<think>\n\n</think>\n\nSELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE OR is_vegan = TRUE OR is_organic = TRUE;", "latency_sec": 0.9088070392608643, "total_duration_sec": 0.902244017, "load_duration_sec": 0.030364379, "tokens_prompt": 214, "prompt_eval_sec": 0.042456454, "tokens_completion": 34, "completion_eval_sec": 0.82667745, "tokens_total": 248, "tokens_per_sec": 272.885210266086, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns brand names with their corresponding certification type (Cruelty-free/Vegan/Organic) as separate rows, allowing multiple certifications per brand. The Generated SQL returns only brand names (without certification types) and collapses multiple certifications into a single row per brand. The output structure and row counts differ."}
{"example_id": 4932, "sql_complexity": "basic SQL", "prompt": "Delete the workout row with the id of 2.", "context": "CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);", "reference_sql": "DELETE FROM Workouts WHERE id = 2;", "generated_sql": "DELETE FROM Workouts WHERE id = 2;", "raw_model_output": "<think>\n\n</think>\n\nDELETE FROM Workouts WHERE id = 2;", "latency_sec": 0.599653959274292, "total_duration_sec": 0.441750303, "load_duration_sec": 0.024248734, "tokens_prompt": 194, "prompt_eval_sec": 0.040035607, "tokens_completion": 15, "completion_eval_sec": 0.37555695, "tokens_total": 209, "tokens_per_sec": 348.534345129538, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical: they delete the record with id=2 from the Workouts table. The semantic meaning and resulting database state are exactly the same."}
{"example_id": 365, "sql_complexity": "aggregation", "prompt": "Identify the total number of military personnel and their corresponding rank for each branch and country in the 'military_personnel' table, sorted by the total number of personnel in descending order.", "context": "CREATE TABLE military_personnel (id INT, branch VARCHAR(255), rank VARCHAR(255), country VARCHAR(255), personnel INT);", "reference_sql": "SELECT branch, country, SUM(personnel) as total_personnel FROM military_personnel GROUP BY branch, country ORDER BY total_personnel DESC;", "generated_sql": "SELECT branch, country, rank, SUM(personnel) AS total_personnel\nFROM military_personnel\nGROUP BY branch, country, rank\nORDER BY total_personnel DESC;", "raw_model_output": "<think>\n\n</think>\n\nSELECT branch, country, rank, SUM(personnel) AS total_personnel\nFROM military_personnel\nGROUP BY branch, country, rank\nORDER BY total_personnel DESC;", "latency_sec": 1.1719539165496826, "total_duration_sec": 1.011453636, "load_duration_sec": 0.01802161, "tokens_prompt": 143, "prompt_eval_sec": 0.024235888, "tokens_completion": 41, "completion_eval_sec": 0.967024022, "tokens_total": 184, "tokens_per_sec": 157.0027604342237, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the GROUP BY clause. The reference query groups by (branch, country), aggregating all ranks within each branch-country pair. The generated query groups by (branch, country, rank), creating separate aggregates for each rank. This results in different row counts and summed values, making them non-equivalent."}
{"example_id": 521, "sql_complexity": "subqueries", "prompt": "How many vessels have not had an inspection in the past year?", "context": "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", "reference_sql": "SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());", "generated_sql": "SELECT COUNT(*) FROM vessels \nWHERE id NOT IN (SELECT vessel_id FROM safety_records \n                 WHERE inspection_date >= CURRENT_DATE - INTERVAL '1 year');", "raw_model_output": "<think>\n\n</think>\n\nSELECT COUNT(*) FROM vessels \nWHERE id NOT IN (SELECT vessel_id FROM safety_records \n                 WHERE inspection_date >= CURRENT_DATE - INTERVAL '1 year');", "latency_sec": 1.1837670803070068, "total_duration_sec": 0.912276824, "load_duration_sec": 0.013957324, "tokens_prompt": 188, "prompt_eval_sec": 0.031758739, "tokens_completion": 36, "completion_eval_sec": 0.864338881, "tokens_total": 224, "tokens_per_sec": 189.2264143229141, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL checks vessel names against safety records, while the Generated SQL checks vessel IDs. Second, the date conditions are not equivalent: the Reference uses BETWEEN with DATE_SUB(NOW(), INTERVAL 1 YEAR) to AND NOW() (which includes a datetime range), whereas the Generated SQL uses CURRENT_DATE - INTERVAL '1 year' (which is a date-only comparison). This leads to different subquery results, especially when inspection dates fall on the exact boundary of the date range."}
{"example_id": 5687, "sql_complexity": "multiple_joins", "prompt": "List organizations with more than 200 volunteers, and their average donation amounts, excluding donations less than $10.", "context": "CREATE TABLE organizations (org_id INT, org_name TEXT, social_impact_score INT);CREATE TABLE volunteers (vol_id INT, org_id INT, vol_country TEXT);CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount INT, donation_date DATE);", "reference_sql": "SELECT o.org_name, AVG(donation_amount) AS avg_donation_amount FROM organizations o JOIN volunteers v ON o.org_id = v.org_id JOIN donations don ON o.org_id = don.org_id WHERE donation_amount >= 10 GROUP BY o.org_name HAVING COUNT(v.vol_id) > 200;", "generated_sql": "SELECT o.org_id, o.org_name, AVG(d.donation_amount) AS avg_donation_amount\nFROM organizations o\nJOIN volunteers v ON o.org_id = v.org_id\nLEFT JOIN donations d ON o.org_id = d.org_id\nWHERE d.donation_amount >= 10\nGROUP BY o.org_id, o.org_name\nHAVING COUNT(v.vol_id) > 200;", "raw_model_output": "<think>\n\n</think>\n\nSELECT o.org_id, o.org_name, AVG(d.donation_amount) AS avg_donation_amount\nFROM organizations o\nJOIN volunteers v ON o.org_id = v.org_id\nLEFT JOIN donations d ON o.org_id = d.org_id\nWHERE d.donation_amount >= 10\nGROUP BY o.org_id, o.org_name\nHAVING COUNT(v.vol_id) > 200;", "latency_sec": 2.2243261337280273, "total_duration_sec": 2.127102634, "load_duration_sec": 0.021866417, "tokens_prompt": 152, "prompt_eval_sec": 0.026550731, "tokens_completion": 88, "completion_eval_sec": 2.076314639, "tokens_total": 240, "tokens_per_sec": 107.89784661557425, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects. 1) The SELECT clause: the first query returns only org_name, while the second returns org_id and org_name. 2) The GROUP BY clause: the first groups by org_name (which may not be unique), while the second groups by org_id and org_name (ensuring unique grouping). 3) The JOIN type for donations: the first uses an INNER JOIN, while the second uses a LEFT JOIN. Although the WHERE clause on donation_amount >= 10 may mitigate some differences in the LEFT JOIN, the fundamental differences in grouping and selected columns make the queries non-equivalent."}
{"example_id": 1281, "sql_complexity": "subqueries", "prompt": "Find the top 3 contributors with the lowest recycling rate in the 'waste_contributors' table.", "context": "CREATE TABLE waste_contributors (contributor VARCHAR(20), recycling_rate FLOAT); INSERT INTO waste_contributors (contributor, recycling_rate) VALUES ('Manufacturing', 0.4), ('Commercial', 0.38), ('Residential', 0.35), ('Institutional', 0.32), ('Agricultural', 0.2), ('Industrial', 0.15);", "reference_sql": "SELECT contributor FROM waste_contributors WHERE recycling_rate IN (SELECT MIN(recycling_rate) FROM waste_contributors) LIMIT 3;", "generated_sql": "SELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "latency_sec": 0.8409919738769531, "total_duration_sec": 0.685849949, "load_duration_sec": 0.021393321, "tokens_prompt": 181, "prompt_eval_sec": 0.034837427, "tokens_completion": 26, "completion_eval_sec": 0.626931112, "tokens_total": 207, "tokens_per_sec": 246.13790194184006, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects contributors with the minimum recycling rate (0.15) and limits to 3 rows, returning only 'Industrial' (since it's the sole contributor with the minimum rate). The Generated SQL orders all contributors by ascending recycling rate and returns the top 3, which are 'Industrial' (0.15), 'Agricultural' (0.2), and 'Institutional' (0.32). The queries differ in both the criteria (minimum value vs. top 3 values) and the number of results."}
{"example_id": 5669, "sql_complexity": "window functions", "prompt": "What is the total number of new and returning volunteers in each program in each month?", "context": "CREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, ProgramID INT, VolunteerDate DATE, IsReturning BOOLEAN); INSERT INTO Volunteers (VolunteerID, VolunteerName, ProgramID, VolunteerDate, IsReturning) VALUES (6, 'David Kim', 1, '2022-03-01', FALSE), (7, 'Emily Chen', 2, '2022-03-15', TRUE), (8, 'James Lee', 2, '2022-04-01', FALSE), (9, 'Grace Park', 3, '2022-04-15', TRUE), (10, 'Daniel Kim', 1, '2022-04-01', FALSE);", "reference_sql": "SELECT ProgramID, EXTRACT(MONTH FROM VolunteerDate) AS Month, SUM(CASE WHEN IsReturning THEN 1 ELSE 0 END) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) + COUNT(DISTINCT VolunteerID) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) AS TotalVolunteers FROM Volunteers;", "generated_sql": "SELECT \n    ProgramID,\n    EXTRACT(YEAR FROM VolunteerDate) * 100 + EXTRACT(MONTH FROM VolunteerDate) AS YearMonth,\n    SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n    SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY ProgramID, YearMonth\nORDER BY ProgramID, YearMonth;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n    ProgramID,\n    EXTRACT(YEAR FROM VolunteerDate) * 100 + EXTRACT(MONTH FROM VolunteerDate) AS YearMonth,\n    SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n    SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY ProgramID, YearMonth\nORDER BY ProgramID, YearMonth;", "latency_sec": 2.565122127532959, "total_duration_sec": 2.520273402, "load_duration_sec": 0.014289404, "tokens_prompt": 256, "prompt_eval_sec": 0.046510802, "tokens_completion": 102, "completion_eval_sec": 2.457319817, "tokens_total": 358, "tokens_per_sec": 139.56450500246214, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL calculates a cumulative total using window functions without grouping, while the Generated SQL aggregates data into distinct ProgramID-YearMonth groups with separate counts for new and returning volunteers. The Reference SQL's 'TotalVolunteers' combines returning counts with distinct volunteer counts (which is logically inconsistent), whereas the Generated SQL separates new and returning volunteers. Additionally, the date handling differs (month vs. year-month composite) and the output structures (row-level vs. grouped) are fundamentally different."}
{"example_id": 3576, "sql_complexity": "window functions", "prompt": "What is the difference in the number of eco-friendly hotels between the top 2 countries?", "context": "CREATE TABLE eco_hotel_count (country TEXT, num_hotels INT); INSERT INTO eco_hotel_count (country, num_hotels) VALUES ('France', 100), ('Italy', 120), ('Germany', 150), ('Spain', 110), ('UK', 160);", "reference_sql": "SELECT (MAX(num_hotels) OVER (PARTITION BY num_hotels <= 2) - MIN(num_hotels) OVER (PARTITION BY num_hotels <= 2)) AS hotel_difference FROM eco_hotel_count WHERE country IN ('France', 'Italy');", "generated_sql": "SELECT (SELECT num_hotels FROM eco_hotel_count ORDER BY num_hotels DESC LIMIT 1) - (SELECT num_hotels FROM eco_hotel_count ORDER BY num_hotels DESC LIMIT 1 OFFSET 1) AS difference;", "raw_model_output": "<think>\n\n</think>\n\nSELECT (SELECT num_hotels FROM eco_hotel_count ORDER BY num_hotels DESC LIMIT 1) - (SELECT num_hotels FROM eco_hotel_count ORDER BY num_hotels DESC LIMIT 1 OFFSET 1) AS difference;", "latency_sec": 1.5683767795562744, "total_duration_sec": 1.303754252, "load_duration_sec": 0.018548776, "tokens_prompt": 159, "prompt_eval_sec": 0.029219028, "tokens_completion": 53, "completion_eval_sec": 1.252461571, "tokens_total": 212, "tokens_per_sec": 135.17160083177149, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters rows to only 'France' and 'Italy' (values 100 and 120), calculating MAX(120) - MIN(100) = 20. The Generated SQL operates on all rows (100, 120, 150, 110, 160), returning the top two values (160 - 150 = 10). The WHERE clause in the Reference SQL restricts data, while the Generated SQL processes the entire table, leading to different results."}
{"example_id": 1970, "sql_complexity": "multiple_joins", "prompt": "List all players who have played a specific VR game, 'CyberSphere', and their ages.", "context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');", "reference_sql": "SELECT Players.Age, Players.PlayerID FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';", "generated_sql": "SELECT P.PlayerID, P.Age\nFROM Players P\nJOIN VRPlayers VP ON P.PlayerID = VP.PlayerID\nJOIN VRGames VG ON VP.VRGameID = VG.VRGameID\nWHERE VG.Title = 'CyberSphere';", "raw_model_output": "<think>\n\n</think>\n\nSELECT P.PlayerID, P.Age\nFROM Players P\nJOIN VRPlayers VP ON P.PlayerID = VP.PlayerID\nJOIN VRGames VG ON VP.VRGameID = VG.VRGameID\nWHERE VG.Title = 'CyberSphere';", "latency_sec": 1.5385451316833496, "total_duration_sec": 1.446462873, "load_duration_sec": 0.024997328, "tokens_prompt": 257, "prompt_eval_sec": 0.052211774, "tokens_completion": 56, "completion_eval_sec": 1.366327177, "tokens_total": 313, "tokens_per_sec": 203.438946023989, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining Players, VRPlayers, and VRGames tables with identical conditions. The differences are purely syntactic (column order, alias names) and do not affect the result set."}
{"example_id": 2414, "sql_complexity": "window functions", "prompt": "List the policy areas with the lowest citizen satisfaction scores.", "context": "CREATE TABLE Policy (Area VARCHAR(20), Score INT); INSERT INTO Policy (Area, Score) VALUES ('Transportation', 70), ('Education', 85), ('Healthcare', 75), ('PublicSafety', 80);", "reference_sql": "SELECT Area, Score FROM (SELECT Area, Score, ROW_NUMBER() OVER (ORDER BY Score) AS RN FROM Policy) X WHERE RN IN (1, 2);", "generated_sql": "SELECT Area, Score\nFROM Policy\nORDER BY Score ASC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT Area, Score\nFROM Policy\nORDER BY Score ASC\nLIMIT 1;", "latency_sec": 0.6475448608398438, "total_duration_sec": 0.561188904, "load_duration_sec": 0.014211037, "tokens_prompt": 136, "prompt_eval_sec": 0.023173939, "tokens_completion": 22, "completion_eval_sec": 0.521606642, "tokens_total": 158, "tokens_per_sec": 243.99853902798233, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query selects the top 2 rows ordered by Score (RN 1 and 2), while the generated query only selects the top 1 row. The generated query's LIMIT 1 restricts output to a single row, whereas the reference query returns two rows. The result sets differ in both count and content."}
{"example_id": 1898, "sql_complexity": "single join", "prompt": "What are the total sales for each drug in Q2 2020?", "context": "CREATE TABLE drugs (drug_id INT, drug_name TEXT); INSERT INTO drugs (drug_id, drug_name) VALUES (1001, 'Ibuprofen'), (1002, 'Paracetamol'), (1003, 'Aspirin'); CREATE TABLE sales (sale_id INT, drug_id INT, sale_date DATE, revenue FLOAT); INSERT INTO sales (sale_id, drug_id, sale_date, revenue) VALUES (1, 1001, '2020-04-05', 1800.0), (2, 1002, '2020-04-10', 2300.0), (3, 1003, '2020-04-15', 1400.0), (4, 1001, '2020-05-20', 1900.0), (5, 1002, '2020-06-25', 2400.0);", "reference_sql": "SELECT drug_name, SUM(revenue) as total_sales FROM sales JOIN drugs ON sales.drug_id = drugs.drug_id WHERE sale_date BETWEEN '2020-04-01' AND '2020-06-30' GROUP BY drug_name;", "generated_sql": "SELECT d.drug_name, SUM(s.revenue) AS total_sales\nFROM sales s\nJOIN drugs d ON s.drug_id = d.drug_id\nWHERE s.sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY d.drug_name;", "raw_model_output": "<think>\n\n</think>\n\nSELECT d.drug_name, SUM(s.revenue) AS total_sales\nFROM sales s\nJOIN drugs d ON s.drug_id = d.drug_id\nWHERE s.sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY d.drug_name;", "latency_sec": 1.9842619895935059, "total_duration_sec": 1.93578391, "load_duration_sec": 0.013488003, "tokens_prompt": 327, "prompt_eval_sec": 0.070307126, "tokens_completion": 75, "completion_eval_sec": 1.849623595, "tokens_total": 402, "tokens_per_sec": 202.59421493144328, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an inner join between 'sales' and 'drugs' tables on drug_id, filter sales within the date range '2020-04-01' to '2020-06-30', and group by drug_name to calculate total sales. The only differences are the use of table aliases (s/d) and explicit column qualification, which do not affect semantic equivalence."}
{"example_id": 2403, "sql_complexity": "multiple_joins", "prompt": "Who is the most frequent customer ordering vegetarian items?", "context": "CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50)); INSERT INTO customers VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); CREATE TABLE orders (order_id INT, customer_id INT, menu_id INT, order_date DATE); INSERT INTO orders VALUES (1, 1, 1, '2022-01-01'), (2, 2, 3, '2022-01-02'), (3, 3, 2, '2022-01-03'); CREATE TABLE menu (menu_id INT, item_name VARCHAR(50), is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu VALUES (1, 'Veggie Burger', true, 8.99), (2, 'Cheeseburger', false, 7.99), (3, 'Tofu Stir Fry', true, 11.99);", "reference_sql": "SELECT customers.customer_name, COUNT(orders.order_id) as order_count FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN menu ON orders.menu_id = menu.menu_id WHERE menu.is_vegetarian = true GROUP BY customers.customer_name ORDER BY order_count DESC LIMIT 1;", "generated_sql": "SELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = true\nGROUP BY c.customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "raw_model_output": "<think>\n\n</think>\n\nSELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = true\nGROUP BY c.customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "latency_sec": 1.6950318813323975, "total_duration_sec": 1.628085484, "load_duration_sec": 0.024684333, "tokens_prompt": 294, "prompt_eval_sec": 0.056832627, "tokens_completion": 63, "completion_eval_sec": 1.544346773, "tokens_total": 357, "tokens_per_sec": 210.61550754985, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the customer with the highest count of vegetarian orders. They use identical JOIN conditions, WHERE filters, and grouping. The only difference is that Reference SQL uses COUNT(orders.order_id) while Generated SQL uses COUNT(*), which are equivalent in this context since the JOINs ensure each row represents a valid order. Both order by the count descending and limit to 1 result."}
{"example_id": 124, "sql_complexity": "set operations", "prompt": "Find the intersection of AI and accessibility research projects in the EU and those in Africa.", "context": "CREATE SCHEMA if not exists accessibility; CREATE TABLE if not exists accessibility.research (id INT PRIMARY KEY, project_name VARCHAR(255), region VARCHAR(255)); INSERT INTO accessibility.research (id, project_name, region) VALUES (1, 'AI for Accessibility EU', 'EU'), (2, 'Accessibility Africa', 'Africa'), (3, 'AI for Accessibility Africa', 'Africa'), (4, 'Accessibility EU', 'EU');", "reference_sql": "SELECT project_name FROM accessibility.research WHERE region = 'EU' INTERSECT SELECT project_name FROM accessibility.research WHERE region = 'Africa';", "generated_sql": "SELECT * FROM accessibility.research\nWHERE region = 'EU' AND project_name LIKE '%AI%'\nINTERSECT\nSELECT * FROM accessibility.research\nWHERE region = 'Africa' AND project_name LIKE '%AI%';", "raw_model_output": "<think>\n\n</think>\n\nSELECT * FROM accessibility.research\nWHERE region = 'EU' AND project_name LIKE '%AI%'\nINTERSECT\nSELECT * FROM accessibility.research\nWHERE region = 'Africa' AND project_name LIKE '%AI%';", "latency_sec": 1.5099194049835205, "total_duration_sec": 1.241024972, "load_duration_sec": 0.014789692, "tokens_prompt": 184, "prompt_eval_sec": 0.031471072, "tokens_completion": 50, "completion_eval_sec": 1.192732513, "tokens_total": 234, "tokens_per_sec": 154.9751590897356, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL compares project names across regions, while the Generated SQL compares all columns (including region) which cannot match between EU and Africa. The Generated SQL's INTERSECT requires identical rows (including region), making it impossible to return any results, whereas the Reference SQL could return project names present in both regions. Though both return empty in the given data, their semantics differ."}
{"example_id": 1231, "sql_complexity": "basic SQL", "prompt": "What is the average ticket price for performances at the 'Downtown Theater'?", "context": "CREATE TABLE DowntownTheater (show_name TEXT, date DATE, ticket_price FLOAT); INSERT INTO DowntownTheater (show_name, date, ticket_price) VALUES ('Play 1', '2022-01-01', 30.0), ('Play 2', '2022-01-02', 40.0), ('Concert 1', '2022-01-03', 50.0);", "reference_sql": "SELECT AVG(ticket_price) FROM DowntownTheater WHERE show_name = 'Downtown Theater'", "generated_sql": "SELECT AVG(ticket_price) AS average_ticket_price FROM DowntownTheater;", "raw_model_output": "<think>\n\n</think>\n\nSELECT AVG(ticket_price) AS average_ticket_price FROM DowntownTheater;", "latency_sec": 0.6546380519866943, "total_duration_sec": 0.515273213, "load_duration_sec": 0.014070517, "tokens_prompt": 190, "prompt_eval_sec": 0.031997413, "tokens_completion": 19, "completion_eval_sec": 0.467050037, "tokens_total": 209, "tokens_per_sec": 319.2603903267266, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters for show_name = 'Downtown Theater' which doesn't exist in the sample data (the actual show names are 'Play 1', 'Play 2', 'Concert 1'), resulting in NULL. The Generated SQL calculates the average of all tickets. The WHERE clause in Reference SQL makes them non-equivalent."}
{"example_id": 1485, "sql_complexity": "set operations", "prompt": "How many public schools and public libraries exist in total, in the 'CityData' schema's 'CityEducation' and 'CityLibrary' tables?", "context": "CREATE SCHEMA CityData; CREATE TABLE CityEducation (Name varchar(255), Type varchar(255)); INSERT INTO CityEducation (Name, Type) VALUES ('SchoolA', 'Public'), ('SchoolB', 'Public'), ('SchoolC', 'Private'); CREATE TABLE CityLibrary (Name varchar(255), Type varchar(255)); INSERT INTO CityLibrary (Name, Type) VALUES ('LibraryA', 'Public'), ('LibraryB', 'Public'), ('LibraryC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') AS PublicSchools,\n  (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS PublicLibraries;", "raw_model_output": "<think>\n\n</think>\n\nSELECT \n  (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') AS PublicSchools,\n  (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS PublicLibraries;", "latency_sec": 1.247143268585205, "total_duration_sec": 1.240950209, "load_duration_sec": 0.019500607, "tokens_prompt": 208, "prompt_eval_sec": 0.040771188, "tokens_completion": 49, "completion_eval_sec": 1.178484447, "tokens_total": 257, "tokens_per_sec": 206.07095148863542, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate rows with individual counts (Schools and Libraries), while the Generated SQL returns a single row with two columns containing the counts. The result set structure differs, making them non-equivalent."}
{"example_id": 5806, "sql_complexity": "single join", "prompt": "List the top 3 countries with the most veteran employment in the IT industry", "context": "CREATE TABLE veteran_employment (employee_id INT, industry VARCHAR(255), salary DECIMAL(10,2), state VARCHAR(2), country VARCHAR(255)); CREATE TABLE countries (country_id INT, country VARCHAR(255));", "reference_sql": "SELECT country, COUNT(*) as num_veterans FROM veteran_employment JOIN countries ON veteran_employment.country = countries.country WHERE industry = 'IT' GROUP BY country ORDER BY num_veterans DESC LIMIT 3;", "generated_sql": "SELECT c.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nJOIN countries c ON ve.country = c.country\nWHERE ve.industry = 'IT'\nGROUP BY c.country\nORDER BY veteran_count DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT c.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nJOIN countries c ON ve.country = c.country\nWHERE ve.industry = 'IT'\nGROUP BY c.country\nORDER BY veteran_count DESC\nLIMIT 3;", "latency_sec": 1.3673269748687744, "total_duration_sec": 1.319657604, "load_duration_sec": 0.022707885, "tokens_prompt": 141, "prompt_eval_sec": 0.024171792, "tokens_completion": 54, "completion_eval_sec": 1.270486464, "tokens_total": 195, "tokens_per_sec": 142.6140225301374, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an inner join between veteran_employment and countries on the country column, filter for industry 'IT', group by country, and order by the count of veterans in descending order with a limit of 3. The differences are purely syntactic (table aliases and column alias names) and do not affect the semantic result."}
{"example_id": 4126, "sql_complexity": "window functions", "prompt": "What is the average crime rate per capita in each neighborhood?", "context": "CREATE TABLE neighborhoods (name VARCHAR(255), population INT, crime_count INT); INSERT INTO neighborhoods (name, population, crime_count) VALUES ('Central Park', 1000, 25), ('Harlem', 2500, 75), ('Brooklyn', 5000, 120);", "reference_sql": "SELECT name, AVG(crime_count/population) OVER (PARTITION BY name) FROM neighborhoods;", "generated_sql": "SELECT name, (crime_count / population) * 1000 AS crime_rate_per_capita FROM neighborhoods;", "raw_model_output": "<think>\n\n</think>\n\nSELECT name, (crime_count / population) * 1000 AS crime_rate_per_capita FROM neighborhoods;", "latency_sec": 0.8460237979888916, "total_duration_sec": 0.746300843, "load_duration_sec": 0.024640676, "tokens_prompt": 157, "prompt_eval_sec": 0.027493698, "tokens_completion": 29, "completion_eval_sec": 0.692172811, "tokens_total": 186, "tokens_per_sec": 219.8519715900973, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query calculates the average of (crime_count/population) over each neighborhood (which simplifies to just (crime_count/population) since each name is unique), while the generated query computes (crime_count/population) * 1000. The multiplication by 1000 in the generated query produces values 1000 times larger than the reference query, making them non-equivalent."}
{"example_id": 4559, "sql_complexity": "basic SQL", "prompt": "List the top 3 energy efficient appliances in the US by energy star rating?", "context": "CREATE TABLE appliances (id INT, name VARCHAR(255), country VARCHAR(255), energy_star_rating INT); INSERT INTO appliances (id, name, country, energy_star_rating) VALUES (1, 'Fridge A', 'USA', 5), (2, 'TV B', 'USA', 4), (3, 'Laptop C', 'USA', 5), (4, 'Microwave D', 'USA', 3);", "reference_sql": "SELECT name, energy_star_rating FROM appliances WHERE country = 'USA' ORDER BY energy_star_rating DESC LIMIT 3;", "generated_sql": "SELECT name, energy_star_rating\nFROM appliances\nORDER BY energy_star_rating DESC\nLIMIT 3;", "raw_model_output": "<think>\n\n</think>\n\nSELECT name, energy_star_rating\nFROM appliances\nORDER BY energy_star_rating DESC\nLIMIT 3;", "latency_sec": 1.0081501007080078, "total_duration_sec": 0.676383559, "load_duration_sec": 0.014402339, "tokens_prompt": 184, "prompt_eval_sec": 0.03268212, "tokens_completion": 26, "completion_eval_sec": 0.626963719, "tokens_total": 210, "tokens_per_sec": 208.30231515378546, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The WHERE country = 'USA' condition is redundant in this case because all rows in the appliances table have country = 'USA' (as per the provided INSERT statements). Both queries will return the same 3 rows ordered by energy_star_rating descending. However, if the table contained entries from other countries, the queries would differ. Since the context explicitly defines all entries as USA, they are semantically equivalent in this specific scenario."}
{"example_id": 456, "sql_complexity": "window functions", "prompt": "List the intelligence operations and their corresponding threat levels, and rank them based on their threat level and budget.", "context": "CREATE TABLE intel_ops_threat (id INT, operation VARCHAR, threat VARCHAR, budget INT); INSERT INTO intel_ops_threat (id, operation, threat, budget) VALUES (1, 'Operation Red Folder', 'High', 5000000), (2, 'Operation Black Vault', 'Medium', 7000000), (3, 'Operation Blue Sail', 'Low', 6000000);", "reference_sql": "SELECT operation, threat, budget, ROW_NUMBER() OVER (PARTITION BY threat ORDER BY budget DESC) as rank FROM intel_ops_threat;", "generated_sql": "SELECT operation, threat, budget,\n       CASE \n           WHEN threat = 'High' THEN 1\n           WHEN threat = 'Medium' THEN 2\n           WHEN threat = 'Low' THEN 3\n       END AS threat_rank\nFROM intel_ops_threat\nORDER BY threat_rank, budget;", "raw_model_output": "<think>\n\n</think>\n\nSELECT operation, threat, budget,\n       CASE \n           WHEN threat = 'High' THEN 1\n           WHEN threat = 'Medium' THEN 2\n           WHEN threat = 'Low' THEN 3\n       END AS threat_rank\nFROM intel_ops_threat\nORDER BY threat_rank, budget;", "latency_sec": 1.657599925994873, "total_duration_sec": 1.649743976, "load_duration_sec": 0.027168651, "tokens_prompt": 188, "prompt_eval_sec": 0.033955545, "tokens_completion": 67, "completion_eval_sec": 1.585931383, "tokens_total": 255, "tokens_per_sec": 153.83687945506622, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses ROW_NUMBER() to assign a dynamic rank within each threat group based on budget, while the Generated SQL uses a static CASE-based 'threat_rank' and sorts by that fixed value. The ranking logic and resulting columns differ fundamentally. The Reference SQL's rank depends on budget within threat categories, whereas the Generated SQL's threat_rank is a fixed value per threat level. Additionally, the Generated SQL includes an ORDER BY clause which the Reference SQL lacks."}
{"example_id": 459, "sql_complexity": "set operations", "prompt": "What is the total installed capacity of hydroelectric power plants in Brazil and Canada?", "context": "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", "reference_sql": "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');", "generated_sql": "SELECT SUM(capacity) AS total_capacity FROM hydroelectric_power WHERE country IN ('Brazil', 'Canada');", "raw_model_output": "<think>\n\n</think>\n\nSELECT SUM(capacity) AS total_capacity FROM hydroelectric_power WHERE country IN ('Brazil', 'Canada');", "latency_sec": 0.6870579719543457, "total_duration_sec": 0.671825629, "load_duration_sec": 0.023368426, "tokens_prompt": 165, "prompt_eval_sec": 0.027813969, "tokens_completion": 26, "completion_eval_sec": 0.618593047, "tokens_total": 191, "tokens_per_sec": 277.99691990575104, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate capacity values (Brazil and Canada) as individual rows, while the Generated SQL returns a single summed value of their capacities. The first query uses UNION to combine results, whereas the second uses SUM to aggregate them, leading to different output structures and values."}
{"example_id": 2356, "sql_complexity": "window functions", "prompt": "Find the total billing amount for attorneys in the 'Criminal Law' practice area, for the year 2020, partitioned by attorney's last name and ordered by the total billing amount in descending order.", "context": "CREATE TABLE Attorneys (AttorneyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), PracticeArea VARCHAR(50), TotalBilling FLOAT, BillingYear INT); INSERT INTO Attorneys (AttorneyID, FirstName, LastName, PracticeArea, TotalBilling, BillingYear) VALUES (1, 'Clara', 'Rivera', 'Personal Injury', 8000.00, 2020), (2, 'Jamal', 'Lee', 'Personal Injury', 6000.00, 2019), (3, 'Sophia', 'Gomez', 'Criminal Law', 9000.00, 2020);", "reference_sql": "SELECT LastName, SUM(TotalBilling) OVER (PARTITION BY PracticeArea, LastName, BillingYear) AS TotalBilling FROM Attorneys WHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020 ORDER BY TotalBilling DESC;", "generated_sql": "SELECT LastName, SUM(TotalBilling) AS TotalBilling\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020\nGROUP BY LastName\nORDER BY TotalBilling DESC;", "raw_model_output": "<think>\n\n</think>\n\n```sql\nSELECT LastName, SUM(TotalBilling) AS TotalBilling\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020\nGROUP BY LastName\nORDER BY TotalBilling DESC;\n```", "latency_sec": 1.4603140354156494, "total_duration_sec": 1.389799825, "load_duration_sec": 0.019872378, "tokens_prompt": 266, "prompt_eval_sec": 0.051741036, "tokens_completion": 54, "completion_eval_sec": 1.315997236, "tokens_total": 320, "tokens_per_sec": 219.1309487133145, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function that partitions by PracticeArea, LastName, and BillingYear, which would return multiple rows with the same sum if there are multiple entries for the same LastName. The Generated SQL groups by LastName, aggregating all entries into a single row per LastName. While they produce the same result for the given sample data (which has only one entry), they are not equivalent in general cases with multiple rows per LastName."}
