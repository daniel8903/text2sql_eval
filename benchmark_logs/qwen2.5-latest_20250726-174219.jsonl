{"example_id": 904, "sql_complexity": "basic SQL", "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?", "context": "CREATE TABLE loans (id INT, amount DECIMAL, date DATE, loan_type VARCHAR); INSERT INTO loans (id, amount, date, loan_type) VALUES (1, 5000, '2021-09-05', 'Shariah-compliant'), (2, 7000, '2021-10-07', 'socially responsible'), (3, 9000, '2021-11-03', 'Shariah-compliant'), (4, 11000, '2021-12-31', 'Shariah-compliant');", "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';", "generated_sql": "SELECT MIN(amount) AS min_loan_amount \nFROM loans \nWHERE date BETWEEN '2021-10-01' AND '2021-12-31' AND loan_type = 'Shariah-compliant';", "raw_model_output": "```sql\nSELECT MIN(amount) AS min_loan_amount \nFROM loans \nWHERE date BETWEEN '2021-10-01' AND '2021-12-31' AND loan_type = 'Shariah-compliant';\n```", "latency_sec": 14.113626956939697, "total_duration_sec": 13.870834629, "load_duration_sec": 0.033484287, "tokens_prompt": 436, "prompt_eval_sec": 9.7315642, "tokens_completion": 56, "completion_eval_sec": 4.103480945, "tokens_total": 492, "tokens_per_sec": 34.85992661567994, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter loans with 'Shariah-compliant' type and dates in Q4 of 2021. The reference uses EXTRACT(QUARTER) = 4, which corresponds to October-December, while the generated query uses BETWEEN '2021-10-01' AND '2021-12-31'. These date ranges are semantically equivalent for Q4. Both will select the same rows (IDs 3 and 4) and return the same MIN(amount) of 9000."}
{"example_id": 5168, "sql_complexity": "aggregation", "prompt": "Get the number of renewable energy projects in Australia for each project type.", "context": "CREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT);", "reference_sql": "SELECT project_type, COUNT(*) FROM renewable_projects WHERE project_location = 'Australia' GROUP BY project_type;", "generated_sql": "SELECT project_type, COUNT(*) \nFROM renewable_projects \nWHERE country = 'Australia' \nGROUP BY project_type;", "raw_model_output": "```sql\nSELECT project_type, COUNT(*) \nFROM renewable_projects \nWHERE country = 'Australia' \nGROUP BY project_type;\n```", "latency_sec": 6.288291692733765, "total_duration_sec": 6.261443993, "load_duration_sec": 0.027250708, "tokens_prompt": 225, "prompt_eval_sec": 4.211203235, "tokens_completion": 28, "completion_eval_sec": 2.020756544, "tokens_total": 253, "tokens_per_sec": 40.233502573098846, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query filters on 'project_location = 'Australia'', while the generated query uses 'country = 'Australia''. The 'country' column does not exist in the renewable_projects table (only 'project_location' exists), making the generated query invalid and semantically different."}
{"example_id": 5039, "sql_complexity": "subqueries", "prompt": "What is the total number of community policing events in 'City Park' in 2021?", "context": "CREATE TABLE locations (id INT, name VARCHAR(255)); CREATE TABLE community_policing (id INT, location_id INT, year INT, events INT); INSERT INTO locations (id, name) VALUES (1, 'City Park'); INSERT INTO community_policing (id, location_id, year, events) VALUES (1, 1, 2021, 5);", "reference_sql": "SELECT SUM(events) FROM community_policing WHERE location_id = (SELECT id FROM locations WHERE name = 'City Park') AND year = 2021;", "generated_sql": "SELECT SUM(events) \nFROM community_policing cp \nJOIN locations l ON cp.location_id = l.id \nWHERE l.name = 'City Park' AND cp.year = 2021;", "raw_model_output": "```sql\nSELECT SUM(events) \nFROM community_policing cp \nJOIN locations l ON cp.location_id = l.id \nWHERE l.name = 'City Park' AND cp.year = 2021;\n```", "latency_sec": 11.00399899482727, "total_duration_sec": 10.875252359, "load_duration_sec": 0.025150072, "tokens_prompt": 351, "prompt_eval_sec": 7.433576909, "tokens_completion": 46, "completion_eval_sec": 3.414157656, "tokens_total": 397, "tokens_per_sec": 36.077793190150295, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of events for 'City Park' in 2021. The reference query uses a subquery to get the location_id, while the generated query uses a JOIN. Since the subquery returns a single id (due to unique name constraint in the given data), both approaches produce the same result."}
{"example_id": 335, "sql_complexity": "single join", "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000", "context": "CREATE TABLE policies (policy_number INT);CREATE TABLE claims (claim_id INT, policy_number INT, claim_amount DECIMAL(10,2), claim_date DATE);", "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "generated_sql": "SELECT p.policy_number, SUM(c.claim_amount) AS total_claim_amount, c.claim_date\nFROM policies p\nJOIN claims c ON p.policy_number = c.policy_number\nGROUP BY p.policy_number, c.claim_date\nHAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "raw_model_output": "```sql\nSELECT p.policy_number, SUM(c.claim_amount) AS total_claim_amount, c.claim_date\nFROM policies p\nJOIN claims c ON p.policy_number = c.policy_number\nGROUP BY p.policy_number, c.claim_date\nHAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;\n```", "latency_sec": 14.516770124435425, "total_duration_sec": 14.223151305, "load_duration_sec": 0.024336073, "tokens_prompt": 379, "prompt_eval_sec": 8.462714574, "tokens_completion": 78, "completion_eval_sec": 5.733681271, "tokens_total": 457, "tokens_per_sec": 31.480831898739822, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their GROUP BY clauses and selected columns. The Reference SQL groups by policy_number, claim_amount, and claim_date, while the Generated SQL groups by policy_number and claim_date. This affects how claims are aggregated: the Reference treats different claim_amounts on the same date as separate groups, whereas the Generated combines them. Additionally, the Generated SQL replaces claim_amount with SUM(claim_amount) in the SELECT, altering the output structure. These differences in grouping and projection make the queries non-equivalent."}
{"example_id": 5792, "sql_complexity": "multiple_joins", "prompt": "How many cases were handled by attorneys in the 'Los Angeles' office?", "context": "CREATE TABLE offices (office_id INT, office_name VARCHAR(20), city VARCHAR(20), state VARCHAR(20)); INSERT INTO offices (office_id, office_name, city, state) VALUES (1, 'Boston', 'Boston', 'MA'), (2, 'New York', 'New York', 'NY'), (3, 'Los Angeles', 'Los Angeles', 'CA'); CREATE TABLE attorneys (attorney_id INT, office_id INT); INSERT INTO attorneys (attorney_id, office_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3);", "reference_sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.attorney_id JOIN offices ON attorneys.office_id = offices.office_id WHERE offices.city = 'Los Angeles';", "generated_sql": "SELECT COUNT(*) AS cases_handled \nFROM cases \nINNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id \nINNER JOIN offices ON attorneys.office_id = offices.office_id \nWHERE offices.city = 'Los Angeles';", "raw_model_output": "```sql\nSELECT COUNT(*) AS cases_handled \nFROM cases \nINNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id \nINNER JOIN offices ON attorneys.office_id = offices.office_id \nWHERE offices.city = 'Los Angeles';\n```", "latency_sec": 12.294090032577515, "total_duration_sec": 12.235164009, "load_duration_sec": 0.033708898, "tokens_prompt": 385, "prompt_eval_sec": 8.495600433, "tokens_completion": 50, "completion_eval_sec": 3.701015326, "tokens_total": 435, "tokens_per_sec": 35.38285459495697, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same three-table join (cases \u2192 attorneys \u2192 offices) with the same WHERE condition filtering by 'Los Angeles' city. The only differences are syntactic: the generated query uses explicit INNER JOIN syntax instead of implicit JOIN and adds a column alias (cases_handled). These do not affect the semantic result."}
