{"example_id": 2656, "sql_complexity": "multiple_joins", "prompt": "Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.", "context": "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", "reference_sql": "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')", "generated_sql": "SELECT d.name, SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(s2.revenue)\n    FROM sales s2\n    JOIN drugs d2 ON s2.drug_id = d2.id\n    WHERE d2.indication = 'Infectious_Diseases'\n)", "raw_model_output": "```sql\nSELECT d.name, SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(s2.revenue)\n    FROM sales s2\n    JOIN drugs d2 ON s2.drug_id = d2.id\n    WHERE d2.indication = 'Infectious_Diseases'\n)\n```", "latency_sec": 2.696092367172241, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 196, "prompt_eval_sec": null, "tokens_completion": 105, "completion_eval_sec": null, "tokens_total": 301, "tokens_per_sec": 111.64305929017544, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their SELECT and GROUP BY clauses. The Reference SQL groups by s.drug_id (primary key) and includes drug_id in the output, while the Generated SQL groups by d.name (which may not be unique) and omits drug_id. This leads to different result structures and potential aggregation differences if multiple drugs share the same name. The HAVING clause logic is equivalent, but the overall output columns and grouping logic make them non-equivalent."}
{"example_id": 3008, "sql_complexity": "multiple_joins", "prompt": "Who are the users who used electric vehicles and their trip details?", "context": "CREATE TABLE users (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), city VARCHAR(50));CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(20), is_electric BOOLEAN);CREATE TABLE trips (id INT, user_id INT, vehicle_id INT, trip_distance FLOAT, trip_duration INT, departure_time TIMESTAMP, arrival_time TIMESTAMP);INSERT INTO users (id, name, age, gender, city) VALUES (3, 'Alex', 30, 'Female', 'New York');INSERT INTO vehicles (id, vehicle_type, is_electric) VALUES (1, 'Tesla', true), (2, 'Bike', false);INSERT INTO trips (id, user_id, vehicle_id, trip_distance, trip_duration, departure_time, arrival_time) VALUES (3, 3, 1, 15.3, 25, '2022-01-03 12:00:00', '2022-01-03 12:25:00');", "reference_sql": "SELECT u.name, v.vehicle_type, t.trip_distance, t.trip_duration FROM users u JOIN trips t ON u.id = t.user_id JOIN vehicles v ON t.vehicle_id = v.id WHERE v.is_electric = true;", "generated_sql": "SELECT u.id AS user_id, u.name, u.age, u.gender, u.city,\n       t.id AS trip_id, t.vehicle_id, t.trip_distance, t.trip_duration, t.departure_time, t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "raw_model_output": "```sql\nSELECT u.id AS user_id, u.name, u.age, u.gender, u.city,\n       t.id AS trip_id, t.vehicle_id, t.trip_distance, t.trip_duration, t.departure_time, t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;\n```", "latency_sec": 1.5674278736114502, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 287, "prompt_eval_sec": null, "tokens_completion": 87, "completion_eval_sec": null, "tokens_total": 374, "tokens_per_sec": 238.60747042751063, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 4 specific columns (u.name, v.vehicle_type, t.trip_distance, t.trip_duration), while the Generated SQL selects 11 columns including all user attributes (id, name, age, gender, city) and all trip attributes (id, vehicle_id, trip_distance, trip_duration, departure_time, arrival_time). The additional columns in the Generated SQL make the result sets structurally different."}
{"example_id": 2531, "sql_complexity": "basic SQL", "prompt": "Who is the top customer by sales in 2022?", "context": "CREATE TABLE customers (customer_id INT, total_sales_2022 FLOAT); INSERT INTO customers (customer_id, total_sales_2022) VALUES (1, 25000.0), (2, 30000.0), (3, 22000.0), (4, 35000.0);", "reference_sql": "SELECT customer_id, total_sales_2022 FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "generated_sql": "SELECT customer_id, total_sales_2022\nFROM customers\nORDER BY total_sales_2022 DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "```sql\nSELECT customer_id, total_sales_2022\nFROM customers\nORDER BY total_sales_2022 DESC\nFETCH FIRST 1 ROW ONLY;\n```", "latency_sec": 0.6250460147857666, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 144, "prompt_eval_sec": null, "tokens_completion": 34, "completion_eval_sec": null, "tokens_total": 178, "tokens_per_sec": 284.77903352605034, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the customer with the highest total_sales_2022 by ordering in descending order and limiting the result to 1 row. 'LIMIT 1' (Reference) and 'FETCH FIRST 1 ROW ONLY' (Generated) are functionally equivalent in this context, producing the same result set."}
{"example_id": 3792, "sql_complexity": "single join", "prompt": "What is the maximum distance traveled by an electric vehicle in a single trip, grouped by vehicle model?", "context": "CREATE TABLE Trips (trip_id INT, vehicle_id INT, distance FLOAT); CREATE TABLE ElectricVehicleModels (vehicle_id INT, vehicle_model TEXT);", "reference_sql": "SELECT evm.vehicle_model, MAX(trips.distance) AS max_distance_traveled FROM Trips trips INNER JOIN ElectricVehicleModels evm ON trips.vehicle_id = evm.vehicle_id GROUP BY 1;", "generated_sql": "SELECT\n    evm.vehicle_model,\n    MAX(t.distance) AS max_distance\nFROM\n    Trips t\n    JOIN ElectricVehicleModels evm ON t.vehicle_id = evm.vehicle_id\nGROUP BY\n    evm.vehicle_model;", "raw_model_output": "```sql\nSELECT\n    evm.vehicle_model,\n    MAX(t.distance) AS max_distance\nFROM\n    Trips t\n    JOIN ElectricVehicleModels evm ON t.vehicle_id = evm.vehicle_id\nGROUP BY\n    evm.vehicle_model;\n```", "latency_sec": 0.8389739990234375, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 116, "prompt_eval_sec": null, "tokens_completion": 54, "completion_eval_sec": null, "tokens_total": 170, "tokens_per_sec": 202.62844879326337, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum distance traveled per vehicle model by joining the Trips and ElectricVehicleModels tables. The differences are purely syntactic (table aliases 'trips' vs 't', column alias 'max_distance_traveled' vs 'max_distance') and do not affect the semantic result. The GROUP BY clause references the same logical column (vehicle_model) in both cases."}
{"example_id": 2311, "sql_complexity": "subqueries", "prompt": "Determine the percentage of sales from each ingredient category", "context": "CREATE TABLE Sales_Details (sale_id INT, ingredient_id INT, quantity INT); INSERT INTO Sales_Details (sale_id, ingredient_id, quantity) VALUES (1, 1, 2), (1, 2, 8), (2, 1, 3), (2, 2, 7); CREATE TABLE Ingredient_Categories (ingredient_id INT, ingredient_category VARCHAR(255)); INSERT INTO Ingredient_Categories (ingredient_id, ingredient_category) VALUES (1, 'Legumes'), (2, 'Poultry');", "reference_sql": "SELECT ingredient_category, SUM(quantity) AS total_quantity, SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales FROM Sales_Details, Ingredient_Categories WHERE Sales_Details.ingredient_id = Ingredient_Categories.ingredient_id GROUP BY ingredient_category;", "generated_sql": "SELECT\n  ic.ingredient_category,\n  100.0 * SUM(sd.quantity) / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales\nFROM\n  Sales_Details sd\nJOIN\n  Ingredient_Categories ic ON sd.ingredient_id = ic.ingredient_id\nGROUP BY\n  ic.ingredient_category;", "raw_model_output": "```sql\nSELECT\n  ic.ingredient_category,\n  100.0 * SUM(sd.quantity) / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales\nFROM\n  Sales_Details sd\nJOIN\n  Ingredient_Categories ic ON sd.ingredient_id = ic.ingredient_id\nGROUP BY\n  ic.ingredient_category;\n```", "latency_sec": 1.2449872493743896, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 189, "prompt_eval_sec": null, "tokens_completion": 74, "completion_eval_sec": null, "tokens_total": 263, "tokens_per_sec": 211.24714340019017, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an extra column 'total_quantity' in the SELECT clause, while the Generated SQL omits it. Although both calculate the percentage_of_sales correctly and use equivalent joins/grouping, the result sets differ in structure. Semantic equivalence requires identical output columns and values, which is not met here."}
{"example_id": 3329, "sql_complexity": "set operations", "prompt": "Which causes received funding from donors in both the United States and Canada?", "context": "CREATE TABLE donor_location (donor_id INT, country VARCHAR(50), cause VARCHAR(50), donation DECIMAL(10,2)); INSERT INTO donor_location (donor_id, country, cause, donation) VALUES (1, 'United States', 'Global Health', 1000.00), (2, 'Canada', 'Education', 2000.00), (3, 'United States', 'Environment', 1500.00), (4, 'Canada', 'Animal Welfare', 2500.00);", "reference_sql": "SELECT cause FROM donor_location WHERE country = 'United States' INTERSECT SELECT cause FROM donor_location WHERE country = 'Canada';", "generated_sql": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "raw_model_output": "```sql\nSELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;\n```", "latency_sec": 1.27115797996521, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 189, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 227, "tokens_per_sec": 178.5773315180012, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve causes that exist in both 'United States' and 'Canada'. The reference uses INTERSECT to find common causes between the two countries, while the generated query groups by cause and ensures each cause appears in both countries via COUNT(DISTINCT country) = 2. Both approaches yield the same result set."}
{"example_id": 2912, "sql_complexity": "single join", "prompt": "Which company has manufactured the most satellites?", "context": "CREATE TABLE manufacturers (id INT, name TEXT); CREATE TABLE satellites (id INT, manufacturer_id INT, name TEXT, launch_date DATE); INSERT INTO manufacturers (id, name) VALUES (1, 'SpaceX'), (2, 'Blue Origin'), (3, 'ISRO'), (4, 'CAST'); INSERT INTO satellites (id, manufacturer_id, name, launch_date) VALUES (1, 1, 'StarDragon', '2012-05-25'), (2, 1, 'Falcon', '2015-12-21'), (3, 2, 'New Glenn', '2022-01-11'), (4, 3, 'ChinaSat 1E', '2000-12-05'), (5, 3, 'ChinaSat 2A', '2003-08-13'), (6, 4, 'Shijian 9', '2017-11-19'), (7, 1, 'StarLink', '2020-05-24'), (8, 1, 'StarLink', '2020-06-13');", "reference_sql": "SELECT m.name, COUNT(s.id) FROM manufacturers m JOIN satellites s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY COUNT(s.id) DESC;", "generated_sql": "SELECT m.name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.id, m.name\nORDER BY COUNT(s.id) DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "```sql\nSELECT m.name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.id, m.name\nORDER BY COUNT(s.id) DESC\nFETCH FIRST 1 ROW ONLY;\n```", "latency_sec": 1.611767053604126, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 307, "prompt_eval_sec": null, "tokens_completion": 48, "completion_eval_sec": null, "tokens_total": 355, "tokens_per_sec": 220.25515362544027, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns all manufacturers with their satellite counts ordered by count descending, while the Generated SQL only returns the top manufacturer (due to FETCH FIRST 1 ROW ONLY). The Generated SQL also groups by both m.id and m.name (redundant since id is unique) but the key difference is the result set size limitation."}
{"example_id": 3170, "sql_complexity": "aggregation", "prompt": "Determine the total production quantity of silver for mining sites in Mexico, between the dates '2017-05-01' and '2017-09-30', having less than 40 employees.", "context": "CREATE TABLE silver_mine_2 (site_id INT, country VARCHAR(50), num_employees INT, extraction_date DATE, quantity INT); INSERT INTO silver_mine_2 (site_id, country, num_employees, extraction_date, quantity) VALUES (1, 'Mexico', 35, '2017-05-02', 1200), (2, 'Mexico', 30, '2017-08-31', 1800), (3, 'Mexico', 37, '2017-07-04', 2200);", "reference_sql": "SELECT country, SUM(quantity) as total_silver_prod FROM silver_mine_2 WHERE num_employees < 40 AND country = 'Mexico' AND extraction_date >= '2017-05-01' AND extraction_date <= '2017-09-30' GROUP BY country;", "generated_sql": "SELECT SUM(quantity) AS total_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "raw_model_output": "```sql\nSELECT SUM(quantity) AS total_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;\n```", "latency_sec": 0.8680970668792725, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 222, "prompt_eval_sec": null, "tokens_completion": 58, "completion_eval_sec": null, "tokens_total": 280, "tokens_per_sec": 322.5445755813618, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes the 'country' column in the output and groups by it, while the Generated SQL omits the 'country' column. Although both calculate the same sum for Mexico, the result structures differ (one has two columns, the other one column), making them non-equivalent."}
{"example_id": 3518, "sql_complexity": "basic SQL", "prompt": "Insert new records of ticket sales for a new event, including event and salesperson information.", "context": "CREATE TABLE salesperson (salesperson_id INT, name VARCHAR(50), position VARCHAR(50)); CREATE TABLE tickets (ticket_id INT, salesperson_id INT, event_id INT, price DECIMAL(5,2), quantity INT); CREATE TABLE events (event_id INT, name VARCHAR(50), date DATE); INSERT INTO salesperson VALUES (1, 'John Doe', 'Senior Salesperson'); INSERT INTO events VALUES (2, 'New Event', '2023-04-15');", "reference_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) VALUES (2, 1, 2, 75, 50), (3, 2, 2, 65, 75); INSERT INTO events (event_id, name, date) VALUES (2, 'New Event', '2023-04-15');", "generated_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (1, 1, 2, 50.00, 100);", "raw_model_output": "```sql\nINSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (1, 1, 2, 50.00, 100);\n```", "latency_sec": 1.1166532039642334, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 181, "prompt_eval_sec": null, "tokens_completion": 40, "completion_eval_sec": null, "tokens_total": 221, "tokens_per_sec": 197.91283382828917, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts two rows into the tickets table and one row into the events table, while the Generated SQL only inserts a single row into the tickets table. The Generated SQL omits the second ticket entry and the events insertion, resulting in different data modifications."}
{"example_id": 3925, "sql_complexity": "set operations", "prompt": "What is the total number of students and staff with accommodations in the \"disability_services\" schema, excluding the \"accessibility_parking\" type?", "context": "CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));", "reference_sql": "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM disability_services.students WHERE accommodation IS NOT NULL AND accommodation <> 'accessibility_parking')\n  +\n  (SELECT COUNT(*) FROM disability_services.staff WHERE accommodation IS NOT NULL AND accommodation <> 'accessibility_parking')\n  AS total_with_accommodations;", "raw_model_output": "```sql\nSELECT \n  (SELECT COUNT(*) FROM disability_services.students WHERE accommodation IS NOT NULL AND accommodation <> 'accessibility_parking')\n  +\n  (SELECT COUNT(*) FROM disability_services.staff WHERE accommodation IS NOT NULL AND accommodation <> 'accessibility_parking')\n  AS total_with_accommodations;\n```", "latency_sec": 1.8809630870819092, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 137, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 200, "tokens_per_sec": 106.3285087163918, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (staff and students) as individual rows via UNION, while the Generated SQL calculates a single summed total. Additionally, the Generated SQL explicitly checks for non-null accommodations, whereas the Reference SQL implicitly excludes NULLs via the '!= 'accessibility_parking'' condition. The output structure and aggregation method differ, making them non-equivalent."}
{"example_id": 3340, "sql_complexity": "subqueries", "prompt": "Calculate the total revenue for garments manufactured in the US and sold in California.", "context": "CREATE TABLE garment_manufacturing(id INT PRIMARY KEY, garment_id INT, country VARCHAR(50), material VARCHAR(50), manufacturing_date DATE, quantity INT); CREATE TABLE garment_sales(id INT PRIMARY KEY, garment_id INT, store_id INT, sale_date DATE, units INT, revenue DECIMAL(10,2));", "reference_sql": "SELECT SUM(gs.revenue) FROM garment_manufacturing gm JOIN garment_sales gs ON gm.garment_id = gs.garment_id WHERE gm.country = 'United States' AND gs.store_id IN (SELECT id FROM stores WHERE region = 'California');", "generated_sql": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US'\n  AND gs.store_id IN (\n      SELECT id FROM stores WHERE state = 'California'\n  );", "raw_model_output": "```sql\nSELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US'\n  AND gs.store_id IN (\n      SELECT id FROM stores WHERE state = 'California'\n  );\n```\n**Note:** The schema provided does not include a `stores` table or a way to determine if a store is in California. If you have a `stores` table with a `state` column, use the above query.  \nIf not, it is not possible to answer this question with the given schema alone.", "latency_sec": 1.896193027496338, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 146, "prompt_eval_sec": null, "tokens_completion": 132, "completion_eval_sec": null, "tokens_total": 278, "tokens_per_sec": 146.60954658559248, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects: 1) The country condition uses 'United States' vs 'US' (abbreviation mismatch), and 2) The subquery references 'region' vs 'state' columns in the stores table. These differences would produce different results unless the database explicitly maps 'US' to 'United States' and 'region' to 'state' in the stores table, which cannot be assumed without additional context."}
{"example_id": 596, "sql_complexity": "basic SQL", "prompt": "What is the minimum energy production cost of wind farms in Spain?", "context": "CREATE TABLE wind_farm_costs (id INT, name TEXT, country TEXT, energy_production_cost FLOAT); INSERT INTO wind_farm_costs (id, name, country, energy_production_cost) VALUES (1, 'Las Tiesas', 'Spain', 0.045), (2, 'Eolo', 'Spain', 0.050);", "reference_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "generated_sql": "SELECT MIN(energy_production_cost) AS min_energy_production_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "raw_model_output": "```sql\nSELECT MIN(energy_production_cost) AS min_energy_production_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';\n```", "latency_sec": 2.553447961807251, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 155, "prompt_eval_sec": null, "tokens_completion": 33, "completion_eval_sec": null, "tokens_total": 188, "tokens_per_sec": 73.62593748217193, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the minimum energy_production_cost for wind farms in Spain. The generated query adds an alias (min_energy_production_cost) to the result column, but this does not affect the semantic meaning or the actual computed value. The WHERE clause and aggregate function (MIN) are identical in both queries."}
{"example_id": 2604, "sql_complexity": "subqueries", "prompt": "What is the maximum number of virtual tours taken by a single user in the UK?", "context": "CREATE TABLE virtual_tour_data (user_id INT, hotel_id INT, tour_date DATE); INSERT INTO virtual_tour_data (user_id, hotel_id, tour_date) VALUES (1, 10, '2022-01-01'), (2, 11, '2022-01-03'), (3, 12, '2022-01-05'), (4, 10, '2022-01-07'), (5, 10, '2022-01-09'); CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT); INSERT INTO hotels (hotel_id, hotel_name, country) VALUES (10, 'Royal Park Hotel', 'UK'), (11, 'The Ritz London', 'UK'), (12, 'Hotel de Crillon', 'France');", "reference_sql": "SELECT MAX(vt.user_tours) FROM (SELECT user_id, COUNT(DISTINCT hotel_id) as user_tours FROM virtual_tour_data WHERE country = 'UK' GROUP BY user_id) as vt;", "generated_sql": "SELECT MAX(tour_count) AS max_tours_by_user_in_uk\nFROM (\n    SELECT v.user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data v\n    JOIN hotels h ON v.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY v.user_id\n) AS user_tours_uk;", "raw_model_output": "```sql\nSELECT MAX(tour_count) AS max_tours_by_user_in_uk\nFROM (\n    SELECT v.user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data v\n    JOIN hotels h ON v.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY v.user_id\n) AS user_tours_uk;\n```", "latency_sec": 1.1327941417694092, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 252, "prompt_eval_sec": null, "tokens_completion": 79, "completion_eval_sec": null, "tokens_total": 331, "tokens_per_sec": 292.19783877323243, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL references a 'country' column from virtual_tour_data, which does not exist, making it invalid. The Generated SQL correctly joins with the hotels table to filter by country. Additionally, the Reference SQL uses COUNT(DISTINCT hotel_id) while the Generated SQL uses COUNT(*), leading to different results if users visited the same hotel multiple times."}
{"example_id": 5812, "sql_complexity": "single join", "prompt": "Calculate the percentage of Shariah-compliant investments held by each investor in the top 5 countries with the highest percentage?", "context": "CREATE TABLE investors (investor_id INT, investor_name TEXT, country TEXT); INSERT INTO investors (investor_id, investor_name, country) VALUES (1, 'Al Thani', 'Qatar'), (2, 'Saudi Investment Group', 'Saudi Arabia'), (3, 'Temasek Holdings', 'Singapore'); CREATE TABLE investments (investment_id INT, investor_id INT, investment_type TEXT, investment_value DECIMAL, is_shariah_compliant BOOLEAN); INSERT INTO investments (investment_id, investor_id, investment_type, investment_value, is_shariah_compliant) VALUES (1, 1, 'Real Estate', 15000000, true), (2, 2, 'Stocks', 20000000, false);", "reference_sql": "SELECT investor_name, ROUND((SUM(CASE WHEN is_shariah_compliant THEN investment_value ELSE 0 END) / SUM(investment_value)) * 100, 2) AS percentage FROM investments JOIN investors ON investments.investor_id = investors.investor_id GROUP BY investor_name ORDER BY percentage DESC LIMIT 5;", "generated_sql": "WITH country_shariah_pct AS (\n    SELECT\n        i.country,\n        inv.investor_id,\n        100.0 * SUM(CASE WHEN inv.is_shariah_compliant THEN inv.investment_value ELSE 0 END) / \n            NULLIF(SUM(inv.investment_value), 0) AS shariah_pct\n    FROM\n        investors i\n        JOIN investments inv ON i.investor_id = inv.investor_id\n    GROUP BY\n        i.country,\n        inv.investor_id\n),\ntop_countries AS (\n    SELECT\n        country,\n        AVG(shariah_pct) AS avg_shariah_pct\n    FROM\n        country_shariah_pct\n    GROUP BY\n        country\n    ORDER BY\n        avg_shariah_pct DESC\n    FETCH FIRST 5 ROWS ONLY\n)\nSELECT\n    i.country,\n    i.investor_name,\n    cs.shariah_pct\nFROM\n    country_shariah_pct cs\n    JOIN investors i ON cs.investor_id = i.investor_id\n    JOIN top_countries tc ON i.country = tc.country\nORDER BY\n    cs.shariah_pct DESC, i.country, i.investor_name;", "raw_model_output": "```sql\nWITH country_shariah_pct AS (\n    SELECT\n        i.country,\n        inv.investor_id,\n        100.0 * SUM(CASE WHEN inv.is_shariah_compliant THEN inv.investment_value ELSE 0 END) / \n            NULLIF(SUM(inv.investment_value), 0) AS shariah_pct\n    FROM\n        investors i\n        JOIN investments inv ON i.investor_id = inv.investor_id\n    GROUP BY\n        i.country,\n        inv.investor_id\n),\ntop_countries AS (\n    SELECT\n        country,\n        AVG(shariah_pct) AS avg_shariah_pct\n    FROM\n        country_shariah_pct\n    GROUP BY\n        country\n    ORDER BY\n        avg_shariah_pct DESC\n    FETCH FIRST 5 ROWS ONLY\n)\nSELECT\n    i.country,\n    i.investor_name,\n    cs.shariah_pct\nFROM\n    country_shariah_pct cs\n    JOIN investors i ON cs.investor_id = i.investor_id\n    JOIN top_countries tc ON i.country = tc.country\nORDER BY\n    cs.shariah_pct DESC, i.country, i.investor_name;\n```", "latency_sec": 2.8234081268310547, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 244, "prompt_eval_sec": null, "tokens_completion": 261, "completion_eval_sec": null, "tokens_total": 505, "tokens_per_sec": 178.86184969184862, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference query calculates the shariah compliance percentage per investor, grouping by investor_name and ordering by percentage. The Generated query calculates country-level averages of shariah compliance percentages, groups by country, and includes country in the output. Additionally, the Generated query's final output includes investor_name but ties it to country-level averages, while the Reference focuses on individual investor metrics. The grouping, aggregation, and output structure differ significantly."}
{"example_id": 4706, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 customers by total spend on makeup products from Italy and Spain?", "context": "CREATE TABLE customers (customer_id INT, customer_name TEXT, country TEXT); INSERT INTO customers (customer_id, customer_name, country) VALUES (1, 'Alessandro Martini', 'IT'), (2, 'Laura Rossi', 'ES'), (3, 'Daniela Gonzalez', 'MX'), (4, 'Jose Hernandez', 'ES'), (5, 'Sophia Rodriguez', 'IT'); CREATE TABLE sales (sale_id INT, customer_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, customer_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 1, 100, 'IT'), (2, 2, 2, 150, 'ES'), (3, 3, 3, 200, 'MX'), (4, 4, 4, 250, 'ES'), (5, 5, 5, 300, 'IT'); CREATE TABLE products (product_id INT, product_name TEXT, category TEXT); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Eyeshadow Palette', 'makeup'), (2, 'Liquid Lipstick', 'makeup'), (3, 'BB Cream', 'makeup'), (4, 'Volumizing Mascara', 'makeup'), (5, 'Nourishing Lip Balm', 'makeup');", "reference_sql": "SELECT c.customer_name, SUM(s.sale_quantity) as total_spent_on_makeup FROM sales s JOIN customers c ON s.customer_id = c.customer_id JOIN products p ON s.product_id = p.product_id WHERE c.country IN ('IT', 'ES') AND p.category = 'makeup' GROUP BY c.customer_name ORDER BY total_spent_on_makeup DESC LIMIT 3;", "generated_sql": "SELECT c.customer_id, c.customer_name, SUM(s.sale_quantity) AS total_spend\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE c.country IN ('IT', 'ES') AND p.category = 'makeup'\nGROUP BY c.customer_id, c.customer_name\nORDER BY total_spend DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT c.customer_id, c.customer_name, SUM(s.sale_quantity) AS total_spend\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE c.country IN ('IT', 'ES') AND p.category = 'makeup'\nGROUP BY c.customer_id, c.customer_name\nORDER BY total_spend DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 1.8203701972961426, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 377, "prompt_eval_sec": null, "tokens_completion": 95, "completion_eval_sec": null, "tokens_total": 472, "tokens_per_sec": 259.2879188535813, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns (customer_id is included in the generated query but not the reference) and grouping strategy (reference groups by customer_name, generated groups by customer_id and customer_name). While both filter on 'IT'/'ES' and 'makeup', the generated query's additional column and grouping on primary key vs. name could lead to different results in cases with duplicate customer names. The LIMIT syntax also differs (LIMIT 3 vs FETCH FIRST 3 ROWS ONLY) but this doesn't affect semantic equivalence."}
{"example_id": 1515, "sql_complexity": "multiple_joins", "prompt": "What is the average age of clients who lost cases in the 'personal injury' category?", "context": "CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50)); INSERT INTO Cases (CaseID, ClientID, Category) VALUES (701, 7, 'Personal Injury'); CREATE TABLE Clients (ClientID int, Age int, Gender varchar(10)); INSERT INTO Clients (ClientID, Age, Gender) VALUES (7, 45, 'Male'); CREATE TABLE CaseOutcomes (CaseID int, Outcome varchar(50)); INSERT INTO CaseOutcomes (CaseID, Outcome) VALUES (701, 'Lost');", "reference_sql": "SELECT AVG(C.Age) as AvgAge FROM Clients C INNER JOIN Cases CA ON C.ClientID = CA.ClientID INNER JOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID WHERE CA.Category = 'Personal Injury' AND CO.Outcome = 'Lost';", "generated_sql": "SELECT AVG(c.Age) AS average_age\nFROM Clients c\nJOIN Cases ca ON c.ClientID = ca.ClientID\nJOIN CaseOutcomes co ON ca.CaseID = co.CaseID\nWHERE LOWER(ca.Category) = 'personal injury'\n  AND LOWER(co.Outcome) = 'lost';", "raw_model_output": "```sql\nSELECT AVG(c.Age) AS average_age\nFROM Clients c\nJOIN Cases ca ON c.ClientID = ca.ClientID\nJOIN CaseOutcomes co ON ca.CaseID = co.CaseID\nWHERE LOWER(ca.Category) = 'personal injury'\n  AND LOWER(co.Outcome) = 'lost';\n```", "latency_sec": 1.94227933883667, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 195, "prompt_eval_sec": null, "tokens_completion": 69, "completion_eval_sec": null, "tokens_total": 264, "tokens_per_sec": 135.92277625633554, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their WHERE clause conditions. The reference query uses exact string matches ('Personal Injury' and 'Lost'), while the generated query uses LOWER() to make comparisons case-insensitive. This could lead to different results if the database contains values with varying capitalization (e.g., 'personal injury' or 'LOST'). Although the provided sample data would return the same result, the generated query's case-insensitive logic makes them non-equivalent in general."}
{"example_id": 4388, "sql_complexity": "subqueries", "prompt": "Insert a new drug with a price 10% higher than the average price", "context": "CREATE TABLE drugs (drug_id INT, drug_name VARCHAR(50), price DECIMAL(10, 2)); INSERT INTO drugs (drug_id, drug_name, price) VALUES (1, 'DrugA', 50), (2, 'DrugB', 75), (3, 'DrugC', 100)", "reference_sql": "INSERT INTO drugs (drug_id, drug_name, price) VALUES ((SELECT MAX(drug_id) FROM drugs) + 1, 'DrugD', (SELECT AVG(price) * 1.1 FROM drugs))", "generated_sql": "INSERT INTO drugs (drug_name, price)\nVALUES ('NewDrug', (SELECT AVG(price) * 1.10 FROM drugs));", "raw_model_output": "```sql\nINSERT INTO drugs (drug_name, price)\nVALUES ('NewDrug', (SELECT AVG(price) * 1.10 FROM drugs));\n```", "latency_sec": 1.4202568531036377, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 149, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 181, "tokens_per_sec": 127.4417367566064, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL explicitly sets drug_id to (MAX(drug_id) + 1) and uses 'DrugD' as the drug_name, while the Generated SQL omits drug_id (assuming auto-increment or default) and uses 'NewDrug' as the drug_name. Additionally, the price calculation is identical, but the missing drug_id handling and different drug_name make the results distinct."}
{"example_id": 5431, "sql_complexity": "basic SQL", "prompt": "What is the average CO2 emission of ride-hailing vehicles in San Francisco?", "context": "CREATE TABLE SFRideHailing (id INT, company VARCHAR(20), co2_emission DECIMAL(5,2));", "reference_sql": "SELECT AVG(co2_emission) FROM SFRideHailing WHERE company = 'Uber';", "generated_sql": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "raw_model_output": "```sql\nSELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;\n```", "latency_sec": 0.6285848617553711, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 110, "prompt_eval_sec": null, "tokens_completion": 26, "completion_eval_sec": null, "tokens_total": 136, "tokens_per_sec": 216.35901256070602, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average co2_emission specifically for rides from 'Uber', while the Generated SQL calculates the average for all companies in the table. The WHERE clause in the Reference SQL restricts the data, making the results different unless all entries are from Uber."}
{"example_id": 3531, "sql_complexity": "single join", "prompt": "What is the total number of workouts and total workout time per user for users with a membership type of 'Basic'?", "context": "CREATE TABLE Members (id INT, user_name VARCHAR, membership_type VARCHAR, signup_date DATE); CREATE TABLE Workouts (id INT, user_id INT, workout_date DATE, workout_duration INT); INSERT INTO Members (id, user_name, membership_type, signup_date) VALUES (1, 'John Doe', 'Premium', '2020-01-01'), (2, 'Jane Smith', 'Basic', '2019-06-15'), (3, 'Alice Johnson', 'Premium', '2020-03-20'); INSERT INTO Workouts (id, user_id, workout_date, workout_duration) VALUES (1, 1, '2020-01-01', 60), (2, 1, '2020-01-02', 70), (3, 2, '2019-06-15', 90), (4, 3, '2020-03-20', 65), (5, 3, '2020-03-21', 70);", "reference_sql": "SELECT Members.user_name, SUM(Workouts.workout_duration) AS total_workout_time, COUNT(Workouts.id) AS total_workouts FROM Members JOIN Workouts ON Members.id = Workouts.user_id WHERE Members.membership_type = 'Basic' GROUP BY Members.user_name;", "generated_sql": "SELECT\n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    COALESCE(SUM(w.workout_duration), 0) AS total_workout_time\nFROM\n    Members m\nLEFT JOIN\n    Workouts w ON m.id = w.user_id\nWHERE\n    m.membership_type = 'Basic'\nGROUP BY\n    m.user_name;", "raw_model_output": "```sql\nSELECT\n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    COALESCE(SUM(w.workout_duration), 0) AS total_workout_time\nFROM\n    Members m\nLEFT JOIN\n    Workouts w ON m.id = w.user_id\nWHERE\n    m.membership_type = 'Basic'\nGROUP BY\n    m.user_name;\n```", "latency_sec": 0.9061081409454346, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 302, "prompt_eval_sec": null, "tokens_completion": 82, "completion_eval_sec": null, "tokens_total": 384, "tokens_per_sec": 423.7904756040861, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. 1) The generated query uses a LEFT JOIN, which would include 'Basic' members with no workouts (resulting in 0 for total_workouts and total_workout_time), while the reference query uses an INNER JOIN, excluding such members. 2) The generated query uses COALESCE to ensure 0 for null sums, whereas the reference query would return NULL for members with no workouts.  While they might return the same result for the provided sample data, they are not semantically equivalent in general."}
{"example_id": 5678, "sql_complexity": "set operations", "prompt": "How many public works projects are there in 'Sydney' and 'Melbourne' combined?", "context": "CREATE TABLE PublicWorksC(id INT, city VARCHAR(20), project VARCHAR(30)); INSERT INTO PublicWorksC(id, city, project) VALUES (1, 'Sydney', 'Park Renovation'), (2, 'Melbourne', 'Sidewalk Repair');", "reference_sql": "SELECT COUNT(*) FROM (SELECT city FROM PublicWorksC WHERE city = 'Sydney' UNION ALL SELECT city FROM PublicWorksC WHERE city = 'Melbourne') AS Total;", "generated_sql": "SELECT COUNT(*) AS total_projects\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "raw_model_output": "```sql\nSELECT COUNT(*) AS total_projects\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');\n```", "latency_sec": 1.0653841495513916, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 138, "prompt_eval_sec": null, "tokens_completion": 27, "completion_eval_sec": null, "tokens_total": 165, "tokens_per_sec": 154.87371392701652, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows in PublicWorksC where the city is either 'Sydney' or 'Melbourne'. The Reference SQL uses a UNION ALL to combine results from two separate selects and then counts all rows, while the Generated SQL uses IN to filter rows directly. Since UNION ALL preserves all rows (including duplicates) and the IN clause achieves the same filtering, the final count will be identical in both cases."}
{"example_id": 5792, "sql_complexity": "multiple_joins", "prompt": "How many cases were handled by attorneys in the 'Los Angeles' office?", "context": "CREATE TABLE offices (office_id INT, office_name VARCHAR(20), city VARCHAR(20), state VARCHAR(20)); INSERT INTO offices (office_id, office_name, city, state) VALUES (1, 'Boston', 'Boston', 'MA'), (2, 'New York', 'New York', 'NY'), (3, 'Los Angeles', 'Los Angeles', 'CA'); CREATE TABLE attorneys (attorney_id INT, office_id INT); INSERT INTO attorneys (attorney_id, office_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3);", "reference_sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.attorney_id JOIN offices ON attorneys.office_id = offices.office_id WHERE offices.city = 'Los Angeles';", "generated_sql": "SELECT COUNT(*) AS num_cases\nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nJOIN offices o ON a.office_id = o.office_id\nWHERE o.office_name = 'Los Angeles';", "raw_model_output": "```sql\nSELECT COUNT(*) AS num_cases\nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nJOIN offices o ON a.office_id = o.office_id\nWHERE o.office_name = 'Los Angeles';\n```", "latency_sec": 0.8191852569580078, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 245, "prompt_eval_sec": null, "tokens_completion": 51, "completion_eval_sec": null, "tokens_total": 296, "tokens_per_sec": 361.3346278950101, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters on 'offices.city = 'Los Angeles'', while the Generated SQL filters on 'o.office_name = 'Los Angeles''. Although the data in the sample shows that the office_name and city columns have matching values for the Los Angeles office, the queries are not semantically equivalent because they reference different columns. Semantically, 'city' and 'office_name' represent distinct attributes, and their values could differ in other scenarios. Thus, the conditions are not guaranteed to produce the same result in all cases."}
{"example_id": 5148, "sql_complexity": "window functions", "prompt": "List the unique types of smart city technologies that have been implemented in the top 3 most populous countries in the world.", "context": "CREATE TABLE smart_city_tech (tech_type VARCHAR(255), country VARCHAR(255)); CREATE TABLE country_populations (country VARCHAR(255), population INT);", "reference_sql": "SELECT DISTINCT tech_type FROM smart_city_tech SCT WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY population DESC) as rank FROM country_populations) CP WHERE rank <= 3);", "generated_sql": "SELECT DISTINCT sct.tech_type\nFROM smart_city_tech sct\nJOIN (\n    SELECT country\n    FROM country_populations\n    ORDER BY population DESC\n    LIMIT 3\n) top_countries ON sct.country = top_countries.country;", "raw_model_output": "```sql\nSELECT DISTINCT sct.tech_type\nFROM smart_city_tech sct\nJOIN (\n    SELECT country\n    FROM country_populations\n    ORDER BY population DESC\n    LIMIT 3\n) top_countries ON sct.country = top_countries.country;\n```", "latency_sec": 1.6798620223999023, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 57, "completion_eval_sec": null, "tokens_total": 180, "tokens_per_sec": 107.15165745746576, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve distinct tech_types from smart_city_tech where the country is among the top 3 most populous countries. The reference query uses ROW_NUMBER() to rank countries by population and filters for rank <= 3, while the generated query uses ORDER BY ... LIMIT 3. Both approaches correctly identify the top 3 countries by population, ensuring the same result set."}
{"example_id": 5547, "sql_complexity": "multiple_joins", "prompt": "Which species have a population growth rate higher than the average for protected areas?", "context": "CREATE TABLE species (id INT, name VARCHAR(50), population DECIMAL(5,2), protected_area_id INT, growth_rate DECIMAL(5,2)); INSERT INTO species (id, name, population, protected_area_id, growth_rate) VALUES (1, 'Species 1', 500.00, 1, 0.05), (2, 'Species 2', 800.00, 1, 0.03), (3, 'Species 3', 1200.00, 2, 0.07), (4, 'Species 4', 700.00, 2, 0.02); CREATE TABLE protected_areas (id INT, name VARCHAR(50)); INSERT INTO protected_areas (id, name) VALUES (1, 'Area 1'), (2, 'Area 2');", "reference_sql": "SELECT s.name, s.growth_rate FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id GROUP BY s.name, s.growth_rate HAVING s.growth_rate > (SELECT AVG(s.growth_rate) FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id);", "generated_sql": "SELECT name\nFROM species\nWHERE growth_rate > (SELECT AVG(growth_rate) FROM species);", "raw_model_output": "```sql\nSELECT name\nFROM species\nWHERE growth_rate > (SELECT AVG(growth_rate) FROM species);\n```", "latency_sec": 1.4040634632110596, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 260, "prompt_eval_sec": null, "tokens_completion": 25, "completion_eval_sec": null, "tokens_total": 285, "tokens_per_sec": 202.98227784391727, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL returns two columns (name and growth_rate) and groups by both, while the Generated SQL returns only the name. Additionally, the Reference SQL's HAVING clause operates on grouped data, which could produce different row counts compared to the Generated SQL's WHERE clause. Although the subqueries for average growth_rate are equivalent (both calculate the same average), the final result sets differ in structure and potential row counts."}
{"example_id": 5498, "sql_complexity": "aggregation", "prompt": "Identify the destinations with the highest number of repeat visitors from the US.", "context": "CREATE TABLE RepeatTravelers (Visitor VARCHAR(20), Destination VARCHAR(20), VisitCount INT); INSERT INTO RepeatTravelers (Visitor, Destination, VisitCount) VALUES ('David', 'Paris', 3), ('Ella', 'London', 4), ('Fiona', 'Paris', 2);", "reference_sql": "SELECT Destination, AVG(VisitCount) AS AvgVisitCount FROM RepeatTravelers WHERE Visitor LIKE '%USA%' GROUP BY Destination ORDER BY AvgVisitCount DESC;", "generated_sql": "SELECT Destination\nFROM RepeatTravelers\nGROUP BY Destination\nHAVING COUNT(Visitor) = (\n    SELECT MAX(VisitorCount)\n    FROM (\n        SELECT COUNT(Visitor) AS VisitorCount\n        FROM RepeatTravelers\n        GROUP BY Destination\n    ) AS Counts\n)", "raw_model_output": "```sql\nSELECT Destination\nFROM RepeatTravelers\nGROUP BY Destination\nHAVING COUNT(Visitor) = (\n    SELECT MAX(VisitorCount)\n    FROM (\n        SELECT COUNT(Visitor) AS VisitorCount\n        FROM RepeatTravelers\n        GROUP BY Destination\n    ) AS Counts\n)\n```", "latency_sec": 1.4082598686218262, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 143, "prompt_eval_sec": null, "tokens_completion": 62, "completion_eval_sec": null, "tokens_total": 205, "tokens_per_sec": 145.56972371911755, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average VisitCount per destination for travelers with 'USA' in their name, while the Generated SQL finds destinations with the maximum number of visitors. The sample data has no 'USA' visitors, making Reference SQL return empty. The Generated SQL returns 'Paris' as it has 2 visitors (max count). They perform different operations and produce different results."}
{"example_id": 3546, "sql_complexity": "window functions", "prompt": "What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?", "context": "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", "reference_sql": "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';", "generated_sql": "SELECT ce.exchange_name, bc.company_name\nFROM cryptocurrency_exchanges ce\nJOIN blockchain_companies bc ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "raw_model_output": "```sql\nSELECT ce.exchange_name, bc.company_name\nFROM cryptocurrency_exchanges ce\nJOIN blockchain_companies bc ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;\n```", "latency_sec": 1.0068359375, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 285, "prompt_eval_sec": null, "tokens_completion": 48, "completion_eval_sec": null, "tokens_total": 333, "tokens_per_sec": 330.73908826382154, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL includes an additional 'exchange_id' column and a 'rank' column generated by ROW_NUMBER(), while the Generated SQL omits these. Additionally, the Reference SQL does not have an ORDER BY clause, whereas the Generated SQL orders results by 'exchange_id'. The presence of different columns and sorting logic means the result sets differ."}
{"example_id": 486, "sql_complexity": "single join", "prompt": "What is the average price of paintings from African artists in our collection?", "context": "CREATE TABLE Artworks (id INT, title VARCHAR(50), price DECIMAL(10,2), medium VARCHAR(50), artist_nationality VARCHAR(50)); CREATE TABLE Collections (id INT, name VARCHAR(50), continent VARCHAR(50));", "reference_sql": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Collections ON Artworks.artist_nationality = Collections.continent WHERE Artworks.medium = 'Painting' AND Collections.continent = 'Africa';", "generated_sql": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'painting' AND artist_nationality = 'African';", "raw_model_output": "```sql\nSELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'painting' AND artist_nationality = 'African';\n```", "latency_sec": 1.026930809020996, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 132, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 164, "tokens_per_sec": 159.6991720954853, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their filtering conditions and join logic. The Reference SQL joins Artworks with Collections on artist_nationality = continent and filters Collections.continent = 'Africa', while the Generated SQL directly filters Artworks.artist_nationality = 'African' without any join. The values 'Africa' (continent) and 'African' (nationality) are distinct, leading to different result sets."}
{"example_id": 794, "sql_complexity": "multiple_joins", "prompt": "Which suppliers have provided raw materials for the production of chemicals with high environmental impact?", "context": "CREATE TABLE suppliers (id INT, name TEXT); INSERT INTO suppliers (id, name) VALUES (1, 'Supplier1'), (2, 'Supplier2'), (3, 'Supplier3'); CREATE TABLE chemicals (id INT, name TEXT, environmental_impact INT); INSERT INTO chemicals (id, name, environmental_impact) VALUES (1, 'ChemA', 10), (2, 'ChemB', 20), (3, 'ChemC', 15); CREATE TABLE raw_materials (chemical_id INT, supplier_id INT); INSERT INTO raw_materials (chemical_id, supplier_id) VALUES (1, 1), (1, 2), (2, 3), (3, 1);", "reference_sql": "SELECT s.name FROM suppliers s INNER JOIN raw_materials rm ON s.id = rm.supplier_id INNER JOIN chemicals c ON rm.chemical_id = c.id WHERE c.environmental_impact > 10;", "generated_sql": "SELECT DISTINCT s.id, s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > 15;", "raw_model_output": "```sql\nSELECT DISTINCT s.id, s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > 15;\n```", "latency_sec": 1.1484251022338867, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 232, "prompt_eval_sec": null, "tokens_completion": 53, "completion_eval_sec": null, "tokens_total": 285, "tokens_per_sec": 248.1659443403191, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the environmental impact threshold (10 vs 15) and selected columns. The Reference SQL filters chemicals with environmental_impact > 10, while the Generated SQL uses > 15. This changes the qualifying chemicals (ChemB/ChemC vs only ChemB) and the output columns (name vs id+name)."}
{"example_id": 3164, "sql_complexity": "set operations", "prompt": "What is the average age of patients who received therapy in 'clinic_a' and 'clinic_b'?", "context": "CREATE TABLE clinic_a (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_a (patient_id, age, therapy_received) VALUES (1, 35, true), (2, 42, true), (3, 28, false); CREATE TABLE clinic_b (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_b (patient_id, age, therapy_received) VALUES (4, 50, true), (5, 32, false), (6, 45, true);", "reference_sql": "SELECT AVG(age) FROM (SELECT age FROM clinic_a WHERE therapy_received = true UNION ALL SELECT age FROM clinic_b WHERE therapy_received = true) AS combined_clinics;", "generated_sql": "SELECT AVG(age) AS average_age\nFROM (\n    SELECT age FROM clinic_a WHERE therapy_received = TRUE\n    UNION ALL\n    SELECT age FROM clinic_b WHERE therapy_received = TRUE\n) AS combined_therapy_patients;", "raw_model_output": "```sql\nSELECT AVG(age) AS average_age\nFROM (\n    SELECT age FROM clinic_a WHERE therapy_received = TRUE\n    UNION ALL\n    SELECT age FROM clinic_b WHERE therapy_received = TRUE\n) AS combined_therapy_patients;\n```", "latency_sec": 1.4929540157318115, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 196, "prompt_eval_sec": null, "tokens_completion": 51, "completion_eval_sec": null, "tokens_total": 247, "tokens_per_sec": 165.4438096533913, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of patients who received therapy from both clinics. The structure of the subquery (using UNION ALL to combine ages from clinic_a and clinic_b where therapy_received = true) is identical, and the only differences are in table aliases (combined_clinics vs. combined_therapy_patients) and a column alias (average_age). These syntactic variations do not affect the semantic result."}
{"example_id": 3704, "sql_complexity": "aggregation", "prompt": "What is the total sales revenue for each category of garments in the South America region in Q1 2022?", "context": "CREATE TABLE sales_category (sale_id INT, garment_category VARCHAR(50), sale_date DATE, total_sales DECIMAL(10, 2), region VARCHAR(50));", "reference_sql": "SELECT garment_category, SUM(total_sales) FROM sales_category WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31' AND region = 'South America' GROUP BY garment_category;", "generated_sql": "SELECT\n    garment_category,\n    SUM(total_sales) AS total_sales_revenue\nFROM\n    sales_category\nWHERE\n    region = 'South America'\n    AND sale_date >= '2022-01-01'\n    AND sale_date < '2022-04-01'\nGROUP BY\n    garment_category;", "raw_model_output": "```sql\nSELECT\n    garment_category,\n    SUM(total_sales) AS total_sales_revenue\nFROM\n    sales_category\nWHERE\n    region = 'South America'\n    AND sale_date >= '2022-01-01'\n    AND sale_date < '2022-04-01'\nGROUP BY\n    garment_category;\n```", "latency_sec": 0.9058818817138672, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 124, "prompt_eval_sec": null, "tokens_completion": 70, "completion_eval_sec": null, "tokens_total": 194, "tokens_per_sec": 214.15595555677208, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries aggregate total_sales by garment_category for 'South America' region. The date range in the Generated SQL ('sale_date >= '2022-01-01' AND sale_date < '2022-04-01'') is equivalent to the Reference SQL's 'sale_date BETWEEN '2022-01-01' AND '2022-03-31'' because the upper bound in the Generated SQL is exclusive, covering the same period. The column alias difference does not affect semantic equivalence."}
{"example_id": 2851, "sql_complexity": "single join", "prompt": "How many cases were handled by attorneys who joined the firm in 2015 or later?", "context": "CREATE TABLE attorneys (attorney_id INT, join_year INT); CREATE TABLE cases (case_id INT, attorney_id INT, billing_amount INT);", "reference_sql": "SELECT COUNT(DISTINCT cases.case_id) FROM cases INNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id WHERE attorneys.join_year >= 2015;", "generated_sql": "SELECT COUNT(*) AS num_cases\nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nWHERE a.join_year >= 2015;", "raw_model_output": "```sql\nSELECT COUNT(*) AS num_cases\nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nWHERE a.join_year >= 2015;\n```", "latency_sec": 0.8779220581054688, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 114, "prompt_eval_sec": null, "tokens_completion": 39, "completion_eval_sec": null, "tokens_total": 153, "tokens_per_sec": 174.27515186276298, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct case_ids from the joined cases and attorneys tables where join_year is >= 2015. The reference query explicitly uses COUNT(DISTINCT cases.case_id), while the generated query uses COUNT(*). Since each case_id in the cases table is unique (implied by typical database design where case_id would be a primary key), COUNT(*) and COUNT(DISTINCT case_id) would produce the same result. The join condition ensures each case is linked to exactly one attorney, so no duplicates are introduced in the case_id column."}
{"example_id": 3246, "sql_complexity": "single join", "prompt": "What is the average eco-friendliness score of accommodations in Oceania by year?", "context": "CREATE TABLE Accommodations (Accommodation_ID INT, Accommodation_Name VARCHAR(50), City VARCHAR(30), Country VARCHAR(50), Eco_Friendliness_Score INT, Visit_Year INT); INSERT INTO Accommodations (Accommodation_ID, Accommodation_Name, City, Country, Eco_Friendliness_Score, Visit_Year) VALUES (1, 'EcoLodge', 'Sydney', 'Australia', 85, 2019), (2, 'GreenHotel', 'Melbourne', 'Australia', 90, 2019), (3, 'SustainableResort', 'Auckland', 'New Zealand', 80, 2019), (4, 'EcoVilla', 'Wellington', 'New Zealand', 88, 2019); CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(30)); INSERT INTO Countries (Country, Continent) VALUES ('Australia', 'Oceania'), ('New Zealand', 'Oceania');", "reference_sql": "SELECT C.Continent, V.Visit_Year, AVG(A.Eco_Friendliness_Score) AS Avg_Eco_Score  FROM Accommodations A  JOIN Countries C  ON A.Country = C.Country  WHERE C.Continent = 'Oceania'  GROUP BY C.Continent, V.Visit_Year  ORDER BY V.Visit_Year;", "generated_sql": "SELECT \n    a.Visit_Year,\n    AVG(a.Eco_Friendliness_Score) AS Average_Eco_Friendliness_Score\nFROM \n    Accommodations a\nJOIN \n    Countries c ON a.Country = c.Country\nWHERE \n    c.Continent = 'Oceania'\nGROUP BY \n    a.Visit_Year\nORDER BY \n    a.Visit_Year;", "raw_model_output": "```sql\nSELECT \n    a.Visit_Year,\n    AVG(a.Eco_Friendliness_Score) AS Average_Eco_Friendliness_Score\nFROM \n    Accommodations a\nJOIN \n    Countries c ON a.Country = c.Country\nWHERE \n    c.Continent = 'Oceania'\nGROUP BY \n    a.Visit_Year\nORDER BY \n    a.Visit_Year;\n```", "latency_sec": 2.0624587535858154, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 281, "prompt_eval_sec": null, "tokens_completion": 85, "completion_eval_sec": null, "tokens_total": 366, "tokens_per_sec": 177.45809430790703, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'Continent' in the SELECT and GROUP BY clauses, while the Generated SQL omits it. Although the WHERE clause filters for 'Oceania', the output structure differs (extra column in Reference). Semantic equivalence requires identical result sets, which is not the case here."}
{"example_id": 3056, "sql_complexity": "multiple_joins", "prompt": "Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.", "context": "CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);", "reference_sql": "SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;", "generated_sql": "SELECT DISTINCT s.*\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE\n  AND r.numStars IS NOT NULL\n  AND r.numStars > 0;", "raw_model_output": "```sql\nSELECT DISTINCT s.*\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE\n  AND r.numStars IS NOT NULL\n  AND r.numStars > 0;\n```", "latency_sec": 0.8795499801635742, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 134, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 197, "tokens_per_sec": 223.97817570681195, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their WHERE conditions. The Reference SQL requires Restaurants.numStars > 2, while the Generated SQL checks for r.numStars IS NOT NULL AND r.numStars > 0. This means the Generated SQL includes restaurants with 1 or 2 stars (if numStars is not null), whereas the Reference SQL excludes them. Additionally, the Generated SQL uses DISTINCT s.* while the Reference selects Suppliers.name, but the core discrepancy lies in the filtering conditions."}
{"example_id": 264, "sql_complexity": "set operations", "prompt": "List the number of community health centers and infectious disease tracking facilities in 'southwest' regions.", "context": "CREATE TABLE centers (id INT, name TEXT, region TEXT); INSERT INTO centers (id, name, region) VALUES (1, 'Center A', 'southwest'); INSERT INTO centers (id, name, region) VALUES (2, 'Center B', 'northeast'); INSERT INTO centers (id, name, region) VALUES (3, 'Center C', 'northwest'); CREATE TABLE diseases (id INT, name TEXT, region TEXT); INSERT INTO diseases (id, name, region) VALUES (1, 'Disease A', 'southwest'); INSERT INTO diseases (id, name, region) VALUES (2, 'Disease B', 'southeast');", "reference_sql": "SELECT COUNT(*) FROM ( (SELECT * FROM centers WHERE region = 'southwest') UNION (SELECT * FROM diseases WHERE region = 'southwest') );", "generated_sql": "SELECT\n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS num_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS num_disease_facilities;", "raw_model_output": "```sql\nSELECT\n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS num_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS num_disease_facilities;\n```", "latency_sec": 0.8093440532684326, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 224, "prompt_eval_sec": null, "tokens_completion": 48, "completion_eval_sec": null, "tokens_total": 272, "tokens_per_sec": 336.0746259907177, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL counts the total number of unique rows from both tables combined (using UNION), while the Generated SQL returns separate counts for each table. The Reference SQL would return a single value (e.g., 2 in the sample data), whereas the Generated SQL returns two separate values (e.g., 1 and 1). The result structures and semantics differ."}
{"example_id": 2838, "sql_complexity": "basic SQL", "prompt": "What is the minimum safety rating of electric vehicles in the 'green_cars' table?", "context": "CREATE TABLE green_cars (id INT, make VARCHAR(50), model VARCHAR(50), type VARCHAR(50), safety_rating INT);", "reference_sql": "SELECT MIN(safety_rating) FROM green_cars WHERE type = 'Electric';", "generated_sql": "SELECT MIN(safety_rating) AS min_safety_rating\nFROM green_cars\nWHERE type = 'electric';", "raw_model_output": "```sql\nSELECT MIN(safety_rating) AS min_safety_rating\nFROM green_cars\nWHERE type = 'electric';\n```", "latency_sec": 0.733605146408081, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 113, "prompt_eval_sec": null, "tokens_completion": 28, "completion_eval_sec": null, "tokens_total": 141, "tokens_per_sec": 192.20148698570637, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the case of the string literal in the WHERE clause ('Electric' vs. 'electric'). Unless the database is explicitly case-sensitive, this could lead to different results if the 'type' column contains values with varying casing. While column aliases (AS min_safety_rating) do not affect semantic equivalence, the case-sensitive filter makes the queries non-equivalent in general."}
{"example_id": 1187, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 authors with the highest number of articles published in The Guardian?", "context": "CREATE TABLE authors (id INT, name VARCHAR(100), publisher VARCHAR(50)); CREATE TABLE articles_authors (article_id INT, author_id INT); INSERT INTO authors (id, name, publisher) VALUES (1, 'Author1', 'The Guardian'), (2, 'Author2', 'The Guardian'), (3, 'Author3', 'The Guardian'); INSERT INTO articles_authors (article_id, author_id) VALUES (1, 1), (2, 2), (3, 1), (3, 2), (3, 3); INSERT INTO articles (id, title, publication_date, publisher) VALUES (1, 'Article1', '2021-01-01', 'The Guardian'), (2, 'Article2', '2021-01-02', 'The Guardian'), (3, 'Article3', '2021-01-03', 'The Guardian');", "reference_sql": "SELECT a.name, COUNT(aa.article_id) AS articles_count FROM authors a JOIN articles_authors aa ON a.id = aa.author_id JOIN articles ar ON aa.article_id = ar.id WHERE ar.publisher = 'The Guardian' GROUP BY a.name ORDER BY articles_count DESC LIMIT 3;", "generated_sql": "SELECT a.name, COUNT(DISTINCT aa.article_id) AS article_count\nFROM authors a\nJOIN articles_authors aa ON a.id = aa.author_id\nJOIN articles ar ON aa.article_id = ar.id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.id, a.name\nORDER BY article_count DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT a.name, COUNT(DISTINCT aa.article_id) AS article_count\nFROM authors a\nJOIN articles_authors aa ON a.id = aa.author_id\nJOIN articles ar ON aa.article_id = ar.id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.id, a.name\nORDER BY article_count DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 1.6395399570465088, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 274, "prompt_eval_sec": null, "tokens_completion": 79, "completion_eval_sec": null, "tokens_total": 353, "tokens_per_sec": 215.3042983081055, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the number of articles per author from 'The Guardian' and order them descending. The differences (COUNT(DISTINCT) vs COUNT, GROUP BY id+name vs name) don't affect results in this specific dataset. The LIMIT clause is functionally equivalent (LIMIT 3 vs FETCH FIRST 3 ROWS ONLY)."}
{"example_id": 360, "sql_complexity": "window functions", "prompt": "What is the change in crime rate for each category, between this year and last year, for the same time period?", "context": "CREATE TABLE CrimeStatistics (ID INT, CrimeType VARCHAR(50), Date TIMESTAMP, Count INT); INSERT INTO CrimeStatistics (ID, CrimeType, Date, Count) VALUES (1, 'Theft', '2022-01-01 00:00:00', 100), (2, 'Vandalism', '2022-01-01 00:00:00', 50), (3, 'Theft', '2022-01-02 00:00:00', 120), (4, 'Vandalism', '2022-01-02 00:00:00', 60), (5, 'Theft', '2021-01-01 00:00:00', 80), (6, 'Vandalism', '2021-01-01 00:00:00', 40), (7, 'Theft', '2021-01-02 00:00:00', 90), (8, 'Vandalism', '2021-01-02 00:00:00', 45);", "reference_sql": "SELECT CrimeType, (SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date) ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) - SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date)) AS CrimeRateChange FROM CrimeStatistics WHERE Date BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND CURRENT_DATE;", "generated_sql": "SELECT\n    c.CrimeType,\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) THEN c.Count ELSE 0 END) AS ThisYearCount,\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN c.Count ELSE 0 END) AS LastYearCount,\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) THEN c.Count ELSE 0 END) -\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN c.Count ELSE 0 END) AS ChangeInCount\nFROM\n    CrimeStatistics c\nWHERE\n    -- Restrict to dates in the same period (matching month and day)\n    (EXTRACT(MONTH FROM c.Date), EXTRACT(DAY FROM c.Date)) IN (\n        SELECT EXTRACT(MONTH FROM Date), EXTRACT(DAY FROM Date)\n        FROM CrimeStatistics\n        WHERE EXTRACT(YEAR FROM Date) = EXTRACT(YEAR FROM CURRENT_DATE)\n    )\n    AND EXTRACT(YEAR FROM c.Date) IN (EXTRACT(YEAR FROM CURRENT_DATE), EXTRACT(YEAR FROM CURRENT_DATE) - 1)\nGROUP BY\n    c.CrimeType;", "raw_model_output": "```sql\nSELECT\n    c.CrimeType,\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) THEN c.Count ELSE 0 END) AS ThisYearCount,\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN c.Count ELSE 0 END) AS LastYearCount,\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) THEN c.Count ELSE 0 END) -\n    SUM(CASE WHEN EXTRACT(YEAR FROM c.Date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 THEN c.Count ELSE 0 END) AS ChangeInCount\nFROM\n    CrimeStatistics c\nWHERE\n    -- Restrict to dates in the same period (matching month and day)\n    (EXTRACT(MONTH FROM c.Date), EXTRACT(DAY FROM c.Date)) IN (\n        SELECT EXTRACT(MONTH FROM Date), EXTRACT(DAY FROM Date)\n        FROM CrimeStatistics\n        WHERE EXTRACT(YEAR FROM Date) = EXTRACT(YEAR FROM CURRENT_DATE)\n    )\n    AND EXTRACT(YEAR FROM c.Date) IN (EXTRACT(YEAR FROM CURRENT_DATE), EXTRACT(YEAR FROM CURRENT_DATE) - 1)\nGROUP BY\n    c.CrimeType;\n```", "latency_sec": 4.85020112991333, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 323, "prompt_eval_sec": null, "tokens_completion": 286, "completion_eval_sec": null, "tokens_total": 609, "tokens_per_sec": 125.56180325059684, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in date filtering and calculation logic. The Reference SQL uses window functions to compare year-over-year sums within a 1-year range, while the Generated SQL restricts to exact month/day matches across years and calculates differences via conditional aggregation. The Generated SQL's WHERE clause filters for same month/day across years, whereas the Reference SQL includes all dates in the last year. Additionally, their calculation methods (window functions vs. conditional sums) produce different results for overlapping data."}
{"example_id": 335, "sql_complexity": "single join", "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000", "context": "CREATE TABLE policies (policy_number INT);CREATE TABLE claims (claim_id INT, policy_number INT, claim_amount DECIMAL(10,2), claim_date DATE);", "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "generated_sql": "SELECT c.policy_number, c.claim_amount, c.claim_date\nFROM claims c\nWHERE c.policy_number IN (\n    SELECT policy_number\n    FROM claims\n    GROUP BY policy_number\n    HAVING COUNT(*) > 2 AND SUM(claim_amount) > 5000\n)", "raw_model_output": "```sql\nSELECT c.policy_number, c.claim_amount, c.claim_date\nFROM claims c\nWHERE c.policy_number IN (\n    SELECT policy_number\n    FROM claims\n    GROUP BY policy_number\n    HAVING COUNT(*) > 2 AND SUM(claim_amount) > 5000\n)\n```", "latency_sec": 1.1828889846801758, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 129, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 192, "tokens_per_sec": 162.31447116900162, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query groups by policy_number, claim_amount, and claim_date, requiring each unique combination to have >2 claims and sum >5000. The generated query selects all claims for policies with >2 total claims and sum >5000, without grouping by claim_amount/date. This means the generated query returns all claims for qualifying policies, while the reference query only returns specific (policy, amount, date) combinations that meet the HAVING conditions. The grouping logic and result sets differ."}
{"example_id": 2866, "sql_complexity": "basic SQL", "prompt": "What is the number of hospitals in 'rural_healthcare' table?", "context": "CREATE TABLE rural_healthcare (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO rural_healthcare (name, type, location) VALUES ('Rural General Hospital', 'Hospital', 'Bushland'), ('Rural Community Hospital', 'Hospital', 'Forest Region');", "reference_sql": "SELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "generated_sql": "SELECT COUNT(*) AS number_of_hospitals\nFROM rural_healthcare\nWHERE type = 'Hospital';", "raw_model_output": "```sql\nSELECT COUNT(*) AS number_of_hospitals\nFROM rural_healthcare\nWHERE type = 'Hospital';\n```", "latency_sec": 1.3591201305389404, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 142, "prompt_eval_sec": null, "tokens_completion": 26, "completion_eval_sec": null, "tokens_total": 168, "tokens_per_sec": 123.60938244169918, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows where type = 'Hospital'. The generated query adds an alias (number_of_hospitals) to the COUNT(*) result, but this does not affect the actual value returned. The semantic result (a single numeric count) remains identical."}
{"example_id": 4440, "sql_complexity": "multiple_joins", "prompt": "What is the average session length for each game genre in the last month, sorted by average session length.", "context": "CREATE TABLE game_sessions(id INT, user_id INT, game_name VARCHAR(50), start_time DATETIME, end_time DATETIME); CREATE TABLE games(id INT, name VARCHAR(50), genre VARCHAR(50));", "reference_sql": "SELECT genres.genre, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) as avg_session_length FROM game_sessions JOIN games ON game_sessions.game_name = games.name JOIN (SELECT DISTINCT game_name, genre FROM game_sessions JOIN games ON game_sessions.game_name = games.name) genres ON games.name = genres.game_name WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY genres.genre ORDER BY avg_session_length DESC;", "generated_sql": "SELECT\n    g.genre,\n    AVG(TIMESTAMPDIFF(SECOND, gs.start_time, gs.end_time)) AS avg_session_length_seconds\nFROM\n    game_sessions gs\n    JOIN games g ON gs.game_name = g.name\nWHERE\n    gs.start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY\n    g.genre\nORDER BY\n    avg_session_length_seconds;", "raw_model_output": "```sql\nSELECT\n    g.genre,\n    AVG(TIMESTAMPDIFF(SECOND, gs.start_time, gs.end_time)) AS avg_session_length_seconds\nFROM\n    game_sessions gs\n    JOIN games g ON gs.game_name = g.name\nWHERE\n    gs.start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY\n    g.genre\nORDER BY\n    avg_session_length_seconds;\n```", "latency_sec": 1.3764190673828125, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 131, "prompt_eval_sec": null, "tokens_completion": 89, "completion_eval_sec": null, "tokens_total": 220, "tokens_per_sec": 159.83504240341443, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average session length per genre for game sessions in the last month. The Reference SQL includes a redundant subquery that selects distinct game_name and genre, but since the games table's name is unique, this subquery doesn't alter the final result. The Generated SQL simplifies the logic by directly joining game_sessions with games and grouping by genre, producing the same output as the Reference SQL."}
{"example_id": 451, "sql_complexity": "single join", "prompt": "Which customers have made a transaction over 500 in the \"risk_management\" category?", "context": "CREATE TABLE customers (id INT, name VARCHAR(50), category VARCHAR(50)); INSERT INTO customers (id, name, category) VALUES (1, 'John Doe', 'risk_management'); INSERT INTO customers (id, name, category) VALUES (2, 'Jane Smith', 'compliance'); INSERT INTO customers (id, name, category) VALUES (3, 'Jim Brown', 'risk_management'); CREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10, 2)); INSERT INTO transactions (id, customer_id, amount) VALUES (1, 1, 500.00); INSERT INTO transactions (id, customer_id, amount) VALUES (2, 1, 200.00); INSERT INTO transactions (id, customer_id, amount) VALUES (3, 2, 100.00); INSERT INTO transactions (id, customer_id, amount) VALUES (4, 3, 750.00);", "reference_sql": "SELECT c.name FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE c.category = 'risk_management' AND t.amount > 500;", "generated_sql": "SELECT DISTINCT c.id, c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management'\n  AND t.amount > 500;", "raw_model_output": "```sql\nSELECT DISTINCT c.id, c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management'\n  AND t.amount > 500;\n```", "latency_sec": 1.2142128944396973, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 279, "prompt_eval_sec": null, "tokens_completion": 44, "completion_eval_sec": null, "tokens_total": 323, "tokens_per_sec": 266.0159527864753, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects only 'name' from customers, while the Generated SQL selects 'id' and 'name' with a DISTINCT clause. Even though both filter for 'risk_management' category and transactions > 500, the output columns differ, and the Generated SQL's DISTINCT could affect results if duplicates existed. The schema and data provided show the core difference in selected columns."}
{"example_id": 2879, "sql_complexity": "basic SQL", "prompt": "Update the FoodSafetyRecords.OrganicFarms table to include a new record for a certified organic farm in Kenya.", "context": "CREATE TABLE FoodSafetyRecords.OrganicFarms (farmName TEXT, country TEXT, certified BOOLEAN);", "reference_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) VALUES ('Ngong Organic Farm', 'Kenya', TRUE);", "generated_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified)\nVALUES ('New Farm', 'Kenya', TRUE);", "raw_model_output": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified)\nVALUES ('New Farm', 'Kenya', TRUE);", "latency_sec": 1.2346763610839844, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 110, "prompt_eval_sec": null, "tokens_completion": 29, "completion_eval_sec": null, "tokens_total": 139, "tokens_per_sec": 112.5801095583987, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The two queries insert different values for the 'farmName' column ('Ngong Organic Farm' vs 'New Farm'). While the structure and other column values are identical, the semantic equivalence requires identical data in all inserted columns. Since the farm names differ, the resulting data would not be the same."}
{"example_id": 5688, "sql_complexity": "single join", "prompt": "What is the total amount donated to a specific cause?", "context": "CREATE TABLE causes (id INT, name TEXT); CREATE TABLE donations (id INT, donor_id INT, cause_id INT, donation_amount DECIMAL(10,2)); INSERT INTO causes (id, name) VALUES (1, 'Cause A'), (2, 'Cause B'); INSERT INTO donations (id, donor_id, cause_id, donation_amount) VALUES (1, 1, 1, 50.00), (2, 2, 1, 100.00);", "reference_sql": "SELECT SUM(donation_amount) FROM donations JOIN causes ON donations.cause_id = causes.id WHERE causes.name = 'Cause A';", "generated_sql": "SELECT c.name, SUM(d.donation_amount) AS total_donated\nFROM causes c\nJOIN donations d ON c.id = d.cause_id\nWHERE c.name = 'Cause A' -- replace 'Cause A' with the specific cause name\nGROUP BY c.name;", "raw_model_output": "```sql\nSELECT c.name, SUM(d.donation_amount) AS total_donated\nFROM causes c\nJOIN donations d ON c.id = d.cause_id\nWHERE c.name = 'Cause A' -- replace 'Cause A' with the specific cause name\nGROUP BY c.name;\n```", "latency_sec": 0.906378984451294, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 179, "prompt_eval_sec": null, "tokens_completion": 62, "completion_eval_sec": null, "tokens_total": 241, "tokens_per_sec": 265.8931905243778, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single value (the sum of donations for 'Cause A'), while the Generated SQL returns two columns (cause name and total donations). Although both calculate the same sum, their result structures differ, making them semantically non-equivalent."}
{"example_id": 3273, "sql_complexity": "multiple_joins", "prompt": "List all departments, the number of chemicals they handle, and the number of machines used in their manufacturing processes.", "context": "CREATE TABLE Departments (DepartmentID INT, DepartmentName VARCHAR(20)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Manufacturing'), (2, 'Engineering'), (3, 'Chemical Safety'), (4, 'Product Development'); CREATE TABLE Chemicals (ChemicalID INT, ChemicalName VARCHAR(20), DepartmentID INT); INSERT INTO Chemicals (ChemicalID, ChemicalName, DepartmentID) VALUES (1, 'Hydrochloric Acid', 1), (2, 'Nitric Acid', 2), (3, 'Sodium Hydroxide', 3), (4, 'New Chemical', 4); CREATE TABLE Machinery (MachineID INT, MachineName VARCHAR(20), DepartmentID INT); INSERT INTO Machinery (MachineID, MachineName, DepartmentID) VALUES (1, 'Mixer 1', 1), (2, 'Cutter 2', 2), (3, 'Dispenser 3', 3), (4, 'Innovator 4', 4);", "reference_sql": "SELECT D.DepartmentName, COUNT(C.ChemicalID) AS ChemicalCount, COUNT(M.MachineID) AS MachineCount FROM Departments D LEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID LEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID GROUP BY D.DepartmentName;", "generated_sql": "SELECT \n    d.DepartmentName,\n    COUNT(DISTINCT c.ChemicalID) AS ChemicalCount,\n    COUNT(DISTINCT m.MachineID) AS MachineCount\nFROM \n    Departments d\nLEFT JOIN \n    Chemicals c ON d.DepartmentID = c.DepartmentID\nLEFT JOIN \n    Machinery m ON d.DepartmentID = m.DepartmentID\nGROUP BY \n    d.DepartmentID, d.DepartmentName;", "raw_model_output": "```sql\nSELECT \n    d.DepartmentName,\n    COUNT(DISTINCT c.ChemicalID) AS ChemicalCount,\n    COUNT(DISTINCT m.MachineID) AS MachineCount\nFROM \n    Departments d\nLEFT JOIN \n    Chemicals c ON d.DepartmentID = c.DepartmentID\nLEFT JOIN \n    Machinery m ON d.DepartmentID = m.DepartmentID\nGROUP BY \n    d.DepartmentID, d.DepartmentName;\n```", "latency_sec": 1.0609300136566162, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 299, "prompt_eval_sec": null, "tokens_completion": 89, "completion_eval_sec": null, "tokens_total": 388, "tokens_per_sec": 365.7168663394806, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Generated SQL uses COUNT(DISTINCT) which would differ from the Reference SQL if there were duplicate ChemicalID or MachineID values in the joined tables (though in the given data they are unique). Second, the GROUP BY clause in the Reference SQL uses only DepartmentName, while the Generated SQL includes both DepartmentID and DepartmentName. Since DepartmentName is not guaranteed to be unique, grouping by DepartmentName could combine departments with the same name, leading to different results in general cases. The Reference SQL's GROUP BY is also less precise without functional dependency on DepartmentID."}
{"example_id": 1895, "sql_complexity": "window functions", "prompt": "What is the average safety score of chemical production sites in the United States, partitioned by state and ranked in descending order?", "context": "CREATE TABLE production_sites (site_id INT, site_name TEXT, country TEXT, state TEXT, safety_score FLOAT); INSERT INTO production_sites (site_id, site_name, country, state, safety_score) VALUES (1, 'Site A', 'USA', 'NY', 92.5), (2, 'Site B', 'USA', 'CA', 87.4), (3, 'Site C', 'USA', 'TX', 95.3), (4, 'Site D', 'USA', 'FL', 89.2);", "reference_sql": "SELECT state, AVG(safety_score) as avg_safety_score, ROW_NUMBER() OVER (ORDER BY AVG(safety_score) DESC) as rank FROM production_sites WHERE country = 'USA' GROUP BY state ORDER BY rank;", "generated_sql": "SELECT\n  state,\n  AVG(safety_score) AS avg_safety_score\nFROM\n  production_sites\nWHERE\n  country = 'USA'\nGROUP BY\n  state\nORDER BY\n  avg_safety_score DESC;", "raw_model_output": "```sql\nSELECT\n  state,\n  AVG(safety_score) AS avg_safety_score\nFROM\n  production_sites\nWHERE\n  country = 'USA'\nGROUP BY\n  state\nORDER BY\n  avg_safety_score DESC;\n```", "latency_sec": 3.798750877380371, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 206, "prompt_eval_sec": null, "tokens_completion": 52, "completion_eval_sec": null, "tokens_total": 258, "tokens_per_sec": 67.91706229967824, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a 'rank' column generated by ROW_NUMBER() and orders by this rank, while the Generated SQL only orders by avg_safety_score DESC without the rank column. The presence of the additional 'rank' column in the Reference SQL makes the result sets structurally different, even if the ordering of rows might appear similar."}
{"example_id": 4669, "sql_complexity": "set operations", "prompt": "Identify the number of IoT devices in each country and the total number of devices.", "context": "CREATE TABLE device_country (device_id INT, country TEXT); INSERT INTO device_country (device_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'), (4, 'Brazil'); CREATE TABLE device_info (device_id INT, device_type TEXT); INSERT INTO device_info (device_id, device_type) VALUES (1, 'Soil Sensor'), (2, 'Temperature Sensor'), (3, 'Humidity Sensor'), (4, 'Precision Sprayer');", "reference_sql": "SELECT country, COUNT(*) AS device_count FROM device_country GROUP BY country UNION SELECT 'Total' AS country, COUNT(*) FROM device_country;", "generated_sql": "SELECT \n    country, \n    COUNT(*) AS num_devices\nFROM \n    device_country\nGROUP BY \n    country\n\nUNION ALL\n\nSELECT \n    'Total' AS country, \n    COUNT(*) AS num_devices\nFROM \n    device_country;", "raw_model_output": "```sql\nSELECT \n    country, \n    COUNT(*) AS num_devices\nFROM \n    device_country\nGROUP BY \n    country\n\nUNION ALL\n\nSELECT \n    'Total' AS country, \n    COUNT(*) AS num_devices\nFROM \n    device_country;\n```", "latency_sec": 2.161243200302124, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 186, "prompt_eval_sec": null, "tokens_completion": 57, "completion_eval_sec": null, "tokens_total": 243, "tokens_per_sec": 112.43528723006767, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result set. The Reference SQL uses UNION (which implicitly removes duplicates) while the Generated SQL uses UNION ALL. However, since the two parts of the query (country groups and the 'Total' row) cannot overlap in their output rows, the final results are identical. The 'Total' row is unique and distinct from the country rows, so duplication handling does not affect the outcome."}
{"example_id": 5302, "sql_complexity": "multiple_joins", "prompt": "Find the supplier with the lowest average delivery time for orders in the last month.", "context": "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", "reference_sql": "SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;", "generated_sql": "SELECT s.SupplierID, s.SupplierName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'\n  AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE)\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AVG(o.DeliveryTime) ASC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "```sql\nSELECT s.SupplierID, s.SupplierName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'\n  AND o.OrderDate < DATE_TRUNC('month', CURRENT_DATE)\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AVG(o.DeliveryTime) ASC\nFETCH FIRST 1 ROW ONLY;\n```", "latency_sec": 1.2131767272949219, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 215, "prompt_eval_sec": null, "tokens_completion": 105, "completion_eval_sec": null, "tokens_total": 320, "tokens_per_sec": 263.77030881025826, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects. 1) The date range condition: the Reference uses DATEADD(month, -1, GETDATE()) which is the same as the current date minus one month, while the Generated uses DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' which is the first day of the previous month. This results in different date ranges being considered. 2) The Generated query includes a FETCH FIRST 1 ROW ONLY clause, limiting the result to a single row, while the Reference does not. 3) The SELECT clause differs: the Reference selects SupplierName, while the Generated selects SupplierID and SupplierName. 4) The GROUP BY clause in the Generated includes SupplierID, while the Reference groups by SupplierName. These differences mean the queries will not produce the same results."}
{"example_id": 267, "sql_complexity": "subqueries", "prompt": "What is the total number of disability support programs offered in urban and rural areas, and the percentage of total programs for each area type?", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(255), area_type VARCHAR(255));", "reference_sql": "SELECT area_type, COUNT(*) as total_programs, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs) , 2) as percentage_of_total FROM programs WHERE area_type IN ('urban', 'rural') GROUP BY area_type;", "generated_sql": "SELECT\n  area_type,\n  COUNT(*) AS num_programs,\n  ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM programs), 2) AS percentage_of_total\nFROM programs\nWHERE area_type IN ('urban', 'rural')\nGROUP BY area_type;", "raw_model_output": "```sql\nSELECT\n  area_type,\n  COUNT(*) AS num_programs,\n  ROUND(100.0 * COUNT(*) / (SELECT COUNT(*) FROM programs), 2) AS percentage_of_total\nFROM programs\nWHERE area_type IN ('urban', 'rural')\nGROUP BY area_type;\n```", "latency_sec": 1.9470560550689697, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 114, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 177, "tokens_per_sec": 90.90647366787302, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operations: filtering by area_type ('urban'/'rural'), grouping by area_type, and calculating the count and percentage of total programs. The only differences are column alias names (total_programs vs num_programs) and the multiplication order in the percentage calculation (COUNT(*) * 100.0 vs 100.0 * COUNT*), which are mathematically equivalent. The subquery for total count is identical in both."}
{"example_id": 3028, "sql_complexity": "basic SQL", "prompt": "What is the number of startups founded by non-binary individuals in the technology industry?", "context": "CREATE TABLE company (id INT, name TEXT, founder_gender TEXT, industry TEXT); INSERT INTO company (id, name, founder_gender, industry) VALUES (1, 'CodeForAll', 'Non-binary', 'Technology'); INSERT INTO company (id, name, founder_gender, industry) VALUES (2, 'TechVillage', 'Male', 'Technology');", "reference_sql": "SELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "generated_sql": "SELECT COUNT(*) AS num_startups\nFROM company\nWHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "raw_model_output": "```sql\nSELECT COUNT(*) AS num_startups\nFROM company\nWHERE founder_gender = 'Non-binary' AND industry = 'Technology';\n```", "latency_sec": 0.6803839206695557, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 158, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 189, "tokens_per_sec": 277.78434242538816, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the same rows from the company table where founder_gender is 'Non-binary' and industry is 'Technology'. The generated query adds an alias (num_startups) for the COUNT(*) result, but this does not affect the semantic outcome as the value being counted remains identical."}
{"example_id": 3282, "sql_complexity": "aggregation", "prompt": "Which marine species have been observed in both the Arctic and Antarctic oceans?", "context": "CREATE TABLE marine_species (id INT, species_name VARCHAR(50), common_name VARCHAR(50), region VARCHAR(20));INSERT INTO marine_species (id, species_name, common_name, region) VALUES (1, 'Orcinus_orca', 'Killer Whale', 'Arctic');INSERT INTO marine_species (id, species_name, common_name, region) VALUES (2, 'Balaenoptera_bonaerensis', 'Antarctic Minke Whale', 'Antarctic');", "reference_sql": "SELECT species_name FROM marine_species WHERE region IN ('Arctic', 'Antarctic') GROUP BY species_name HAVING COUNT(DISTINCT region) = 2;", "generated_sql": "SELECT species_name, common_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name, common_name\nHAVING COUNT(DISTINCT region) = 2;", "raw_model_output": "```sql\nSELECT species_name, common_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name, common_name\nHAVING COUNT(DISTINCT region) = 2;\n```", "latency_sec": 0.7743902206420898, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 184, "prompt_eval_sec": null, "tokens_completion": 48, "completion_eval_sec": null, "tokens_total": 232, "tokens_per_sec": 299.5905601798999, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns (species_name vs. species_name+common_name) and grouping logic (grouping by species_name only vs. species_name and common_name). The Generated SQL includes an additional column and may group results differently, leading to different output structures and potentially different results when common_name varies across regions for the same species_name."}
{"example_id": 3474, "sql_complexity": "subqueries", "prompt": "What is the total transaction volume for the top 3 digital assets by market capitalization in the 'developed_markets' schema?", "context": "CREATE SCHEMA developed_markets; CREATE TABLE developed_markets.digital_assets (asset_name VARCHAR(10), market_cap BIGINT, daily_transaction_volume BIGINT); INSERT INTO developed_markets.digital_assets (asset_name, market_cap, daily_transaction_volume) VALUES ('AssetG', 30000000, 15000000), ('AssetH', 25000000, 12000000), ('AssetI', 20000000, 10000000), ('AssetJ', 15000000, 8000000), ('AssetK', 10000000, 6000000);", "reference_sql": "SELECT SUM(daily_transaction_volume) FROM (SELECT daily_transaction_volume FROM developed_markets.digital_assets ORDER BY market_cap DESC FETCH NEXT 3 ROWS ONLY) t;", "generated_sql": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n    SELECT daily_transaction_volume\n    FROM developed_markets.digital_assets\n    ORDER BY market_cap DESC\n    FETCH FIRST 3 ROWS ONLY\n) AS top_assets;", "raw_model_output": "```sql\nSELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n    SELECT daily_transaction_volume\n    FROM developed_markets.digital_assets\n    ORDER BY market_cap DESC\n    FETCH FIRST 3 ROWS ONLY\n) AS top_assets;\n```", "latency_sec": 0.9628407955169678, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 214, "prompt_eval_sec": null, "tokens_completion": 54, "completion_eval_sec": null, "tokens_total": 268, "tokens_per_sec": 278.34300462529285, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of daily_transaction_volume for the top 3 digital assets by market_cap. The only differences are syntax variations in the fetch clause (FETCH NEXT 3 ROWS ONLY vs FETCH FIRST 3 ROWS ONLY) and subquery aliasing, which do not affect the result. Both achieve the same ordering and row limitation."}
{"example_id": 1626, "sql_complexity": "aggregation", "prompt": "Find the total value of social impact bonds issued by each organization.", "context": "CREATE TABLE social_impact_bonds (id INT, organization_name VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO social_impact_bonds (id, organization_name, issue_year, value) VALUES (1, 'Acme Corp', 2018, 2000000), (2, 'XYZ Foundation', 2019, 3000000), (3, 'Global Giving', 2018, 1500000), (4, 'Acme Corp', 2019, 2500000), (5, 'XYZ Foundation', 2018, 1000000);", "reference_sql": "SELECT organization_name, SUM(value) as total_value FROM social_impact_bonds GROUP BY organization_name;", "generated_sql": "SELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "raw_model_output": "```sql\nSELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;\n```", "latency_sec": 1.006669044494629, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 205, "prompt_eval_sec": null, "tokens_completion": 28, "completion_eval_sec": null, "tokens_total": 233, "tokens_per_sec": 231.4564069236592, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select organization_name and sum the value column, grouping by organization_name. The only differences are whitespace and formatting (line breaks), which do not affect semantic equivalence."}
{"example_id": 1315, "sql_complexity": "single join", "prompt": "List all the transactions made by clients living in New York with a transaction amount greater than $1000.", "context": "CREATE TABLE transactions (id INT, client_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (id, client_id, transaction_amount, transaction_date) VALUES (1, 3, 1500.00, '2022-01-01'), (2, 4, 800.00, '2022-01-02'), (3, 3, 1200.00, '2022-01-03'); CREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');", "reference_sql": "SELECT transactions.id, transactions.client_id, transactions.transaction_amount, transactions.transaction_date FROM transactions INNER JOIN clients ON transactions.client_id = clients.id WHERE clients.state = 'New York' AND transactions.transaction_amount > 1000.00;", "generated_sql": "SELECT t.*\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York'\n  AND t.transaction_amount > 1000;", "raw_model_output": "```sql\nSELECT t.*\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York'\n  AND t.transaction_amount > 1000;\n```", "latency_sec": 0.7199952602386475, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 236, "prompt_eval_sec": null, "tokens_completion": 41, "completion_eval_sec": null, "tokens_total": 277, "tokens_per_sec": 384.7247548660062, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an INNER JOIN between transactions and clients on client_id, filter for clients in 'New York' and transactions with amount > 1000.00. The Reference SQL explicitly lists columns from transactions while the Generated SQL uses t.*, but since the transactions table has exactly those four columns, the result sets are identical."}
{"example_id": 520, "sql_complexity": "multiple_joins", "prompt": "What is the total number of electric vehicles sold in 'California' in the 'sales' schema?", "context": "CREATE TABLE sales_regions (id INT, name VARCHAR(50));   CREATE TABLE sales (id INT, region_id INT, vehicle_count INT);   CREATE TABLE vehicles (id INT, type VARCHAR(50));   INSERT INTO sales_regions VALUES (1, 'California');   INSERT INTO sales VALUES (1, 1, 5000);   INSERT INTO vehicles VALUES (1, 'electric');", "reference_sql": "SELECT SUM(sales.vehicle_count) FROM sales INNER JOIN sales_regions ON sales.region_id = sales_regions.id INNER JOIN vehicles ON sales.id = vehicles.id WHERE vehicles.type = 'electric' AND sales_regions.name = 'California';", "generated_sql": "SELECT SUM(s.vehicle_count) AS total_electric_vehicles_sold\nFROM sales s\nJOIN sales_regions r ON s.region_id = r.id\nWHERE r.name = 'California';", "raw_model_output": "```sql\nSELECT SUM(s.vehicle_count) AS total_electric_vehicles_sold\nFROM sales s\nJOIN sales_regions r ON s.region_id = r.id\nWHERE r.name = 'California';\n```", "latency_sec": 0.781501054763794, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 167, "prompt_eval_sec": null, "tokens_completion": 43, "completion_eval_sec": null, "tokens_total": 210, "tokens_per_sec": 268.7136488427028, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query includes a join with the vehicles table and filters by vehicles.type = 'electric', while the generated query omits this join and filter. The generated query only filters by sales_regions.name = 'California' but does not account for vehicle type, leading to different results."}
{"example_id": 3999, "sql_complexity": "single join", "prompt": "What is the total number of tickets sold for performances with a rating of 5?", "context": "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", "reference_sql": "SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;", "generated_sql": "SELECT SUM(tickets_sold) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "raw_model_output": "```sql\nSELECT SUM(tickets_sold) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;\n```", "latency_sec": 0.680854082107544, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 146, "prompt_eval_sec": null, "tokens_completion": 28, "completion_eval_sec": null, "tokens_total": 174, "tokens_per_sec": 255.5613670720651, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL correctly joins the 'performance' and 'ticket' tables to sum 't.quantity' where rating = 5. The Generated SQL attempts to sum a non-existent 'tickets_sold' column directly from the 'performance' table, which lacks this column. This would result in an error and does not match the logic of the Reference SQL."}
{"example_id": 2261, "sql_complexity": "multiple_joins", "prompt": "What is the total number of animals that have been released into 'protected' habitats, and the average weight of those animals?", "context": "CREATE TABLE habitats (habitat_id INT, habitat_name VARCHAR(50), habitat_status VARCHAR(50)); INSERT INTO habitats (habitat_id, habitat_name, habitat_status) VALUES (1, 'Habitat A', 'protected'), (2, 'Habitat B', 'unprotected'); CREATE TABLE animal_habitats (animal_id INT, habitat_id INT, animal_weight FLOAT); INSERT INTO animal_habitats (animal_id, habitat_id, animal_weight) VALUES (101, 1, 25.5), (102, 2, 15.2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');", "reference_sql": "SELECT COUNT(*), AVG(animal_habitats.animal_weight) FROM animal_habitats INNER JOIN animals ON animal_habitats.animal_id = animals.animal_id INNER JOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id WHERE habitats.habitat_status = 'protected';", "generated_sql": "SELECT \n    COUNT(DISTINCT ah.animal_id) AS total_animals,\n    AVG(ah.animal_weight) AS average_weight\nFROM \n    animal_habitats ah\nJOIN \n    habitats h ON ah.habitat_id = h.habitat_id\nWHERE \n    h.habitat_status = 'protected';", "raw_model_output": "```sql\nSELECT \n    COUNT(DISTINCT ah.animal_id) AS total_animals,\n    AVG(ah.animal_weight) AS average_weight\nFROM \n    animal_habitats ah\nJOIN \n    habitats h ON ah.habitat_id = h.habitat_id\nWHERE \n    h.habitat_status = 'protected';\n```", "latency_sec": 0.9965178966522217, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 246, "prompt_eval_sec": null, "tokens_completion": 73, "completion_eval_sec": null, "tokens_total": 319, "tokens_per_sec": 320.1146723723407, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL uses COUNT(*) while the Generated SQL uses COUNT(DISTINCT ah.animal_id), which would produce different results if there are duplicate animal_id entries in animal_habitats. Second, the Reference SQL includes an unnecessary INNER JOIN with the animals table, which could affect results if there were animal_habitats entries without corresponding animals (though this isn't the case in the sample data). These differences make the queries non-equivalent."}
{"example_id": 3439, "sql_complexity": "multiple_joins", "prompt": "How many menu items contain ingredients sourced from local suppliers for each restaurant?", "context": "CREATE TABLE restaurants (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO restaurants VALUES (1, 'Restaurant A', 'City A'); INSERT INTO restaurants VALUES (2, 'Restaurant B', 'City B'); CREATE TABLE menu_items (id INT, name VARCHAR(50), restaurant_id INT, price DECIMAL(5,2)); INSERT INTO menu_items VALUES (1, 'Item A', 1, 10.99); INSERT INTO menu_items VALUES (2, 'Item B', 1, 12.99); INSERT INTO menu_items VALUES (3, 'Item C', 2, 11.99); CREATE TABLE ingredients (id INT, name VARCHAR(50), local_source BOOLEAN, menu_item_id INT); INSERT INTO ingredients VALUES (1, 'Ingredient A', TRUE, 1); INSERT INTO ingredients VALUES (2, 'Ingredient B', FALSE, 1); INSERT INTO ingredients VALUES (3, 'Ingredient C', TRUE, 2); INSERT INTO ingredients VALUES (4, 'Ingredient D', FALSE, 2); INSERT INTO ingredients VALUES (5, 'Ingredient E', TRUE, 3);", "reference_sql": "SELECT r.name, COUNT(DISTINCT mi.id) as num_local_items FROM restaurants r JOIN menu_items mi ON r.id = mi.restaurant_id JOIN ingredients i ON mi.id = i.menu_item_id WHERE i.local_source = TRUE GROUP BY r.name;", "generated_sql": "SELECT r.name AS restaurant_name, COUNT(DISTINCT mi.id) AS menu_items_with_local_ingredients\nFROM restaurants r\nJOIN menu_items mi ON r.id = mi.restaurant_id\nJOIN ingredients ing ON mi.id = ing.menu_item_id\nWHERE ing.local_source = TRUE\nGROUP BY r.name;", "raw_model_output": "```sql\nSELECT r.name AS restaurant_name, COUNT(DISTINCT mi.id) AS menu_items_with_local_ingredients\nFROM restaurants r\nJOIN menu_items mi ON r.id = mi.restaurant_id\nJOIN ingredients ing ON mi.id = ing.menu_item_id\nWHERE ing.local_source = TRUE\nGROUP BY r.name;\n```", "latency_sec": 1.878370761871338, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 314, "prompt_eval_sec": null, "tokens_completion": 67, "completion_eval_sec": null, "tokens_total": 381, "tokens_per_sec": 202.8353548372029, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining the same tables with identical conditions. The only differences are in column aliases (e.g., 'name' vs 'restaurant_name', 'num_local_items' vs 'menu_items_with_local_ingredients'), which do not affect the semantic result. The aggregation logic, join conditions, and filter criteria are identical."}
{"example_id": 2265, "sql_complexity": "aggregation", "prompt": "Hourly revenue for a specific movie?", "context": "CREATE TABLE Movie_Revenue (id INT, movie_title VARCHAR(100), revenue_time TIME, revenue DECIMAL(10,2));", "reference_sql": "SELECT revenue_time, SUM(revenue) FROM Movie_Revenue WHERE movie_title = 'Spider-Man: No Way Home' GROUP BY revenue_time;", "generated_sql": "SELECT \n    EXTRACT(HOUR FROM revenue_time) AS revenue_hour,\n    SUM(revenue) AS total_revenue\nFROM \n    Movie_Revenue\nWHERE \n    movie_title = ? -- replace ? with the specific movie title\nGROUP BY \n    EXTRACT(HOUR FROM revenue_time)\nORDER BY \n    revenue_hour;", "raw_model_output": "```sql\nSELECT \n    EXTRACT(HOUR FROM revenue_time) AS revenue_hour,\n    SUM(revenue) AS total_revenue\nFROM \n    Movie_Revenue\nWHERE \n    movie_title = ? -- replace ? with the specific movie title\nGROUP BY \n    EXTRACT(HOUR FROM revenue_time)\nORDER BY \n    revenue_hour;\n```", "latency_sec": 1.2885792255401611, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 101, "prompt_eval_sec": null, "tokens_completion": 72, "completion_eval_sec": null, "tokens_total": 173, "tokens_per_sec": 134.25639384142633, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL groups by the full 'revenue_time' (TIME type), while the Generated SQL groups by the extracted 'hour' from 'revenue_time'. This means the Generated SQL aggregates revenue across all times within the same hour, whereas the Reference SQL treats each distinct time as a separate group. Additionally, the Generated SQL includes an ORDER BY clause, which affects result ordering but not semantic equivalence."}
{"example_id": 1763, "sql_complexity": "multiple_joins", "prompt": "What is the total food and beverage revenue last month for hotels in 'Bangkok'?", "context": "CREATE TABLE revenue (hotel_id INT, revenue_source VARCHAR(50), revenue INT, revenue_date DATE); INSERT INTO revenue (hotel_id, revenue_source, revenue, revenue_date) VALUES (5, 'Room revenue', 12000, '2022-03-01'), (5, 'Food and beverage', 4000, '2022-03-02'), (5, 'Other revenue', 1000, '2022-03-03'); CREATE TABLE hotels (hotel_id INT, city VARCHAR(50)); INSERT INTO hotels (hotel_id, city) VALUES (5, 'Bangkok'); CREATE TABLE dates (date DATE); INSERT INTO dates (date) VALUES ('2022-03-01'), ('2022-03-02'), ('2022-03-03');", "reference_sql": "SELECT SUM(revenue) FROM revenue JOIN hotels ON revenue.hotel_id = hotels.hotel_id JOIN dates ON revenue.revenue_date = dates.date WHERE hotels.city = 'Bangkok' AND revenue_source = 'Food and beverage' AND dates.date >= DATEADD(month, -1, GETDATE());", "generated_sql": "SELECT SUM(r.revenue) AS total_food_and_beverage_revenue\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE h.city = 'Bangkok'\n  AND r.revenue_source = 'Food and beverage'\n  AND r.revenue_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'\n  AND r.revenue_date < DATE_TRUNC('month', CURRENT_DATE);", "raw_model_output": "```sql\nSELECT SUM(r.revenue) AS total_food_and_beverage_revenue\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE h.city = 'Bangkok'\n  AND r.revenue_source = 'Food and beverage'\n  AND r.revenue_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'\n  AND r.revenue_date < DATE_TRUNC('month', CURRENT_DATE);\n```", "latency_sec": 1.1013340950012207, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 248, "prompt_eval_sec": null, "tokens_completion": 95, "completion_eval_sec": null, "tokens_total": 343, "tokens_per_sec": 311.4404625779063, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in date filtering logic and table usage. The Reference SQL uses a dates table with DATEADD(month, -1, GETDATE()) which compares against the entire dates table, while the Generated SQL uses DATE_TRUNC and INTERVAL to target the previous calendar month. Additionally, the Generated SQL omits the dates table join entirely, which could exclude records not present in the dates table. The date ranges also differ: Reference SQL checks for dates >= one month before current date (e.g., March 5, 2023 if current date is April 5), while Generated SQL checks for the entire previous month (e.g., March 1 - March 31). These differences in filtering and table joins make them non-equivalent."}
{"example_id": 5499, "sql_complexity": "set operations", "prompt": "How many legal aid clinics and community mediation centers are there in total, and what is the sum of cases handled by each type of center, for centers located in the state of California?", "context": "CREATE TABLE LegalAidClinics (ClinicName text, State text, NumCases int); INSERT INTO LegalAidClinics VALUES ('Clinic1', 'CA', 30, '2022-01-01'), ('Clinic2', 'CA', 25, '2022-01-01'); CREATE TABLE CommunityMediationCenters (CenterName text, State text, NumCases int); INSERT INTO CommunityMediationCenters VALUES ('CM1', 'CA', 22, '2022-01-01'), ('CM2', 'CA', 28, '2022-01-01');", "reference_sql": "SELECT State, 'Legal Aid Clinics' AS CenterType, COUNT(*) AS NumCenters, SUM(NumCases) AS TotalCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT State, 'Community Mediation Centers', COUNT(*), SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA';", "generated_sql": "SELECT\n  (SELECT COUNT(*) FROM LegalAidClinics WHERE State = 'CA') AS num_legal_aid_clinics,\n  (SELECT SUM(NumCases) FROM LegalAidClinics WHERE State = 'CA') AS total_legal_aid_cases,\n  (SELECT COUNT(*) FROM CommunityMediationCenters WHERE State = 'CA') AS num_community_mediation_centers,\n  (SELECT SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA') AS total_community_mediation_cases\n;", "raw_model_output": "```sql\nSELECT\n  (SELECT COUNT(*) FROM LegalAidClinics WHERE State = 'CA') AS num_legal_aid_clinics,\n  (SELECT SUM(NumCases) FROM LegalAidClinics WHERE State = 'CA') AS total_legal_aid_cases,\n  (SELECT COUNT(*) FROM CommunityMediationCenters WHERE State = 'CA') AS num_community_mediation_centers,\n  (SELECT SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA') AS total_community_mediation_cases\n;\n```", "latency_sec": 2.054919719696045, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 226, "prompt_eval_sec": null, "tokens_completion": 113, "completion_eval_sec": null, "tokens_total": 339, "tokens_per_sec": 164.96994833946283, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows (one for each center type) with columns State, CenterType, NumCenters, TotalCases, while the Generated SQL returns a single row with four separate columns for counts and sums. The structure and number of rows differ, so they are not semantically equivalent."}
{"example_id": 2408, "sql_complexity": "aggregation", "prompt": "What is the average number of victories for players from Japan and South Korea, partitioned by game mode?", "context": "CREATE TABLE PlayerVictories (PlayerID INT, GameMode VARCHAR(255), Victories INT, Country VARCHAR(255)); INSERT INTO PlayerVictories (PlayerID, GameMode, Victories, Country) VALUES (1, 'Battle Royale', 25, 'Japan'), (2, 'Team Deathmatch', 18, 'South Korea');", "reference_sql": "SELECT GameMode, AVG(Victories) as AvgVictories FROM PlayerVictories WHERE Country IN ('Japan', 'South Korea') GROUP BY GameMode, Country WITH ROLLUP;", "generated_sql": "SELECT \n    GameMode,\n    Country,\n    AVG(Victories) AS AverageVictories\nFROM \n    PlayerVictories\nWHERE \n    Country IN ('Japan', 'South Korea')\nGROUP BY \n    GameMode,\n    Country;", "raw_model_output": "```sql\nSELECT \n    GameMode,\n    Country,\n    AVG(Victories) AS AverageVictories\nFROM \n    PlayerVictories\nWHERE \n    Country IN ('Japan', 'South Korea')\nGROUP BY \n    GameMode,\n    Country;\n```", "latency_sec": 1.0015223026275635, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 159, "prompt_eval_sec": null, "tokens_completion": 54, "completion_eval_sec": null, "tokens_total": 213, "tokens_per_sec": 212.67624239737813, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL includes 'Country' in the GROUP BY clause but not in the SELECT, while the Generated SQL explicitly selects 'Country'. Second, the Reference SQL uses WITH ROLLUP which adds summary rows with NULLs for GameMode/Country, whereas the Generated SQL does not include ROLLUP. These differences in structure and aggregation behavior make the results non-equivalent."}
{"example_id": 2729, "sql_complexity": "subqueries", "prompt": "Find the total number of trips made by shared autonomous vehicles in Seattle", "context": "CREATE TABLE shared_vehicles (id INT, vehicle_type VARCHAR(20), is_autonomous BOOLEAN, trip_count INT); INSERT INTO shared_vehicles (id, vehicle_type, is_autonomous, trip_count) VALUES (1, 'ebike', false, 1200), (2, 'escooter', false, 800), (3, 'car', true, 1500); CREATE TABLE city_data (city VARCHAR(20), has_autonomous_vehicles BOOLEAN); INSERT INTO city_data (city, has_autonomous_vehicles) VALUES ('Seattle', true), ('Denver', false), ('Portland', true);", "reference_sql": "SELECT SUM(trip_count) FROM shared_vehicles WHERE is_autonomous = true AND vehicle_type != 'ebike' AND vehicle_type != 'escooter' AND city IN (SELECT city FROM city_data WHERE has_autonomous_vehicles = true AND city = 'Seattle');", "generated_sql": "SELECT SUM(trip_count) AS total_autonomous_trips\nFROM shared_vehicles\nWHERE is_autonomous = TRUE\n  AND EXISTS (\n    SELECT 1\n    FROM city_data\n    WHERE city = 'Seattle' AND has_autonomous_vehicles = TRUE\n  );", "raw_model_output": "```sql\nSELECT SUM(trip_count) AS total_autonomous_trips\nFROM shared_vehicles\nWHERE is_autonomous = TRUE\n  AND EXISTS (\n    SELECT 1\n    FROM city_data\n    WHERE city = 'Seattle' AND has_autonomous_vehicles = TRUE\n  );\n```", "latency_sec": 1.0616309642791748, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 208, "prompt_eval_sec": null, "tokens_completion": 62, "completion_eval_sec": null, "tokens_total": 270, "tokens_per_sec": 254.32566408170314, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a non-existent 'city' column in the shared_vehicles table, making it invalid. The Generated SQL does not have this issue but also lacks the vehicle_type filters and city condition present in the Reference SQL. Even if the 'city' column existed, the Generated SQL would sum all autonomous vehicles when Seattle has autonomous vehicles, while the Reference SQL excludes 'ebike' and 'escooter' types and specifically filters for Seattle."}
{"example_id": 2952, "sql_complexity": "aggregation", "prompt": "Show the total budget allocated for each program category in 2023.", "context": "CREATE TABLE Budget (id INT, category TEXT, year INT, allocated_amount INT); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (1, 'Education', 2023, 30000); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (2, 'Healthcare', 2023, 50000);", "reference_sql": "SELECT category, SUM(allocated_amount) FROM Budget WHERE year = 2023 GROUP BY category;", "generated_sql": "SELECT category, SUM(allocated_amount) AS total_allocated\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "raw_model_output": "```sql\nSELECT category, SUM(allocated_amount) AS total_allocated\nFROM Budget\nWHERE year = 2023\nGROUP BY category;\n```", "latency_sec": 2.111175775527954, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 154, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 186, "tokens_per_sec": 88.10256453112527, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (category and summed allocated_amount) from the same table with the same filtering (year = 2023) and grouping (category). The only difference is the alias name (total_allocated) which doesn't affect the semantic result."}
{"example_id": 4328, "sql_complexity": "aggregation", "prompt": "What is the average cargo handling time in hours for each port?", "context": "CREATE TABLE cargo_handling (id INT, port_id INT, time_in_hours DECIMAL(5,2)); INSERT INTO cargo_handling (id, port_id, time_in_hours) VALUES (1, 1, 20.5), (2, 1, 22.3), (3, 2, 18.7);", "reference_sql": "SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id;", "generated_sql": "SELECT port_id, AVG(time_in_hours) AS average_handling_time\nFROM cargo_handling\nGROUP BY port_id;", "raw_model_output": "```sql\nSELECT port_id, AVG(time_in_hours) AS average_handling_time\nFROM cargo_handling\nGROUP BY port_id;\n```", "latency_sec": 0.777256965637207, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 152, "prompt_eval_sec": null, "tokens_completion": 30, "completion_eval_sec": null, "tokens_total": 182, "tokens_per_sec": 234.156795044987, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average time_in_hours per port_id. The generated query adds an alias (average_handling_time) for the calculated column, but this does not affect the semantic result. The GROUP BY clause and aggregation logic are identical."}
{"example_id": 4915, "sql_complexity": "window functions", "prompt": "Calculate the percentage of total Europium production for each country.", "context": "CREATE TABLE europium_production (country VARCHAR(50), quantity INT);", "reference_sql": "SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;", "generated_sql": "SELECT\n  country,\n  quantity,\n  (quantity * 100.0 / SUM(quantity) OVER ()) AS percentage_of_total\nFROM europium_production;", "raw_model_output": "```sql\nSELECT\n  country,\n  quantity,\n  (quantity * 100.0 / SUM(quantity) OVER ()) AS percentage_of_total\nFROM europium_production;\n```", "latency_sec": 0.7122340202331543, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 94, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 132, "tokens_per_sec": 185.3323433733044, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns only 'country' and 'percentage', while the generated query includes an additional 'quantity' column. Although both calculate the same percentage, the generated query's extra column makes the result sets structurally different."}
{"example_id": 5030, "sql_complexity": "subqueries", "prompt": "What is the success rate of diverse-led startups (at least 1 female or underrepresented racial or ethnic group executive) in the past 3 years?", "context": "CREATE TABLE DiverseStartups(id INT, name TEXT, country TEXT, year INT, success BOOLEAN);   INSERT INTO DiverseStartups VALUES (1, 'FemTech', 'USA', 2020, true), (2, 'GreenCity', 'Canada', 2019, false), (3, 'AI-Health', 'UK', 2021, true), (4, 'SolarEnergy', 'USA', 2020, false), (5, 'DataAnalytics', 'Germany', 2019, true), (6, 'SmartGrid', 'USA', 2021, true), (7, 'CloudServices', 'India', 2020, false), (8, 'RenewableEnergy', 'USA', 2019, true);", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3) AS success_rate FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3 AND success = true;", "generated_sql": "SELECT \n  ROUND(100.0 * SUM(CASE WHEN success THEN 1 ELSE 0 END) / COUNT(*), 2) AS success_rate_percentage\nFROM DiverseStartups\nWHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2;", "raw_model_output": "```sql\nSELECT \n  ROUND(100.0 * SUM(CASE WHEN success THEN 1 ELSE 0 END) / COUNT(*), 2) AS success_rate_percentage\nFROM DiverseStartups\nWHERE year >= EXTRACT(YEAR FROM CURRENT_DATE) - 2;\n```\n(Note: This assumes \"the past 3 years\" means including the current year and the previous two years. Adjust the year logic if a different interpretation is needed.)", "latency_sec": 2.0316951274871826, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 255, "prompt_eval_sec": null, "tokens_completion": 93, "completion_eval_sec": null, "tokens_total": 348, "tokens_per_sec": 171.28554146330472, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL uses `YEAR(CURRENT_DATE) - 3` (e.g., 2020 for 2023) while the Generated SQL uses `EXTRACT(YEAR FROM CURRENT_DATE) - 2` (e.g., 2021 for 2023), resulting in different time ranges. Second, the Reference SQL calculates the success rate as `(success_count / total_count) * 100.0` without rounding, whereas the Generated SQL uses `ROUND(..., 2)`. These differences in time frames and rounding make the queries non-equivalent."}
{"example_id": 4626, "sql_complexity": "aggregation", "prompt": "What was the maximum number of training hours for farmers in each country in 2020?", "context": "CREATE TABLE training (id INT, country_id INT, farmer_id INT, hours INT, date DATE);", "reference_sql": "SELECT country_id, MAX(hours) FROM training WHERE YEAR(date) = 2020 GROUP BY country_id;", "generated_sql": "SELECT country_id, MAX(hours) AS max_training_hours\nFROM training\nWHERE YEAR(date) = 2020\nGROUP BY country_id;", "raw_model_output": "```sql\nSELECT country_id, MAX(hours) AS max_training_hours\nFROM training\nWHERE YEAR(date) = 2020\nGROUP BY country_id;\n```", "latency_sec": 1.7942149639129639, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 106, "prompt_eval_sec": null, "tokens_completion": 34, "completion_eval_sec": null, "tokens_total": 140, "tokens_per_sec": 78.02855444627275, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The generated query adds an alias 'max_training_hours' for the MAX(hours) column, but this does not affect the result set's content or structure. Both queries select the same data: country_id and maximum hours for training records from 2020, grouped by country_id."}
{"example_id": 2703, "sql_complexity": "set operations", "prompt": "Identify the species unique to 'MarineResearchAreaA' and 'MarineResearchAreaB'", "context": "CREATE TABLE ResearchAreaSpecies (area VARCHAR(255), species VARCHAR(255)); INSERT INTO ResearchAreaSpecies (area, species) VALUES ('MarineResearchAreaA', 'Coral'), ('MarineResearchAreaA', 'Starfish'), ('MarineResearchAreaB', 'Jellyfish');", "reference_sql": "(SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB') UNION (SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA');", "generated_sql": "SELECT area, species\nFROM ResearchAreaSpecies ras\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\n  AND species NOT IN (\n    SELECT species\n    FROM ResearchAreaSpecies\n    WHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\n    GROUP BY species\n    HAVING COUNT(DISTINCT area) > 1\n  );", "raw_model_output": "```sql\nSELECT area, species\nFROM ResearchAreaSpecies ras\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\n  AND species NOT IN (\n    SELECT species\n    FROM ResearchAreaSpecies\n    WHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\n    GROUP BY species\n    HAVING COUNT(DISTINCT area) > 1\n  );\n```", "latency_sec": 1.1248283386230469, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 143, "prompt_eval_sec": null, "tokens_completion": 83, "completion_eval_sec": null, "tokens_total": 226, "tokens_per_sec": 200.91954677871718, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a list of species unique to either 'MarineResearchAreaA' or 'MarineResearchAreaB' (e.g., 'Coral', 'Starfish', 'Jellyfish'), while the Generated SQL returns both 'area' and 'species' for entries in those areas that are not shared between them. The Generated SQL's output includes the 'area' column, which the Reference SQL does not, and the structure of results differs. Additionally, the Generated SQL would return all species from both areas (since no species are shared in the sample data), whereas the Reference SQL explicitly filters for unique species between the two areas."}
{"example_id": 200, "sql_complexity": "window functions", "prompt": "List the top three categories of workforce development programs with the highest budget increases.", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(50), budget DECIMAL(10, 2), category VARCHAR(50), budget_date DATE);", "reference_sql": "SELECT category, SUM(budget - LAG(budget) OVER (PARTITION BY category ORDER BY budget_date)) as total_budget_increase FROM programs GROUP BY category ORDER BY total_budget_increase DESC LIMIT 3;", "generated_sql": "SELECT category, \n       SUM(CASE WHEN budget_date = (SELECT MAX(budget_date) FROM programs) THEN budget ELSE 0 END) -\n       SUM(CASE WHEN budget_date = (SELECT MIN(budget_date) FROM programs) THEN budget ELSE 0 END) AS budget_increase\nFROM programs\nWHERE category = 'workforce development'\nGROUP BY category\nORDER BY budget_increase DESC\nLIMIT 3;", "raw_model_output": "```sql\nSELECT category, \n       SUM(CASE WHEN budget_date = (SELECT MAX(budget_date) FROM programs) THEN budget ELSE 0 END) -\n       SUM(CASE WHEN budget_date = (SELECT MIN(budget_date) FROM programs) THEN budget ELSE 0 END) AS budget_increase\nFROM programs\nWHERE category = 'workforce development'\nGROUP BY category\nORDER BY budget_increase DESC\nLIMIT 3;\n```", "latency_sec": 1.7790322303771973, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 114, "prompt_eval_sec": null, "tokens_completion": 91, "completion_eval_sec": null, "tokens_total": 205, "tokens_per_sec": 115.23118946334947, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the total budget increase across all categories by comparing consecutive budgets using LAG, while the Generated SQL only focuses on the 'workforce development' category and computes the difference between the maximum and minimum budget dates. The aggregation logic, scope (all categories vs specific category), and calculation method (cumulative LAG differences vs single max-min difference) differ significantly."}
{"example_id": 5131, "sql_complexity": "basic SQL", "prompt": "How many wells were drilled in the Eagle Ford Shale and Bakken Formation?", "context": "CREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), num_drilled INT); INSERT INTO wells (id, region, well_type, num_drilled) VALUES (1, 'Eagle Ford Shale', 'Oil', 2000), (2, 'Eagle Ford Shale', 'Gas', 1500), (3, 'Bakken Formation', 'Oil', 1000), (4, 'Bakken Formation', 'Gas', 1200);", "reference_sql": "SELECT SUM(num_drilled) as total_wells FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "generated_sql": "SELECT SUM(num_drilled) AS total_wells_drilled\nFROM wells\nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "raw_model_output": "```sql\nSELECT SUM(num_drilled) AS total_wells_drilled\nFROM wells\nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation');\n```", "latency_sec": 0.7683608531951904, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 186, "prompt_eval_sec": null, "tokens_completion": 36, "completion_eval_sec": null, "tokens_total": 222, "tokens_per_sec": 288.9267446107178, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of num_drilled for wells in the 'Eagle Ford Shale' and 'Bakken Formation' regions. The only difference is the alias name (total_wells vs. total_wells_drilled), which doesn't affect the semantic result."}
{"example_id": 1160, "sql_complexity": "subqueries", "prompt": "What is the total revenue generated from ads on Instagram in March 2021, for users in the 'brand' category who have posted more than 10 times?", "context": "CREATE TABLE ads (ad_id INT, user_id INT, platform VARCHAR(255), ad_revenue DECIMAL(10,2), post_count INT); INSERT INTO ads (ad_id, user_id, platform, ad_revenue, post_count) VALUES (1, 1, 'Instagram', 150.50, 12), (2, 2, 'Twitter', 80.00, 15), (3, 3, 'Instagram', 120.75, 8);", "reference_sql": "SELECT SUM(ad_revenue) FROM ads WHERE platform = 'Instagram' AND MONTH(ad_date) = 3 AND YEAR(ad_date) = 2021 AND user_id IN (SELECT user_id FROM users WHERE category = 'brand' AND post_count > 10);", "generated_sql": "-- There is no information about user categories or post dates in the provided schema.\n-- Therefore, it is not possible to answer the question with the given tables and columns.", "raw_model_output": "```sql\n-- There is no information about user categories or post dates in the provided schema.\n-- Therefore, it is not possible to answer the question with the given tables and columns.\n```", "latency_sec": 1.3503928184509277, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 202, "prompt_eval_sec": null, "tokens_completion": 39, "completion_eval_sec": null, "tokens_total": 241, "tokens_per_sec": 178.4665889118528, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'users' table and 'ad_date' column which are not present in the provided schema. The Generated SQL correctly notes that necessary information (user categories, post dates) is missing. Since the schema constraints make the Reference SQL invalid, the queries cannot be equivalent."}
{"example_id": 4708, "sql_complexity": "subqueries", "prompt": "What is the maximum number of high-level threats reported by a single agency in a month?", "context": "CREATE TABLE Threat_Intelligence (Threat_ID INT, Threat_Type VARCHAR(50), Threat_Level VARCHAR(50), Reported_Date DATE, Reporting_Agency VARCHAR(50)); CREATE VIEW High_Level_Threats AS SELECT Threat_Type, Threat_Level, Reported_Date FROM Threat_Intelligence WHERE Threat_Level = 'High';", "reference_sql": "SELECT Reporting_Agency, MAX(Number_of_High_Level_Threats) as Max_High_Level_Threats_in_a_Month FROM (SELECT Reporting_Agency, TO_CHAR(Reported_Date, 'YYYY-MM') as Month, COUNT(*) as Number_of_High_Level_Threats FROM High_Level_Threats GROUP BY Reporting_Agency, Month) GROUP BY Reporting_Agency;", "generated_sql": "SELECT MAX(threat_count) AS max_high_level_threats_in_month_by_agency\nFROM (\n    SELECT Reporting_Agency, \n           EXTRACT(YEAR FROM Reported_Date) AS year,\n           EXTRACT(MONTH FROM Reported_Date) AS month,\n           COUNT(*) AS threat_count\n    FROM Threat_Intelligence\n    WHERE Threat_Level = 'High'\n    GROUP BY Reporting_Agency, EXTRACT(YEAR FROM Reported_Date), EXTRACT(MONTH FROM Reported_Date)\n) AS monthly_agency_counts;", "raw_model_output": "```sql\nSELECT MAX(threat_count) AS max_high_level_threats_in_month_by_agency\nFROM (\n    SELECT Reporting_Agency, \n           EXTRACT(YEAR FROM Reported_Date) AS year,\n           EXTRACT(MONTH FROM Reported_Date) AS month,\n           COUNT(*) AS threat_count\n    FROM Threat_Intelligence\n    WHERE Threat_Level = 'High'\n    GROUP BY Reporting_Agency, EXTRACT(YEAR FROM Reported_Date), EXTRACT(MONTH FROM Reported_Date)\n) AS monthly_agency_counts;\n```", "latency_sec": 1.3402481079101562, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 148, "prompt_eval_sec": null, "tokens_completion": 114, "completion_eval_sec": null, "tokens_total": 262, "tokens_per_sec": 195.48619278301805, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their output structure and aggregation logic. The Reference SQL groups by Reporting_Agency and calculates the maximum monthly count per agency, returning multiple rows. The Generated SQL calculates the overall maximum threat count across all agencies and months, returning a single row. Additionally, the date grouping method (TO_CHAR vs EXTRACT) is different but functionally equivalent, but the core aggregation logic and output structure make them non-equivalent."}
{"example_id": 5608, "sql_complexity": "set operations", "prompt": "List the suppliers that provide materials for both product A and product C.", "context": "CREATE TABLE products (product_id INT, product_name TEXT); CREATE TABLE materials (material_id INT, material_name TEXT, product_id INT, supplier_id INT); INSERT INTO products (product_id, product_name) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'); INSERT INTO materials (material_id, material_name, product_id, supplier_id) VALUES (1, 'Material 1', 1, 101), (2, 'Material 2', 1, 102), (3, 'Material 3', 2, 103), (4, 'Material 4', 3, 101), (5, 'Material 5', 3, 102);", "reference_sql": "SELECT supplier_id FROM materials WHERE product_id = 1 INTERSECT SELECT supplier_id FROM materials WHERE product_id = 3;", "generated_sql": "SELECT supplier_id\nFROM materials\nWHERE product_id IN (\n    SELECT product_id FROM products WHERE product_name IN ('Product A', 'Product C')\n)\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT product_id) = 2;", "raw_model_output": "```sql\nSELECT supplier_id\nFROM materials\nWHERE product_id IN (\n    SELECT product_id FROM products WHERE product_name IN ('Product A', 'Product C')\n)\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT product_id) = 2;\n```", "latency_sec": 2.3514299392700195, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 232, "prompt_eval_sec": null, "tokens_completion": 54, "completion_eval_sec": null, "tokens_total": 286, "tokens_per_sec": 121.62811879854951, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve supplier_ids that have materials for both product_id 1 (Product A) and product_id 3 (Product C). The Reference SQL uses INTERSECT to find common supplier_ids between the two product_id conditions, while the Generated SQL uses a GROUP BY with HAVING COUNT(DISTINCT product_id) = 2 to achieve the same result. The data shows suppliers 101 and 102 meet this condition in both cases."}
{"example_id": 1506, "sql_complexity": "basic SQL", "prompt": "How many habitats are in the 'animal_habitats' table?", "context": "CREATE TABLE animal_habitats (id INT PRIMARY KEY, habitat_name VARCHAR, num_animals INT);", "reference_sql": "SELECT COUNT(*) FROM animal_habitats;", "generated_sql": "SELECT COUNT(*) AS habitat_count FROM animal_habitats;", "raw_model_output": "```sql\nSELECT COUNT(*) AS habitat_count FROM animal_habitats;\n```", "latency_sec": 0.6049349308013916, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 102, "prompt_eval_sec": null, "tokens_completion": 17, "completion_eval_sec": null, "tokens_total": 119, "tokens_per_sec": 196.71537208531495, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count all rows in the animal_habitats table. The generated query adds an alias (habitat_count) to the COUNT(*) result, but this does not affect the actual value returned. The semantic result (the numeric count) remains identical."}
{"example_id": 3117, "sql_complexity": "aggregation", "prompt": "What is the percentage of the population that has access to clean water in each continent?", "context": "CREATE TABLE water_data (id INT, country VARCHAR(50), continent CHAR(2), access_to_clean_water BOOLEAN); INSERT INTO water_data VALUES (1, 'Canada', 'NA', true), (2, 'Mexico', 'NA', false), (3, 'Brazil', 'SA', true), (4, 'Russia', 'EU', true);", "reference_sql": "SELECT continent, COUNT(*) FILTER (WHERE access_to_clean_water) * 100.0 / COUNT(*) AS percentage FROM water_data GROUP BY continent;", "generated_sql": "SELECT\n  continent,\n  100.0 * SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) / COUNT(*) AS percentage_with_access\nFROM\n  water_data\nGROUP BY\n  continent;", "raw_model_output": "```sql\nSELECT\n  continent,\n  100.0 * SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) / COUNT(*) AS percentage_with_access\nFROM\n  water_data\nGROUP BY\n  continent;\n```", "latency_sec": 0.9368681907653809, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 157, "prompt_eval_sec": null, "tokens_completion": 52, "completion_eval_sec": null, "tokens_total": 209, "tokens_per_sec": 223.08367608175064, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of countries with access to clean water per continent. The Reference SQL uses COUNT(*) FILTER (WHERE access_to_clean_water) to count qualifying rows, while the Generated SQL uses SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) for the same purpose. Both approaches effectively count the same values and perform identical division/multiplication operations. The semantic logic for calculating the percentage is equivalent."}
{"example_id": 3542, "sql_complexity": "window functions", "prompt": "What is the average yield of crops for each country, ranked by average yield?", "context": "CREATE TABLE farming (id INT, name TEXT, country TEXT, crop TEXT, yield INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'USA', 'Corn', 120), (2, 'Brown Farm', 'Canada', 'Soybeans', 45), (3, 'Jones Farm', 'Mexico', 'Wheat', 80);", "reference_sql": "SELECT country, AVG(yield) as avg_yield, ROW_NUMBER() OVER (ORDER BY AVG(yield) DESC) as rank FROM farming GROUP BY country;", "generated_sql": "SELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "raw_model_output": "```sql\nSELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;\n```", "latency_sec": 0.8098230361938477, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 156, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 187, "tokens_per_sec": 230.91464633915123, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a ROW_NUMBER() column that ranks countries by average yield, while the Generated SQL only returns country and average_yield without the rank. The Generated SQL also lacks the explicit ordering in the result set (though it would sort implicitly in some environments, the presence of the rank column makes them non-equivalent)."}
{"example_id": 2274, "sql_complexity": "subqueries", "prompt": "Add a new crop 'amaranth' to farm 'Nourishing Harvest' with yield 50 in 2023", "context": "CREATE TABLE farms (id INT, name TEXT, location TEXT, size FLOAT); INSERT INTO farms (id, name, location, size) VALUES (1, 'Nourishing Harvest', 'Mexico', 120.0); CREATE TABLE crops (id INT, farm_id INT, crop TEXT, yield INT, year INT);", "reference_sql": "INSERT INTO crops (id, farm_id, crop, yield, year) VALUES (5, (SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "generated_sql": "INSERT INTO crops (id, farm_id, crop, yield, year)\nVALUES (\n    (SELECT COALESCE(MAX(id), 0) + 1 FROM crops),\n    (SELECT id FROM farms WHERE name = 'Nourishing Harvest'),\n    'amaranth',\n    50,\n    2023\n);", "raw_model_output": "```sql\nINSERT INTO crops (id, farm_id, crop, yield, year)\nVALUES (\n    (SELECT COALESCE(MAX(id), 0) + 1 FROM crops),\n    (SELECT id FROM farms WHERE name = 'Nourishing Harvest'),\n    'amaranth',\n    50,\n    2023\n);\n```", "latency_sec": 0.8955240249633789, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 159, "prompt_eval_sec": null, "tokens_completion": 71, "completion_eval_sec": null, "tokens_total": 230, "tokens_per_sec": 256.83286387476375, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL explicitly sets the id to 5, while the Generated SQL calculates the id as (MAX(id) + 1) from the crops table. This makes the id values potentially different depending on existing data in the crops table. The farm_id, crop, yield, and year values are identical, but the id generation method differs, leading to non-equivalent results."}
{"example_id": 3705, "sql_complexity": "subqueries", "prompt": "What is the percentage of unions with collective bargaining agreements in the Midwest region?", "context": "CREATE TABLE collective_bargaining (bargaining_id INT, union_name VARCHAR(50), contract_start_date DATE, contract_end_date DATE, region VARCHAR(50));CREATE VIEW union_region AS SELECT DISTINCT union_name, region FROM collective_bargaining;", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) as percentage FROM union_region ur WHERE ur.region = 'Midwest' AND EXISTS (SELECT 1 FROM collective_bargaining cb WHERE cb.union_name = ur.union_name);", "generated_sql": "SELECT \n    (COUNT(DISTINCT union_name) * 100.0 / \n     (SELECT COUNT(DISTINCT union_name) FROM collective_bargaining)\n    ) AS percentage_unions_in_midwest\nFROM collective_bargaining\nWHERE region = 'Midwest';", "raw_model_output": "```sql\nSELECT \n    (COUNT(DISTINCT union_name) * 100.0 / \n     (SELECT COUNT(DISTINCT union_name) FROM collective_bargaining)\n    ) AS percentage_unions_in_midwest\nFROM collective_bargaining\nWHERE region = 'Midwest';\n```", "latency_sec": 0.8946309089660645, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 133, "prompt_eval_sec": null, "tokens_completion": 62, "completion_eval_sec": null, "tokens_total": 195, "tokens_per_sec": 217.96698285929313, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their calculation logic. The reference query calculates the percentage of (union_name, region) pairs in the Midwest relative to all (union_name, region) pairs (using the view's distinct entries). The generated query calculates the percentage of distinct union_names in the Midwest relative to all distinct union_names in the original table. The denominators and numerators differ in how they handle duplicates across regions, leading to different results."}
{"example_id": 240, "sql_complexity": "aggregation", "prompt": "What is the average capacity of renewable energy projects for each country?", "context": "CREATE TABLE projects (name TEXT, type TEXT, capacity INTEGER, country TEXT); INSERT INTO projects (name, type, capacity, country) VALUES ('Project 1', 'Wind', 100, 'USA'), ('Project 2', 'Solar', 200, 'Germany'), ('Project 3', 'Wind', 300, 'France');", "reference_sql": "SELECT country, AVG(capacity) FROM projects GROUP BY country", "generated_sql": "SELECT country, AVG(capacity) AS average_capacity\nFROM projects\nGROUP BY country;", "raw_model_output": "```sql\nSELECT country, AVG(capacity) AS average_capacity\nFROM projects\nGROUP BY country;\n```", "latency_sec": 1.0245256423950195, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 151, "prompt_eval_sec": null, "tokens_completion": 23, "completion_eval_sec": null, "tokens_total": 174, "tokens_per_sec": 169.83469500406315, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average capacity per country using AVG(capacity) and group by the country. The generated query adds an alias (average_capacity) for the calculated column, but this does not affect the semantic result. The grouping and aggregation logic remain identical."}
{"example_id": 2132, "sql_complexity": "set operations", "prompt": "What is the average caseload per attorney in community legal clinics in California, and how does it compare to the state average?", "context": "CREATE TABLE cali_community_legal_clinics(id INT, attorney_count INT, cases_handled INT, state VARCHAR(255));", "reference_sql": "SELECT state, AVG(cases_handled/attorney_count) AS avg_caseload FROM cali_community_legal_clinics WHERE state = 'California' GROUP BY state UNION ALL SELECT 'California', AVG(cases_handled/attorney_count) FROM cali_community_legal_clinics WHERE state = 'California';", "generated_sql": "SELECT\n    AVG(CASE WHEN state = 'California' THEN cases_handled * 1.0 / attorney_count END) AS avg_caseload_per_attorney_ca,\n    AVG(cases_handled * 1.0 / attorney_count) AS avg_caseload_per_attorney_state\nFROM\n    cali_community_legal_clinics\nWHERE\n    attorney_count > 0;", "raw_model_output": "```sql\nSELECT\n    AVG(CASE WHEN state = 'California' THEN cases_handled * 1.0 / attorney_count END) AS avg_caseload_per_attorney_ca,\n    AVG(cases_handled * 1.0 / attorney_count) AS avg_caseload_per_attorney_state\nFROM\n    cali_community_legal_clinics\nWHERE\n    attorney_count > 0;\n```", "latency_sec": 1.406986951828003, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 120, "prompt_eval_sec": null, "tokens_completion": 88, "completion_eval_sec": null, "tokens_total": 208, "tokens_per_sec": 147.8336382080585, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows with the same California average (due to UNION ALL), while the Generated SQL returns a single row with two different averages: one specifically for California and another for all states (with attorney_count > 0). The Generated SQL also includes a WHERE attorney_count > 0 filter not present in the Reference SQL, and the aggregation logic differs in scope and structure."}
{"example_id": 3276, "sql_complexity": "basic SQL", "prompt": "What is the total energy consumption of the Chemical Plant B in the last quarter?", "context": "CREATE TABLE EnergyConsumption (EnergyID INT, Plant VARCHAR(255), EnergyQuantity DECIMAL(5,2), Timestamp DATETIME);", "reference_sql": "SELECT SUM(EnergyQuantity) FROM EnergyConsumption WHERE Plant = 'Chemical Plant B' AND Timestamp BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE();", "generated_sql": "SELECT SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  AND Timestamp < DATE_TRUNC('quarter', CURRENT_DATE);", "raw_model_output": "```sql\nSELECT SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  AND Timestamp < DATE_TRUNC('quarter', CURRENT_DATE);\n```", "latency_sec": 1.1909089088439941, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 110, "prompt_eval_sec": null, "tokens_completion": 61, "completion_eval_sec": null, "tokens_total": 171, "tokens_per_sec": 143.5878082111153, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query calculates the sum for the last 3 calendar months from the current date, while the generated query uses quarter-based truncation. The generated query's date range corresponds to the previous full quarter (e.g., 2023-10-01 to 2024-01-01) rather than exactly 3 months from today. This creates a mismatch when the current date is not the first day of a quarter, leading to different time windows and potentially different results."}
{"example_id": 3074, "sql_complexity": "multiple_joins", "prompt": "Find the top 5 players with the highest scores in the 'historical_tournaments' view, including their scores and the names of the tournaments they participated in.", "context": "CREATE VIEW historical_tournaments AS SELECT tournaments.tournament_name, players.player_name, players.score FROM tournaments JOIN players_scores ON tournaments.tournament_id = players_scores.tournament_id JOIN players ON players_scores.player_id = players.player_id;  CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT);  CREATE TABLE players_scores (player_id INT, tournament_id INT, score INT);  CREATE TABLE players (player_id INT, player_name TEXT);", "reference_sql": "SELECT players.player_name, MAX(players_scores.score) as high_score, tournaments.tournament_name FROM historical_tournaments JOIN players ON historical_tournaments.player_id = players.player_id JOIN players_scores ON historical_tournaments.player_id = players_scores.player_id JOIN tournaments ON players_scores.tournament_id = tournaments.tournament_id GROUP BY players.player_id, tournaments.tournament_name ORDER BY high_score DESC LIMIT 5;", "generated_sql": "SELECT player_name, score, tournament_name\nFROM historical_tournaments\nORDER BY score DESC\nFETCH FIRST 5 ROWS ONLY;", "raw_model_output": "```sql\nSELECT player_name, score, tournament_name\nFROM historical_tournaments\nORDER BY score DESC\nFETCH FIRST 5 ROWS ONLY;\n```", "latency_sec": 1.3384120464324951, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 190, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 222, "tokens_per_sec": 165.8682022414066, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains invalid joins on 'historical_tournaments.player_id' which does not exist in the view (the view lacks a player_id column). The Generated SQL correctly references the view's existing columns (player_name, score, tournament_name). Additionally, the Reference SQL's GROUP BY and MAX() aggregation are unnecessary and would not change results if valid, but the invalid joins make the queries non-equivalent."}
{"example_id": 2219, "sql_complexity": "window functions", "prompt": "What is the average population of cities with a UNESCO World Heritage designation, ordered by designation date?", "context": "CREATE TABLE cities (name VARCHAR(255), population INT, designation_date DATE); INSERT INTO cities (name, population, designation_date) VALUES ('Paris', 2141000, '1991-09-16'); INSERT INTO cities (name, population, designation_date) VALUES ('Rio de Janeiro', 6727000, '2012-07-01');", "reference_sql": "SELECT AVG(population) FROM (SELECT population, ROW_NUMBER() OVER (ORDER BY designation_date) rn FROM cities WHERE name IN (SELECT name FROM heritagesites)) t WHERE rn % 2 = 1;", "generated_sql": "SELECT designation_date, AVG(population) AS average_population\nFROM cities\nGROUP BY designation_date\nORDER BY designation_date;", "raw_model_output": "```sql\nSELECT designation_date, AVG(population) AS average_population\nFROM cities\nGROUP BY designation_date\nORDER BY designation_date;\n```", "latency_sec": 1.3752660751342773, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 160, "prompt_eval_sec": null, "tokens_completion": 30, "completion_eval_sec": null, "tokens_total": 190, "tokens_per_sec": 138.1550839036358, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the average of populations from cities in heritagesites, ordered by designation_date, and averages only odd-numbered rows. The Generated SQL groups cities by designation_date and calculates average population per group. They differ in: 1) Data filtering (heritagesites vs. no filter), 2) Aggregation logic (row-numbered subset vs. group-based averaging), and 3) Output structure (single average vs. per-date averages)."}
{"example_id": 3786, "sql_complexity": "aggregation", "prompt": "Display the names and average co-owner percentages for all properties in the 'property_coownership' table where the co-owner percentage is greater than 60.", "context": "CREATE TABLE property_coownership (property_id INT, owner VARCHAR(255), percentage INT); INSERT INTO property_coownership (property_id, owner, percentage) VALUES (1, 'Mohammed', 70), (1, 'Fatima', 30), (2, 'Jamal', 65), (2, 'Aisha', 35), (3, 'Ali', 75), (3, 'Khadija', 25);", "reference_sql": "SELECT owner, AVG(percentage) FROM property_coownership WHERE percentage > 60 GROUP BY owner;", "generated_sql": "SELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "raw_model_output": "```sql\nSELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;\n```", "latency_sec": 1.3941287994384766, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 189, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 220, "tokens_per_sec": 157.80464479939803, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The only difference is the column alias 'average_percentage' in the generated query, which does not affect the result set's data. Both queries filter rows where percentage > 60, group by owner, and calculate the average percentage for each group."}
{"example_id": 2357, "sql_complexity": "basic SQL", "prompt": "What is the total amount of climate finance invested in renewable energy projects by public and private sectors in Africa?", "context": "CREATE TABLE renewable_energy_projects (project_id INT, sector TEXT, investor_type TEXT, region TEXT, amount FLOAT); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (1, 'Renewable Energy', 'Public', 'Africa', 5000000); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (2, 'Renewable Energy', 'Private', 'Africa', 7000000);", "reference_sql": "SELECT SUM(amount) FROM renewable_energy_projects WHERE sector = 'Renewable Energy' AND region = 'Africa';", "generated_sql": "SELECT investor_type, SUM(amount) AS total_amount\nFROM renewable_energy_projects\nWHERE sector = 'Renewable Energy' AND region = 'Africa'\nGROUP BY investor_type;", "raw_model_output": "```sql\nSELECT investor_type, SUM(amount) AS total_amount\nFROM renewable_energy_projects\nWHERE sector = 'Renewable Energy' AND region = 'Africa'\nGROUP BY investor_type;\n```", "latency_sec": 0.7535810470581055, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 187, "prompt_eval_sec": null, "tokens_completion": 40, "completion_eval_sec": null, "tokens_total": 227, "tokens_per_sec": 301.2283826486642, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single aggregated sum of all amounts for 'Renewable Energy' projects in Africa, while the Generated SQL groups the sum by investor_type. The Reference SQL's output is a single value (e.g., 12,000,000), whereas the Generated SQL returns two rows (Public: 5,000,000 and Private: 7,000,000). The structure and number of results differ, making them non-equivalent."}
{"example_id": 1009, "sql_complexity": "multiple_joins", "prompt": "Find the number of IoT sensors installed in each farm that use Sprinkler irrigation.", "context": "CREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, Farm_id) VALUES (1, 'Soil Moisture', 1), (2, 'Temperature', 1), (3, 'Humidity', 2); CREATE TABLE Irrigation (id INT, Farm_id INT, irrigation_type VARCHAR(50), duration INT); INSERT INTO Irrigation (id, Farm_id, irrigation_type, duration) VALUES (1, 1, 'Sprinkler', 30), (2, 2, 'Drip', 45);", "reference_sql": "SELECT f.id, COUNT(s.id) FROM Farmers f JOIN Irrigation i ON f.id = i.Farm_id JOIN IoT_Sensors s ON f.id = s.Farm_id WHERE i.irrigation_type = 'Sprinkler' GROUP BY f.id;", "generated_sql": "SELECT i.Farm_id, COUNT(s.id) AS sensor_count\nFROM Irrigation i\nJOIN IoT_Sensors s ON i.Farm_id = s.Farm_id\nWHERE i.irrigation_type = 'Sprinkler'\nGROUP BY i.Farm_id;", "raw_model_output": "```sql\nSELECT i.Farm_id, COUNT(s.id) AS sensor_count\nFROM Irrigation i\nJOIN IoT_Sensors s ON i.Farm_id = s.Farm_id\nWHERE i.irrigation_type = 'Sprinkler'\nGROUP BY i.Farm_id;\n```", "latency_sec": 1.6953742504119873, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 215, "prompt_eval_sec": null, "tokens_completion": 60, "completion_eval_sec": null, "tokens_total": 275, "tokens_per_sec": 162.2060733393663, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count IoT_Sensors per Farm_id where Irrigation is 'Sprinkler'. The Reference uses Farmers table but the Generated query directly joins Irrigation and IoT_Sensors. Since Farm_id is shared between tables and the grouping/column selection aligns (f.id \u2261 i.Farm_id, COUNT(s.id)), the results will be identical. The WHERE condition and aggregation logic are equivalent."}
{"example_id": 4217, "sql_complexity": "subqueries", "prompt": "Show consumer preference data for foundations, excluding products from the USA.", "context": "CREATE TABLE cosmetics (product_id INT, product_name VARCHAR(100), product_type VARCHAR(50), is_cruelty_free BOOLEAN, consumer_preference_score INT); INSERT INTO cosmetics (product_id, product_name, product_type, is_cruelty_free, consumer_preference_score) VALUES (1, 'Lipstick A', 'Lipstick', TRUE, 80), (2, 'Foundation B', 'Foundation', FALSE, 90), (3, 'Mascara C', 'Mascara', TRUE, 85), (4, 'Eyeshadow D', 'Eyeshadow', TRUE, 70), (5, 'Blush E', 'Blush', FALSE, 95); CREATE TABLE ingredient_sourcing (ingredient_id INT, ingredient_name VARCHAR(100), sourcing_country VARCHAR(50), is_organic BOOLEAN); INSERT INTO ingredient_sourcing (ingredient_id, ingredient_name, sourcing_country, is_organic) VALUES (1, 'Rosehip Oil', 'Chile', TRUE), (2, 'Shea Butter', 'Ghana', TRUE), (3, 'Jojoba Oil', 'India', TRUE), (4, 'Coconut Oil', 'Philippines', FALSE), (5, 'Aloe Vera', 'USA', TRUE);", "reference_sql": "SELECT * FROM cosmetics WHERE product_type = 'Foundation' AND product_id NOT IN (SELECT cosmetics.product_id FROM cosmetics INNER JOIN ingredient_sourcing ON cosmetics.product_id = ingredient_sourcing.ingredient_id WHERE ingredient_sourcing.sourcing_country = 'USA');", "generated_sql": "SELECT *\nFROM cosmetics\nWHERE product_type = 'Foundation'\n  AND product_id NOT IN (\n    SELECT c.product_id\n    FROM cosmetics c\n    JOIN ingredient_sourcing i ON c.product_id = i.ingredient_id\n    WHERE i.sourcing_country = 'USA'\n  );", "raw_model_output": "```sql\nSELECT *\nFROM cosmetics\nWHERE product_type = 'Foundation'\n  AND product_id NOT IN (\n    SELECT c.product_id\n    FROM cosmetics c\n    JOIN ingredient_sourcing i ON c.product_id = i.ingredient_id\n    WHERE i.sourcing_country = 'USA'\n  );\n```", "latency_sec": 1.4676101207733154, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 336, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 399, "tokens_per_sec": 271.8705699506612, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select from the cosmetics table where product_type is 'Foundation' and product_id is not in a subquery. The subquery in both cases retrieves product_ids from cosmetics joined with ingredient_sourcing on product_id = ingredient_id where sourcing_country is 'USA'. The only difference is the use of table aliases ('cosmetics' vs 'c') which does not affect the semantic logic. The result sets will be identical."}
{"example_id": 5620, "sql_complexity": "basic SQL", "prompt": "What is the recycling rate of plastic in the residential sector in the state of New York?", "context": "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", "reference_sql": "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "generated_sql": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential'\n  AND city = 'New York City'\n  AND material = 'plastic';", "raw_model_output": "```sql\nSELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential'\n  AND city = 'New York City'\n  AND material = 'plastic';\n```", "latency_sec": 0.9420859813690186, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 259, "prompt_eval_sec": null, "tokens_completion": 37, "completion_eval_sec": null, "tokens_total": 296, "tokens_per_sec": 314.1963746980497, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same column 'recycling_rate' from the same table 'recycling_rates_city' with identical WHERE conditions. The order of conditions in the WHERE clause does not affect the result, as logical AND operations are commutative. Both queries filter for sector='residential', city='New York City', and material='plastic'."}
{"example_id": 3151, "sql_complexity": "basic SQL", "prompt": "List all biotech startups that received funding in 2022 and their respective funding amounts.", "context": "CREATE TABLE biotech_startups (name TEXT, funding FLOAT, date DATE); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupA', 3500000, '2022-02-28'); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupB', 4500000, '2022-07-12');", "reference_sql": "SELECT name, funding FROM biotech_startups WHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "generated_sql": "SELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "raw_model_output": "```sql\nSELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;\n```", "latency_sec": 1.0668809413909912, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 159, "prompt_eval_sec": null, "tokens_completion": 28, "completion_eval_sec": null, "tokens_total": 187, "tokens_per_sec": 175.27728985034716, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select records where the date falls within 2022. The first uses BETWEEN '2022-01-01' AND '2022-12-31' (inclusive), while the second uses EXTRACT(YEAR FROM date) = 2022. Since the date column is of type DATE (without time components), both conditions will capture the same rows. All dates in 2022 will satisfy both criteria."}
{"example_id": 2136, "sql_complexity": "window functions", "prompt": "What is the total military equipment sales revenue for each sales representative by fiscal year?", "context": "CREATE TABLE SalesReps (SalesRepID INT, SalesRepName VARCHAR(50), FiscalYear INT, Revenue DECIMAL(10,2)); INSERT INTO SalesReps (SalesRepID, SalesRepName, FiscalYear, Revenue) VALUES (1, 'John Doe', 2020, 150000.00), (2, 'Jane Smith', 2020, 200000.00), (1, 'John Doe', 2021, 180000.00), (2, 'Jane Smith', 2021, 250000.00);", "reference_sql": "SELECT SalesRepName, FiscalYear, SUM(Revenue) OVER (PARTITION BY SalesRepName ORDER BY FiscalYear) AS TotalRevenue FROM SalesReps;", "generated_sql": "SELECT SalesRepName, FiscalYear, SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY SalesRepName, FiscalYear;", "raw_model_output": "```sql\nSELECT SalesRepName, FiscalYear, SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY SalesRepName, FiscalYear;\n```", "latency_sec": 1.1861040592193604, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 201, "prompt_eval_sec": null, "tokens_completion": 35, "completion_eval_sec": null, "tokens_total": 236, "tokens_per_sec": 198.9707379935319, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates a running total (cumulative sum) of Revenue for each SalesRep over FiscalYears, while the Generated SQL aggregates Revenue per SalesRep and FiscalYear. The window function in Reference produces tiered cumulative values, whereas the GROUP BY in Generated returns only per-group totals without progression."}
{"example_id": 5452, "sql_complexity": "basic SQL", "prompt": "What is the name of the farms with a size greater than 150 acres located in 'Texas'?", "context": "CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(50), size INT, location VARCHAR(50)); INSERT INTO farms (id, name, size, location) VALUES (1, 'Smith Farms', 200, 'Texas'), (2, 'Johnson Farms', 100, 'California');", "reference_sql": "SELECT name FROM farms WHERE size > 150 AND location = 'Texas'", "generated_sql": "SELECT name\nFROM farms\nWHERE size > 150 AND location = 'Texas';", "raw_model_output": "```sql\nSELECT name\nFROM farms\nWHERE size > 150 AND location = 'Texas';\n```", "latency_sec": 1.1004900932312012, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 149, "prompt_eval_sec": null, "tokens_completion": 22, "completion_eval_sec": null, "tokens_total": 171, "tokens_per_sec": 155.38531518981583, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only difference is formatting (line breaks), which does not affect SQL execution. Both select 'name' from 'farms' where size > 150 and location is 'Texas'."}
{"example_id": 5152, "sql_complexity": "aggregation", "prompt": "How many international tourists visited Portugal in 2020, broken down by continent?", "context": "CREATE TABLE international_tourists(tourist_id INT, country TEXT, arrival_year INT, continent TEXT);INSERT INTO international_tourists (tourist_id, country, arrival_year, continent) VALUES (1, 'Spain', 2020, 'Europe'), (2, 'France', 2020, 'Europe'), (3, 'Brazil', 2020, 'South America'), (4, 'United States', 2020, 'North America'), (5, 'China', 2020, 'Asia');", "reference_sql": "SELECT continent, COUNT(*) FROM international_tourists WHERE arrival_year = 2020 GROUP BY continent;", "generated_sql": "SELECT continent, COUNT(*) AS num_tourists\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "raw_model_output": "```sql\nSELECT continent, COUNT(*) AS num_tourists\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;\n```", "latency_sec": 1.4559757709503174, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 192, "prompt_eval_sec": null, "tokens_completion": 40, "completion_eval_sec": null, "tokens_total": 232, "tokens_per_sec": 159.34331094574003, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL counts all tourists from 2020 grouped by continent, while the Generated SQL adds a filter for 'country = 'Portugal'' which doesn't exist in the data. Since no rows match the Portugal condition, the Generated SQL returns an empty result set whereas the Reference SQL returns actual counts. The WHERE clause difference makes them non-equivalent."}
{"example_id": 2477, "sql_complexity": "set operations", "prompt": "What is the carbon price in Europe and Australia for the last quarter of 2020?", "context": "CREATE TABLE CarbonPrices (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonPrices (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2020, 4, 25), ('Australia', 2020, 4, 15); CREATE TABLE CarbonTaxes (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonTaxes (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2019, 4, 20), ('Australia', 2019, 4, 10);", "reference_sql": "SELECT Context.Country, Context.CarbonPrice FROM ( SELECT * FROM CarbonPrices WHERE CarbonPrices.Country IN ('Europe', 'Australia') AND CarbonPrices.Year = 2020 AND CarbonPrices.Quarter = 4 UNION SELECT * FROM CarbonTaxes WHERE CarbonTaxes.Country IN ('Europe', 'Australia') AND CarbonTaxes.Year = 2020 AND CarbonTaxes.Quarter = 4 ) AS Context;", "generated_sql": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020 AND Quarter = 4 AND Country IN ('Europe', 'Australia');", "raw_model_output": "```sql\nSELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020 AND Quarter = 4 AND Country IN ('Europe', 'Australia');\n```", "latency_sec": 0.7083878517150879, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 203, "prompt_eval_sec": null, "tokens_completion": 35, "completion_eval_sec": null, "tokens_total": 238, "tokens_per_sec": 335.9741410355567, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL combines results from both CarbonPrices and CarbonTaxes tables using UNION, while the Generated SQL only queries the CarbonPrices table. The Generated SQL omits the CarbonTaxes table entirely, so it would not return any rows from that table even if they existed. Additionally, the Reference SQL's subquery structure and explicit UNION make it fundamentally different from the Generated SQL's single-table query."}
{"example_id": 4573, "sql_complexity": "subqueries", "prompt": "Find the names of all the indigenous communities in the 'Arctic_Communities' table that have a population size greater than the average population size in the 'Antarctic_Communities' table.", "context": "CREATE TABLE Arctic_Communities (name TEXT, population INTEGER); CREATE TABLE Antarctic_Communities (name TEXT, population INTEGER);", "reference_sql": "SELECT name FROM Arctic_Communities WHERE Arctic_Communities.population > (SELECT AVG(population) FROM Antarctic_Communities)", "generated_sql": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "raw_model_output": "```sql\nSELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);\n```", "latency_sec": 1.6600399017333984, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 134, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 166, "tokens_per_sec": 99.99759633889784, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select names from Arctic_Communities where population exceeds the average population of Antarctic_Communities. The generated query omits the table name in the WHERE clause, but since the main query's context is Arctic_Communities, the population column is unambiguously from that table. The subquery structure and logic are identical in both queries."}
{"example_id": 3596, "sql_complexity": "window functions", "prompt": "What is the total revenue for each game in the \"Gaming\" category?", "context": "CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));", "reference_sql": "SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;", "generated_sql": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "raw_model_output": "```sql\nSELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;\n```", "latency_sec": 0.6224420070648193, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 108, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 139, "tokens_per_sec": 223.31397692046343, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total revenue per category for each row using a window function, while the generated query filters to only 'Gaming' category, groups by GameName, and sums revenue per game. The output columns, aggregation logic, and filtering differ significantly."}
{"example_id": 5039, "sql_complexity": "subqueries", "prompt": "What is the total number of community policing events in 'City Park' in 2021?", "context": "CREATE TABLE locations (id INT, name VARCHAR(255)); CREATE TABLE community_policing (id INT, location_id INT, year INT, events INT); INSERT INTO locations (id, name) VALUES (1, 'City Park'); INSERT INTO community_policing (id, location_id, year, events) VALUES (1, 1, 2021, 5);", "reference_sql": "SELECT SUM(events) FROM community_policing WHERE location_id = (SELECT id FROM locations WHERE name = 'City Park') AND year = 2021;", "generated_sql": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park' AND cp.year = 2021;", "raw_model_output": "```sql\nSELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park' AND cp.year = 2021;\n```", "latency_sec": 1.082671880722046, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 162, "prompt_eval_sec": null, "tokens_completion": 47, "completion_eval_sec": null, "tokens_total": 209, "tokens_per_sec": 193.04094224800184, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of events for 'City Park' in 2021. The reference query uses a subquery to get the location ID, while the generated query uses a JOIN. Since there's a one-to-one relationship between the location name 'City Park' and its ID in the provided data, both approaches yield the same result."}
{"example_id": 2724, "sql_complexity": "basic SQL", "prompt": "What is the earliest installation date for solar panels in Italy?", "context": "CREATE TABLE solar_panels_italy (id INT, installation_date DATE); INSERT INTO solar_panels_italy (id, installation_date) VALUES (1, '2018-01-01'), (2, '2019-01-01'), (3, '2020-01-01');", "reference_sql": "SELECT MIN(installation_date) as earliest_date FROM solar_panels_italy;", "generated_sql": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "raw_model_output": "```sql\nSELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;\n```", "latency_sec": 0.823369026184082, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 143, "prompt_eval_sec": null, "tokens_completion": 25, "completion_eval_sec": null, "tokens_total": 168, "tokens_per_sec": 204.0397375385845, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the minimum installation_date from the same table. The only difference is the column alias name ('earliest_date' vs 'earliest_installation_date'), which does not affect the semantic result since aliases do not change the computed values or data returned."}
{"example_id": 2200, "sql_complexity": "single join", "prompt": "Which diversity programs are currently being participated in by employees in the HR department?", "context": "CREATE TABLE Employees (Employee_ID INT, First_Name VARCHAR(20), Last_Name VARCHAR(20), Department VARCHAR(20), Salary DECIMAL(10,2), Date_Hired DATE); CREATE TABLE Diversity_Programs (Program_ID INT, Program_Name VARCHAR(50), Participant_ID INT, Date_Started DATE, Date_Ended DATE);", "reference_sql": "SELECT dp.Program_Name FROM Diversity_Programs dp JOIN Employees e ON dp.Participant_ID = e.Employee_ID WHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "generated_sql": "SELECT DISTINCT dp.Program_ID, dp.Program_Name\nFROM Diversity_Programs dp\nJOIN Employees e ON dp.Participant_ID = e.Employee_ID\nWHERE e.Department = 'HR'\n  AND (dp.Date_Ended IS NULL OR dp.Date_Ended > CURRENT_DATE)\n  AND dp.Date_Started <= CURRENT_DATE;", "raw_model_output": "```sql\nSELECT DISTINCT dp.Program_ID, dp.Program_Name\nFROM Diversity_Programs dp\nJOIN Employees e ON dp.Participant_ID = e.Employee_ID\nWHERE e.Department = 'HR'\n  AND (dp.Date_Ended IS NULL OR dp.Date_Ended > CURRENT_DATE)\n  AND dp.Date_Started <= CURRENT_DATE;\n```", "latency_sec": 0.9702367782592773, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 150, "prompt_eval_sec": null, "tokens_completion": 69, "completion_eval_sec": null, "tokens_total": 219, "tokens_per_sec": 225.7180977955841, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects only 'Program_Name' for HR employees with unended diversity programs (Date_Ended IS NULL), while the Generated SQL selects 'Program_ID' and 'Program_Name' with additional conditions: (Date_Ended IS NULL OR Date_Ended > CURRENT_DATE) and Date_Started <= CURRENT_DATE. The Generated SQL also includes programs that ended in the future or haven't started yet, and it introduces a DISTINCT clause, altering both column selection and result filtering."}
{"example_id": 4359, "sql_complexity": "window functions", "prompt": "Which destinations have the least hotel awards?", "context": "CREATE TABLE Destinations (destination_id INT, destination_name TEXT, country TEXT, awards INT); INSERT INTO Destinations (destination_id, destination_name, country, awards) VALUES (1, 'City A', 'Germany', 3), (2, 'City B', 'Switzerland', 5), (3, 'City C', 'Norway', 2);", "reference_sql": "SELECT destination_name, country, awards, RANK() OVER (PARTITION BY country ORDER BY awards ASC) AS rank FROM Destinations;", "generated_sql": "SELECT destination_name, country, awards\nFROM Destinations\nWHERE awards = (SELECT MIN(awards) FROM Destinations);", "raw_model_output": "```sql\nSELECT destination_name, country, awards\nFROM Destinations\nWHERE awards = (SELECT MIN(awards) FROM Destinations);\n```", "latency_sec": 2.1609201431274414, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 151, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 182, "tokens_per_sec": 84.22338075695676, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates ranks within each country based on awards, while the Generated SQL filters for destinations with the absolute minimum awards in the entire table. The Reference SQL returns all rows with rank information, whereas the Generated SQL only returns rows matching the global minimum awards value. Their result sets differ in both content and structure."}
{"example_id": 1373, "sql_complexity": "subqueries", "prompt": "What is the total value of military equipment sales to Africa in the last 12 months?", "context": "CREATE TABLE Military_Equipment_Sales(sale_id INT, sale_date DATE, equipment_type VARCHAR(50), country VARCHAR(50), sale_value DECIMAL(10,2));", "reference_sql": "SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN (SELECT country FROM World_Countries WHERE continent = 'Africa') AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "generated_sql": "SELECT SUM(sale_value) AS total_sales_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= CURRENT_DATE - INTERVAL '12' MONTH;", "raw_model_output": "```sql\nSELECT SUM(sale_value) AS total_sales_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= CURRENT_DATE - INTERVAL '12' MONTH;\n```", "latency_sec": 0.8202660083770752, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 121, "prompt_eval_sec": null, "tokens_completion": 44, "completion_eval_sec": null, "tokens_total": 165, "tokens_per_sec": 201.15425766143625, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query uses a subquery to select countries in Africa from World_Countries, while the generated query directly filters country = 'Africa'. This assumes the country column contains 'Africa' as a value, but the original logic intended to filter based on continent relationship. The date calculations are equivalent, but the country filtering logic differs semantically."}
{"example_id": 904, "sql_complexity": "basic SQL", "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?", "context": "CREATE TABLE loans (id INT, amount DECIMAL, date DATE, loan_type VARCHAR); INSERT INTO loans (id, amount, date, loan_type) VALUES (1, 5000, '2021-09-05', 'Shariah-compliant'), (2, 7000, '2021-10-07', 'socially responsible'), (3, 9000, '2021-11-03', 'Shariah-compliant'), (4, 11000, '2021-12-31', 'Shariah-compliant');", "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';", "generated_sql": "SELECT MIN(amount) AS min_shariah_compliant_loan\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date >= '2021-10-01'\n  AND date <= '2021-12-31';", "raw_model_output": "```sql\nSELECT MIN(amount) AS min_shariah_compliant_loan\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date >= '2021-10-01'\n  AND date <= '2021-12-31';\n```", "latency_sec": 0.9789197444915771, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 206, "prompt_eval_sec": null, "tokens_completion": 57, "completion_eval_sec": null, "tokens_total": 263, "tokens_per_sec": 268.6634951229783, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter for 'Shariah-compliant' loans in the fourth quarter of 2021. The Reference SQL uses EXTRACT(QUARTER) = 4, which corresponds to October-December, while the Generated SQL uses a date range from 2021-10-01 to 2021-12-31. These conditions are equivalent for the given data. Both select the minimum amount from the same subset of loans (ids 3 and 4), resulting in the same value (9000)."}
{"example_id": 3299, "sql_complexity": "set operations", "prompt": "How many schools and hospitals are there in Colombia and which ones need repairs?", "context": "CREATE TABLE schools (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN); CREATE TABLE hospitals (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN);", "reference_sql": "SELECT 'Schools' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM schools WHERE country = 'Colombia' UNION ALL SELECT 'Hospitals' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM hospitals WHERE country = 'Colombia';", "generated_sql": "SELECT 'school' AS type, name, needs_repair\nFROM schools\nWHERE country = 'Colombia'\nUNION ALL\nSELECT 'hospital' AS type, name, needs_repair\nFROM hospitals\nWHERE country = 'Colombia';\n\n-- To get the counts:\nSELECT \n  (SELECT COUNT(*) FROM schools WHERE country = 'Colombia') AS school_count,\n  (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia') AS hospital_count;", "raw_model_output": "```sql\nSELECT 'school' AS type, name, needs_repair\nFROM schools\nWHERE country = 'Colombia'\nUNION ALL\nSELECT 'hospital' AS type, name, needs_repair\nFROM hospitals\nWHERE country = 'Colombia';\n\n-- To get the counts:\nSELECT \n  (SELECT COUNT(*) FROM schools WHERE country = 'Colombia') AS school_count,\n  (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia') AS hospital_count;\n```", "latency_sec": 1.4630379676818848, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 126, "prompt_eval_sec": null, "tokens_completion": 99, "completion_eval_sec": null, "tokens_total": 225, "tokens_per_sec": 153.78958370882336, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL aggregates data into summary counts and repairs needed for schools/hospitals in Colombia, producing 2 rows. The Generated SQL first returns individual records (names/needs_repair) for schools/hospitals (multiple rows) and then separate counts in a different format. The output structures and data granularities differ significantly."}
{"example_id": 907, "sql_complexity": "set operations", "prompt": "What is the total quantity of items with type 'E' or type 'F' in warehouse O and warehouse P?", "context": "CREATE TABLE warehouse_o(item_id INT, item_type VARCHAR(10), quantity INT);CREATE TABLE warehouse_p(item_id INT, item_type VARCHAR(10), quantity INT);INSERT INTO warehouse_o(item_id, item_type, quantity) VALUES (1, 'E', 200), (2, 'F', 300), (3, 'E', 50), (4, 'F', 400);INSERT INTO warehouse_p(item_id, item_type, quantity) VALUES (1, 'E', 150), (2, 'F', 250), (3, 'E', 40), (4, 'F', 350);", "reference_sql": "SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F') UNION ALL SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F');", "generated_sql": "SELECT\n  SUM(quantity) AS total_quantity\nFROM (\n  SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F')\n  UNION ALL\n  SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F')\n) AS all_quantities;", "raw_model_output": "```sql\nSELECT\n  SUM(quantity) AS total_quantity\nFROM (\n  SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F')\n  UNION ALL\n  SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F')\n) AS all_quantities;\n```", "latency_sec": 1.158066987991333, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 223, "prompt_eval_sec": null, "tokens_completion": 59, "completion_eval_sec": null, "tokens_total": 282, "tokens_per_sec": 243.5092295387238, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns individual quantity values from both tables, while the Generated SQL aggregates all quantities into a single sum. The first produces multiple rows of raw data, and the second produces one row with a total, making their result structures fundamentally different."}
{"example_id": 1400, "sql_complexity": "single join", "prompt": "What is the maximum co-ownership duration for properties in the neighborhood of 'Chinatown' in San Francisco?'", "context": "CREATE TABLE sf_neighborhoods (neighborhood_id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO sf_neighborhoods (neighborhood_id, name, city) VALUES (1, 'Chinatown', 'San Francisco'); CREATE TABLE co_ownership (co_ownership_id INT, property_id INT, co_owner_id INT, start_date DATE, end_date DATE); INSERT INTO co_ownership (co_ownership_id, property_id, co_owner_id, start_date, end_date) VALUES (1, 1, 2, '2010-01-01', '2020-01-01'), (2, 2, 3, '2015-01-01', '2022-01-01'); CREATE TABLE properties (property_id INT, city VARCHAR(255)); INSERT INTO properties (property_id, city) VALUES (1, 'San Francisco'), (2, 'San Francisco');", "reference_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) as max_duration FROM co_ownership JOIN properties ON co_ownership.property_id = properties.property_id WHERE properties.city = 'San Francisco' AND name = 'Chinatown';", "generated_sql": "SELECT MAX(DATEDIFF(\n    COALESCE(co.end_date, CURRENT_DATE),\n    co.start_date\n)) AS max_co_ownership_duration\nFROM co_ownership co\nJOIN properties p ON co.property_id = p.property_id\nJOIN sf_neighborhoods n ON p.city = n.city\nWHERE n.name = 'Chinatown' AND n.city = 'San Francisco';", "raw_model_output": "```sql\nSELECT MAX(DATEDIFF(\n    COALESCE(co.end_date, CURRENT_DATE),\n    co.start_date\n)) AS max_co_ownership_duration\nFROM co_ownership co\nJOIN properties p ON co.property_id = p.property_id\nJOIN sf_neighborhoods n ON p.city = n.city\nWHERE n.name = 'Chinatown' AND n.city = 'San Francisco';\n```", "latency_sec": 1.3025178909301758, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 280, "prompt_eval_sec": null, "tokens_completion": 82, "completion_eval_sec": null, "tokens_total": 362, "tokens_per_sec": 277.9232458307982, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL references 'name' without joining sf_neighborhoods, causing an error. The Generated SQL correctly joins sf_neighborhoods and uses COALESCE for end_date, handling nulls differently. Additionally, the Reference SQL's WHERE clause incorrectly references 'name' from an unjoined table."}
{"example_id": 5248, "sql_complexity": "window functions", "prompt": "Find the top 5 games by rating", "context": "CREATE TABLE games (game_id INT PRIMARY KEY, name VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2));", "reference_sql": "SELECT * FROM (SELECT name, rating, ROW_NUMBER() OVER (ORDER BY rating DESC) as rn FROM games) t WHERE rn <= 5;", "generated_sql": "SELECT game_id, name, genre, rating\nFROM games\nORDER BY rating DESC\nFETCH FIRST 5 ROWS ONLY;", "raw_model_output": "```sql\nSELECT game_id, name, genre, rating\nFROM games\nORDER BY rating DESC\nFETCH FIRST 5 ROWS ONLY;\n```", "latency_sec": 1.9475228786468506, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 104, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 135, "tokens_per_sec": 69.31882622801265, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns only 'name', 'rating', and 'rn' columns with a row number, while the Generated SQL returns all columns (game_id, name, genre, rating). Additionally, the Reference SQL uses ROW_NUMBER() which assigns unique numbers, whereas the Generated SQL uses FETCH FIRST 5 ROWS ONLY which may handle ties differently. The result sets have different structures and potentially different data."}
{"example_id": 778, "sql_complexity": "single join", "prompt": "What is the maximum property price in wheelchair-accessible neighborhoods in Singapore?", "context": "CREATE TABLE Singapore_Neighborhoods (Neighborhood_Name TEXT, Wheelchair_Accessibility BOOLEAN); INSERT INTO Singapore_Neighborhoods (Neighborhood_Name, Wheelchair_Accessibility) VALUES ('Orchard', true), ('Marina Bay', true), ('Chinatown', false), ('Little India', false), ('Bugis', true); CREATE TABLE Singapore_Properties (Neighborhood_Name TEXT, Property_Price INTEGER); INSERT INTO Singapore_Properties (Neighborhood_Name, Property_Price) VALUES ('Orchard', 2000000), ('Marina Bay', 3000000), ('Chinatown', 1500000), ('Little India', 1200000), ('Bugis', 1800000);", "reference_sql": "SELECT MAX(Singapore_Properties.Property_Price) FROM Singapore_Properties INNER JOIN Singapore_Neighborhoods ON Singapore_Properties.Neighborhood_Name = Singapore_Neighborhoods.Neighborhood_Name WHERE Singapore_Neighborhoods.Wheelchair_Accessibility = true;", "generated_sql": "SELECT MAX(p.Property_Price) AS Max_Property_Price\nFROM Singapore_Properties p\nJOIN Singapore_Neighborhoods n\n  ON p.Neighborhood_Name = n.Neighborhood_Name\nWHERE n.Wheelchair_Accessibility = TRUE;", "raw_model_output": "```sql\nSELECT MAX(p.Property_Price) AS Max_Property_Price\nFROM Singapore_Properties p\nJOIN Singapore_Neighborhoods n\n  ON p.Neighborhood_Name = n.Neighborhood_Name\nWHERE n.Wheelchair_Accessibility = TRUE;\n```", "latency_sec": 1.0360310077667236, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 226, "prompt_eval_sec": null, "tokens_completion": 55, "completion_eval_sec": null, "tokens_total": 281, "tokens_per_sec": 271.22740332427475, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an INNER JOIN between Singapore_Properties and Singapore_Neighborhoods on Neighborhood_Name, filter where Wheelchair_Accessibility is true, and select the maximum Property_Price. The generated query uses table aliases (p and n) but retains the same logical structure, conditions, and output as the reference query."}
{"example_id": 3859, "sql_complexity": "aggregation", "prompt": "What is the total number of mental health parity violations by month and year?", "context": "CREATE TABLE mental_health_parity_reports (report_id INT, violation_date DATE); INSERT INTO mental_health_parity_reports (report_id, violation_date) VALUES (1, '2022-01-01'), (2, '2022-02-15'), (3, '2022-03-05'), (4, '2022-04-20'), (5, '2021-06-12'), (6, '2021-07-28');", "reference_sql": "SELECT EXTRACT(MONTH FROM violation_date) AS month, EXTRACT(YEAR FROM violation_date) AS year, COUNT(*) FROM mental_health_parity_reports GROUP BY month, year;", "generated_sql": "SELECT\n  EXTRACT(YEAR FROM violation_date) AS year,\n  EXTRACT(MONTH FROM violation_date) AS month,\n  COUNT(*) AS total_violations\nFROM\n  mental_health_parity_reports\nGROUP BY\n  EXTRACT(YEAR FROM violation_date),\n  EXTRACT(MONTH FROM violation_date)\nORDER BY\n  year,\n  month;", "raw_model_output": "```sql\nSELECT\n  EXTRACT(YEAR FROM violation_date) AS year,\n  EXTRACT(MONTH FROM violation_date) AS month,\n  COUNT(*) AS total_violations\nFROM\n  mental_health_parity_reports\nGROUP BY\n  EXTRACT(YEAR FROM violation_date),\n  EXTRACT(MONTH FROM violation_date)\nORDER BY\n  year,\n  month;\n```", "latency_sec": 0.9042990207672119, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 179, "prompt_eval_sec": null, "tokens_completion": 81, "completion_eval_sec": null, "tokens_total": 260, "tokens_per_sec": 287.51551647088445, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries group by the same extracted year and month from violation_date, count the number of violations, and produce identical result sets. The differences in column order, alias names, and the addition of an ORDER BY clause in the generated query do not affect the semantic equivalence of the results. The GROUP BY clause in both queries uses the same expressions, ensuring the same aggregation."}
{"example_id": 3551, "sql_complexity": "multiple_joins", "prompt": "List all artists who have performed in New York and Chicago, along with their highest-earning performance.", "context": "CREATE TABLE artist_events (artist_id INT, event_id INT, earnings DECIMAL(5,2)); CREATE TABLE artists (id INT, name VARCHAR(50)); CREATE TABLE events (id INT, city VARCHAR(20));", "reference_sql": "SELECT artists.name, MAX(artist_events.earnings) FROM artists INNER JOIN artist_events ON artists.id = artist_events.artist_id INNER JOIN events ON artist_events.event_id = events.id WHERE city IN ('New York', 'Chicago') GROUP BY artists.name;", "generated_sql": "SELECT a.name, \n       MAX(ae.earnings) AS highest_earning\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nJOIN events e ON ae.event_id = e.id\nWHERE a.id IN (\n    SELECT ae2.artist_id\n    FROM artist_events ae2\n    JOIN events e2 ON ae2.event_id = e2.id\n    WHERE e2.city = 'New York'\n)\nAND a.id IN (\n    SELECT ae3.artist_id\n    FROM artist_events ae3\n    JOIN events e3 ON ae3.event_id = e3.id\n    WHERE e3.city = 'Chicago'\n)\nGROUP BY a.id, a.name;", "raw_model_output": "```sql\nSELECT a.name, \n       MAX(ae.earnings) AS highest_earning\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nJOIN events e ON ae.event_id = e.id\nWHERE a.id IN (\n    SELECT ae2.artist_id\n    FROM artist_events ae2\n    JOIN events e2 ON ae2.event_id = e2.id\n    WHERE e2.city = 'New York'\n)\nAND a.id IN (\n    SELECT ae3.artist_id\n    FROM artist_events ae3\n    JOIN events e3 ON ae3.event_id = e3.id\n    WHERE e3.city = 'Chicago'\n)\nGROUP BY a.id, a.name;\n```", "latency_sec": 1.3849139213562012, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 132, "prompt_eval_sec": null, "tokens_completion": 147, "completion_eval_sec": null, "tokens_total": 279, "tokens_per_sec": 201.4565639767592, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query selects artists who have events in either 'New York' or 'Chicago', while the generated query requires artists to have events in both cities (via two separate IN clauses). The generated query's WHERE clause enforces a logical AND between the two city conditions, whereas the reference uses an IN clause for OR. This makes the generated query more restrictive."}
{"example_id": 5168, "sql_complexity": "aggregation", "prompt": "Get the number of renewable energy projects in Australia for each project type.", "context": "CREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT);", "reference_sql": "SELECT project_type, COUNT(*) FROM renewable_projects WHERE project_location = 'Australia' GROUP BY project_type;", "generated_sql": "SELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "raw_model_output": "```sql\nSELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;\n```", "latency_sec": 0.9535081386566162, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 114, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 145, "tokens_per_sec": 152.07001820067146, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (project_type and COUNT(*)), apply the same WHERE condition (project_location = 'Australia'), and group by the same column (project_type). The generated query adds an alias (project_count) for the COUNT(*) column, but this does not affect the semantic equivalence of the result set. The core data returned remains identical."}
{"example_id": 4916, "sql_complexity": "aggregation", "prompt": "What is the maximum revenue generated from selling Yttrium in India in the past 3 years?", "context": "CREATE TABLE Yttrium_Sales (id INT PRIMARY KEY, year INT, country VARCHAR(20), quantity INT, price PER_KG); INSERT INTO Yttrium_Sales (id, year, country, quantity, price) VALUES (1, 2019, 'India', 120, 40), (2, 2020, 'India', 130, 45), (3, 2021, 'India', 140, 50), (4, 2019, 'China', 150, 35), (5, 2020, 'China', 160, 40), (6, 2021, 'China', 170, 45);", "reference_sql": "SELECT MAX(quantity * price) FROM Yttrium_Sales WHERE country = 'India' GROUP BY year ORDER BY year DESC LIMIT 3;", "generated_sql": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India' AND year >= (SELECT MAX(year) FROM Yttrium_Sales) - 2;", "raw_model_output": "```sql\nSELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India' AND year >= (SELECT MAX(year) FROM Yttrium_Sales) - 2;\n```", "latency_sec": 0.9737350940704346, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 234, "prompt_eval_sec": null, "tokens_completion": 50, "completion_eval_sec": null, "tokens_total": 284, "tokens_per_sec": 291.6604338586743, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns the maximum revenue per year for India, ordered by year descending with a limit of 3 rows (one per year). The Generated SQL calculates the maximum revenue across all years >= 2019 (i.e., 2019-2021) for India, returning a single value. The Reference query produces multiple rows (one per year), while the Generated query returns a single row, making them semantically different."}
{"example_id": 812, "sql_complexity": "multiple_joins", "prompt": "What is the average salary of 'engineer' workers in each factory?", "context": "CREATE TABLE factories (factory_id INT, factory_name VARCHAR(20)); INSERT INTO factories VALUES (1, 'Factory X'), (2, 'Factory Y'), (3, 'Factory Z'); CREATE TABLE roles (role_id INT, role_name VARCHAR(20)); INSERT INTO roles VALUES (1, 'engineer'), (2, 'manager'), (3, 'assistant'); CREATE TABLE workers (worker_id INT, factory_id INT, role_id INT, salary DECIMAL(5,2)); INSERT INTO workers VALUES (1, 1, 1, 50000.00), (2, 1, 2, 70000.00), (3, 2, 1, 55000.00), (4, 2, 3, 40000.00), (5, 3, 1, 60000.00);", "reference_sql": "SELECT f.factory_name, AVG(salary) FROM workers w INNER JOIN factories f ON w.factory_id = f.factory_id INNER JOIN roles r ON w.role_id = r.role_id WHERE r.role_name = 'engineer' GROUP BY f.factory_name;", "generated_sql": "SELECT f.factory_name, AVG(w.salary) AS average_engineer_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY f.factory_name;", "raw_model_output": "```sql\nSELECT f.factory_name, AVG(w.salary) AS average_engineer_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY f.factory_name;\n```", "latency_sec": 1.1494450569152832, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 261, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 324, "tokens_per_sec": 281.87515188373163, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries compute the average salary of engineers per factory. The differences are purely syntactic: the generated query adds an explicit alias 'average_engineer_salary' and uses 'JOIN' instead of 'INNER JOIN', but the core logic (join conditions, filter, grouping, and aggregation) remains identical."}
{"example_id": 5784, "sql_complexity": "set operations", "prompt": "List the number of users who have completed a workout of a specific type (e.g. Running) and have a membership status of 'Active'.", "context": "CREATE TABLE workouts (id INT, user_id INT, workout_type VARCHAR(20)); CREATE TABLE members (id INT, name VARCHAR(50), membership_status VARCHAR(20), state VARCHAR(20)); INSERT INTO workouts (id, user_id, workout_type) VALUES (1, 1, 'Running'), (2, 1, 'Cycling'), (3, 2, 'Running'), (4, 3, 'Cycling'), (5, 3, 'Swimming'), (6, 4, 'Running'), (7, 4, 'Swimming'); INSERT INTO members (id, name, membership_status, state) VALUES (1, 'John Doe', 'Active', 'Texas'), (2, 'Jane Doe', 'Inactive', 'California'), (3, 'Bob Smith', 'Active', 'Texas'), (4, 'Alice Johnson', 'Active', 'California');", "reference_sql": "SELECT COUNT(*) FROM (SELECT user_id FROM workouts WHERE workout_type = 'Running' INTERSECT SELECT id FROM members WHERE membership_status = 'Active') AS user_set;", "generated_sql": "SELECT COUNT(DISTINCT m.id) AS num_users\nFROM members m\nJOIN workouts w ON m.id = w.user_id\nWHERE w.workout_type = 'Running'\n  AND m.membership_status = 'Active';", "raw_model_output": "```sql\nSELECT COUNT(DISTINCT m.id) AS num_users\nFROM members m\nJOIN workouts w ON m.id = w.user_id\nWHERE w.workout_type = 'Running'\n  AND m.membership_status = 'Active';\n```", "latency_sec": 1.1992149353027344, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 280, "prompt_eval_sec": null, "tokens_completion": 51, "completion_eval_sec": null, "tokens_total": 331, "tokens_per_sec": 276.0139073121543, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct users who have at least one 'Running' workout and are active members. The Reference SQL uses INTERSECT to find the intersection of user_ids from workouts and active members, while the Generated SQL uses a JOIN with DISTINCT to achieve the same result. Both approaches ensure each user is counted once, regardless of multiple entries."}
{"example_id": 3038, "sql_complexity": "subqueries", "prompt": "What is the total assets of clients who have invested in mutual funds but not in stocks?", "context": "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks'), (3, 'Mutual Funds');", "reference_sql": "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type = 'Mutual Funds' AND c.client_id NOT IN (SELECT client_id FROM investments WHERE investment_type = 'Stocks');", "generated_sql": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nWHERE c.client_id IN (\n    SELECT i.client_id\n    FROM investments i\n    GROUP BY i.client_id\n    HAVING\n        SUM(CASE WHEN i.investment_type = 'Mutual Funds' THEN 1 ELSE 0 END) > 0\n        AND SUM(CASE WHEN i.investment_type = 'Stocks' THEN 1 ELSE 0 END) = 0\n)", "raw_model_output": "```sql\nSELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nWHERE c.client_id IN (\n    SELECT i.client_id\n    FROM investments i\n    GROUP BY i.client_id\n    HAVING\n        SUM(CASE WHEN i.investment_type = 'Mutual Funds' THEN 1 ELSE 0 END) > 0\n        AND SUM(CASE WHEN i.investment_type = 'Stocks' THEN 1 ELSE 0 END) = 0\n)\n```", "latency_sec": 1.4833569526672363, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 196, "prompt_eval_sec": null, "tokens_completion": 103, "completion_eval_sec": null, "tokens_total": 299, "tokens_per_sec": 201.56982408203612, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query returns individual client total_assets values for clients with 'Mutual Funds' investments and no 'Stocks' investments, while the generated query aggregates these values into a single SUM. Additionally, the generated query's subquery may include client_ids from investments that don't exist in the clients table (e.g., client_id 3 in the sample data), leading to different results."}
{"example_id": 1078, "sql_complexity": "basic SQL", "prompt": "What is the maximum and minimum temperature difference between any two Arctic research stations?", "context": "CREATE TABLE arctic_stations (id INT, name TEXT, location TEXT, temperature DECIMAL(5,2)); INSERT INTO arctic_stations (id, name, location, temperature) VALUES (1, 'Station A', 'Greenland', 2.3), (2, 'Station B', 'Canada', -5.2);", "reference_sql": "SELECT a.name as station1, b.name as station2, MAX(ABS(a.temperature - b.temperature)) as temp_diff FROM arctic_stations a, arctic_stations b ORDER BY temp_diff DESC LIMIT 1", "generated_sql": "SELECT \n    MAX(ABS(s1.temperature - s2.temperature)) AS max_difference,\n    MIN(ABS(s1.temperature - s2.temperature)) AS min_difference\nFROM \n    arctic_stations s1\nJOIN \n    arctic_stations s2\n    ON s1.id < s2.id;", "raw_model_output": "```sql\nSELECT \n    MAX(ABS(s1.temperature - s2.temperature)) AS max_difference,\n    MIN(ABS(s1.temperature - s2.temperature)) AS min_difference\nFROM \n    arctic_stations s1\nJOIN \n    arctic_stations s2\n    ON s1.id < s2.id;\n```", "latency_sec": 1.2569773197174072, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 153, "prompt_eval_sec": null, "tokens_completion": 69, "completion_eval_sec": null, "tokens_total": 222, "tokens_per_sec": 176.61416520220897, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL finds the single maximum temperature difference between any two stations and returns the station names, while the Generated SQL calculates both maximum and minimum temperature differences for unique station pairs. The output columns and purpose differ: the first focuses on the largest difference with station names, the second provides both max and min values without station names."}
{"example_id": 5015, "sql_complexity": "basic SQL", "prompt": "Calculate the average recycling rate", "context": "CREATE TABLE recycling_rates (id INT PRIMARY KEY, location VARCHAR(50), rate FLOAT);", "reference_sql": "SELECT AVG(rate) FROM recycling_rates;", "generated_sql": "SELECT AVG(rate) AS average_recycling_rate\nFROM recycling_rates;", "raw_model_output": "```sql\nSELECT AVG(rate) AS average_recycling_rate\nFROM recycling_rates;\n```", "latency_sec": 0.5601069927215576, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 91, "prompt_eval_sec": null, "tokens_completion": 19, "completion_eval_sec": null, "tokens_total": 110, "tokens_per_sec": 196.39104926276752, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average of the 'rate' column from the recycling_rates table. The generated query adds an alias ('average_recycling_rate') to the result, but this does not affect the computed value. The semantic result (the average value) remains the same."}
{"example_id": 1533, "sql_complexity": "subqueries", "prompt": "Which programs had the highest volunteer participation rate in the last quarter?", "context": "CREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), NumVolunteers INT); CREATE TABLE VolunteerEvents (EventID INT, ProgramID INT, EventDate DATE, NumVolunteers INT);", "reference_sql": "SELECT p.ProgramName, COUNT(v.EventID) / (SELECT COUNT(*) FROM VolunteerEvents WHERE EventDate >= DATEADD(quarter, -1, GETDATE())) * 100.0 AS VolunteerParticipationRate FROM Programs p INNER JOIN VolunteerEvents v ON p.ProgramID = v.ProgramID WHERE v.EventDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.ProgramName ORDER BY VolunteerParticipationRate DESC;", "generated_sql": "SELECT\n    p.ProgramID,\n    p.ProgramName,\n    SUM(ve.NumVolunteers) AS TotalVolunteers,\n    p.NumVolunteers AS RegisteredVolunteers,\n    CASE \n        WHEN p.NumVolunteers > 0 THEN SUM(ve.NumVolunteers) * 1.0 / p.NumVolunteers\n        ELSE NULL\n    END AS ParticipationRate\nFROM\n    Programs p\n    JOIN VolunteerEvents ve ON p.ProgramID = ve.ProgramID\nWHERE\n    ve.EventDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n    AND ve.EventDate < DATE_TRUNC('quarter', CURRENT_DATE)\nGROUP BY\n    p.ProgramID, p.ProgramName, p.NumVolunteers\nHAVING\n    p.NumVolunteers > 0\nORDER BY\n    ParticipationRate DESC\nFETCH FIRST 1 ROW WITH TIES;", "raw_model_output": "```sql\nSELECT\n    p.ProgramID,\n    p.ProgramName,\n    SUM(ve.NumVolunteers) AS TotalVolunteers,\n    p.NumVolunteers AS RegisteredVolunteers,\n    CASE \n        WHEN p.NumVolunteers > 0 THEN SUM(ve.NumVolunteers) * 1.0 / p.NumVolunteers\n        ELSE NULL\n    END AS ParticipationRate\nFROM\n    Programs p\n    JOIN VolunteerEvents ve ON p.ProgramID = ve.ProgramID\nWHERE\n    ve.EventDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n    AND ve.EventDate < DATE_TRUNC('quarter', CURRENT_DATE)\nGROUP BY\n    p.ProgramID, p.ProgramName, p.NumVolunteers\nHAVING\n    p.NumVolunteers > 0\nORDER BY\n    ParticipationRate DESC\nFETCH FIRST 1 ROW WITH TIES;\n```", "latency_sec": 1.9665369987487793, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 127, "prompt_eval_sec": null, "tokens_completion": 185, "completion_eval_sec": null, "tokens_total": 312, "tokens_per_sec": 158.65452834017964, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query calculates the ratio of event counts in the last quarter to total events in the same period, while the generated query sums volunteer numbers and compares them to registered volunteers. Additionally, the date ranges differ (last quarter vs. previous quarter), and the generated query includes a HAVING clause and different grouping columns. The metrics (event count vs. volunteer sum) and time frames produce fundamentally different results."}
{"example_id": 4021, "sql_complexity": "subqueries", "prompt": "What is the percentage of energy efficiency improvement, per sector, compared to 2015 levels?", "context": "CREATE TABLE energy_efficiency (id INT, sector VARCHAR(50), year INT, efficiency FLOAT); INSERT INTO energy_efficiency (id, sector, year, efficiency) VALUES (1, 'Industry', 2015, 100.0), (2, 'Industry', 2020, 105.0), (3, 'Residential', 2015, 100.0), (4, 'Residential', 2020, 103.0);", "reference_sql": "SELECT sector, (SUM(efficiency) / (SELECT SUM(efficiency) FROM energy_efficiency WHERE year = 2015 AND sector = e.sector) * 100.0) - 100.0 AS improvement FROM energy_efficiency e WHERE year = 2020 GROUP BY sector;", "generated_sql": "SELECT \n    e2015.sector,\n    ((e2020.efficiency - e2015.efficiency) / e2015.efficiency) * 100 AS percentage_improvement\nFROM \n    energy_efficiency e2015\nJOIN \n    energy_efficiency e2020\n    ON e2015.sector = e2020.sector\nWHERE \n    e2015.year = 2015\n    AND e2020.year = 2020;", "raw_model_output": "```sql\nSELECT \n    e2015.sector,\n    ((e2020.efficiency - e2015.efficiency) / e2015.efficiency) * 100 AS percentage_improvement\nFROM \n    energy_efficiency e2015\nJOIN \n    energy_efficiency e2020\n    ON e2015.sector = e2020.sector\nWHERE \n    e2015.year = 2015\n    AND e2020.year = 2020;\n```", "latency_sec": 1.4894349575042725, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 181, "prompt_eval_sec": null, "tokens_completion": 103, "completion_eval_sec": null, "tokens_total": 284, "tokens_per_sec": 190.67633572658733, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL calculates the percentage improvement for each sector by aggregating efficiency values (SUM) for 2020 and comparing it to the 2015 sum, while the Generated SQL computes individual row-level improvements by joining 2015 and 2020 records. If there are multiple entries per sector/year, the Reference SQL would aggregate (producing one row per sector) while the Generated SQL would return multiple rows (one per matching pair). Even with the sample data, the Generated SQL's approach would produce the same numerical results for the given data but differs in structure and behavior for non-scalar data."}
{"example_id": 1551, "sql_complexity": "single join", "prompt": "How many unique donors made donations in the healthcare industry in Q3 2022?", "context": "CREATE TABLE donations (id INT, donor_id INT, amount FLOAT, donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 7, 100, '2022-07-01'); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (2, 8, 200, '2022-09-15'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (7, 'Charlie Davis', 'Healthcare', '2022-07-01'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (8, 'Dana Wilson', 'Healthcare', '2022-09-15');", "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE industry = 'Healthcare' AND donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "generated_sql": "SELECT COUNT(DISTINCT d.donor_id) AS unique_donors\nFROM donations d\nJOIN donors r ON d.donor_id = r.id\nWHERE r.industry = 'Healthcare'\n  AND d.donation_date >= '2022-07-01'\n  AND d.donation_date < '2022-10-01';", "raw_model_output": "```sql\nSELECT COUNT(DISTINCT d.donor_id) AS unique_donors\nFROM donations d\nJOIN donors r ON d.donor_id = r.id\nWHERE r.industry = 'Healthcare'\n  AND d.donation_date >= '2022-07-01'\n  AND d.donation_date < '2022-10-01';\n```", "latency_sec": 1.1913552284240723, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 236, "prompt_eval_sec": null, "tokens_completion": 75, "completion_eval_sec": null, "tokens_total": 311, "tokens_per_sec": 261.047244835104, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count distinct donor_ids from donations joined with donors where industry is Healthcare and donation dates fall within the same range. The date conditions (BETWEEN '2022-07-01' AND '2022-09-30' vs >= '2022-07-01' and < '2022-10-01') are equivalent, as September 30th is the last day of the period. The join logic, filtering, and aggregation are identical."}
{"example_id": 2592, "sql_complexity": "window functions", "prompt": "What is the third highest account balance for Shariah-compliant finance customers?", "context": "CREATE TABLE shariah_compliant_finance(customer_id INT, account_balance DECIMAL(10, 2)); INSERT INTO shariah_compliant_finance VALUES (1, 5000), (2, 7000), (3, 6000), (4, 8000), (5, 9000);", "reference_sql": "SELECT account_balance FROM (SELECT account_balance, RANK() OVER (ORDER BY account_balance DESC) as rn FROM shariah_compliant_finance) t WHERE rn = 3;", "generated_sql": "SELECT DISTINCT account_balance\nFROM shariah_compliant_finance\nORDER BY account_balance DESC\nOFFSET 2 ROWS FETCH NEXT 1 ROW ONLY;", "raw_model_output": "```sql\nSELECT DISTINCT account_balance\nFROM shariah_compliant_finance\nORDER BY account_balance DESC\nOFFSET 2 ROWS FETCH NEXT 1 ROW ONLY;\n```", "latency_sec": 0.7036969661712646, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 151, "prompt_eval_sec": null, "tokens_completion": 37, "completion_eval_sec": null, "tokens_total": 188, "tokens_per_sec": 267.1604526347281, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses RANK() to find all rows with rank 3 (which could return multiple rows if there are ties), while the Generated SQL uses OFFSET 2 FETCH NEXT 1 ROW, which always returns exactly one row. Additionally, the Generated SQL includes DISTINCT, which could further alter results if duplicates exist. These differences in handling ties and row limits make them non-equivalent."}
{"example_id": 3795, "sql_complexity": "single join", "prompt": "What is the total quantity of unsold garments for each manufacturer based in 'Italy' or 'Spain'?", "context": "CREATE TABLE manufacturers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE garments (id INT PRIMARY KEY, manufacturer_id INT, quantity_manufactured INT, quantity_sold INT);", "reference_sql": "SELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) as total_unsold_quantity FROM manufacturers m JOIN garments g ON m.id = g.manufacturer_id WHERE m.country IN ('Italy', 'Spain') GROUP BY m.name;", "generated_sql": "SELECT m.name AS manufacturer_name, \n       SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold_quantity\nFROM manufacturers m\nJOIN garments g ON m.id = g.manufacturer_id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "raw_model_output": "```sql\nSELECT m.name AS manufacturer_name, \n       SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold_quantity\nFROM manufacturers m\nJOIN garments g ON m.id = g.manufacturer_id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;\n```", "latency_sec": 1.0855891704559326, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 132, "prompt_eval_sec": null, "tokens_completion": 63, "completion_eval_sec": null, "tokens_total": 195, "tokens_per_sec": 179.6259628475316, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The only differences are in column aliases (e.g., 'name' vs 'manufacturer_name') and formatting, but the core logic remains identical: both join manufacturers with garments, filter by country, group by manufacturer name, and calculate the total unsold quantity using the same formula."}
{"example_id": 4138, "sql_complexity": "window functions", "prompt": "How many lifelong learning courses has a student with ID '2' completed, in chronological order?", "context": "CREATE TABLE lifelong_learning (student_id INT, course_id INT, completion_date DATE); INSERT INTO lifelong_learning VALUES (2, 1001, '2015-01-01'), (2, 1002, '2016-01-01');", "reference_sql": "SELECT student_id, course_id, COUNT(course_id) OVER (PARTITION BY student_id ORDER BY completion_date) as completed_courses FROM lifelong_learning WHERE student_id = 2;", "generated_sql": "SELECT course_id, completion_date\nFROM lifelong_learning\nWHERE student_id = 2\nORDER BY completion_date ASC;", "raw_model_output": "```sql\nSELECT course_id, completion_date\nFROM lifelong_learning\nWHERE student_id = 2\nORDER BY completion_date ASC;\n```", "latency_sec": 0.6299712657928467, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 138, "prompt_eval_sec": null, "tokens_completion": 29, "completion_eval_sec": null, "tokens_total": 167, "tokens_per_sec": 265.0914558615989, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes a window function to count completed courses per student and returns three columns (student_id, course_id, completed_courses), while the Generated SQL only selects two columns (course_id, completion_date) without any aggregation or window function. The output structure and data returned differ significantly."}
{"example_id": 312, "sql_complexity": "aggregation", "prompt": "List the top 3 most represented ethnicities in movies produced in the USA.", "context": "CREATE TABLE movies (title VARCHAR(255), production_country VARCHAR(64), lead_actor_ethnicity VARCHAR(64));", "reference_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count FROM movies WHERE production_country = 'USA' GROUP BY lead_actor_ethnicity ORDER BY count DESC LIMIT 3;", "generated_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS movie_count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY movie_count DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT lead_actor_ethnicity, COUNT(*) AS movie_count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY movie_count DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 1.1313893795013428, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 106, "prompt_eval_sec": null, "tokens_completion": 48, "completion_eval_sec": null, "tokens_total": 154, "tokens_per_sec": 136.11582607207708, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter movies by production_country = 'USA', group by lead_actor_ethnicity, and order by the count of movies in descending order. The difference lies in the syntax for limiting results: 'LIMIT 3' (reference) vs 'FETCH FIRST 3 ROWS ONLY' (generated). These are functionally equivalent in PostgreSQL, producing the same top 3 rows. The column alias difference (count vs. movie_count) does not affect semantic equivalence."}
{"example_id": 4298, "sql_complexity": "single join", "prompt": "How many users joined the gym in Q1 2023?", "context": "CREATE TABLE memberships (id INT, user_id INT, join_date DATE); INSERT INTO memberships (id, user_id, join_date) VALUES (1, 5, '2023-01-15'), (2, 6, '2023-02-03'), (3, 7, '2023-03-20'), (4, 8, '2022-12-31');", "reference_sql": "SELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "generated_sql": "SELECT COUNT(*) AS num_users\nFROM memberships\nWHERE join_date >= '2023-01-01' AND join_date <= '2023-03-31';", "raw_model_output": "```sql\nSELECT COUNT(*) AS num_users\nFROM memberships\nWHERE join_date >= '2023-01-01' AND join_date <= '2023-03-31';\n```", "latency_sec": 0.6863398551940918, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 164, "prompt_eval_sec": null, "tokens_completion": 39, "completion_eval_sec": null, "tokens_total": 203, "tokens_per_sec": 295.77183732480916, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count rows where join_date is between '2023-01-01' and '2023-03-31' inclusive. The BETWEEN operator in the reference query is equivalent to the combination of >= and <= in the generated query. The sample data shows 3 entries within this range, which both queries would count correctly."}
{"example_id": 5211, "sql_complexity": "multiple_joins", "prompt": "What is the average transaction value in the last week, split by product category and customer demographics?", "context": "CREATE TABLE transactions (transaction_id INT, customer_id INT, product_id INT, category_id INT, transaction_date DATE, amount DECIMAL(10,2)); CREATE TABLE customers (customer_id INT, age INT, gender VARCHAR(10), location VARCHAR(255)); CREATE TABLE products (product_id INT, name VARCHAR(255), category_id INT);", "reference_sql": "SELECT c.age, c.gender, p.category_id, AVG(t.amount) as avg_transaction_value FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id INNER JOIN products p ON t.product_id = p.product_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY c.age, c.gender, p.category_id;", "generated_sql": "SELECT\n    t.category_id,\n    c.age,\n    c.gender,\n    c.location,\n    AVG(t.amount) AS average_transaction_value\nFROM\n    transactions t\nJOIN\n    customers c ON t.customer_id = c.customer_id\nWHERE\n    t.transaction_date >= CURRENT_DATE - INTERVAL '7' DAY\nGROUP BY\n    t.category_id,\n    c.age,\n    c.gender,\n    c.location;", "raw_model_output": "```sql\nSELECT\n    t.category_id,\n    c.age,\n    c.gender,\n    c.location,\n    AVG(t.amount) AS average_transaction_value\nFROM\n    transactions t\nJOIN\n    customers c ON t.customer_id = c.customer_id\nWHERE\n    t.transaction_date >= CURRENT_DATE - INTERVAL '7' DAY\nGROUP BY\n    t.category_id,\n    c.age,\n    c.gender,\n    c.location;\n```", "latency_sec": 1.1298329830169678, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 156, "prompt_eval_sec": null, "tokens_completion": 91, "completion_eval_sec": null, "tokens_total": 247, "tokens_per_sec": 218.61638287496388, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects.  The Reference query includes a join with the products table and groups by p.category_id, while the Generated query does not join with products and groups by t.category_id. Additionally, the Generated query includes c.location in the SELECT and GROUP BY clauses, which are absent in the Reference query. These differences in selected columns and grouping criteria will lead to different results."}
{"example_id": 382, "sql_complexity": "window functions", "prompt": "What is the average annual precipitation in the past 10 years for each weather station?", "context": "CREATE TABLE WeatherStation (ID INT, Name VARCHAR(100), Location VARCHAR(100), Elevation FLOAT, AnnualPrecipitation FLOAT); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (1, 'Station A', 'Arctic Circle', 100, 450); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (2, 'Station B', 'North Pole', 200, 300);", "reference_sql": "SELECT Name, AVG(AnnualPrecipitation) OVER (PARTITION BY Name ORDER BY Name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AvgAnnualPrecipitation FROM WeatherStation WHERE YEAR(CurrentDate) - YEAR(DateInstalled) BETWEEN 1 AND 10;", "generated_sql": "SELECT Name, AVG(AnnualPrecipitation) AS AvgAnnualPrecipitation\nFROM WeatherStation\nGROUP BY Name;", "raw_model_output": "```sql\nSELECT Name, AVG(AnnualPrecipitation) AS AvgAnnualPrecipitation\nFROM WeatherStation\nGROUP BY Name;\n```", "latency_sec": 0.6891360282897949, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 187, "prompt_eval_sec": null, "tokens_completion": 30, "completion_eval_sec": null, "tokens_total": 217, "tokens_per_sec": 314.88703404249725, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL contains a WHERE clause referencing a non-existent 'DateInstalled' column, making it invalid. Additionally, the Reference SQL uses a window function that returns one row per station with the average precipitation (repeated for each row in the partition), while the Generated SQL groups results by Name, producing one row per unique station name. The invalid column and differing result structures make them non-equivalent."}
{"example_id": 2190, "sql_complexity": "single join", "prompt": "What is the total number of humanitarian assistance events by each country in the last 3 years?", "context": "CREATE TABLE Humanitarian_Assistance (id INT, country VARCHAR(50), year INT, events INT); CREATE TABLE Countries (id INT, name VARCHAR(50), region VARCHAR(50));", "reference_sql": "SELECT co.name, SUM(ha.events) FROM Humanitarian_Assistance ha INNER JOIN Countries co ON ha.country = co.name WHERE ha.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) GROUP BY co.name;", "generated_sql": "SELECT\n    ha.country,\n    SUM(ha.events) AS total_events\nFROM\n    Humanitarian_Assistance ha\nWHERE\n    ha.year >= (SELECT MAX(year) FROM Humanitarian_Assistance) - 2\nGROUP BY\n    ha.country;", "raw_model_output": "```sql\nSELECT\n    ha.country,\n    SUM(ha.events) AS total_events\nFROM\n    Humanitarian_Assistance ha\nWHERE\n    ha.year >= (SELECT MAX(year) FROM Humanitarian_Assistance) - 2\nGROUP BY\n    ha.country;\n```", "latency_sec": 4.347235918045044, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 124, "prompt_eval_sec": null, "tokens_completion": 58, "completion_eval_sec": null, "tokens_total": 182, "tokens_per_sec": 41.86568279962261, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in three key aspects: 1) The Reference query joins with the Countries table and groups by co.name, while the Generated query doesn't join and groups by ha.country. 2) The year filter in Reference uses a fixed 4-year window (current year -3 to current year), whereas the Generated query uses a dynamic 3-year window based on the maximum year in the table. 3) The selected columns differ (co.name vs ha.country). These differences in logic and output structure make them non-equivalent."}
{"example_id": 1852, "sql_complexity": "set operations", "prompt": "Compare coal production and employment rates in China and India between 2018 and 2020.", "context": "CREATE TABLE china_coal_production (year INT, production FLOAT); INSERT INTO china_coal_production (year, production) VALUES (2018, 3500.0), (2019, 3600.0), (2020, 3700.0); CREATE TABLE china_employment (year INT, employment FLOAT); INSERT INTO china_employment (year, employment) VALUES (2018, 8000000.0), (2019, 8100000.0), (2020, 8200000.0); CREATE TABLE india_coal_production (year INT, production FLOAT); INSERT INTO india_coal_production (year, production) VALUES (2018, 700.0), (2019, 750.0), (2020, 800.0); CREATE TABLE india_employment (year INT, employment FLOAT); INSERT INTO india_employment (year, employment) VALUES (2018, 1000000.0), (2019, 1050000.0), (2020, 1100000.0);", "reference_sql": "SELECT 'China' AS country, china_coal_production.production, china_employment.employment FROM china_coal_production INNER JOIN china_employment ON china_coal_production.year = china_employment.year WHERE china_coal_production.year BETWEEN 2018 AND 2020 UNION ALL SELECT 'India', india_coal_production.production, india_employment.employment FROM india_coal_production INNER JOIN india_employment ON india_coal_production.year = india_employment.year WHERE india_coal_production.year BETWEEN 2018 AND 2020;", "generated_sql": "SELECT\n    ccp.year,\n    ccp.production AS china_coal_production,\n    cep.employment AS china_employment,\n    icp.production AS india_coal_production,\n    iep.employment AS india_employment\nFROM\n    china_coal_production ccp\n    JOIN china_employment cep ON ccp.year = cep.year\n    JOIN india_coal_production icp ON ccp.year = icp.year\n    JOIN india_employment iep ON ccp.year = iep.year\nWHERE\n    ccp.year BETWEEN 2018 AND 2020\nORDER BY\n    ccp.year;", "raw_model_output": "```sql\nSELECT\n    ccp.year,\n    ccp.production AS china_coal_production,\n    cep.employment AS china_employment,\n    icp.production AS india_coal_production,\n    iep.employment AS india_employment\nFROM\n    china_coal_production ccp\n    JOIN china_employment cep ON ccp.year = cep.year\n    JOIN india_coal_production icp ON ccp.year = icp.year\n    JOIN india_employment iep ON ccp.year = iep.year\nWHERE\n    ccp.year BETWEEN 2018 AND 2020\nORDER BY\n    ccp.year;\n```", "latency_sec": 3.262483835220337, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 309, "prompt_eval_sec": null, "tokens_completion": 135, "completion_eval_sec": null, "tokens_total": 444, "tokens_per_sec": 136.09262832409215, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows per year (China and India) with separate columns for production/employment, while the Generated SQL returns one row per year with all four columns (China and India production/employment). The structure and number of rows differ, making them non-equivalent."}
{"example_id": 2535, "sql_complexity": "subqueries", "prompt": "What is the maximum safety rating for vehicles in the vehiclesafety schema?", "context": "CREATE TABLE VehicleSafety (id INT, vehicle_id INT, safetyrating INT, PRIMARY KEY (id)); CREATE TABLE Vehicles (id INT, make VARCHAR(50), model VARCHAR(50), PRIMARY KEY (id)); CREATE TABLE LuxuryVehicles (id INT, vehicle_id INT, PRIMARY KEY (id), FOREIGN KEY (vehicle_id) REFERENCES Vehicles(id));", "reference_sql": "SELECT MAX(safetyrating) FROM vehicleSafety JOIN Vehicles ON vehicleSafety.vehicle_id = Vehicles.id WHERE EXISTS (SELECT * FROM LuxuryVehicles WHERE Vehicles.id = LuxuryVehicles.vehicle_id);", "generated_sql": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "raw_model_output": "```sql\nSELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;\n```", "latency_sec": 0.6018691062927246, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 153, "prompt_eval_sec": null, "tokens_completion": 22, "completion_eval_sec": null, "tokens_total": 175, "tokens_per_sec": 290.76089496922464, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters vehicles using an EXISTS clause to only include those present in LuxuryVehicles, while the Generated SQL selects from VehicleSafety without any filtering. This means the Generated SQL could include safety ratings from non-luxury vehicles, leading to potentially different maximum values."}
{"example_id": 2140, "sql_complexity": "aggregation", "prompt": "What was the total amount of minerals extracted in the 'north' region for each month in 2020?", "context": "CREATE TABLE extraction(id INT, location TEXT, month INT, year INT, minerals_extracted FLOAT);INSERT INTO extraction(id, location, month, year, minerals_extracted) VALUES (1, 'north', 1, 2020, 1500), (2, 'north', 2, 2020, 1800), (3, 'south', 1, 2020, 1200);", "reference_sql": "SELECT month, SUM(minerals_extracted) FROM extraction WHERE location = 'north' AND year = 2020 GROUP BY month;", "generated_sql": "SELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month\nORDER BY month;", "raw_model_output": "```sql\nSELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month\nORDER BY month;\n```", "latency_sec": 0.6630458831787109, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 176, "prompt_eval_sec": null, "tokens_completion": 47, "completion_eval_sec": null, "tokens_total": 223, "tokens_per_sec": 336.32664896570174, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (month and SUM(minerals_extracted)), apply identical WHERE conditions (location = 'north' and year = 2020), and group by month. The generated query adds an ORDER BY clause, which affects the result order but not the data itself. Since semantic equivalence focuses on the data returned rather than the order, the queries are equivalent."}
{"example_id": 4779, "sql_complexity": "window functions", "prompt": "What is the average CO2 emission for the top 3 highest emitting countries since 2015?", "context": "CREATE TABLE emissions (country VARCHAR(50), year INT, co2_emission INT); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2015, 5373978000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2015, 10498600000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2015, 2633830000); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2016, 5518004000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2016, 10813000000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2016, 2799280000);", "reference_sql": "SELECT AVG(co2_emission) as avg_emission FROM (SELECT country, year, co2_emission, ROW_NUMBER() OVER (ORDER BY co2_emission DESC) as rn FROM emissions WHERE year >= 2015) t WHERE rn <= 3 GROUP BY country;", "generated_sql": "SELECT AVG(avg_emission) AS average_co2_emission\nFROM (\n    SELECT country, AVG(co2_emission) AS avg_emission\n    FROM emissions\n    WHERE year >= 2015\n    GROUP BY country\n    ORDER BY avg_emission DESC\n    FETCH FIRST 3 ROWS ONLY\n) AS top3;", "raw_model_output": "```sql\nSELECT AVG(avg_emission) AS average_co2_emission\nFROM (\n    SELECT country, AVG(co2_emission) AS avg_emission\n    FROM emissions\n    WHERE year >= 2015\n    GROUP BY country\n    ORDER BY avg_emission DESC\n    FETCH FIRST 3 ROWS ONLY\n) AS top3;\n```", "latency_sec": 1.6027231216430664, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 267, "prompt_eval_sec": null, "tokens_completion": 74, "completion_eval_sec": null, "tokens_total": 341, "tokens_per_sec": 212.7628879843054, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average of the top 3 co2_emission rows (across all years) grouped by country, which may include multiple entries from the same country. The Generated SQL first computes country-level averages, then takes the top 3 countries by these averages, and finally averages those 3 country averages. The two queries differ in their grouping strategy and final aggregation, leading to different results."}
{"example_id": 1015, "sql_complexity": "subqueries", "prompt": "List the top 3 most expensive eco-friendly products in Europe and their suppliers.", "context": "CREATE TABLE Suppliers (supplierID INT, supplierName VARCHAR(50), country VARCHAR(50)); CREATE TABLE Products (productID INT, productName VARCHAR(50), price DECIMAL(10,2), ecoFriendly BOOLEAN, supplierID INT);", "reference_sql": "SELECT P.productName, P.price, S.supplierName FROM (SELECT * FROM Products WHERE ecoFriendly = TRUE ORDER BY price DESC LIMIT 3) P JOIN Suppliers S ON P.supplierID = S.supplierID;", "generated_sql": "SELECT p.productName, p.price, s.supplierName, s.country\nFROM Products p\nJOIN Suppliers s ON p.supplierID = s.supplierID\nWHERE p.ecoFriendly = TRUE\n  AND s.country IN ('Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'United Kingdom', 'Norway', 'Switzerland', 'Iceland', 'Liechtenstein', 'Monaco', 'San Marino', 'Vatican City', 'Andorra', 'Albania', 'Bosnia and Herzegovina', 'North Macedonia', 'Montenegro', 'Serbia', 'Kosovo', 'Ukraine', 'Belarus', 'Moldova', 'Russia')\nORDER BY p.price DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT p.productName, p.price, s.supplierName, s.country\nFROM Products p\nJOIN Suppliers s ON p.supplierID = s.supplierID\nWHERE p.ecoFriendly = TRUE\n  AND s.country IN ('Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'United Kingdom', 'Norway', 'Switzerland', 'Iceland', 'Liechtenstein', 'Monaco', 'San Marino', 'Vatican City', 'Andorra', 'Albania', 'Bosnia and Herzegovina', 'North Macedonia', 'Montenegro', 'Serbia', 'Kosovo', 'Ukraine', 'Belarus', 'Moldova', 'Russia')\nORDER BY p.price DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 2.2116658687591553, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 132, "prompt_eval_sec": null, "tokens_completion": 257, "completion_eval_sec": null, "tokens_total": 389, "tokens_per_sec": 175.88551937017803, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects only eco-friendly products, orders by price descending, and limits to 3 rows before joining with Suppliers. The Generated SQL adds a country filter (specific European countries) and includes an extra 'country' column in the output. Additionally, the Generated SQL uses FETCH FIRST 3 ROWS ONLY which is functionally similar to LIMIT 3, but the additional country filter and column selection make the result sets different."}
{"example_id": 3715, "sql_complexity": "aggregation", "prompt": "What is the average age of engines still in service for each engine type?", "context": "CREATE TABLE Engine (id INT, aircraft_id INT, engine_type VARCHAR(255), hours_since_last_service INT, manufacture_year INT); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (1, 1, 'GE90-115B', 500, 2000); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (2, 2, 'CFM56-5B', 1000, 1995); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (3, 1, 'GE90-115B', 700, 2002);", "reference_sql": "SELECT engine_type, AVG(YEAR(CURRENT_DATE) - manufacture_year) as avg_age FROM Engine GROUP BY engine_type;", "generated_sql": "SELECT\n  engine_type,\n  AVG(EXTRACT(YEAR FROM CURRENT_DATE) - manufacture_year) AS average_age\nFROM\n  Engine\nGROUP BY\n  engine_type;", "raw_model_output": "```sql\nSELECT\n  engine_type,\n  AVG(EXTRACT(YEAR FROM CURRENT_DATE) - manufacture_year) AS average_age\nFROM\n  Engine\nGROUP BY\n  engine_type;\n```", "latency_sec": 0.7382907867431641, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 234, "prompt_eval_sec": null, "tokens_completion": 41, "completion_eval_sec": null, "tokens_total": 275, "tokens_per_sec": 372.4819609535054, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of engines by subtracting the manufacture_year from the current year. The reference SQL uses YEAR(CURRENT_DATE) while the generated SQL uses EXTRACT(YEAR FROM CURRENT_DATE). Both functions return the same integer value for the current year in standard SQL, making the queries semantically equivalent."}
{"example_id": 1957, "sql_complexity": "set operations", "prompt": "What is the average temperature recorded for the 'polar_bear' species in the 'Arctic_Animals' table compared to the 'penguin' species in the 'Antarctic_Animals' table?", "context": "CREATE TABLE Arctic_Animals (species TEXT, avg_temp FLOAT); CREATE TABLE Antarctic_Animals (species TEXT, avg_temp FLOAT);", "reference_sql": "SELECT AVG(Arctic_Animals.avg_temp) FROM Arctic_Animals WHERE Arctic_Animals.species = 'polar_bear' INTERSECT SELECT AVG(Antarctic_Animals.avg_temp) FROM Antarctic_Animals WHERE Antarctic_Animals.species = 'penguin'", "generated_sql": "SELECT\n  (SELECT avg_temp FROM Arctic_Animals WHERE species = 'polar_bear') AS polar_bear_avg_temp,\n  (SELECT avg_temp FROM Antarctic_Animals WHERE species = 'penguin') AS penguin_avg_temp;", "raw_model_output": "```sql\nSELECT\n  (SELECT avg_temp FROM Arctic_Animals WHERE species = 'polar_bear') AS polar_bear_avg_temp,\n  (SELECT avg_temp FROM Antarctic_Animals WHERE species = 'penguin') AS penguin_avg_temp;\n```", "latency_sec": 0.7696020603179932, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 135, "prompt_eval_sec": null, "tokens_completion": 53, "completion_eval_sec": null, "tokens_total": 188, "tokens_per_sec": 244.28209030823015, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses INTERSECT to find common values between two AVG() results, which would only return a row if both averages are equal. The Generated SQL returns both averages as separate columns in a single row. The first query's result depends on equality between the two averages, while the second always returns both values, making them semantically different."}
{"example_id": 1311, "sql_complexity": "basic SQL", "prompt": "What is the total number of veteran job applications in Texas in the last year?", "context": "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", "reference_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);", "generated_sql": "SELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas'\n  AND application_date >= (CURRENT_DATE - INTERVAL '1' YEAR);", "raw_model_output": "```sql\nSELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas'\n  AND application_date >= (CURRENT_DATE - INTERVAL '1' YEAR);\n```", "latency_sec": 0.8206820487976074, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 155, "prompt_eval_sec": null, "tokens_completion": 39, "completion_eval_sec": null, "tokens_total": 194, "tokens_per_sec": 236.38874553699824, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count records where state is 'Texas' and application_date is within the last year. The date calculation syntax differs (DATE_SUB vs. CURRENT_DATE - INTERVAL), but both expressions evaluate to the same date. The alias in the Generated SQL does not affect the result value."}
{"example_id": 2997, "sql_complexity": "window functions", "prompt": "What is the earliest capture time for each satellite image in the 'satellite_images' table?", "context": "CREATE TABLE satellite_images (image_id INT, image_url TEXT, capture_time TIMESTAMP); INSERT INTO satellite_images (image_id, image_url, capture_time) VALUES (1, 'image1.jpg', '2022-01-01 10:00:00'), (2, 'image2.jpg', '2021-05-01 10:00:00');", "reference_sql": "SELECT image_id, MIN(capture_time) OVER (PARTITION BY image_id) FROM satellite_images;", "generated_sql": "SELECT image_id, MIN(capture_time) AS earliest_capture_time\nFROM satellite_images\nGROUP BY image_id;", "raw_model_output": "```sql\nSELECT image_id, MIN(capture_time) AS earliest_capture_time\nFROM satellite_images\nGROUP BY image_id;\n```", "latency_sec": 0.6375348567962646, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 163, "prompt_eval_sec": null, "tokens_completion": 28, "completion_eval_sec": null, "tokens_total": 191, "tokens_per_sec": 299.5914622767636, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to return all rows with the minimum capture_time for each image_id (which is redundant since each image_id is unique). The Generated SQL groups by image_id, returning one row per image_id. While they produce the same result for the given sample data, they differ in behavior when multiple rows share the same image_id. The Reference SQL retains all rows, while the Generated SQL aggregates them, making them non-equivalent in general cases."}
{"example_id": 3743, "sql_complexity": "aggregation", "prompt": "What is the maximum budget spent on peacekeeping operations by each department?", "context": "CREATE TABLE DepartmentPeacekeeping (id INT, department VARCHAR(50), budget INT);", "reference_sql": "SELECT department, MAX(budget) FROM DepartmentPeacekeeping GROUP BY department;", "generated_sql": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "raw_model_output": "```sql\nSELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;\n```", "latency_sec": 1.019514799118042, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 98, "prompt_eval_sec": null, "tokens_completion": 25, "completion_eval_sec": null, "tokens_total": 123, "tokens_per_sec": 120.6456248662642, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by 'department' and calculate the maximum 'budget' for each group. The generated query adds an explicit alias 'max_budget' for the MAX(budget) column, but this does not affect the semantic result set content. The core logic and output data remain identical."}
{"example_id": 4664, "sql_complexity": "multiple_joins", "prompt": "Calculate the total number of volunteer hours contributed by volunteers from 'California' in 'Health' projects in 2021.", "context": "CREATE TABLE volunteers (volunteer_id INT, name VARCHAR(255), state VARCHAR(255));", "reference_sql": "SELECT SUM(vh.hours) as total_hours FROM volunteer_projects vp JOIN volunteer_hours vh ON vp.project_id = vh.project_id JOIN volunteers vol ON vh.volunteer_id = vol.volunteer_id WHERE vp.cause = 'Health' AND vol.state = 'California' AND vh.volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';", "generated_sql": "SELECT SUM(vh.hours) AS total_volunteer_hours\nFROM volunteers v\nJOIN volunteer_hours vh ON v.volunteer_id = vh.volunteer_id\nJOIN projects p ON vh.project_id = p.project_id\nWHERE v.state = 'California'\n  AND p.category = 'Health'\n  AND EXTRACT(YEAR FROM vh.date) = 2021;", "raw_model_output": "```sql\nSELECT SUM(vh.hours) AS total_volunteer_hours\nFROM volunteers v\nJOIN volunteer_hours vh ON v.volunteer_id = vh.volunteer_id\nJOIN projects p ON vh.project_id = p.project_id\nWHERE v.state = 'California'\n  AND p.category = 'Health'\n  AND EXTRACT(YEAR FROM vh.date) = 2021;\n```", "latency_sec": 0.8429760932922363, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 110, "prompt_eval_sec": null, "tokens_completion": 78, "completion_eval_sec": null, "tokens_total": 188, "tokens_per_sec": 223.0193732609516, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL uses `volunteer_projects.cause = 'Health'` while the Generated SQL uses `projects.category = 'Health'`\u2014assuming 'cause' and 'category' are not equivalent fields, this changes the filtering logic. Second, the date condition in the Reference uses `BETWEEN '2021-01-01' AND '2021-12-31'` (inclusive of all dates in 2021), whereas the Generated SQL uses `EXTRACT(YEAR FROM vh.date) = 2021` (which may behave differently if `vh.date` contains time components or non-date types). Additionally, the Generated SQL references a `projects` table instead of `volunteer_projects`, which could have different data structures."}
{"example_id": 251, "sql_complexity": "set operations", "prompt": "Compare the number of economic diversification projects in two regions, one in Europe and one in Oceania, by showing the project type and the number of projects in each region.", "context": "CREATE TABLE economic_diversification (region VARCHAR(50), project_type VARCHAR(50), project_start_date DATE);", "reference_sql": "SELECT 'Europe' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Europe' UNION ALL SELECT 'Oceania' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Oceania';", "generated_sql": "SELECT\n    region,\n    project_type,\n    COUNT(*) AS project_count\nFROM\n    economic_diversification\nWHERE\n    region IN ('Europe', 'Oceania')\nGROUP BY\n    region,\n    project_type;", "raw_model_output": "```sql\nSELECT\n    region,\n    project_type,\n    COUNT(*) AS project_count\nFROM\n    economic_diversification\nWHERE\n    region IN ('Europe', 'Oceania')\nGROUP BY\n    region,\n    project_type;\n```", "latency_sec": 1.0650978088378906, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 124, "prompt_eval_sec": null, "tokens_completion": 52, "completion_eval_sec": null, "tokens_total": 176, "tokens_per_sec": 165.24304015988022, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result by counting project_type occurrences for 'Europe' and 'Oceania'. The reference query uses two separate SELECTs with UNION ALL, while the generated query uses a single GROUP BY with a WHERE clause filtering for the same regions. The final output structure (region, project_type, project_count) and values are identical."}
{"example_id": 610, "sql_complexity": "subqueries", "prompt": "What is the percentage of community development projects completed in 'Caribbean' in 2020?", "context": "CREATE TABLE community_projects (project_id INT, project_name TEXT, location TEXT, completion_year INT); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (1, 'Community Center', 'Southern Region, Caribbean', 2020); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (2, 'Park Renovation', 'Northern Region, Caribbean', 2019); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (3, 'Library Construction', 'Caribbean', 2020);", "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects WHERE location = 'Caribbean')) FROM community_projects WHERE completion_year = 2020 AND location = 'Caribbean';", "generated_sql": "SELECT \n  100.0 * COUNT(*) / (SELECT COUNT(*) FROM community_projects) AS percentage\nFROM \n  community_projects\nWHERE \n  location = 'Caribbean' AND completion_year = 2020;", "raw_model_output": "```sql\nSELECT \n  100.0 * COUNT(*) / (SELECT COUNT(*) FROM community_projects) AS percentage\nFROM \n  community_projects\nWHERE \n  location = 'Caribbean' AND completion_year = 2020;\n```", "latency_sec": 4.010784149169922, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 207, "prompt_eval_sec": null, "tokens_completion": 50, "completion_eval_sec": null, "tokens_total": 257, "tokens_per_sec": 64.07724535691833, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the percentage of Caribbean projects completed in 2020 relative to all Caribbean projects (denominator: COUNT(*) WHERE location = 'Caribbean'). The Generated SQL calculates the same numerator but divides by the total projects in the table (denominator: COUNT(*) FROM community_projects). These denominators differ unless all projects are in the Caribbean, which isn't guaranteed. In the provided data, both denominators equal 3, but semantically the queries are not equivalent."}
{"example_id": 421, "sql_complexity": "set operations", "prompt": "What is the combined landfill capacity for 'City A' and 'City B'?", "context": "CREATE TABLE landfill_capacity (city VARCHAR(255), capacity INT); INSERT INTO landfill_capacity (city, capacity) VALUES ('City A', 500000), ('City B', 600000);", "reference_sql": "SELECT SUM(capacity) FROM (SELECT capacity FROM landfill_capacity WHERE city = 'City A' UNION ALL SELECT capacity FROM landfill_capacity WHERE city = 'City B') AS combined_capacity;", "generated_sql": "SELECT SUM(capacity) AS combined_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "raw_model_output": "```sql\nSELECT SUM(capacity) AS combined_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');\n```", "latency_sec": 0.8540191650390625, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 29, "completion_eval_sec": null, "tokens_total": 152, "tokens_per_sec": 177.9819542961282, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of capacities for 'City A' and 'City B'. The reference query uses a subquery with UNION ALL to combine capacities from both cities before summing, while the generated query directly filters the cities using IN. Since both approaches aggregate the same set of values (all capacities for the two cities), they produce identical results."}
{"example_id": 880, "sql_complexity": "aggregation", "prompt": "Show veteran employment statistics for each state in the 'veteran_employment' table", "context": "CREATE TABLE veteran_employment (employee_id INT, state VARCHAR(2), job_title VARCHAR(50), employment_date DATE);", "reference_sql": "SELECT state, COUNT(*) as veteran_employees FROM veteran_employment WHERE state IN ('CA', 'NY', 'TX', 'FL', 'PA') GROUP BY state;", "generated_sql": "SELECT state, COUNT(*) AS total_veterans_employed\nFROM veteran_employment\nGROUP BY state;", "raw_model_output": "SELECT state, COUNT(*) AS total_veterans_employed\nFROM veteran_employment\nGROUP BY state;", "latency_sec": 0.7298300266265869, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 110, "prompt_eval_sec": null, "tokens_completion": 23, "completion_eval_sec": null, "tokens_total": 133, "tokens_per_sec": 182.23421227919502, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters results to only include records where the state is in ('CA', 'NY', 'TX', 'FL', 'PA'), while the Generated SQL includes all states without filtering. This means the Generated SQL may return more states than the Reference SQL, making them non-equivalent."}
{"example_id": 454, "sql_complexity": "single join", "prompt": "Which excavation sites have more than 10 artifacts?", "context": "CREATE TABLE ExcavationSite (SiteID INT, SiteName VARCHAR(50)); INSERT INTO ExcavationSite (SiteID, SiteName) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE Artifact (ArtifactID INT, SiteID INT, ObjectType VARCHAR(50)); INSERT INTO Artifact (ArtifactID, SiteID, ObjectType) VALUES (1, 1, 'Pottery'), (2, 1, 'Tool'), (3, 2, 'Statue'), (4, 2, 'Bead'), (5, 3, 'Bead'), (6, 3, 'Bead'), (7, 3, 'Bead'), (8, 3, 'Bead'), (9, 3, 'Bead'), (10, 3, 'Bead'), (11, 3, 'Bead');", "reference_sql": "SELECT e.SiteName FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName HAVING COUNT(a.ArtifactID) > 10;", "generated_sql": "SELECT es.SiteID, es.SiteName\nFROM ExcavationSite es\nJOIN Artifact a ON es.SiteID = a.SiteID\nGROUP BY es.SiteID, es.SiteName\nHAVING COUNT(a.ArtifactID) > 10;", "raw_model_output": "```sql\nSELECT es.SiteID, es.SiteName\nFROM ExcavationSite es\nJOIN Artifact a ON es.SiteID = a.SiteID\nGROUP BY es.SiteID, es.SiteName\nHAVING COUNT(a.ArtifactID) > 10;\n```", "latency_sec": 0.7579619884490967, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 268, "prompt_eval_sec": null, "tokens_completion": 54, "completion_eval_sec": null, "tokens_total": 322, "tokens_per_sec": 424.82341450771173, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 'SiteName' while the Generated SQL selects both 'SiteID' and 'SiteName'. Additionally, the GROUP BY clause in the Reference SQL uses only 'SiteName' (which may not be functionally dependent on SiteID in all cases), whereas the Generated SQL groups by both 'SiteID' and 'SiteName'. Although both filter sites with >10 artifacts, the result sets differ in column structure and grouping logic."}
{"example_id": 1086, "sql_complexity": "aggregation", "prompt": "What is the total CO2 emission for each equipment type, excluding equipment that is older than 8 years?", "context": "CREATE TABLE EmissionData (EquipmentID INT, EquipmentType VARCHAR(50), CO2Emission INT, Age INT); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (1, 'Excavator', 50, 8); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (2, 'Haul Truck', 70, 7); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (3, 'Shovel', 30, 6); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (4, 'Drilling Rig', 40, 3);", "reference_sql": "SELECT EquipmentType, SUM(CO2Emission) as TotalCO2Emission FROM EmissionData WHERE Age <= 8 GROUP BY EquipmentType;", "generated_sql": "SELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "raw_model_output": "```sql\nSELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;\n```", "latency_sec": 0.9557771682739258, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 244, "prompt_eval_sec": null, "tokens_completion": 37, "completion_eval_sec": null, "tokens_total": 281, "tokens_per_sec": 294.0015825105642, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select EquipmentType and sum CO2Emission with the same alias, filter rows where Age <= 8, and group by EquipmentType. The only differences are whitespace and case formatting (e.g., 'as' vs 'AS'), which do not affect semantic meaning."}
{"example_id": 3455, "sql_complexity": "basic SQL", "prompt": "What are the names of all innovation projects in the 'rural_infrastructure' table, excluding those with a budget over 50000?", "context": "CREATE TABLE rural_infrastructure (name VARCHAR(255), budget INT); INSERT INTO rural_infrastructure (name, budget) VALUES ('Dam Construction', 40000), ('Well Digging', 30000), ('Irrigation System', 70000);", "reference_sql": "SELECT name FROM rural_infrastructure WHERE budget <= 50000;", "generated_sql": "SELECT name\nFROM rural_infrastructure\nWHERE budget <= 50000;", "raw_model_output": "```sql\nSELECT name\nFROM rural_infrastructure\nWHERE budget <= 50000;\n```", "latency_sec": 0.5796999931335449, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 147, "prompt_eval_sec": null, "tokens_completion": 20, "completion_eval_sec": null, "tokens_total": 167, "tokens_per_sec": 288.08004481298724, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the 'name' column from the 'rural_infrastructure' table where the 'budget' is less than or equal to 50000. The only difference is formatting (line breaks and indentation), which does not affect semantic meaning in SQL."}
{"example_id": 3936, "sql_complexity": "window functions", "prompt": "What is the total investment per client for each investment type?", "context": "CREATE TABLE clients (client_id INT, name TEXT, investment_type TEXT, investment FLOAT); INSERT INTO clients (client_id, name, investment_type, investment) VALUES (1, 'John Doe', 'Stocks', 3000.00), (1, 'John Doe', 'Bonds', 2000.00), (2, 'Jane Smith', 'Stocks', 5000.00);", "reference_sql": "SELECT client_id, name, investment_type, SUM(investment) OVER (PARTITION BY client_id, investment_type ORDER BY client_id) as total_investment FROM clients;", "generated_sql": "SELECT client_id, name, investment_type, SUM(investment) AS total_investment\nFROM clients\nGROUP BY client_id, name, investment_type;", "raw_model_output": "```sql\nSELECT client_id, name, investment_type, SUM(investment) AS total_investment\nFROM clients\nGROUP BY client_id, name, investment_type;\n```", "latency_sec": 0.6304457187652588, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 161, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 199, "tokens_per_sec": 315.6496968363045, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate a running sum per client_id/investment_type pair while retaining all rows. The Generated SQL aggregates rows via GROUP BY, collapsing multiple entries into single rows. For data with multiple entries per client_id/investment_type, the Reference SQL would show individual rows with cumulative sums while the Generated SQL would show aggregated totals. The sample data appears equivalent due to unique client_id/investment_type combinations, but they are not semantically equivalent for all cases."}
{"example_id": 1838, "sql_complexity": "window functions", "prompt": "What are the top 3 species with the most sightings across all arctic research stations?", "context": "CREATE TABLE research_station (id INT, name TEXT); INSERT INTO research_station (id, name) VALUES (1, 'Station A'); INSERT INTO research_station (id, name) VALUES (2, 'Station B'); CREATE TABLE species_observations (station_id INT, species_name TEXT, sightings INT); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 1', 10); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 2', 5); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 1', 8); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 3', 15);", "reference_sql": "SELECT species_name, SUM(sightings) as total_sightings, RANK() OVER (ORDER BY SUM(sightings) DESC) as rank FROM species_observations GROUP BY species_name HAVING rank <= 3;", "generated_sql": "SELECT species_name, SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT species_name, SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 1.1444480419158936, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 256, "prompt_eval_sec": null, "tokens_completion": 47, "completion_eval_sec": null, "tokens_total": 303, "tokens_per_sec": 264.7564493122421, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses RANK() in a HAVING clause, which is invalid because window functions like RANK() cannot be directly referenced in HAVING. The Generated SQL correctly uses ORDER BY and FETCH to limit results. Additionally, the Reference SQL's HAVING rank <= 3 would not work as intended even if valid, since RANK() requires a window specification. The Generated SQL produces the top 3 species by sightings, while the Reference SQL would fail or behave unpredictably."}
{"example_id": 3091, "sql_complexity": "single join", "prompt": "Find the number of hybrid vehicles sold in the US, Germany, and Japan.", "context": "CREATE TABLE vehicle_sales (sale_id INT, vehicle_id INT, country VARCHAR(20), quantity INT); CREATE TABLE vehicles (vehicle_id INT, model VARCHAR(20), manufacture VARCHAR(20), vehicle_type VARCHAR(20));", "reference_sql": "SELECT SUM(vs.quantity) FROM vehicle_sales vs JOIN vehicles v ON vs.vehicle_id = v.vehicle_id WHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "generated_sql": "SELECT country, SUM(quantity) AS total_hybrid_vehicles_sold\nFROM vehicle_sales vs\nJOIN vehicles v ON vs.vehicle_id = v.vehicle_id\nWHERE v.vehicle_type = 'hybrid'\n  AND vs.country IN ('US', 'Germany', 'Japan')\nGROUP BY country;", "raw_model_output": "```sql\nSELECT country, SUM(quantity) AS total_hybrid_vehicles_sold\nFROM vehicle_sales vs\nJOIN vehicles v ON vs.vehicle_id = v.vehicle_id\nWHERE v.vehicle_type = 'hybrid'\n  AND vs.country IN ('US', 'Germany', 'Japan')\nGROUP BY country;\n```", "latency_sec": 1.1735961437225342, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 128, "prompt_eval_sec": null, "tokens_completion": 64, "completion_eval_sec": null, "tokens_total": 192, "tokens_per_sec": 163.599719568773, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single aggregated sum of quantities, while the Generated SQL groups results by country, returning separate sums per country. The output structure and results differ."}
{"example_id": 2399, "sql_complexity": "set operations", "prompt": "What is the average duration of criminal trials for Indigenous defendants compared to non-Indigenous defendants in Canada and New Zealand?", "context": "CREATE TABLE canada_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO canada_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 60), (2, 'Non-Indigenous', 45);CREATE TABLE nz_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO nz_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 70), (2, 'Non-Indigenous', 50);", "reference_sql": "SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Non-Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Non-Indigenous';", "generated_sql": "SELECT\n    'Canada' AS country,\n    defendant_type,\n    AVG(days_to_completion) AS avg_days_to_completion\nFROM canada_criminal_trials\nGROUP BY defendant_type\n\nUNION ALL\n\nSELECT\n    'New Zealand' AS country,\n    defendant_type,\n    AVG(days_to_completion) AS avg_days_to_completion\nFROM nz_criminal_trials\nGROUP BY defendant_type;", "raw_model_output": "```sql\nSELECT\n    'Canada' AS country,\n    defendant_type,\n    AVG(days_to_completion) AS avg_days_to_completion\nFROM canada_criminal_trials\nGROUP BY defendant_type\n\nUNION ALL\n\nSELECT\n    'New Zealand' AS country,\n    defendant_type,\n    AVG(days_to_completion) AS avg_days_to_completion\nFROM nz_criminal_trials\nGROUP BY defendant_type;\n```", "latency_sec": 0.9385111331939697, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 208, "prompt_eval_sec": null, "tokens_completion": 82, "completion_eval_sec": null, "tokens_total": 290, "tokens_per_sec": 309.00006376382896, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL returns four rows with only the average duration values, while the Generated SQL returns four rows with additional 'country' and 'defendant_type' columns. The structure of the result sets differs, making them non-equivalent despite containing the same numerical averages."}
{"example_id": 2972, "sql_complexity": "set operations", "prompt": "How many indigenous communities are in the Arctic Research Station 13 and 14?", "context": "CREATE TABLE Arctic_Research_Station_13 (id INT, community TEXT); CREATE TABLE Arctic_Research_Station_14 (id INT, community TEXT);", "reference_sql": "SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13; SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14; SELECT COUNT(DISTINCT community) FROM (SELECT * FROM Arctic_Research_Station_13 UNION ALL SELECT * FROM Arctic_Research_Station_14) AS Arctic_Communities;", "generated_sql": "SELECT COUNT(DISTINCT community) AS num_indigenous_communities\nFROM (\n    SELECT community FROM Arctic_Research_Station_13\n    UNION\n    SELECT community FROM Arctic_Research_Station_14\n) AS all_communities;", "raw_model_output": "```sql\nSELECT COUNT(DISTINCT community) AS num_indigenous_communities\nFROM (\n    SELECT community FROM Arctic_Research_Station_13\n    UNION\n    SELECT community FROM Arctic_Research_Station_14\n) AS all_communities;\n```", "latency_sec": 1.227719783782959, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 115, "prompt_eval_sec": null, "tokens_completion": 56, "completion_eval_sec": null, "tokens_total": 171, "tokens_per_sec": 139.28259710298033, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct communities across both tables. The Reference's third query uses UNION ALL followed by COUNT(DISTINCT), while the Generated SQL uses UNION which removes duplicates before counting. Since COUNT(DISTINCT) accounts for duplicates, both approaches yield the same result."}
{"example_id": 5576, "sql_complexity": "window functions", "prompt": "Who are the top 5 users with the most followers, and what is their location?", "context": "CREATE TABLE user_data (user_id INT, name VARCHAR(50), followers INT, location VARCHAR(50)); INSERT INTO user_data (user_id, name, followers, location) VALUES (1, 'Alice', 10000, 'New York'), (2, 'Bob', 15000, 'California'), (3, 'Charlie', 12000, 'Texas'), (4, 'David', 8000, 'Florida'), (5, 'Eve', 9000, 'Illinois');", "reference_sql": "SELECT name, location FROM (SELECT name, location, ROW_NUMBER() OVER (ORDER BY followers DESC) AS rank FROM user_data) AS user_ranks WHERE rank <= 5;", "generated_sql": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "raw_model_output": "```sql\nSELECT name, location\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;\n```", "latency_sec": 0.8157057762145996, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 189, "prompt_eval_sec": null, "tokens_completion": 23, "completion_eval_sec": null, "tokens_total": 212, "tokens_per_sec": 259.89763243288115, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the top 5 users by followers in descending order. The Reference SQL uses ROW_NUMBER() to assign ranks and filters for rank <= 5, while the Generated SQL directly orders by followers DESC and limits to 5 rows. Since the followers values in the sample data are unique, both approaches yield identical results. The semantic logic of selecting the top 5 entries based on followers is equivalent."}
{"example_id": 1560, "sql_complexity": "basic SQL", "prompt": "What is the average media literacy score for users in the 'Young Adult' age group who have completed at least one disinformation detection course?", "context": "CREATE TABLE users (id INT, age VARCHAR(20), media_literacy_score INT, courses_completed INT);", "reference_sql": "SELECT AVG(media_literacy_score) FROM users WHERE age = 'Young Adult' AND courses_completed > 0;", "generated_sql": "SELECT AVG(media_literacy_score) AS avg_media_literacy_score\nFROM users\nWHERE age = 'Young Adult' AND courses_completed >= 1;", "raw_model_output": "```sql\nSELECT AVG(media_literacy_score) AS avg_media_literacy_score\nFROM users\nWHERE age = 'Young Adult' AND courses_completed >= 1;\n```", "latency_sec": 0.8882601261138916, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 118, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 156, "tokens_per_sec": 175.62422922493977, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The conditions 'courses_completed > 0' and 'courses_completed >= 1' are mathematically equivalent for integer values. Both filter rows where courses_completed is a positive integer. The generated query adds an alias (avg_media_literacy_score) which does not affect the semantic result, only the column name in the output."}
{"example_id": 1201, "sql_complexity": "basic SQL", "prompt": "What is the maximum energy efficiency rating of hydroelectric dams in Canada?", "context": "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "generated_sql": "SELECT MAX(energy_efficiency_rating) AS max_energy_efficiency_rating\nFROM hydro_dams\nWHERE country = 'Canada';", "raw_model_output": "```sql\nSELECT MAX(energy_efficiency_rating) AS max_energy_efficiency_rating\nFROM hydro_dams\nWHERE country = 'Canada';\n```", "latency_sec": 0.656282901763916, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 153, "prompt_eval_sec": null, "tokens_completion": 31, "completion_eval_sec": null, "tokens_total": 184, "tokens_per_sec": 280.36689590031426, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum energy_efficiency_rating from hydro_dams where country is 'Canada'. The generated query adds an alias (max_energy_efficiency_rating) to the column, but this does not affect the semantic result - the value returned remains the same."}
{"example_id": 4243, "sql_complexity": "single join", "prompt": "How many orders were placed by new and returning customers in each month of the year 2021?'", "context": "CREATE TABLE customer (id INT, first_order_date DATE, last_order_date DATE);", "reference_sql": "INSERT INTO customer (id, first_order_date, last_order_date) SELECT customer_id, MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id; SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, CASE WHEN DATEDIFF(last_order_date, first_order_date) > 30 THEN 'returning' ELSE 'new' END AS customer_type, COUNT(DISTINCT id) AS num_orders FROM orders JOIN customer ON orders.customer_id = customer.id WHERE YEAR(order_date) = 2021 GROUP BY year, month, customer_type;", "generated_sql": "SELECT\n    EXTRACT(YEAR FROM o.order_date) AS year,\n    EXTRACT(MONTH FROM o.order_date) AS month,\n    c_type,\n    COUNT(*) AS order_count\nFROM\n    orders o\nJOIN\n    customer c ON o.customer_id = c.id\nWHERE\n    o.order_date >= '2021-01-01'\n    AND o.order_date < '2022-01-01'\nGROUP BY\n    EXTRACT(YEAR FROM o.order_date),\n    EXTRACT(MONTH FROM o.order_date),\n    CASE\n        WHEN c.first_order_date = o.order_date THEN 'new'\n        ELSE 'returning'\n    END\nORDER BY\n    year, month, c_type;", "raw_model_output": "```sql\nSELECT\n    EXTRACT(YEAR FROM o.order_date) AS year,\n    EXTRACT(MONTH FROM o.order_date) AS month,\n    c_type,\n    COUNT(*) AS order_count\nFROM\n    orders o\nJOIN\n    customer c ON o.customer_id = c.id\nWHERE\n    o.order_date >= '2021-01-01'\n    AND o.order_date < '2022-01-01'\nGROUP BY\n    EXTRACT(YEAR FROM o.order_date),\n    EXTRACT(MONTH FROM o.order_date),\n    CASE\n        WHEN c.first_order_date = o.order_date THEN 'new'\n        ELSE 'returning'\n    END\nORDER BY\n    year, month, c_type;\n```\n**Note:**  \n- Assumes there is an `orders` table with at least `order_date` and `customer_id` columns.\n- If such a table does not exist in your schema, please provide the correct table/column names for orders.", "latency_sec": 3.0121750831604004, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 105, "prompt_eval_sec": null, "tokens_completion": 206, "completion_eval_sec": null, "tokens_total": 311, "tokens_per_sec": 103.24765042332669, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the reference query uses COUNT(DISTINCT id) to count unique customers, while the generated query uses COUNT(*) to count all orders. Second, the customer_type logic differs: the reference uses DATEDIFF(last_order_date, first_order_date) > 30, whereas the generated query checks if the order_date equals first_order_date. These differences in aggregation and classification criteria make the results non-equivalent."}
{"example_id": 2321, "sql_complexity": "subqueries", "prompt": "What are the names and types of vessels used in research expeditions in the regions with the lowest ocean acidification levels?", "context": "CREATE TABLE ocean_acidification (id INT PRIMARY KEY, region VARCHAR(255), year INT, acidification_level INT); INSERT INTO ocean_acidification (id, region, year, acidification_level) VALUES (1, 'Arctic Ocean', 2018, 20), (2, 'Southern Ocean', 2019, 22); CREATE TABLE expedition_vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), region VARCHAR(255)); INSERT INTO expedition_vessels (id, name, type, region) VALUES (1, 'Sea Researcher', 'Research Vessel', 'Arctic Ocean');", "reference_sql": "SELECT v.name, v.type FROM expedition_vessels v INNER JOIN ocean_acidification oa ON v.region = oa.region WHERE oa.acidification_level = (SELECT MIN(acidification_level) FROM ocean_acidification);", "generated_sql": "SELECT ev.name, ev.type\nFROM expedition_vessels ev\nJOIN (\n    SELECT region\n    FROM ocean_acidification\n    WHERE acidification_level = (\n        SELECT MIN(acidification_level) FROM ocean_acidification\n    )\n) oa ON ev.region = oa.region;", "raw_model_output": "```sql\nSELECT ev.name, ev.type\nFROM expedition_vessels ev\nJOIN (\n    SELECT region\n    FROM ocean_acidification\n    WHERE acidification_level = (\n        SELECT MIN(acidification_level) FROM ocean_acidification\n    )\n) oa ON ev.region = oa.region;\n```", "latency_sec": 1.4482612609863281, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 223, "prompt_eval_sec": null, "tokens_completion": 64, "completion_eval_sec": null, "tokens_total": 287, "tokens_per_sec": 198.16866454367542, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve expedition vessels in regions where the ocean acidification level is the minimum. The Reference SQL uses an INNER JOIN with a direct WHERE condition on the subquery, while the Generated SQL uses a subquery to first filter regions with the minimum acidification level, then joins with vessels. Both approaches logically result in the same set of regions being joined, producing identical output."}
{"example_id": 4349, "sql_complexity": "multiple_joins", "prompt": "Show the research grants awarded to professors in the Computer Science department.", "context": "CREATE TABLE departments (id INT, name VARCHAR(50)); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'), (2, 'Mathematics'); CREATE TABLE professors (id INT, name VARCHAR(50), department_id INT); INSERT INTO professors (id, name, department_id) VALUES (1, 'John Smith', 1), (2, 'Jane Doe', 2); CREATE TABLE grants (id INT, professor_id INT, year INT, amount FLOAT); INSERT INTO grants (id, professor_id, year, amount) VALUES (1, 1, 2021, 5000.0), (2, 2, 2020, 7000.0);", "reference_sql": "SELECT professors.name, grants.amount FROM professors INNER JOIN grants ON professors.id = grants.professor_id INNER JOIN departments ON professors.department_id = departments.id WHERE departments.name = 'Computer Science';", "generated_sql": "SELECT g.*\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "raw_model_output": "```sql\nSELECT g.*\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';\n```", "latency_sec": 0.945286750793457, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 227, "prompt_eval_sec": null, "tokens_completion": 43, "completion_eval_sec": null, "tokens_total": 270, "tokens_per_sec": 285.6276148728063, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects specific columns (professors.name and grants.amount), while the Generated SQL selects all columns from the grants table (g.*). Although both queries filter the same data through identical joins and WHERE conditions, the result sets differ in column structure, making them non-equivalent."}
{"example_id": 476, "sql_complexity": "basic SQL", "prompt": "Insert new food safety records for locations \"A123\", \"B456\", and \"C789\"", "context": "CREATE TABLE food_safety_records (id INT, location VARCHAR(255), inspection_date DATE, violation_count INT);", "reference_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', '2022-03-01', 0), ('B456', '2022-03-05', 2), ('C789', '2022-03-10', 1);", "generated_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count)\nVALUES\n  ('A123', NULL, NULL),\n  ('B456', NULL, NULL),\n  ('C789', NULL, NULL);", "raw_model_output": "```sql\nINSERT INTO food_safety_records (location, inspection_date, violation_count)\nVALUES\n  ('A123', NULL, NULL),\n  ('B456', NULL, NULL),\n  ('C789', NULL, NULL);\n```", "latency_sec": 0.8966248035430908, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 110, "prompt_eval_sec": null, "tokens_completion": 49, "completion_eval_sec": null, "tokens_total": 159, "tokens_per_sec": 177.3316992477764, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts specific values for inspection_date and violation_count, while the Generated SQL inserts NULLs for these columns. This results in different data being stored, making the queries semantically distinct."}
{"example_id": 2908, "sql_complexity": "single join", "prompt": "List all co-owners and the properties they own in New York, NY.", "context": "CREATE TABLE properties (id INT, city VARCHAR(50), price INT); CREATE TABLE co_owners (property_id INT, owner_name VARCHAR(50)); INSERT INTO properties (id, city, price) VALUES (1, 'New York', 800000), (2, 'Los Angeles', 600000); INSERT INTO co_owners (property_id, owner_name) VALUES (1, 'David'), (1, 'Ella'), (2, 'Frank');", "reference_sql": "SELECT properties.city, co_owners.owner_name FROM properties INNER JOIN co_owners ON properties.id = co_owners.property_id WHERE properties.city = 'New York';", "generated_sql": "SELECT co.owner_name, p.id AS property_id\nFROM co_owners co\nJOIN properties p ON co.property_id = p.id\nWHERE p.city = 'New York';", "raw_model_output": "```sql\nSELECT co.owner_name, p.id AS property_id\nFROM co_owners co\nJOIN properties p ON co.property_id = p.id\nWHERE p.city = 'New York';\n```", "latency_sec": 0.8139350414276123, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 178, "prompt_eval_sec": null, "tokens_completion": 41, "completion_eval_sec": null, "tokens_total": 219, "tokens_per_sec": 269.06324074201547, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns: Reference selects 'city' and 'owner_name', while Generated selects 'owner_name' and 'property_id'. The column names and values returned are not identical, though both filter properties in 'New York'."}
{"example_id": 636, "sql_complexity": "set operations", "prompt": "Insert new data into the 'cosmetic_ingredients' table for a vegan eyeshadow product by brand 'Ara' with ingredients 'Mica', 'Iron Oxide', 'Titanium Dioxide' and 'Zinc Oxide'.", "context": "CREATE TABLE cosmetic_ingredients (ingredient_id INT, product_name TEXT, brand_name TEXT, ingredient_type TEXT);", "reference_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES (NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient'); INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type, ingredient_name) SELECT ingredient_id, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Mica' FROM cosmetic_ingredients WHERE ingredient_name = 'Mica' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Iron Oxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Titanium Dioxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Zinc Oxide';", "generated_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES\n(1, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n(2, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n(3, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n(4, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "raw_model_output": "```sql\nINSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES\n(1, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n(2, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n(3, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n(4, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');\n```", "latency_sec": 0.9880092144012451, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 136, "prompt_eval_sec": null, "tokens_completion": 94, "completion_eval_sec": null, "tokens_total": 230, "tokens_per_sec": 232.79135118125893, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL attempts to insert into a non-existent 'ingredient_name' column and uses a SELECT that relies on a non-existent column ('ingredient_name'). The Generated SQL correctly inserts values into existing columns but uses explicit ingredient_id values (1,2,3,4) while the Reference SQL uses NULL and a conditional SELECT. Additionally, the Reference SQL's structure would fail due to schema mismatches, making their behaviors fundamentally different."}
{"example_id": 3404, "sql_complexity": "multiple_joins", "prompt": "What are the names of startups that have received funding from investors with over 3 million funds, and are involved in Genetic Research or Bioprocess Engineering?", "context": "CREATE TABLE public.investors ( id SERIAL PRIMARY KEY, name VARCHAR(100), type VARCHAR(50), funds INTEGER ); CREATE TABLE public.investments ( id SERIAL PRIMARY KEY, investor_id INTEGER, startup_id INTEGER ); CREATE TABLE public.startups ( id SERIAL PRIMARY KEY, name VARCHAR(100), industry VARCHAR(50), funding INTEGER );", "reference_sql": "SELECT startups.name FROM public.startups JOIN public.investments ON startups.id = investments.startup_id JOIN public.investors ON investments.investor_id = investors.id WHERE (startups.industry = 'Genetic Research' OR startups.industry = 'Bioprocess Engineering') AND investors.funds > 3000000;", "generated_sql": "SELECT s.name\nFROM startups s\nJOIN investments i ON s.id = i.startup_id\nJOIN investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "raw_model_output": "```sql\nSELECT s.name\nFROM startups s\nJOIN investments i ON s.id = i.startup_id\nJOIN investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND s.industry IN ('Genetic Research', 'Bioprocess Engineering');\n```", "latency_sec": 0.9548580646514893, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 167, "prompt_eval_sec": null, "tokens_completion": 65, "completion_eval_sec": null, "tokens_total": 232, "tokens_per_sec": 242.96804791053106, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve startup names with the same logical conditions. The reference uses OR for industry matching while the generated uses IN, which are logically equivalent. The order of conditions in the WHERE clause does not affect results, and table aliases/qualifiers are functionally identical. Both enforce the same fund threshold and join conditions."}
{"example_id": 134, "sql_complexity": "subqueries", "prompt": "Who are the top 3 authors with the most citations in the Mathematics department in the past 5 years?", "context": "CREATE TABLE authors (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO authors (id, name, department) VALUES (1, 'Author Name', 'Mathematics'); CREATE TABLE publications (id INT, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), year INT, cites INT); INSERT INTO publications (id, title, author, journal, year, cites) VALUES (1, 'Publication Title', 'Author Name', 'Journal Name', 2021, 10);", "reference_sql": "SELECT author, SUM(cites) as total_cites FROM publications WHERE author IN (SELECT name FROM authors WHERE department = 'Mathematics') AND year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY author ORDER BY total_cites DESC LIMIT 3;", "generated_sql": "SELECT a.name, SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 4\nGROUP BY a.name\nORDER BY total_citations DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT a.name, SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 4\nGROUP BY a.name\nORDER BY total_citations DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 0.8942179679870605, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 196, "prompt_eval_sec": null, "tokens_completion": 79, "completion_eval_sec": null, "tokens_total": 275, "tokens_per_sec": 307.5312841443366, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year range conditions. The Reference SQL uses BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE), which includes 5 years prior to and including the current year. The Generated SQL uses p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 4, which excludes the earliest year (current year -5) and includes one additional year (current year -4). This discrepancy in the year filter makes the results potentially different."}
{"example_id": 592, "sql_complexity": "set operations", "prompt": "How many public healthcare facilities and public parks are there in total, in the 'StateData' schema's 'StateHealthcare' and 'StateParks' tables?", "context": "CREATE SCHEMA StateData; CREATE TABLE StateHealthcare (Name varchar(255), Type varchar(255)); INSERT INTO StateHealthcare (Name, Type) VALUES ('FacilityA', 'Public'), ('FacilityB', 'Public'), ('FacilityC', 'Private'); CREATE TABLE StateParks (Name varchar(255), Type varchar(255)); INSERT INTO StateParks (Name, Type) VALUES ('ParkA', 'Public'), ('ParkB', 'Public'), ('ParkC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public';", "generated_sql": "SELECT\n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public')\n  +\n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public')\n  AS total_public_facilities_and_parks;", "raw_model_output": "```sql\nSELECT\n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public')\n  +\n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public')\n  AS total_public_facilities_and_parks;\n```", "latency_sec": 1.0608887672424316, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 200, "prompt_eval_sec": null, "tokens_completion": 52, "completion_eval_sec": null, "tokens_total": 252, "tokens_per_sec": 237.53668412855728, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (one from StateHealthcare, one from StateParks) as two rows using UNION ALL, while the Generated SQL returns a single row with the summed total of both counts. The output structure and values differ (two rows vs. one row with aggregated value)."}
{"example_id": 1989, "sql_complexity": "single join", "prompt": "What are the names and production dates of garments made from fabrics with a sustainability score over 70, produced after 2021-01-01?", "context": "CREATE TABLE fabrics (id INT, name VARCHAR(50), type VARCHAR(50), sustainability_score INT); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (1, 'Organic Linen', 'Natural', 80); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (2, 'Recycled Nylon', 'Synthetic', 72);", "reference_sql": "SELECT garments.name, garments.production_date FROM garments JOIN fabrics ON garments.fabric_id = fabrics.id WHERE fabrics.sustainability_score > 70 AND garments.production_date > '2021-01-01';", "generated_sql": "SELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70\n  AND g.production_date > '2021-01-01';", "raw_model_output": "```sql\nSELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70\n  AND g.production_date > '2021-01-01';\n```", "latency_sec": 0.7570590972900391, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 173, "prompt_eval_sec": null, "tokens_completion": 52, "completion_eval_sec": null, "tokens_total": 225, "tokens_per_sec": 297.20268973110245, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operation: joining the 'garments' and 'fabrics' tables on fabric_id, filtering rows where sustainability_score > 70 and production_date > '2021-01-01', and selecting the same columns. The only differences are the use of table aliases (garments \u2192 g, fabrics \u2192 f) and shorthand column references (g.name instead of garments.name), which do not affect semantic meaning."}
{"example_id": 1388, "sql_complexity": "aggregation", "prompt": "What was the total donation amount by each organization in the last 30 days?", "context": "CREATE TABLE organization_donations (id INT, organization TEXT, donation_date DATE, donation_amount DECIMAL(10,2)); INSERT INTO organization_donations (id, organization, donation_date, donation_amount) VALUES (1, 'Organization A', '2021-03-15', 100.00), (2, 'Organization B', '2021-03-25', 200.00);", "reference_sql": "SELECT organization, SUM(donation_amount) FROM organization_donations WHERE donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY organization;", "generated_sql": "SELECT\n  organization,\n  SUM(donation_amount) AS total_donation_amount\nFROM\n  organization_donations\nWHERE\n  donation_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY\n  organization;", "raw_model_output": "```sql\nSELECT\n  organization,\n  SUM(donation_amount) AS total_donation_amount\nFROM\n  organization_donations\nWHERE\n  donation_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY\n  organization;\n```", "latency_sec": 0.7862248420715332, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 167, "prompt_eval_sec": null, "tokens_completion": 52, "completion_eval_sec": null, "tokens_total": 219, "tokens_per_sec": 278.5462736371725, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of donations per organization for the last 30 days. The date calculation syntax differs (DATE_SUB vs. CURRENT_DATE - INTERVAL), but both expressions evaluate to the same date range. Column aliases and formatting differences do not affect semantic equivalence."}
{"example_id": 1628, "sql_complexity": "window functions", "prompt": "What is the ranking of national security measures for Russia based on the publication date?", "context": "CREATE TABLE national_security (id INT, title VARCHAR(255), description TEXT, agency VARCHAR(255), date DATE); INSERT INTO national_security (id, title, description, agency, date) VALUES (1, 'National Cyber Strategy', 'Outlines the approach to protecting the American people and the American way of life in the digital age', 'White House', '2018-09-20'); INSERT INTO national_security (id, title, description, agency, date) VALUES (2, 'Cybersecurity and Infrastructure Security Agency Act of 2018', 'Establishes the Cybersecurity and Infrastructure Security Agency within the Department of Homeland Security', 'Congress', '2018-11-16'); INSERT INTO national_security (id, title, description, agency, date) VALUES (3, 'Russian Military Doctrine', 'Outlines the country\u2019s stance on military security', 'Russian Government', '2014-12-26');", "reference_sql": "SELECT title, description, agency, date, ROW_NUMBER() OVER (PARTITION BY agency ORDER BY date DESC) as ranking FROM national_security WHERE agency = 'Russian Government';", "generated_sql": "SELECT\n  id,\n  title,\n  description,\n  agency,\n  date,\n  RANK() OVER (ORDER BY date DESC) AS ranking\nFROM\n  national_security\nWHERE\n  agency = 'Russian Government';", "raw_model_output": "```sql\nSELECT\n  id,\n  title,\n  description,\n  agency,\n  date,\n  RANK() OVER (ORDER BY date DESC) AS ranking\nFROM\n  national_security\nWHERE\n  agency = 'Russian Government';\n```", "latency_sec": 1.0123891830444336, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 272, "prompt_eval_sec": null, "tokens_completion": 51, "completion_eval_sec": null, "tokens_total": 323, "tokens_per_sec": 319.0472650336719, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses ROW_NUMBER() with PARTITION BY agency, while the Generated SQL uses RANK() without partitioning. Additionally, the Generated SQL includes an 'id' column in the output which the Reference SQL does not. Although both filter for 'Russian Government' and produce a ranking of 1 for the single record, the column sets and ranking functions differ, leading to different result structures."}
{"example_id": 2300, "sql_complexity": "aggregation", "prompt": "What is the minimum capacity for schools in each location ('community_development')?", "context": "CREATE TABLE community_development.schools (id INT, name VARCHAR(50), capacity INT, location VARCHAR(50));", "reference_sql": "SELECT location, MIN(capacity) FROM community_development.schools GROUP BY location;", "generated_sql": "SELECT location, MIN(capacity) AS min_capacity\nFROM community_development.schools\nGROUP BY location;", "raw_model_output": "```sql\nSELECT location, MIN(capacity) AS min_capacity\nFROM community_development.schools\nGROUP BY location;\n```", "latency_sec": 0.5622580051422119, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 107, "prompt_eval_sec": null, "tokens_completion": 27, "completion_eval_sec": null, "tokens_total": 134, "tokens_per_sec": 238.3247526482213, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group schools by location and calculate the minimum capacity per group. The generated query adds an explicit alias (min_capacity) for the MIN(capacity) column, but this does not affect the semantic result set. The GROUP BY clause and aggregate function remain identical."}
{"example_id": 4976, "sql_complexity": "set operations", "prompt": "What is the most common hashtag used in posts made by users from Brazil?", "context": "CREATE TABLE posts (id INT, user_id INT, content TEXT, hashtags TEXT, post_date DATE); INSERT INTO posts (id, user_id, content, hashtags, post_date) VALUES (1, 1, 'Hello World', '#datascience', '2022-06-01'), (2, 1, 'I love data', '#ai', '2022-06-02'), (3, 2, 'Ol\u00e1 Mundo', '#brasil', '2022-06-03'); CREATE TABLE users (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO users (id, name, country) VALUES (1, 'Jo\u00e3o Silva', 'Brazil'), (2, 'Maria Souza', 'Brazil');", "reference_sql": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(hashtags, ' ', n.n), ' ', -1) hashtag, COUNT(*) count FROM posts JOIN users ON posts.user_id = users.id CROSS JOIN (SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) n WHERE users.country = 'Brazil' GROUP BY hashtag ORDER BY count DESC LIMIT 1;", "generated_sql": "SELECT\n    hashtag,\n    COUNT(*) AS usage_count\nFROM (\n    SELECT\n        TRIM(h) AS hashtag\n    FROM posts p\n    JOIN users u ON p.user_id = u.id\n    WHERE u.country = 'Brazil'\n    CROSS JOIN LATERAL (\n        SELECT\n            TRIM(value) AS h\n        FROM\n            UNNEST(\n                STRING_TO_ARRAY(p.hashtags, ' ')\n            ) AS value\n    )\n) sub\nGROUP BY hashtag\nORDER BY usage_count DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "```sql\nSELECT\n    hashtag,\n    COUNT(*) AS usage_count\nFROM (\n    SELECT\n        TRIM(h) AS hashtag\n    FROM posts p\n    JOIN users u ON p.user_id = u.id\n    WHERE u.country = 'Brazil'\n    CROSS JOIN LATERAL (\n        SELECT\n            TRIM(value) AS h\n        FROM\n            UNNEST(\n                STRING_TO_ARRAY(p.hashtags, ' ')\n            ) AS value\n    )\n) sub\nGROUP BY hashtag\nORDER BY usage_count DESC\nFETCH FIRST 1 ROW ONLY;\n```", "latency_sec": 2.683452844619751, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 235, "prompt_eval_sec": null, "tokens_completion": 118, "completion_eval_sec": null, "tokens_total": 353, "tokens_per_sec": 131.546936145256, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries extract hashtags from posts by Brazilian users and count their occurrences. The Reference SQL uses SUBSTRING_INDEX with a numbers table to split hashtags, while the Generated SQL uses STRING_TO_ARRAY and UNNEST for splitting. Both handle single hashtags (as in the sample data) correctly, group by hashtag, order by count, and limit to the top result. The differences in syntax (MySQL vs PostgreSQL) do not affect semantic equivalence for the given data."}
{"example_id": 4637, "sql_complexity": "single join", "prompt": "What is the total value of transactions for each customer in the last 30 days?", "context": "CREATE TABLE transactions (id INT, customer_id INT, value DECIMAL(10, 2), transaction_date DATE); INSERT INTO transactions (id, customer_id, value, transaction_date) VALUES (1, 1, 100, '2022-01-01'), (2, 1, 200, '2022-01-15'), (3, 2, 50, '2022-01-05'), (4, 2, 150, '2022-01-30'), (5, 3, 300, '2022-01-20');", "reference_sql": "SELECT c.id, SUM(t.value) FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE t.transaction_date >= CURDATE() - INTERVAL 30 DAY GROUP BY c.id;", "generated_sql": "SELECT customer_id, SUM(value) AS total_value\nFROM transactions\nWHERE transaction_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY customer_id;", "raw_model_output": "```sql\nSELECT customer_id, SUM(value) AS total_value\nFROM transactions\nWHERE transaction_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY customer_id;\n```", "latency_sec": 0.9024159908294678, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 208, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 246, "tokens_per_sec": 272.60155238814616, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the total transaction values for customers with transactions in the last 30 days. The Reference SQL uses an INNER JOIN with customers and groups by c.id, while the Generated SQL directly groups by customer_id from transactions. Since customer_id in transactions corresponds to c.id in customers, and both filter transactions within the same date range, the results (customer identifiers and summed values) are equivalent. The difference in column names (c.id vs customer_id) does not affect semantic equivalence as the data values remain the same."}
{"example_id": 4947, "sql_complexity": "aggregation", "prompt": "What is the total revenue for drugs approved between 2017 and 2019?", "context": "CREATE TABLE drug_sales_3 (drug_name TEXT, revenue FLOAT, year INT); INSERT INTO drug_sales_3 (drug_name, revenue, year) VALUES ('DrugG', 20000000, 2019), ('DrugG', 19000000, 2018), ('DrugH', 15000000, 2017), ('DrugH', 16000000, 2018);", "reference_sql": "SELECT drug_name, SUM(revenue) FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019 GROUP BY drug_name;", "generated_sql": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "raw_model_output": "```sql\nSELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;\n```", "latency_sec": 0.8606081008911133, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 168, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 200, "tokens_per_sec": 232.39381524867218, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query groups results by drug_name, returning individual drug totals, while the generated query returns a single total revenue for all drugs combined. The GROUP BY clause is missing in the generated query, leading to different result structures."}
{"example_id": 4767, "sql_complexity": "window functions", "prompt": "List the top 2 AI algorithms with the highest explainability scores, by algorithm subtype, ordered by scores in descending order for the European region.", "context": "CREATE TABLE ai_algorithms (algorithm_id INT, algorithm_name VARCHAR(50), algorithm_subtype VARCHAR(50), region VARCHAR(50), explainability_score FLOAT); INSERT INTO ai_algorithms (algorithm_id, algorithm_name, algorithm_subtype, region, explainability_score) VALUES (1, 'AlgoA', 'Tree-based', 'Europe', 0.85), (2, 'AlgoB', 'Computer Vision', 'Europe', 0.92), (3, 'AlgoC', 'Tree-based', 'Europe', 0.78), (4, 'AlgoD', 'Transformer', 'Europe', 0.90), (5, 'AlgoE', 'Tree-based', 'Europe', 0.80);", "reference_sql": "SELECT algorithm_subtype, region, * FROM (SELECT algorithm_subtype, region, algorithm_id, algorithm_name, explainability_score, RANK() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rank FROM ai_algorithms WHERE region = 'Europe') ranked WHERE rank <= 2 ORDER BY algorithm_subtype, region, explainability_score DESC;", "generated_sql": "SELECT algorithm_subtype, algorithm_name, explainability_score\nFROM (\n    SELECT\n        algorithm_subtype,\n        algorithm_name,\n        explainability_score,\n        ROW_NUMBER() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rn\n    FROM ai_algorithms\n    WHERE region = 'Europe'\n) sub\nWHERE rn <= 2\nORDER BY algorithm_subtype, explainability_score DESC;", "raw_model_output": "```sql\nSELECT algorithm_subtype, algorithm_name, explainability_score\nFROM (\n    SELECT\n        algorithm_subtype,\n        algorithm_name,\n        explainability_score,\n        ROW_NUMBER() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rn\n    FROM ai_algorithms\n    WHERE region = 'Europe'\n) sub\nWHERE rn <= 2\nORDER BY algorithm_subtype, explainability_score DESC;\n```", "latency_sec": 0.9669880867004395, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 246, "prompt_eval_sec": null, "tokens_completion": 91, "completion_eval_sec": null, "tokens_total": 337, "tokens_per_sec": 348.5048105917341, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns and ranking logic. The Reference SQL includes 'region' and all columns via '*', while the Generated SQL selects specific columns. Additionally, the Reference uses RANK() while the Generated uses ROW_NUMBER(), which could produce different results for tied scores (though not in this specific dataset). The column differences make them non-equivalent."}
{"example_id": 4495, "sql_complexity": "basic SQL", "prompt": "Which countries are the top 3 sources of sustainable textiles?", "context": "CREATE TABLE Textile_Sources (Source_ID INT, Source_Country TEXT, Sustainable BOOLEAN, Quantity INT); INSERT INTO Textile_Sources (Source_ID, Source_Country, Sustainable, Quantity) VALUES (1, 'India', true, 1000), (2, 'Bangladesh', false, 800), (3, 'China', true, 1200), (4, 'Vietnam', false, 900), (5, 'Italy', true, 1100), (6, 'USA', false, 700);", "reference_sql": "SELECT Source_Country FROM Textile_Sources WHERE Sustainable = true ORDER BY Quantity DESC LIMIT 3;", "generated_sql": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nORDER BY Quantity DESC\nLIMIT 3;", "raw_model_output": "```sql\nSELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nORDER BY Quantity DESC\nLIMIT 3;\n```", "latency_sec": 0.7947399616241455, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 188, "prompt_eval_sec": null, "tokens_completion": 29, "completion_eval_sec": null, "tokens_total": 217, "tokens_per_sec": 273.0452858524123, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. The only differences are formatting (whitespace and uppercase TRUE vs. lowercase true), which do not affect the query's logic or result. Both select Source_Country from Textile_Sources where Sustainable is true, order by Quantity descending, and limit to 3 results."}
{"example_id": 2513, "sql_complexity": "single join", "prompt": "What is the total number of concert ticket sales for artists who released their first album between 2015 and 2017?", "context": "CREATE TABLE ConcertTicketSales (id INT, year INT, artist_id INT); CREATE TABLE ArtistAlbums (id INT, artist_id INT, year INT);", "reference_sql": "SELECT COUNT(DISTINCT cts.artist_id) FROM ConcertTicketSales cts JOIN ArtistAlbums a ON cts.artist_id = a.artist_id WHERE a.year BETWEEN 2015 AND 2017;", "generated_sql": "SELECT COUNT(*) AS total_ticket_sales\nFROM ConcertTicketSales cts\nWHERE cts.artist_id IN (\n    SELECT artist_id\n    FROM (\n        SELECT artist_id, MIN(year) AS first_album_year\n        FROM ArtistAlbums\n        GROUP BY artist_id\n    ) aa\n    WHERE aa.first_album_year BETWEEN 2015 AND 2017\n);", "raw_model_output": "```sql\nSELECT COUNT(*) AS total_ticket_sales\nFROM ConcertTicketSales cts\nWHERE cts.artist_id IN (\n    SELECT artist_id\n    FROM (\n        SELECT artist_id, MIN(year) AS first_album_year\n        FROM ArtistAlbums\n        GROUP BY artist_id\n    ) aa\n    WHERE aa.first_album_year BETWEEN 2015 AND 2017\n);\n```", "latency_sec": 0.9920740127563477, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 79, "completion_eval_sec": null, "tokens_total": 202, "tokens_per_sec": 203.61384070405137, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query counts distinct artist_ids from ConcertTicketSales who have at least one matching album in ArtistAlbums between 2015-2017. The generated query counts all ticket sales entries for artists whose *first* album (minimum year) falls in 2015-2017. The generated query's subquery filters artists based on their earliest album year, while the reference query uses any album year in the range. Additionally, the reference uses COUNT(DISTINCT) while the generated query uses COUNT(*), leading to different result types."}
{"example_id": 873, "sql_complexity": "subqueries", "prompt": "Identify attorneys who have never handled cases in the 'West' region but have in the 'North' or 'South'.", "context": "CREATE TABLE attorney_regions(attorney_id INT, region VARCHAR(20)); INSERT INTO attorney_regions(attorney_id, region) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'), (5, 'West'), (6, 'North'); CREATE TABLE handled_cases(attorney_id INT, case_id INT); INSERT INTO handled_cases(attorney_id, case_id) VALUES (1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (1, 107), (1, 108);", "reference_sql": "SELECT h.attorney_id FROM attorney_regions h LEFT JOIN handled_cases i ON h.attorney_id = i.attorney_id WHERE h.region IN ('North', 'South') AND h.region != 'West' AND i.attorney_id IS NOT NULL AND h.attorney_id NOT IN (SELECT attorney_id FROM attorney_regions WHERE region = 'West');", "generated_sql": "SELECT DISTINCT ar.attorney_id\nFROM attorney_regions ar\nJOIN handled_cases hc ON ar.attorney_id = hc.attorney_id\nWHERE ar.region IN ('North', 'South')\n  AND ar.attorney_id NOT IN (\n    SELECT attorney_id\n    FROM attorney_regions\n    WHERE region = 'West'\n  )", "raw_model_output": "```sql\nSELECT DISTINCT ar.attorney_id\nFROM attorney_regions ar\nJOIN handled_cases hc ON ar.attorney_id = hc.attorney_id\nWHERE ar.region IN ('North', 'South')\n  AND ar.attorney_id NOT IN (\n    SELECT attorney_id\n    FROM attorney_regions\n    WHERE region = 'West'\n  )\n```", "latency_sec": 1.1658461093902588, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 225, "prompt_eval_sec": null, "tokens_completion": 70, "completion_eval_sec": null, "tokens_total": 295, "tokens_per_sec": 253.03511125862568, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL may return duplicate attorney_ids if they have multiple cases (since it uses a LEFT JOIN with no DISTINCT), while the Generated SQL explicitly uses DISTINCT to eliminate duplicates. This difference in output structure makes them non-equivalent."}
{"example_id": 471, "sql_complexity": "set operations", "prompt": "Find the number of donations made by first-time donors in the last quarter.", "context": "CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationType TEXT, DonationAmount FLOAT); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationType, DonationAmount) VALUES (1, 1, '2021-01-01', 'Individual', 100), (2, 2, '2021-02-01', 'Corporate', 5000);", "reference_sql": "SELECT COUNT(*) FROM (SELECT DonationID FROM Donations WHERE DonationType = 'Individual' AND DonationDate >= DATEADD(quarter, -1, CURRENT_DATE) EXCEPT SELECT DonationID FROM PreviousDonations) AS FirstTimeDonors;", "generated_sql": "SELECT COUNT(*) AS num_donations\nFROM Donations d\nWHERE d.DonationDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  AND d.DonorID IN (\n    SELECT DonorID\n    FROM Donations\n    GROUP BY DonorID\n    HAVING MIN(DonationDate) >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  );", "raw_model_output": "```sql\nSELECT COUNT(*) AS num_donations\nFROM Donations d\nWHERE d.DonationDate >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  AND d.DonorID IN (\n    SELECT DonorID\n    FROM Donations\n    GROUP BY DonorID\n    HAVING MIN(DonationDate) >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  );\n```", "latency_sec": 1.2141199111938477, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 169, "prompt_eval_sec": null, "tokens_completion": 92, "completion_eval_sec": null, "tokens_total": 261, "tokens_per_sec": 214.970529346939, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL filters for 'Individual' donations, while the Generated SQL has no such restriction. Second, the Reference SQL uses an EXCEPT clause with an undefined 'PreviousDonations' table, making its logic ambiguous. The Generated SQL explicitly identifies first-time donors by checking if their earliest donation falls within the period. These differences in filtering and logic make the queries non-equivalent."}
{"example_id": 1301, "sql_complexity": "multiple_joins", "prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?", "context": "CREATE TABLE farmers (id INT, name VARCHAR(50), location VARCHAR(50), crops VARCHAR(50)); CREATE TABLE crops (id INT, name VARCHAR(50), yield INT); CREATE TABLE sales (id INT, farmer_id INT, crop_name VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO farmers VALUES (1, 'Jane Doe', 'Summerfield', 'Corn'); INSERT INTO crops VALUES (1, 'Corn', 100); INSERT INTO sales VALUES (1, 1, 'Corn', 50, 2.50);", "reference_sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';", "generated_sql": "SELECT SUM(s.quantity) AS total_corn_sold\nFROM sales s\nJOIN farmers f ON s.farmer_id = f.id\nWHERE s.crop_name = 'Corn' AND f.location = 'Summerfield';", "raw_model_output": "```sql\nSELECT SUM(s.quantity) AS total_corn_sold\nFROM sales s\nJOIN farmers f ON s.farmer_id = f.id\nWHERE s.crop_name = 'Corn' AND f.location = 'Summerfield';\n```", "latency_sec": 0.9496521949768066, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 200, "prompt_eval_sec": null, "tokens_completion": 50, "completion_eval_sec": null, "tokens_total": 250, "tokens_per_sec": 263.25427490440933, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total quantity of corn sold by farmers in Summerfield. The Reference SQL joins with the crops table but filters on crops.name = 'Corn', which is equivalent to filtering sales.crop_name = 'Corn' (since the join ensures sales.crop_name matches crops.name). The Generated SQL directly filters sales.crop_name = 'Corn' and farmers.location = 'Summerfield', achieving the same result without the redundant crops join. The final output is identical."}
{"example_id": 4667, "sql_complexity": "aggregation", "prompt": "Find the number of unique organizations in each country in the Philanthropy Trends table?", "context": "CREATE TABLE PhilanthropyTrends (OrgID INT, Name TEXT, Country TEXT);", "reference_sql": "SELECT Country, COUNT(DISTINCT OrgID) as UniqueOrganizations FROM PhilanthropyTrends GROUP BY Country;", "generated_sql": "SELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;", "raw_model_output": "```sql\nSELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;\n```", "latency_sec": 0.8173000812530518, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 102, "prompt_eval_sec": null, "tokens_completion": 30, "completion_eval_sec": null, "tokens_total": 132, "tokens_per_sec": 161.50738636612257, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The generated SQL is merely a formatted version of the reference query with line breaks and capitalization differences, but the SELECT clause, GROUP BY clause, and aggregate function remain exactly the same."}
{"example_id": 1006, "sql_complexity": "subqueries", "prompt": "What is the average word count of news articles written by investigative journalists?", "context": "CREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, position VARCHAR(20), country VARCHAR(50)); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (1, 'Anna Smith', 'Female', 35, 'News Reporter', 'USA'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (2, 'Mike Johnson', 'Male', 40, 'Investigative Journalist', 'Canada'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (3, 'Sofia Rodriguez', 'Female', 32, 'Investigative Journalist', 'Mexico'); CREATE TABLE news_articles (id INT, title VARCHAR(100), content TEXT, publication_date DATE, reporter_id INT); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (1, 'News Article 1', 'Content of News Article 1', '2021-01-01', 2); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (2, 'News Article 2', 'Content of News Article 2', '2021-02-01', 3);", "reference_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS avg_word_count FROM news_articles WHERE reporter_id IN (SELECT id FROM reporters WHERE position = 'Investigative Journalist');", "generated_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS average_word_count\nFROM news_articles na\nJOIN reporters r ON na.reporter_id = r.id\nWHERE r.position = 'Investigative Journalist';", "raw_model_output": "```sql\nSELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS average_word_count\nFROM news_articles na\nJOIN reporters r ON na.reporter_id = r.id\nWHERE r.position = 'Investigative Journalist';\n```", "latency_sec": 1.3973782062530518, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 341, "prompt_eval_sec": null, "tokens_completion": 56, "completion_eval_sec": null, "tokens_total": 397, "tokens_per_sec": 284.10347193300015, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average word count of news articles written by investigative journalists. The Reference SQL uses a subquery to filter reporter_ids, while the Generated SQL uses a JOIN. Both approaches correctly filter the same set of reporters (those with 'Investigative Journalist' position) and apply the same word count calculation (length difference + 1). The final AVG() result will be identical."}
{"example_id": 3635, "sql_complexity": "set operations", "prompt": "Which brands have certifications related to cruelty-free, vegan, or organic products?", "context": "CREATE TABLE brands (brand_name VARCHAR(50), is_cruelty_free BOOLEAN, is_vegan BOOLEAN, is_organic BOOLEAN); INSERT INTO brands (brand_name, is_cruelty_free, is_vegan, is_organic) VALUES ('Lush', TRUE, TRUE, FALSE), ('The Body Shop', TRUE, FALSE, FALSE), ('Est\u00e9e Lauder', FALSE, FALSE, FALSE), ('Urban Decay', TRUE, TRUE, FALSE), ('Maybelline', FALSE, FALSE, FALSE), ('Kat Von D', TRUE, TRUE, FALSE), ('Tarte', TRUE, TRUE, TRUE);", "reference_sql": "SELECT brand_name, 'Cruelty-free' as certification FROM brands WHERE is_cruelty_free = TRUE UNION SELECT brand_name, 'Vegan' as certification FROM brands WHERE is_vegan = TRUE UNION SELECT brand_name, 'Organic' as certification FROM brands WHERE is_organic = TRUE;", "generated_sql": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "raw_model_output": "```sql\nSELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;\n```", "latency_sec": 0.649968147277832, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 209, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 247, "tokens_per_sec": 380.01862250400194, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns each brand once per certification they meet (e.g., a brand with both cruelty-free and vegan status appears twice), while the Generated SQL returns each qualifying brand only once, regardless of how many certifications they have. Additionally, the Reference SQL includes a 'certification' column indicating the type, whereas the Generated SQL only returns brand names. The result sets differ in both structure and row count."}
{"example_id": 4932, "sql_complexity": "basic SQL", "prompt": "Delete the workout row with the id of 2.", "context": "CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);", "reference_sql": "DELETE FROM Workouts WHERE id = 2;", "generated_sql": "DELETE FROM Workouts WHERE id = 2;", "raw_model_output": "DELETE FROM Workouts WHERE id = 2;", "latency_sec": 0.8027639389038086, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 182, "prompt_eval_sec": null, "tokens_completion": 11, "completion_eval_sec": null, "tokens_total": 193, "tokens_per_sec": 240.41936943947138, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and intent. They both delete the record with id = 2 from the Workouts table, resulting in the same database state change."}
{"example_id": 365, "sql_complexity": "aggregation", "prompt": "Identify the total number of military personnel and their corresponding rank for each branch and country in the 'military_personnel' table, sorted by the total number of personnel in descending order.", "context": "CREATE TABLE military_personnel (id INT, branch VARCHAR(255), rank VARCHAR(255), country VARCHAR(255), personnel INT);", "reference_sql": "SELECT branch, country, SUM(personnel) as total_personnel FROM military_personnel GROUP BY branch, country ORDER BY total_personnel DESC;", "generated_sql": "SELECT \n    branch, \n    country, \n    rank, \n    SUM(personnel) AS total_personnel\nFROM \n    military_personnel\nGROUP BY \n    branch, \n    country, \n    rank\nORDER BY \n    total_personnel DESC;", "raw_model_output": "```sql\nSELECT \n    branch, \n    country, \n    rank, \n    SUM(personnel) AS total_personnel\nFROM \n    military_personnel\nGROUP BY \n    branch, \n    country, \n    rank\nORDER BY \n    total_personnel DESC;\n```", "latency_sec": 0.8508648872375488, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 131, "prompt_eval_sec": null, "tokens_completion": 59, "completion_eval_sec": null, "tokens_total": 190, "tokens_per_sec": 223.30219856276057, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query groups by (branch, country) and aggregates personnel across all ranks within those groups. The generated query adds 'rank' to the GROUP BY clause, causing it to aggregate personnel within (branch, country, rank) groups instead. This results in more granular output with separate totals for each rank, whereas the reference query combines all ranks into single branch-country totals."}
{"example_id": 521, "sql_complexity": "subqueries", "prompt": "How many vessels have not had an inspection in the past year?", "context": "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", "reference_sql": "SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());", "generated_sql": "SELECT COUNT(*) AS vessels_without_recent_inspection\nFROM vessels v\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM safety_records sr\n    WHERE sr.vessel_name = v.name\n      AND sr.inspection_date >= CURRENT_DATE - INTERVAL '1' YEAR\n);", "raw_model_output": "```sql\nSELECT COUNT(*) AS vessels_without_recent_inspection\nFROM vessels v\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM safety_records sr\n    WHERE sr.vessel_name = v.name\n      AND sr.inspection_date >= CURRENT_DATE - INTERVAL '1' YEAR\n);\n```", "latency_sec": 1.1197428703308105, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 176, "prompt_eval_sec": null, "tokens_completion": 62, "completion_eval_sec": null, "tokens_total": 238, "tokens_per_sec": 212.54879696593792, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in handling NULLs. The Reference SQL uses NOT IN (subquery), which behaves differently if the subquery contains NULLs. The Generated SQL uses NOT EXISTS, which is immune to NULLs. While both aim to find vessels without recent inspections, the NOT IN approach may exclude valid rows if the subquery returns NULLs, making them non-equivalent in general cases."}
{"example_id": 5687, "sql_complexity": "multiple_joins", "prompt": "List organizations with more than 200 volunteers, and their average donation amounts, excluding donations less than $10.", "context": "CREATE TABLE organizations (org_id INT, org_name TEXT, social_impact_score INT);CREATE TABLE volunteers (vol_id INT, org_id INT, vol_country TEXT);CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount INT, donation_date DATE);", "reference_sql": "SELECT o.org_name, AVG(donation_amount) AS avg_donation_amount FROM organizations o JOIN volunteers v ON o.org_id = v.org_id JOIN donations don ON o.org_id = don.org_id WHERE donation_amount >= 10 GROUP BY o.org_name HAVING COUNT(v.vol_id) > 200;", "generated_sql": "SELECT \n    o.org_name,\n    AVG(d.donation_amount) AS avg_donation_amount\nFROM \n    organizations o\nJOIN \n    volunteers v ON o.org_id = v.org_id\nJOIN \n    donations d ON v.vol_id = d.donor_id\nWHERE \n    d.donation_amount >= 10\nGROUP BY \n    o.org_id, o.org_name\nHAVING \n    COUNT(DISTINCT v.vol_id) > 200;", "raw_model_output": "```sql\nSELECT \n    o.org_name,\n    AVG(d.donation_amount) AS avg_donation_amount\nFROM \n    organizations o\nJOIN \n    volunteers v ON o.org_id = v.org_id\nJOIN \n    donations d ON v.vol_id = d.donor_id\nWHERE \n    d.donation_amount >= 10\nGROUP BY \n    o.org_id, o.org_name\nHAVING \n    COUNT(DISTINCT v.vol_id) > 200;\n```", "latency_sec": 2.0638771057128906, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 144, "prompt_eval_sec": null, "tokens_completion": 99, "completion_eval_sec": null, "tokens_total": 243, "tokens_per_sec": 117.7395685660579, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in join conditions (Reference uses donations.org_id, Generated uses volunteers.vol_id = donations.donor_id), grouping (Reference groups by org_name, Generated by org_id+org_name), and HAVING clause (Reference counts all vol_id, Generated counts DISTINCT vol_id). These differences affect data retrieval and aggregation results."}
{"example_id": 1281, "sql_complexity": "subqueries", "prompt": "Find the top 3 contributors with the lowest recycling rate in the 'waste_contributors' table.", "context": "CREATE TABLE waste_contributors (contributor VARCHAR(20), recycling_rate FLOAT); INSERT INTO waste_contributors (contributor, recycling_rate) VALUES ('Manufacturing', 0.4), ('Commercial', 0.38), ('Residential', 0.35), ('Institutional', 0.32), ('Agricultural', 0.2), ('Industrial', 0.15);", "reference_sql": "SELECT contributor FROM waste_contributors WHERE recycling_rate IN (SELECT MIN(recycling_rate) FROM waste_contributors) LIMIT 3;", "generated_sql": "SELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "raw_model_output": "```sql\nSELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;\n```", "latency_sec": 0.7973520755767822, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 168, "prompt_eval_sec": null, "tokens_completion": 26, "completion_eval_sec": null, "tokens_total": 194, "tokens_per_sec": 243.30531761601776, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects contributors with the minimum recycling rate (only 'Industrial' in the data), while the Generated SQL returns the top 3 contributors with the lowest recycling rates (Industrial, Agricultural, Institutional). The first query filters for the absolute minimum value, whereas the second orders and limits to 3 rows, producing different results."}
{"example_id": 5669, "sql_complexity": "window functions", "prompt": "What is the total number of new and returning volunteers in each program in each month?", "context": "CREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, ProgramID INT, VolunteerDate DATE, IsReturning BOOLEAN); INSERT INTO Volunteers (VolunteerID, VolunteerName, ProgramID, VolunteerDate, IsReturning) VALUES (6, 'David Kim', 1, '2022-03-01', FALSE), (7, 'Emily Chen', 2, '2022-03-15', TRUE), (8, 'James Lee', 2, '2022-04-01', FALSE), (9, 'Grace Park', 3, '2022-04-15', TRUE), (10, 'Daniel Kim', 1, '2022-04-01', FALSE);", "reference_sql": "SELECT ProgramID, EXTRACT(MONTH FROM VolunteerDate) AS Month, SUM(CASE WHEN IsReturning THEN 1 ELSE 0 END) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) + COUNT(DISTINCT VolunteerID) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) AS TotalVolunteers FROM Volunteers;", "generated_sql": "SELECT\n  ProgramID,\n  EXTRACT(YEAR FROM VolunteerDate) AS Year,\n  EXTRACT(MONTH FROM VolunteerDate) AS Month,\n  SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n  SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY ProgramID, EXTRACT(YEAR FROM VolunteerDate), EXTRACT(MONTH FROM VolunteerDate)\nORDER BY ProgramID, Year, Month;", "raw_model_output": "```sql\nSELECT\n  ProgramID,\n  EXTRACT(YEAR FROM VolunteerDate) AS Year,\n  EXTRACT(MONTH FROM VolunteerDate) AS Month,\n  SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n  SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY ProgramID, EXTRACT(YEAR FROM VolunteerDate), EXTRACT(MONTH FROM VolunteerDate)\nORDER BY ProgramID, Year, Month;\n```", "latency_sec": 1.8317010402679443, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 228, "prompt_eval_sec": null, "tokens_completion": 114, "completion_eval_sec": null, "tokens_total": 342, "tokens_per_sec": 186.71169174527066, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses window functions to calculate cumulative sums per ProgramID and month, returning individual rows with aggregated values. The Generated SQL groups data by ProgramID, year, and month, providing separate counts for new and returning volunteers. Key differences include: 1) The Reference includes only the month (not year) in its grouping, 2) The Reference calculates a combined 'TotalVolunteers' using window functions, while the Generated separates new/returning counts, and 3) The Generated SQL includes the year in its output, which the Reference does not."}
{"example_id": 3576, "sql_complexity": "window functions", "prompt": "What is the difference in the number of eco-friendly hotels between the top 2 countries?", "context": "CREATE TABLE eco_hotel_count (country TEXT, num_hotels INT); INSERT INTO eco_hotel_count (country, num_hotels) VALUES ('France', 100), ('Italy', 120), ('Germany', 150), ('Spain', 110), ('UK', 160);", "reference_sql": "SELECT (MAX(num_hotels) OVER (PARTITION BY num_hotels <= 2) - MIN(num_hotels) OVER (PARTITION BY num_hotels <= 2)) AS hotel_difference FROM eco_hotel_count WHERE country IN ('France', 'Italy');", "generated_sql": "SELECT \n    MAX(num_hotels) - MIN(num_hotels) AS hotel_difference\nFROM (\n    SELECT num_hotels\n    FROM eco_hotel_count\n    ORDER BY num_hotels DESC\n    LIMIT 2\n) AS top2;", "raw_model_output": "```sql\nSELECT \n    MAX(num_hotels) - MIN(num_hotels) AS hotel_difference\nFROM (\n    SELECT num_hotels\n    FROM eco_hotel_count\n    ORDER BY num_hotels DESC\n    LIMIT 2\n) AS top2;\n```", "latency_sec": 0.9461259841918945, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 144, "prompt_eval_sec": null, "tokens_completion": 56, "completion_eval_sec": null, "tokens_total": 200, "tokens_per_sec": 211.38833870081697, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the difference between the maximum and minimum num_hotels for France and Italy. The Reference SQL uses window functions with a partition that groups all rows (since num_hotels > 2), resulting in MAX - MIN over the two rows. The Generated SQL explicitly selects the top 2 hotels (which are the two rows) and computes their MAX - MIN. In this specific context, both produce the same result (120 - 100 = 20)."}
{"example_id": 1970, "sql_complexity": "multiple_joins", "prompt": "List all players who have played a specific VR game, 'CyberSphere', and their ages.", "context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');", "reference_sql": "SELECT Players.Age, Players.PlayerID FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';", "generated_sql": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "raw_model_output": "```sql\nSELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';\n```", "latency_sec": 0.9691669940948486, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 245, "prompt_eval_sec": null, "tokens_completion": 56, "completion_eval_sec": null, "tokens_total": 301, "tokens_per_sec": 310.5759913760975, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (PlayerID and Age) from the Players table, join with VRPlayers and VRGames on identical conditions, and apply the same filter (VRGames.Title = 'CyberSphere'). The differences are purely syntactic (column order, table aliases) and do not affect the result."}
{"example_id": 2414, "sql_complexity": "window functions", "prompt": "List the policy areas with the lowest citizen satisfaction scores.", "context": "CREATE TABLE Policy (Area VARCHAR(20), Score INT); INSERT INTO Policy (Area, Score) VALUES ('Transportation', 70), ('Education', 85), ('Healthcare', 75), ('PublicSafety', 80);", "reference_sql": "SELECT Area, Score FROM (SELECT Area, Score, ROW_NUMBER() OVER (ORDER BY Score) AS RN FROM Policy) X WHERE RN IN (1, 2);", "generated_sql": "SELECT Area\nFROM Policy\nWHERE Score = (SELECT MIN(Score) FROM Policy);", "raw_model_output": "```sql\nSELECT Area\nFROM Policy\nWHERE Score = (SELECT MIN(Score) FROM Policy);\n```", "latency_sec": 0.5681650638580322, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 124, "prompt_eval_sec": null, "tokens_completion": 23, "completion_eval_sec": null, "tokens_total": 147, "tokens_per_sec": 258.7276292593925, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns the top 2 rows ordered by Score (Transportation and Healthcare with scores 70 and 75), while the Generated SQL only returns the row with the minimum Score (Transportation with 70). The first query retrieves two rows, the second only one, making them non-equivalent."}
{"example_id": 1898, "sql_complexity": "single join", "prompt": "What are the total sales for each drug in Q2 2020?", "context": "CREATE TABLE drugs (drug_id INT, drug_name TEXT); INSERT INTO drugs (drug_id, drug_name) VALUES (1001, 'Ibuprofen'), (1002, 'Paracetamol'), (1003, 'Aspirin'); CREATE TABLE sales (sale_id INT, drug_id INT, sale_date DATE, revenue FLOAT); INSERT INTO sales (sale_id, drug_id, sale_date, revenue) VALUES (1, 1001, '2020-04-05', 1800.0), (2, 1002, '2020-04-10', 2300.0), (3, 1003, '2020-04-15', 1400.0), (4, 1001, '2020-05-20', 1900.0), (5, 1002, '2020-06-25', 2400.0);", "reference_sql": "SELECT drug_name, SUM(revenue) as total_sales FROM sales JOIN drugs ON sales.drug_id = drugs.drug_id WHERE sale_date BETWEEN '2020-04-01' AND '2020-06-30' GROUP BY drug_name;", "generated_sql": "SELECT\n    d.drug_name,\n    SUM(s.revenue) AS total_sales\nFROM\n    sales s\n    JOIN drugs d ON s.drug_id = d.drug_id\nWHERE\n    s.sale_date >= '2020-04-01'\n    AND s.sale_date <= '2020-06-30'\nGROUP BY\n    d.drug_name;", "raw_model_output": "```sql\nSELECT\n    d.drug_name,\n    SUM(s.revenue) AS total_sales\nFROM\n    sales s\n    JOIN drugs d ON s.drug_id = d.drug_id\nWHERE\n    s.sale_date >= '2020-04-01'\n    AND s.sale_date <= '2020-06-30'\nGROUP BY\n    d.drug_name;\n```", "latency_sec": 1.055798053741455, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 271, "prompt_eval_sec": null, "tokens_completion": 82, "completion_eval_sec": null, "tokens_total": 353, "tokens_per_sec": 334.34424201585335, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate total sales per drug within the same date range. The date condition in the WHERE clause is equivalent (BETWEEN '2020-04-01' AND '2020-06-30' vs. >= and <=). The join logic, aggregation, and grouping are identical, though aliases differ. The semantic result will be the same."}
{"example_id": 2403, "sql_complexity": "multiple_joins", "prompt": "Who is the most frequent customer ordering vegetarian items?", "context": "CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50)); INSERT INTO customers VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); CREATE TABLE orders (order_id INT, customer_id INT, menu_id INT, order_date DATE); INSERT INTO orders VALUES (1, 1, 1, '2022-01-01'), (2, 2, 3, '2022-01-02'), (3, 3, 2, '2022-01-03'); CREATE TABLE menu (menu_id INT, item_name VARCHAR(50), is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu VALUES (1, 'Veggie Burger', true, 8.99), (2, 'Cheeseburger', false, 7.99), (3, 'Tofu Stir Fry', true, 11.99);", "reference_sql": "SELECT customers.customer_name, COUNT(orders.order_id) as order_count FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN menu ON orders.menu_id = menu.menu_id WHERE menu.is_vegetarian = true GROUP BY customers.customer_name ORDER BY order_count DESC LIMIT 1;", "generated_sql": "SELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_id, c.customer_name\nORDER BY COUNT(*) DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "```sql\nSELECT c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_id, c.customer_name\nORDER BY COUNT(*) DESC\nFETCH FIRST 1 ROW ONLY;\n```", "latency_sec": 1.0091910362243652, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 270, "prompt_eval_sec": null, "tokens_completion": 70, "completion_eval_sec": null, "tokens_total": 340, "tokens_per_sec": 336.90350765700873, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their GROUP BY clauses. The Reference SQL groups by customer_name, which may combine customers with identical names, while the Generated SQL groups by both customer_id and customer_name, ensuring unique customer identification. Although the sample data has unique names, the schema does not enforce name uniqueness, making the queries non-equivalent in general cases."}
{"example_id": 124, "sql_complexity": "set operations", "prompt": "Find the intersection of AI and accessibility research projects in the EU and those in Africa.", "context": "CREATE SCHEMA if not exists accessibility; CREATE TABLE if not exists accessibility.research (id INT PRIMARY KEY, project_name VARCHAR(255), region VARCHAR(255)); INSERT INTO accessibility.research (id, project_name, region) VALUES (1, 'AI for Accessibility EU', 'EU'), (2, 'Accessibility Africa', 'Africa'), (3, 'AI for Accessibility Africa', 'Africa'), (4, 'Accessibility EU', 'EU');", "reference_sql": "SELECT project_name FROM accessibility.research WHERE region = 'EU' INTERSECT SELECT project_name FROM accessibility.research WHERE region = 'Africa';", "generated_sql": "SELECT project_name\nFROM accessibility.research\nWHERE region = 'EU'\n  AND project_name IN (\n    SELECT project_name\n    FROM accessibility.research\n    WHERE region = 'Africa'\n  );", "raw_model_output": "```sql\nSELECT project_name\nFROM accessibility.research\nWHERE region = 'EU'\n  AND project_name IN (\n    SELECT project_name\n    FROM accessibility.research\n    WHERE region = 'Africa'\n  );\n```", "latency_sec": 1.0040040016174316, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 175, "prompt_eval_sec": null, "tokens_completion": 46, "completion_eval_sec": null, "tokens_total": 221, "tokens_per_sec": 220.11864459103066, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The INTERSECT operator returns distinct project names that exist in both regions, while the IN clause returns all project names from EU that exist in Africa, including duplicates if they exist in the EU table. If there are duplicate project names in the EU region, the generated query would return more rows than the reference query."}
{"example_id": 1231, "sql_complexity": "basic SQL", "prompt": "What is the average ticket price for performances at the 'Downtown Theater'?", "context": "CREATE TABLE DowntownTheater (show_name TEXT, date DATE, ticket_price FLOAT); INSERT INTO DowntownTheater (show_name, date, ticket_price) VALUES ('Play 1', '2022-01-01', 30.0), ('Play 2', '2022-01-02', 40.0), ('Concert 1', '2022-01-03', 50.0);", "reference_sql": "SELECT AVG(ticket_price) FROM DowntownTheater WHERE show_name = 'Downtown Theater'", "generated_sql": "SELECT AVG(ticket_price) AS average_ticket_price\nFROM DowntownTheater;", "raw_model_output": "```sql\nSELECT AVG(ticket_price) AS average_ticket_price\nFROM DowntownTheater;\n```", "latency_sec": 0.870354175567627, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 169, "prompt_eval_sec": null, "tokens_completion": 20, "completion_eval_sec": null, "tokens_total": 189, "tokens_per_sec": 217.1529766910558, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters for show_name = 'Downtown Theater' which doesn't exist in the data, returning NULL. The Generated SQL calculates the average of all tickets. The WHERE clause in Reference SQL makes them non-equivalent."}
{"example_id": 1485, "sql_complexity": "set operations", "prompt": "How many public schools and public libraries exist in total, in the 'CityData' schema's 'CityEducation' and 'CityLibrary' tables?", "context": "CREATE SCHEMA CityData; CREATE TABLE CityEducation (Name varchar(255), Type varchar(255)); INSERT INTO CityEducation (Name, Type) VALUES ('SchoolA', 'Public'), ('SchoolB', 'Public'), ('SchoolC', 'Private'); CREATE TABLE CityLibrary (Name varchar(255), Type varchar(255)); INSERT INTO CityLibrary (Name, Type) VALUES ('LibraryA', 'Public'), ('LibraryB', 'Public'), ('LibraryC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public';", "generated_sql": "SELECT\n  (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') +\n  (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS total_public_institutions;", "raw_model_output": "```sql\nSELECT\n  (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') +\n  (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS total_public_institutions;\n```", "latency_sec": 0.7728662490844727, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 195, "prompt_eval_sec": null, "tokens_completion": 47, "completion_eval_sec": null, "tokens_total": 242, "tokens_per_sec": 313.12015537833366, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (2 from CityEducation and 2 from CityLibrary) as two rows, while the Generated SQL returns a single row with the summed total (4). The output structure and values differ."}
{"example_id": 5806, "sql_complexity": "single join", "prompt": "List the top 3 countries with the most veteran employment in the IT industry", "context": "CREATE TABLE veteran_employment (employee_id INT, industry VARCHAR(255), salary DECIMAL(10,2), state VARCHAR(2), country VARCHAR(255)); CREATE TABLE countries (country_id INT, country VARCHAR(255));", "reference_sql": "SELECT country, COUNT(*) as num_veterans FROM veteran_employment JOIN countries ON veteran_employment.country = countries.country WHERE industry = 'IT' GROUP BY country ORDER BY num_veterans DESC LIMIT 3;", "generated_sql": "SELECT ve.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nWHERE ve.industry = 'IT'\nGROUP BY ve.country\nORDER BY veteran_count DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "```sql\nSELECT ve.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nWHERE ve.industry = 'IT'\nGROUP BY ve.country\nORDER BY veteran_count DESC\nFETCH FIRST 3 ROWS ONLY;\n```", "latency_sec": 0.767524003982544, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 129, "prompt_eval_sec": null, "tokens_completion": 48, "completion_eval_sec": null, "tokens_total": 177, "tokens_per_sec": 230.61168000164014, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter for 'IT' industry, group by country, count veterans, order by count descending, and limit to 3 results. The Reference SQL's JOIN with 'countries' is redundant since the 'country' column is already present in 'veteran_employment'. The 'FETCH FIRST 3 ROWS ONLY' in Generated SQL is functionally equivalent to 'LIMIT 3' in Reference SQL."}
{"example_id": 4126, "sql_complexity": "window functions", "prompt": "What is the average crime rate per capita in each neighborhood?", "context": "CREATE TABLE neighborhoods (name VARCHAR(255), population INT, crime_count INT); INSERT INTO neighborhoods (name, population, crime_count) VALUES ('Central Park', 1000, 25), ('Harlem', 2500, 75), ('Brooklyn', 5000, 120);", "reference_sql": "SELECT name, AVG(crime_count/population) OVER (PARTITION BY name) FROM neighborhoods;", "generated_sql": "SELECT\n  name,\n  (crime_count * 1.0) / population AS crime_rate_per_capita\nFROM\n  neighborhoods;", "raw_model_output": "```sql\nSELECT\n  name,\n  (crime_count * 1.0) / population AS crime_rate_per_capita\nFROM\n  neighborhoods;\n```", "latency_sec": 0.9016969203948975, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 140, "prompt_eval_sec": null, "tokens_completion": 34, "completion_eval_sec": null, "tokens_total": 174, "tokens_per_sec": 192.96949569684327, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query uses AVG(crime_count/population) OVER (PARTITION BY name), which for each row (since each name is unique) calculates the average of a single value (equivalent to the value itself). However, the generated query directly computes (crime_count * 1.0)/population. The key difference is that the reference query may perform integer division (if the database does not implicitly cast to float), while the generated query explicitly uses floating-point division. For example, 25/1000 would be 0 in integer division but 0.025 in floating-point. Thus, the results differ when integer division is applied."}
{"example_id": 4559, "sql_complexity": "basic SQL", "prompt": "List the top 3 energy efficient appliances in the US by energy star rating?", "context": "CREATE TABLE appliances (id INT, name VARCHAR(255), country VARCHAR(255), energy_star_rating INT); INSERT INTO appliances (id, name, country, energy_star_rating) VALUES (1, 'Fridge A', 'USA', 5), (2, 'TV B', 'USA', 4), (3, 'Laptop C', 'USA', 5), (4, 'Microwave D', 'USA', 3);", "reference_sql": "SELECT name, energy_star_rating FROM appliances WHERE country = 'USA' ORDER BY energy_star_rating DESC LIMIT 3;", "generated_sql": "SELECT name, energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nLIMIT 3;", "raw_model_output": "```sql\nSELECT name, energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nLIMIT 3;\n```", "latency_sec": 0.8169436454772949, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 174, "prompt_eval_sec": null, "tokens_completion": 32, "completion_eval_sec": null, "tokens_total": 206, "tokens_per_sec": 252.15937615824848, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and spacing) which do not affect SQL execution. Both select the same columns, apply the same WHERE condition, sort by energy_star_rating in descending order, and limit results to 3 rows."}
{"example_id": 456, "sql_complexity": "window functions", "prompt": "List the intelligence operations and their corresponding threat levels, and rank them based on their threat level and budget.", "context": "CREATE TABLE intel_ops_threat (id INT, operation VARCHAR, threat VARCHAR, budget INT); INSERT INTO intel_ops_threat (id, operation, threat, budget) VALUES (1, 'Operation Red Folder', 'High', 5000000), (2, 'Operation Black Vault', 'Medium', 7000000), (3, 'Operation Blue Sail', 'Low', 6000000);", "reference_sql": "SELECT operation, threat, budget, ROW_NUMBER() OVER (PARTITION BY threat ORDER BY budget DESC) as rank FROM intel_ops_threat;", "generated_sql": "SELECT \n    operation, \n    threat\nFROM \n    intel_ops_threat\nORDER BY\n    CASE threat\n        WHEN 'High' THEN 1\n        WHEN 'Medium' THEN 2\n        WHEN 'Low' THEN 3\n        ELSE 4\n    END,\n    budget DESC;", "raw_model_output": "```sql\nSELECT \n    operation, \n    threat\nFROM \n    intel_ops_threat\nORDER BY\n    CASE threat\n        WHEN 'High' THEN 1\n        WHEN 'Medium' THEN 2\n        WHEN 'Low' THEN 3\n        ELSE 4\n    END,\n    budget DESC;\n```", "latency_sec": 0.9531130790710449, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 171, "prompt_eval_sec": null, "tokens_completion": 68, "completion_eval_sec": null, "tokens_total": 239, "tokens_per_sec": 250.7572346325813, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes 'budget' and adds a 'rank' column using ROW_NUMBER(), while the Generated SQL only selects 'operation' and 'threat' and orders them differently. The output columns and structure differ, and the Generated SQL lacks the window function ranking logic present in the Reference SQL."}
{"example_id": 459, "sql_complexity": "set operations", "prompt": "What is the total installed capacity of hydroelectric power plants in Brazil and Canada?", "context": "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", "reference_sql": "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');", "generated_sql": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "raw_model_output": "```sql\nSELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');\n```", "latency_sec": 0.7980918884277344, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 142, "prompt_eval_sec": null, "tokens_completion": 28, "completion_eval_sec": null, "tokens_total": 170, "tokens_per_sec": 213.0080539158282, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate capacity values (Brazil and Canada) using UNION, while the Generated SQL returns a single summed value of both countries' capacities. The output structures differ (two rows vs. one row with a total), so they are not semantically equivalent."}
{"example_id": 2356, "sql_complexity": "window functions", "prompt": "Find the total billing amount for attorneys in the 'Criminal Law' practice area, for the year 2020, partitioned by attorney's last name and ordered by the total billing amount in descending order.", "context": "CREATE TABLE Attorneys (AttorneyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), PracticeArea VARCHAR(50), TotalBilling FLOAT, BillingYear INT); INSERT INTO Attorneys (AttorneyID, FirstName, LastName, PracticeArea, TotalBilling, BillingYear) VALUES (1, 'Clara', 'Rivera', 'Personal Injury', 8000.00, 2020), (2, 'Jamal', 'Lee', 'Personal Injury', 6000.00, 2019), (3, 'Sophia', 'Gomez', 'Criminal Law', 9000.00, 2020);", "reference_sql": "SELECT LastName, SUM(TotalBilling) OVER (PARTITION BY PracticeArea, LastName, BillingYear) AS TotalBilling FROM Attorneys WHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020 ORDER BY TotalBilling DESC;", "generated_sql": "SELECT\n  LastName,\n  SUM(TotalBilling) AS TotalBilling\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law'\n  AND BillingYear = 2020\nGROUP BY LastName\nORDER BY TotalBilling DESC;", "raw_model_output": "```sql\nSELECT\n  LastName,\n  SUM(TotalBilling) AS TotalBilling\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law'\n  AND BillingYear = 2020\nGROUP BY LastName\nORDER BY TotalBilling DESC;\n```", "latency_sec": 0.7309508323669434, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 241, "prompt_eval_sec": null, "tokens_completion": 53, "completion_eval_sec": null, "tokens_total": 294, "tokens_per_sec": 402.21583584217, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the total billing per LastName for 'Criminal Law' in 2020. The Reference SQL uses a window function with redundant partitioning (PracticeArea and BillingYear are fixed by the WHERE clause), while the Generated SQL uses explicit grouping. Since the WHERE clause ensures all rows have the same PracticeArea and BillingYear, both approaches yield identical results."}
