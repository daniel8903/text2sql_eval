{"example_id": 2656, "sql_complexity": "multiple_joins", "prompt": "Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.", "context": "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", "reference_sql": "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')", "generated_sql": "SELECT d.name AS drug_name, SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(s2.revenue)\n    FROM sales s2\n    JOIN drugs d2 ON s2.drug_id = d2.id\n    WHERE d2.indication = 'Infectious_Diseases'\n);", "raw_model_output": "SELECT d.name AS drug_name, SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(s2.revenue)\n    FROM sales s2\n    JOIN drugs d2 ON s2.drug_id = d2.id\n    WHERE d2.indication = 'Infectious_Diseases'\n);", "latency_sec": 1.606476068496704, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their GROUP BY clauses. The Reference SQL groups by s.drug_id (unique identifier), while the Generated SQL groups by d.name (which may not be unique). This could lead to different aggregation results if multiple drugs share the same name. Additionally, the Reference SQL uses an alias 'total_sales' in HAVING, which may not be valid in all SQL dialects, whereas the Generated SQL uses the explicit aggregate function."}
{"example_id": 3008, "sql_complexity": "multiple_joins", "prompt": "Who are the users who used electric vehicles and their trip details?", "context": "CREATE TABLE users (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), city VARCHAR(50));CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(20), is_electric BOOLEAN);CREATE TABLE trips (id INT, user_id INT, vehicle_id INT, trip_distance FLOAT, trip_duration INT, departure_time TIMESTAMP, arrival_time TIMESTAMP);INSERT INTO users (id, name, age, gender, city) VALUES (3, 'Alex', 30, 'Female', 'New York');INSERT INTO vehicles (id, vehicle_type, is_electric) VALUES (1, 'Tesla', true), (2, 'Bike', false);INSERT INTO trips (id, user_id, vehicle_id, trip_distance, trip_duration, departure_time, arrival_time) VALUES (3, 3, 1, 15.3, 25, '2022-01-03 12:00:00', '2022-01-03 12:25:00');", "reference_sql": "SELECT u.name, v.vehicle_type, t.trip_distance, t.trip_duration FROM users u JOIN trips t ON u.id = t.user_id JOIN vehicles v ON t.vehicle_id = v.id WHERE v.is_electric = true;", "generated_sql": "SELECT u.id, u.name, u.age, u.gender, u.city, t.id AS trip_id, t.trip_distance, t.trip_duration, t.departure_time, t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "raw_model_output": "SELECT u.id, u.name, u.age, u.gender, u.city, t.id AS trip_id, t.trip_distance, t.trip_duration, t.departure_time, t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "latency_sec": 5.0790510177612305, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent because they select different columns. The Reference SQL selects only 4 specific columns (name, vehicle_type, trip_distance, trip_duration), while the Generated SQL selects 10 columns including all user and trip fields. The additional columns in the Generated SQL change the result set structure and content."}
{"example_id": 2531, "sql_complexity": "basic SQL", "prompt": "Who is the top customer by sales in 2022?", "context": "CREATE TABLE customers (customer_id INT, total_sales_2022 FLOAT); INSERT INTO customers (customer_id, total_sales_2022) VALUES (1, 25000.0), (2, 30000.0), (3, 22000.0), (4, 35000.0);", "reference_sql": "SELECT customer_id, total_sales_2022 FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "generated_sql": "SELECT customer_id\nFROM customers\nORDER BY total_sales_2022 DESC\nLIMIT 1;", "raw_model_output": "SELECT customer_id\nFROM customers\nORDER BY total_sales_2022 DESC\nLIMIT 1;", "latency_sec": 0.4749162197113037, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns both customer_id and total_sales_2022 columns, while the generated query only returns customer_id. The result sets have different structures (columns), so they are not semantically equivalent."}
{"example_id": 3792, "sql_complexity": "single join", "prompt": "What is the maximum distance traveled by an electric vehicle in a single trip, grouped by vehicle model?", "context": "CREATE TABLE Trips (trip_id INT, vehicle_id INT, distance FLOAT); CREATE TABLE ElectricVehicleModels (vehicle_id INT, vehicle_model TEXT);", "reference_sql": "SELECT evm.vehicle_model, MAX(trips.distance) AS max_distance_traveled FROM Trips trips INNER JOIN ElectricVehicleModels evm ON trips.vehicle_id = evm.vehicle_id GROUP BY 1;", "generated_sql": "SELECT \n    evm.vehicle_model,\n    MAX(t.distance) AS max_distance\nFROM \n    Trips t\nJOIN \n    ElectricVehicleModels evm ON t.vehicle_id = evm.vehicle_id\nGROUP BY \n    evm.vehicle_model;", "raw_model_output": "SELECT \n    evm.vehicle_model,\n    MAX(t.distance) AS max_distance\nFROM \n    Trips t\nJOIN \n    ElectricVehicleModels evm ON t.vehicle_id = evm.vehicle_id\nGROUP BY \n    evm.vehicle_model;", "latency_sec": 0.697058916091919, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum distance traveled per vehicle model by joining the Trips and ElectricVehicleModels tables. The differences are purely syntactic (table aliases and column alias names) and do not affect the semantic outcome. Both group by the vehicle_model and aggregate the distance correctly."}
{"example_id": 2311, "sql_complexity": "subqueries", "prompt": "Determine the percentage of sales from each ingredient category", "context": "CREATE TABLE Sales_Details (sale_id INT, ingredient_id INT, quantity INT); INSERT INTO Sales_Details (sale_id, ingredient_id, quantity) VALUES (1, 1, 2), (1, 2, 8), (2, 1, 3), (2, 2, 7); CREATE TABLE Ingredient_Categories (ingredient_id INT, ingredient_category VARCHAR(255)); INSERT INTO Ingredient_Categories (ingredient_id, ingredient_category) VALUES (1, 'Legumes'), (2, 'Poultry');", "reference_sql": "SELECT ingredient_category, SUM(quantity) AS total_quantity, SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales FROM Sales_Details, Ingredient_Categories WHERE Sales_Details.ingredient_id = Ingredient_Categories.ingredient_id GROUP BY ingredient_category;", "generated_sql": "SELECT \n    ic.ingredient_category,\n    (SUM(sd.quantity) * 100.0) / total.total_quantity AS percentage_of_sales\nFROM \n    Sales_Details sd\nJOIN \n    Ingredient_Categories ic ON sd.ingredient_id = ic.ingredient_id\nJOIN \n    (SELECT SUM(quantity) AS total_quantity FROM Sales_Details) total ON 1=1\nGROUP BY \n    ic.ingredient_category;", "raw_model_output": "SELECT \n    ic.ingredient_category,\n    (SUM(sd.quantity) * 100.0) / total.total_quantity AS percentage_of_sales\nFROM \n    Sales_Details sd\nJOIN \n    Ingredient_Categories ic ON sd.ingredient_id = ic.ingredient_id\nJOIN \n    (SELECT SUM(quantity) AS total_quantity FROM Sales_Details) total ON 1=1\nGROUP BY \n    ic.ingredient_category;", "latency_sec": 0.9151382446289062, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total quantity sold per ingredient category and the percentage of total sales. The Reference SQL uses a scalar subquery in the SELECT clause, while the Generated SQL computes the total via a derived table joined with ON 1=1. Both achieve the same grouping, aggregation, and percentage calculation. The explicit JOINs and aliases in the Generated SQL do not affect the semantic result."}
{"example_id": 3329, "sql_complexity": "set operations", "prompt": "Which causes received funding from donors in both the United States and Canada?", "context": "CREATE TABLE donor_location (donor_id INT, country VARCHAR(50), cause VARCHAR(50), donation DECIMAL(10,2)); INSERT INTO donor_location (donor_id, country, cause, donation) VALUES (1, 'United States', 'Global Health', 1000.00), (2, 'Canada', 'Education', 2000.00), (3, 'United States', 'Environment', 1500.00), (4, 'Canada', 'Animal Welfare', 2500.00);", "reference_sql": "SELECT cause FROM donor_location WHERE country = 'United States' INTERSECT SELECT cause FROM donor_location WHERE country = 'Canada';", "generated_sql": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "raw_model_output": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "latency_sec": 0.6210176944732666, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve causes that appear in both 'United States' and 'Canada'. The reference uses INTERSECT to find common causes between two subqueries, while the generated query groups by cause and filters with HAVING COUNT(DISTINCT country) = 2, which ensures the cause exists in both countries. Both approaches yield the same result set."}
{"example_id": 2912, "sql_complexity": "single join", "prompt": "Which company has manufactured the most satellites?", "context": "CREATE TABLE manufacturers (id INT, name TEXT); CREATE TABLE satellites (id INT, manufacturer_id INT, name TEXT, launch_date DATE); INSERT INTO manufacturers (id, name) VALUES (1, 'SpaceX'), (2, 'Blue Origin'), (3, 'ISRO'), (4, 'CAST'); INSERT INTO satellites (id, manufacturer_id, name, launch_date) VALUES (1, 1, 'StarDragon', '2012-05-25'), (2, 1, 'Falcon', '2015-12-21'), (3, 2, 'New Glenn', '2022-01-11'), (4, 3, 'ChinaSat 1E', '2000-12-05'), (5, 3, 'ChinaSat 2A', '2003-08-13'), (6, 4, 'Shijian 9', '2017-11-19'), (7, 1, 'StarLink', '2020-05-24'), (8, 1, 'StarLink', '2020-06-13');", "reference_sql": "SELECT m.name, COUNT(s.id) FROM manufacturers m JOIN satellites s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY COUNT(s.id) DESC;", "generated_sql": "SELECT m.name AS manufacturer_name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.id, m.name\nORDER BY COUNT(s.id) DESC\nLIMIT 1;", "raw_model_output": "SELECT m.name AS manufacturer_name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.id, m.name\nORDER BY COUNT(s.id) DESC\nLIMIT 1;", "latency_sec": 0.9124810695648193, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns all manufacturers with their satellite counts ordered by count descending, while the Generated SQL only returns the top manufacturer (due to LIMIT 1). The Generated SQL also groups by both m.id and m.name (redundant since id is unique) but the core difference is the LIMIT 1 which restricts output to a single row, making them non-equivalent."}
{"example_id": 3170, "sql_complexity": "aggregation", "prompt": "Determine the total production quantity of silver for mining sites in Mexico, between the dates '2017-05-01' and '2017-09-30', having less than 40 employees.", "context": "CREATE TABLE silver_mine_2 (site_id INT, country VARCHAR(50), num_employees INT, extraction_date DATE, quantity INT); INSERT INTO silver_mine_2 (site_id, country, num_employees, extraction_date, quantity) VALUES (1, 'Mexico', 35, '2017-05-02', 1200), (2, 'Mexico', 30, '2017-08-31', 1800), (3, 'Mexico', 37, '2017-07-04', 2200);", "reference_sql": "SELECT country, SUM(quantity) as total_silver_prod FROM silver_mine_2 WHERE num_employees < 40 AND country = 'Mexico' AND extraction_date >= '2017-05-01' AND extraction_date <= '2017-09-30' GROUP BY country;", "generated_sql": "SELECT SUM(quantity) AS total_silver_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "raw_model_output": "SELECT SUM(quantity) AS total_silver_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "latency_sec": 1.5905919075012207, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'country' in the SELECT clause and groups by it, while the Generated SQL omits the 'country' column. Although both filter the same data, the Reference query returns a row with two columns (country and total_silver_prod), whereas the Generated query returns a single column. This difference in result structure makes them semantically distinct."}
{"example_id": 3518, "sql_complexity": "basic SQL", "prompt": "Insert new records of ticket sales for a new event, including event and salesperson information.", "context": "CREATE TABLE salesperson (salesperson_id INT, name VARCHAR(50), position VARCHAR(50)); CREATE TABLE tickets (ticket_id INT, salesperson_id INT, event_id INT, price DECIMAL(5,2), quantity INT); CREATE TABLE events (event_id INT, name VARCHAR(50), date DATE); INSERT INTO salesperson VALUES (1, 'John Doe', 'Senior Salesperson'); INSERT INTO events VALUES (2, 'New Event', '2023-04-15');", "reference_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) VALUES (2, 1, 2, 75, 50), (3, 2, 2, 65, 75); INSERT INTO events (event_id, name, date) VALUES (2, 'New Event', '2023-04-15');", "generated_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (/* specify ticket_id */, /* specify salesperson_id */, /* specify event_id */, /* specify price */, /* specify quantity */);", "raw_model_output": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (/* specify ticket_id */, /* specify salesperson_id */, /* specify event_id */, /* specify price */, /* specify quantity */);", "latency_sec": 0.8219859600067139, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains specific INSERT statements with actual values for both tickets and events tables, while the Generated SQL is a template with placeholders (e.g., /* specify ticket_id */). The Generated SQL is incomplete and lacks the actual data values, making it syntactically and semantically different from the Reference SQL."}
{"example_id": 3925, "sql_complexity": "set operations", "prompt": "What is the total number of students and staff with accommodations in the \"disability_services\" schema, excluding the \"accessibility_parking\" type?", "context": "CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));", "reference_sql": "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM disability_services.students WHERE accommodation <> 'accessibility_parking') +\n    (SELECT COUNT(*) FROM disability_services.staff WHERE accommodation <> 'accessibility_parking') AS total_with_accommodations;", "raw_model_output": "SELECT \n    (SELECT COUNT(*) FROM disability_services.students WHERE accommodation <> 'accessibility_parking') +\n    (SELECT COUNT(*) FROM disability_services.staff WHERE accommodation <> 'accessibility_parking') AS total_with_accommodations;", "latency_sec": 0.6318378448486328, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (staff and students) as individual rows via UNION, while the Generated SQL calculates the sum of both counts in a single row. The output structure differs (two rows vs. one row with a total), making them non-equivalent."}
{"example_id": 3340, "sql_complexity": "subqueries", "prompt": "Calculate the total revenue for garments manufactured in the US and sold in California.", "context": "CREATE TABLE garment_manufacturing(id INT PRIMARY KEY, garment_id INT, country VARCHAR(50), material VARCHAR(50), manufacturing_date DATE, quantity INT); CREATE TABLE garment_sales(id INT PRIMARY KEY, garment_id INT, store_id INT, sale_date DATE, units INT, revenue DECIMAL(10,2));", "reference_sql": "SELECT SUM(gs.revenue) FROM garment_manufacturing gm JOIN garment_sales gs ON gm.garment_id = gs.garment_id WHERE gm.country = 'United States' AND gs.store_id IN (SELECT id FROM stores WHERE region = 'California');", "generated_sql": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US' AND gs.store_id IN (\n    -- Assuming store_id corresponds to California stores, but since store details are not provided,\n    -- this query assumes store_id represents California stores directly.\n    -- If store location info is available in another table, join accordingly.\n);", "raw_model_output": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US' AND gs.store_id IN (\n    -- Assuming store_id corresponds to California stores, but since store details are not provided,\n    -- this query assumes store_id represents California stores directly.\n    -- If store location info is available in another table, join accordingly.\n);\n", "latency_sec": 0.8452510833740234, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL uses 'United States' while the Generated SQL uses 'US' for the country condition, which may not match if the database stores full country names. Second, the Generated SQL's subquery for store_id is incomplete (only comments exist), whereas the Reference SQL explicitly references a 'stores' table (which doesn't exist in the provided schema). These discrepancies prevent semantic equivalence."}
{"example_id": 596, "sql_complexity": "basic SQL", "prompt": "What is the minimum energy production cost of wind farms in Spain?", "context": "CREATE TABLE wind_farm_costs (id INT, name TEXT, country TEXT, energy_production_cost FLOAT); INSERT INTO wind_farm_costs (id, name, country, energy_production_cost) VALUES (1, 'Las Tiesas', 'Spain', 0.045), (2, 'Eolo', 'Spain', 0.050);", "reference_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "generated_sql": "SELECT MIN(energy_production_cost) AS min_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "raw_model_output": "SELECT MIN(energy_production_cost) AS min_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "latency_sec": 0.74666428565979, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the minimum energy_production_cost for wind farms in Spain. The generated query adds an alias (min_cost) to the result column, but this does not affect the semantic value of the output. The WHERE clause and aggregate function (MIN) are identical in both queries."}
{"example_id": 2604, "sql_complexity": "subqueries", "prompt": "What is the maximum number of virtual tours taken by a single user in the UK?", "context": "CREATE TABLE virtual_tour_data (user_id INT, hotel_id INT, tour_date DATE); INSERT INTO virtual_tour_data (user_id, hotel_id, tour_date) VALUES (1, 10, '2022-01-01'), (2, 11, '2022-01-03'), (3, 12, '2022-01-05'), (4, 10, '2022-01-07'), (5, 10, '2022-01-09'); CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT); INSERT INTO hotels (hotel_id, hotel_name, country) VALUES (10, 'Royal Park Hotel', 'UK'), (11, 'The Ritz London', 'UK'), (12, 'Hotel de Crillon', 'France');", "reference_sql": "SELECT MAX(vt.user_tours) FROM (SELECT user_id, COUNT(DISTINCT hotel_id) as user_tours FROM virtual_tour_data WHERE country = 'UK' GROUP BY user_id) as vt;", "generated_sql": "SELECT MAX(tour_count) AS max_tours\nFROM (\n    SELECT user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data vtd\n    JOIN hotels h ON vtd.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY user_id\n) sub;", "raw_model_output": "SELECT MAX(tour_count) AS max_tours\nFROM (\n    SELECT user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data vtd\n    JOIN hotels h ON vtd.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY user_id\n) sub;", "latency_sec": 0.6896257400512695, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'country' column in virtual_tour_data, which doesn't exist, making it invalid. Even if corrected to join with hotels, the Reference SQL uses COUNT(DISTINCT hotel_id) while the Generated SQL uses COUNT(*). This would produce different results if a user toured the same hotel multiple times. For example, if a user had two entries for hotel_id 10, COUNT(DISTINCT) would be 1 but COUNT(*) would be 2, leading to different MAX values."}
{"example_id": 5812, "sql_complexity": "single join", "prompt": "Calculate the percentage of Shariah-compliant investments held by each investor in the top 5 countries with the highest percentage?", "context": "CREATE TABLE investors (investor_id INT, investor_name TEXT, country TEXT); INSERT INTO investors (investor_id, investor_name, country) VALUES (1, 'Al Thani', 'Qatar'), (2, 'Saudi Investment Group', 'Saudi Arabia'), (3, 'Temasek Holdings', 'Singapore'); CREATE TABLE investments (investment_id INT, investor_id INT, investment_type TEXT, investment_value DECIMAL, is_shariah_compliant BOOLEAN); INSERT INTO investments (investment_id, investor_id, investment_type, investment_value, is_shariah_compliant) VALUES (1, 1, 'Real Estate', 15000000, true), (2, 2, 'Stocks', 20000000, false);", "reference_sql": "SELECT investor_name, ROUND((SUM(CASE WHEN is_shariah_compliant THEN investment_value ELSE 0 END) / SUM(investment_value)) * 100, 2) AS percentage FROM investments JOIN investors ON investments.investor_id = investors.investor_id GROUP BY investor_name ORDER BY percentage DESC LIMIT 5;", "generated_sql": "SELECT\n        i.country,\n        COUNT(*) AS total_investments,\n        SUM(CASE WHEN inv.is_shariah_compliant THEN 1 ELSE 0 END) AS shariah_investments\n    FROM\n        investors i\n        JOIN investments inv ON i.investor_id = inv.investor_id\n    GROUP BY\n        i.country\n),\ncountry_shariah_percent AS (\n    SELECT\n        country,\n        (shariah_investments * 100.0) / total_investments AS shariah_percentage\n    FROM\n        country_shariah_stats\n),\ntop_countries AS (\n    SELECT\n        country\n    FROM\n        country_shariah_percent\n    ORDER BY\n        shariah_percentage DESC\n    LIMIT 5\n)\nSELECT\n    i.investor_name,\n    i.country,\n    (SUM(CASE WHEN inv.is_shariah_compliant THEN inv.investment_value ELSE 0 END) * 100.0) /\n    NULLIF(SUM(inv.investment_value), 0) AS shariah_compliant_percentage\nFROM\n    investors i\n    JOIN investments inv ON i.investor_id = inv.investor_id\nWHERE\n    i.country IN (SELECT country FROM top_countries)\nGROUP BY\n    i.investor_id, i.investor_name, i.country;", "raw_model_output": "WITH country_shariah_stats AS (\n    SELECT\n        i.country,\n        COUNT(*) AS total_investments,\n        SUM(CASE WHEN inv.is_shariah_compliant THEN 1 ELSE 0 END) AS shariah_investments\n    FROM\n        investors i\n        JOIN investments inv ON i.investor_id = inv.investor_id\n    GROUP BY\n        i.country\n),\ncountry_shariah_percent AS (\n    SELECT\n        country,\n        (shariah_investments * 100.0) / total_investments AS shariah_percentage\n    FROM\n        country_shariah_stats\n),\ntop_countries AS (\n    SELECT\n        country\n    FROM\n        country_shariah_percent\n    ORDER BY\n        shariah_percentage DESC\n    LIMIT 5\n)\nSELECT\n    i.investor_name,\n    i.country,\n    (SUM(CASE WHEN inv.is_shariah_compliant THEN inv.investment_value ELSE 0 END) * 100.0) /\n    NULLIF(SUM(inv.investment_value), 0) AS shariah_compliant_percentage\nFROM\n    investors i\n    JOIN investments inv ON i.investor_id = inv.investor_id\nWHERE\n    i.country IN (SELECT country FROM top_countries)\nGROUP BY\n    i.investor_id, i.investor_name, i.country;", "latency_sec": 2.245789051055908, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the shariah compliance percentage per investor, while the Generated SQL first calculates country-level statistics, filters investors from top-performing countries, and then computes compliance percentages for those investors. The grouping, filtering, and aggregation logic differ significantly, leading to different results."}
{"example_id": 4706, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 customers by total spend on makeup products from Italy and Spain?", "context": "CREATE TABLE customers (customer_id INT, customer_name TEXT, country TEXT); INSERT INTO customers (customer_id, customer_name, country) VALUES (1, 'Alessandro Martini', 'IT'), (2, 'Laura Rossi', 'ES'), (3, 'Daniela Gonzalez', 'MX'), (4, 'Jose Hernandez', 'ES'), (5, 'Sophia Rodriguez', 'IT'); CREATE TABLE sales (sale_id INT, customer_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, customer_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 1, 100, 'IT'), (2, 2, 2, 150, 'ES'), (3, 3, 3, 200, 'MX'), (4, 4, 4, 250, 'ES'), (5, 5, 5, 300, 'IT'); CREATE TABLE products (product_id INT, product_name TEXT, category TEXT); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Eyeshadow Palette', 'makeup'), (2, 'Liquid Lipstick', 'makeup'), (3, 'BB Cream', 'makeup'), (4, 'Volumizing Mascara', 'makeup'), (5, 'Nourishing Lip Balm', 'makeup');", "reference_sql": "SELECT c.customer_name, SUM(s.sale_quantity) as total_spent_on_makeup FROM sales s JOIN customers c ON s.customer_id = c.customer_id JOIN products p ON s.product_id = p.product_id WHERE c.country IN ('IT', 'ES') AND p.category = 'makeup' GROUP BY c.customer_name ORDER BY total_spent_on_makeup DESC LIMIT 3;", "generated_sql": "SELECT c.customer_id, c.customer_name, SUM(s.sale_quantity) AS total_spend\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE p.category = 'makeup' AND s.sale_country IN ('IT', 'ES')\nGROUP BY c.customer_id, c.customer_name\nORDER BY total_spend DESC\nLIMIT 3;", "raw_model_output": "SELECT c.customer_id, c.customer_name, SUM(s.sale_quantity) AS total_spend\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE p.category = 'makeup' AND s.sale_country IN ('IT', 'ES')\nGROUP BY c.customer_id, c.customer_name\nORDER BY total_spend DESC\nLIMIT 3;", "latency_sec": 0.8212497234344482, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in three key aspects: 1) The WHERE clause filters on different columns (customers.country vs sales.sale_country), 2) The SELECT clause includes an extra customer_id column in the Generated query, and 3) The GROUP BY clause uses customer_name alone vs customer_id and customer_name. These differences could produce different results, especially if there are customers with the same name or sales in different countries than their registered country."}
{"example_id": 1515, "sql_complexity": "multiple_joins", "prompt": "What is the average age of clients who lost cases in the 'personal injury' category?", "context": "CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50)); INSERT INTO Cases (CaseID, ClientID, Category) VALUES (701, 7, 'Personal Injury'); CREATE TABLE Clients (ClientID int, Age int, Gender varchar(10)); INSERT INTO Clients (ClientID, Age, Gender) VALUES (7, 45, 'Male'); CREATE TABLE CaseOutcomes (CaseID int, Outcome varchar(50)); INSERT INTO CaseOutcomes (CaseID, Outcome) VALUES (701, 'Lost');", "reference_sql": "SELECT AVG(C.Age) as AvgAge FROM Clients C INNER JOIN Cases CA ON C.ClientID = CA.ClientID INNER JOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID WHERE CA.Category = 'Personal Injury' AND CO.Outcome = 'Lost';", "generated_sql": "SELECT AVG(c.Age) AS AverageAge\nFROM Clients c\nJOIN Cases ca ON c.ClientID = ca.ClientID\nJOIN CaseOutcomes co ON ca.CaseID = co.CaseID\nWHERE ca.Category = 'Personal Injury' AND co.Outcome = 'Lost';", "raw_model_output": "SELECT AVG(c.Age) AS AverageAge\nFROM Clients c\nJOIN Cases ca ON c.ClientID = ca.ClientID\nJOIN CaseOutcomes co ON ca.CaseID = co.CaseID\nWHERE ca.Category = 'Personal Injury' AND co.Outcome = 'Lost';", "latency_sec": 0.9306991100311279, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. They both calculate the average age of clients with 'Personal Injury' cases that resulted in a 'Lost' outcome. The only differences are whitespace formatting and alias case (C/CA/CO vs c/ca/co), which do not affect query semantics in SQL."}
{"example_id": 4388, "sql_complexity": "subqueries", "prompt": "Insert a new drug with a price 10% higher than the average price", "context": "CREATE TABLE drugs (drug_id INT, drug_name VARCHAR(50), price DECIMAL(10, 2)); INSERT INTO drugs (drug_id, drug_name, price) VALUES (1, 'DrugA', 50), (2, 'DrugB', 75), (3, 'DrugC', 100)", "reference_sql": "INSERT INTO drugs (drug_id, drug_name, price) VALUES ((SELECT MAX(drug_id) FROM drugs) + 1, 'DrugD', (SELECT AVG(price) * 1.1 FROM drugs))", "generated_sql": "INSERT INTO drugs (drug_id, drug_name, price)\nVALUES (\n    (SELECT MAX(drug_id) + 1 FROM drugs),\n    'NewDrug',\n    (SELECT AVG(price) * 1.10 FROM drugs)\n);", "raw_model_output": "INSERT INTO drugs (drug_id, drug_name, price)\nVALUES (\n    (SELECT MAX(drug_id) + 1 FROM drugs),\n    'NewDrug',\n    (SELECT AVG(price) * 1.10 FROM drugs)\n);", "latency_sec": 0.7152822017669678, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the drug_name value ('DrugD' vs 'NewDrug') and the price multiplier format (1.1 vs 1.10). While the price calculation logic is equivalent (1.1 = 1.10), the drug_name difference ensures the inserted rows are not identical. Semantic equivalence requires identical output, not just similar structure."}
{"example_id": 5431, "sql_complexity": "basic SQL", "prompt": "What is the average CO2 emission of ride-hailing vehicles in San Francisco?", "context": "CREATE TABLE SFRideHailing (id INT, company VARCHAR(20), co2_emission DECIMAL(5,2));", "reference_sql": "SELECT AVG(co2_emission) FROM SFRideHailing WHERE company = 'Uber';", "generated_sql": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "raw_model_output": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "latency_sec": 0.44215917587280273, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters results to only include rows where company = 'Uber' before calculating the average, while the Generated SQL calculates the average for all companies without any filtering. The presence of the WHERE clause in the Reference query makes it semantically different from the Generated query."}
{"example_id": 3531, "sql_complexity": "single join", "prompt": "What is the total number of workouts and total workout time per user for users with a membership type of 'Basic'?", "context": "CREATE TABLE Members (id INT, user_name VARCHAR, membership_type VARCHAR, signup_date DATE); CREATE TABLE Workouts (id INT, user_id INT, workout_date DATE, workout_duration INT); INSERT INTO Members (id, user_name, membership_type, signup_date) VALUES (1, 'John Doe', 'Premium', '2020-01-01'), (2, 'Jane Smith', 'Basic', '2019-06-15'), (3, 'Alice Johnson', 'Premium', '2020-03-20'); INSERT INTO Workouts (id, user_id, workout_date, workout_duration) VALUES (1, 1, '2020-01-01', 60), (2, 1, '2020-01-02', 70), (3, 2, '2019-06-15', 90), (4, 3, '2020-03-20', 65), (5, 3, '2020-03-21', 70);", "reference_sql": "SELECT Members.user_name, SUM(Workouts.workout_duration) AS total_workout_time, COUNT(Workouts.id) AS total_workouts FROM Members JOIN Workouts ON Members.id = Workouts.user_id WHERE Members.membership_type = 'Basic' GROUP BY Members.user_name;", "generated_sql": "SELECT \n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    SUM(w.workout_duration) AS total_workout_time\nFROM \n    Members m\nLEFT JOIN \n    Workouts w ON m.id = w.user_id\nWHERE \n    m.membership_type = 'Basic'\nGROUP BY \n    m.id, m.user_name;", "raw_model_output": "SELECT \n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    SUM(w.workout_duration) AS total_workout_time\nFROM \n    Members m\nLEFT JOIN \n    Workouts w ON m.id = w.user_id\nWHERE \n    m.membership_type = 'Basic'\nGROUP BY \n    m.id, m.user_name;", "latency_sec": 0.8482449054718018, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference uses an INNER JOIN while the Generated uses a LEFT JOIN, which affects whether members with no workouts are included. Second, the Reference groups by user_name (which may not be unique) while the Generated groups by id and user_name (ensuring unique grouping). These differences could lead to different results if there are members with the same user_name or members with no workouts."}
{"example_id": 5678, "sql_complexity": "set operations", "prompt": "How many public works projects are there in 'Sydney' and 'Melbourne' combined?", "context": "CREATE TABLE PublicWorksC(id INT, city VARCHAR(20), project VARCHAR(30)); INSERT INTO PublicWorksC(id, city, project) VALUES (1, 'Sydney', 'Park Renovation'), (2, 'Melbourne', 'Sidewalk Repair');", "reference_sql": "SELECT COUNT(*) FROM (SELECT city FROM PublicWorksC WHERE city = 'Sydney' UNION ALL SELECT city FROM PublicWorksC WHERE city = 'Melbourne') AS Total;", "generated_sql": "SELECT COUNT(*) AS total_projects\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "raw_model_output": "SELECT COUNT(*) AS total_projects\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "latency_sec": 0.8973901271820068, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows where the city is either 'Sydney' or 'Melbourne'. The Reference SQL uses a subquery with UNION ALL to combine results from two separate selects, while the Generated SQL uses the IN clause. Since COUNT(*) counts all rows regardless of source, the final result is identical."}
{"example_id": 5792, "sql_complexity": "multiple_joins", "prompt": "How many cases were handled by attorneys in the 'Los Angeles' office?", "context": "CREATE TABLE offices (office_id INT, office_name VARCHAR(20), city VARCHAR(20), state VARCHAR(20)); INSERT INTO offices (office_id, office_name, city, state) VALUES (1, 'Boston', 'Boston', 'MA'), (2, 'New York', 'New York', 'NY'), (3, 'Los Angeles', 'Los Angeles', 'CA'); CREATE TABLE attorneys (attorney_id INT, office_id INT); INSERT INTO attorneys (attorney_id, office_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3);", "reference_sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.attorney_id JOIN offices ON attorneys.office_id = offices.office_id WHERE offices.city = 'Los Angeles';", "generated_sql": "SELECT COUNT(*) AS case_count\nFROM cases\nJOIN attorneys ON cases.attorney_id = attorneys.attorney_id\nJOIN offices ON attorneys.office_id = offices.office_id\nWHERE offices.city = 'Los Angeles';", "raw_model_output": "SELECT COUNT(*) AS case_count\nFROM cases\nJOIN attorneys ON cases.attorney_id = attorneys.attorney_id\nJOIN offices ON attorneys.office_id = offices.office_id\nWHERE offices.city = 'Los Angeles';", "latency_sec": 0.6399936676025391, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries perform the same three-table join (cases \u2192 attorneys \u2192 offices) with the same WHERE condition filtering by 'Los Angeles' city. The only difference is the alias 'case_count' in the Generated SQL, which does not affect the result set's semantic content. The COUNT(*) aggregation and join logic are identical."}
{"example_id": 5148, "sql_complexity": "window functions", "prompt": "List the unique types of smart city technologies that have been implemented in the top 3 most populous countries in the world.", "context": "CREATE TABLE smart_city_tech (tech_type VARCHAR(255), country VARCHAR(255)); CREATE TABLE country_populations (country VARCHAR(255), population INT);", "reference_sql": "SELECT DISTINCT tech_type FROM smart_city_tech SCT WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY population DESC) as rank FROM country_populations) CP WHERE rank <= 3);", "generated_sql": "SELECT DISTINCT sct.tech_type\nFROM smart_city_tech sct\nJOIN country_populations cp ON sct.country = cp.country\nORDER BY cp.population DESC\nLIMIT 3;", "raw_model_output": "SELECT DISTINCT sct.tech_type\nFROM smart_city_tech sct\nJOIN country_populations cp ON sct.country = cp.country\nORDER BY cp.population DESC\nLIMIT 3;", "latency_sec": 5.763784885406494, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects distinct tech_types from the top 3 countries by population (using ROW_NUMBER()), while the Generated SQL joins tables, orders by population, and limits to 3 rows. The Generated SQL may return fewer than 3 countries if multiple entries exist for the same country, and it doesn't guarantee selecting the top 3 countries by population. The approaches differ in how they handle ranking and limiting results."}
{"example_id": 5547, "sql_complexity": "multiple_joins", "prompt": "Which species have a population growth rate higher than the average for protected areas?", "context": "CREATE TABLE species (id INT, name VARCHAR(50), population DECIMAL(5,2), protected_area_id INT, growth_rate DECIMAL(5,2)); INSERT INTO species (id, name, population, protected_area_id, growth_rate) VALUES (1, 'Species 1', 500.00, 1, 0.05), (2, 'Species 2', 800.00, 1, 0.03), (3, 'Species 3', 1200.00, 2, 0.07), (4, 'Species 4', 700.00, 2, 0.02); CREATE TABLE protected_areas (id INT, name VARCHAR(50)); INSERT INTO protected_areas (id, name) VALUES (1, 'Area 1'), (2, 'Area 2');", "reference_sql": "SELECT s.name, s.growth_rate FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id GROUP BY s.name, s.growth_rate HAVING s.growth_rate > (SELECT AVG(s.growth_rate) FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id);", "generated_sql": "SELECT s.*\nFROM species s\nJOIN (\n    SELECT pa.id, AVG(s2.growth_rate) AS avg_growth_rate\n    FROM protected_areas pa\n    JOIN species s2 ON pa.id = s2.protected_area_id\n    GROUP BY pa.id\n) avg_rates ON s.protected_area_id = avg_rates.id\nWHERE s.growth_rate > avg_rates.avg_growth_rate;", "raw_model_output": "SELECT s.*\nFROM species s\nJOIN (\n    SELECT pa.id, AVG(s2.growth_rate) AS avg_growth_rate\n    FROM protected_areas pa\n    JOIN species s2 ON pa.id = s2.protected_area_id\n    GROUP BY pa.id\n) avg_rates ON s.protected_area_id = avg_rates.id\nWHERE s.growth_rate > avg_rates.avg_growth_rate;", "latency_sec": 0.8182590007781982, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL compares species growth rates to the global average growth rate across all protected areas, while the Generated SQL compares them to the average growth rate within their specific protected area. Additionally, the Reference SQL groups by name/growth_rate and selects only those columns, whereas the Generated SQL selects all columns and uses a different aggregation strategy."}
{"example_id": 5498, "sql_complexity": "aggregation", "prompt": "Identify the destinations with the highest number of repeat visitors from the US.", "context": "CREATE TABLE RepeatTravelers (Visitor VARCHAR(20), Destination VARCHAR(20), VisitCount INT); INSERT INTO RepeatTravelers (Visitor, Destination, VisitCount) VALUES ('David', 'Paris', 3), ('Ella', 'London', 4), ('Fiona', 'Paris', 2);", "reference_sql": "SELECT Destination, AVG(VisitCount) AS AvgVisitCount FROM RepeatTravelers WHERE Visitor LIKE '%USA%' GROUP BY Destination ORDER BY AvgVisitCount DESC;", "generated_sql": "SELECT Destination\nFROM RepeatTravelers\nWHERE Visitor IN (\n    SELECT Visitor\n    FROM RepeatTravelers\n    WHERE Visitor IN (\n        SELECT Visitor\n        FROM RepeatTravelers\n        WHERE Visitor LIKE 'US%'\n    )\n)\nGROUP BY Destination\nORDER BY COUNT(DISTINCT Visitor) DESC\nLIMIT 1;", "raw_model_output": "SELECT Destination\nFROM RepeatTravelers\nWHERE Visitor IN (\n    SELECT Visitor\n    FROM RepeatTravelers\n    WHERE Visitor IN (\n        SELECT Visitor\n        FROM RepeatTravelers\n        WHERE Visitor LIKE 'US%'\n    )\n)\nGROUP BY Destination\nORDER BY COUNT(DISTINCT Visitor) DESC\nLIMIT 1;", "latency_sec": 1.758669137954712, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL filters visitors with 'USA' in their name, calculates average VisitCount per destination, and orders by that average. The Generated SQL filters visitors starting with 'US', counts distinct visitors per destination, and orders by that count. Additionally, the Generated SQL includes a LIMIT 1 clause. While both may return empty results for the given sample data, their logic and output structures differ fundamentally."}
{"example_id": 3546, "sql_complexity": "window functions", "prompt": "What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?", "context": "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", "reference_sql": "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';", "generated_sql": "SELECT ce.exchange_id, ce.exchange_name, bc.company_name AS blockchain_company\nFROM cryptocurrency_exchanges ce\nJOIN blockchain_companies bc ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "raw_model_output": "SELECT ce.exchange_id, ce.exchange_name, bc.company_name AS blockchain_company\nFROM cryptocurrency_exchanges ce\nJOIN blockchain_companies bc ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "latency_sec": 0.8409171104431152, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL includes a ROW_NUMBER() column and selects different column order, while the Generated SQL omits the rank column and has a different column alias. Additionally, the Generated SQL includes an ORDER BY clause not present in the Reference SQL, which could affect result ordering. The core difference is the presence of the calculated 'rank' column in the Reference SQL, making their result sets structurally different."}
{"example_id": 486, "sql_complexity": "single join", "prompt": "What is the average price of paintings from African artists in our collection?", "context": "CREATE TABLE Artworks (id INT, title VARCHAR(50), price DECIMAL(10,2), medium VARCHAR(50), artist_nationality VARCHAR(50)); CREATE TABLE Collections (id INT, name VARCHAR(50), continent VARCHAR(50));", "reference_sql": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Collections ON Artworks.artist_nationality = Collections.continent WHERE Artworks.medium = 'Painting' AND Collections.continent = 'Africa';", "generated_sql": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'painting' AND artist_nationality = 'African';", "raw_model_output": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'painting' AND artist_nationality = 'African';", "latency_sec": 0.5999710559844971, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL joins Artworks with Collections on artist_nationality = continent and filters for continent = 'Africa', while the Generated SQL directly filters artist_nationality = 'African' without any join. The join in the Reference SQL ensures that only artworks with artist_nationality matching a continent in Collections are considered, whereas the Generated SQL lacks this constraint. Additionally, the Generated SQL uses 'African' (lowercase) while the Reference uses 'Africa' (capitalized), which may or may not be equivalent depending on case sensitivity."}
{"example_id": 794, "sql_complexity": "multiple_joins", "prompt": "Which suppliers have provided raw materials for the production of chemicals with high environmental impact?", "context": "CREATE TABLE suppliers (id INT, name TEXT); INSERT INTO suppliers (id, name) VALUES (1, 'Supplier1'), (2, 'Supplier2'), (3, 'Supplier3'); CREATE TABLE chemicals (id INT, name TEXT, environmental_impact INT); INSERT INTO chemicals (id, name, environmental_impact) VALUES (1, 'ChemA', 10), (2, 'ChemB', 20), (3, 'ChemC', 15); CREATE TABLE raw_materials (chemical_id INT, supplier_id INT); INSERT INTO raw_materials (chemical_id, supplier_id) VALUES (1, 1), (1, 2), (2, 3), (3, 1);", "reference_sql": "SELECT s.name FROM suppliers s INNER JOIN raw_materials rm ON s.id = rm.supplier_id INNER JOIN chemicals c ON rm.chemical_id = c.id WHERE c.environmental_impact > 10;", "generated_sql": "SELECT DISTINCT s.id, s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > (SELECT AVG(environmental_impact) FROM chemicals);", "raw_model_output": "SELECT DISTINCT s.id, s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact > (SELECT AVG(environmental_impact) FROM chemicals);", "latency_sec": 1.2753357887268066, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters chemicals with environmental_impact > 10, while the Generated SQL uses a subquery to filter chemicals with environmental_impact > (average environmental impact of all chemicals). The average of 10, 20, and 15 is 15, so the Generated SQL effectively filters for environmental_impact > 15. This changes the result set: the Reference includes suppliers linked to chemicals with impact 15 (ChemC) and 20 (ChemB), while the Generated only includes those linked to ChemB (impact 20)."}
{"example_id": 3164, "sql_complexity": "set operations", "prompt": "What is the average age of patients who received therapy in 'clinic_a' and 'clinic_b'?", "context": "CREATE TABLE clinic_a (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_a (patient_id, age, therapy_received) VALUES (1, 35, true), (2, 42, true), (3, 28, false); CREATE TABLE clinic_b (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_b (patient_id, age, therapy_received) VALUES (4, 50, true), (5, 32, false), (6, 45, true);", "reference_sql": "SELECT AVG(age) FROM (SELECT age FROM clinic_a WHERE therapy_received = true UNION ALL SELECT age FROM clinic_b WHERE therapy_received = true) AS combined_clinics;", "generated_sql": "SELECT AVG(age) AS average_age\nFROM (\n    SELECT age FROM clinic_a WHERE therapy_received = TRUE\n    UNION ALL\n    SELECT age FROM clinic_b WHERE therapy_received = TRUE\n) AS combined_patients;", "raw_model_output": "SELECT AVG(age) AS average_age\nFROM (\n    SELECT age FROM clinic_a WHERE therapy_received = TRUE\n    UNION ALL\n    SELECT age FROM clinic_b WHERE therapy_received = TRUE\n) AS combined_patients;", "latency_sec": 0.8912861347198486, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of patients who received therapy from both clinics. The only difference is the alias name for the subquery ('combined_clinics' vs 'combined_patients'), which does not affect the result. The UNION ALL operator combines all matching rows, and the AVG function operates on the same dataset in both queries."}
{"example_id": 3704, "sql_complexity": "aggregation", "prompt": "What is the total sales revenue for each category of garments in the South America region in Q1 2022?", "context": "CREATE TABLE sales_category (sale_id INT, garment_category VARCHAR(50), sale_date DATE, total_sales DECIMAL(10, 2), region VARCHAR(50));", "reference_sql": "SELECT garment_category, SUM(total_sales) FROM sales_category WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31' AND region = 'South America' GROUP BY garment_category;", "generated_sql": "SELECT \n    garment_category, \n    SUM(total_sales) AS total_revenue\nFROM \n    sales_category\nWHERE \n    region = 'South America'\n    AND sale_date >= '2022-01-01'\n    AND sale_date < '2022-04-01'\nGROUP BY \n    garment_category;", "raw_model_output": "SELECT \n    garment_category, \n    SUM(total_sales) AS total_revenue\nFROM \n    sales_category\nWHERE \n    region = 'South America'\n    AND sale_date >= '2022-01-01'\n    AND sale_date < '2022-04-01'\nGROUP BY \n    garment_category;", "latency_sec": 0.852412223815918, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter sales data for 'South America' and aggregate total_sales by garment_category. The date range in the Reference SQL (BETWEEN '2022-01-01' AND '2022-03-31') includes all dates from January 1 to March 31, 2022. The Generated SQL uses sale_date >= '2022-01-01' AND sale_date < '2022-04-01', which achieves the same result by including the same period. The GROUP BY clause and aggregation logic are identical, and the column alias difference (total_revenue vs. implicit name) does not affect semantic equivalence."}
{"example_id": 2851, "sql_complexity": "single join", "prompt": "How many cases were handled by attorneys who joined the firm in 2015 or later?", "context": "CREATE TABLE attorneys (attorney_id INT, join_year INT); CREATE TABLE cases (case_id INT, attorney_id INT, billing_amount INT);", "reference_sql": "SELECT COUNT(DISTINCT cases.case_id) FROM cases INNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id WHERE attorneys.join_year >= 2015;", "generated_sql": "SELECT COUNT(*) AS total_cases\nFROM cases\nJOIN attorneys ON cases.attorney_id = attorneys.attorney_id\nWHERE attorneys.join_year >= 2015;", "raw_model_output": "SELECT COUNT(*) AS total_cases\nFROM cases\nJOIN attorneys ON cases.attorney_id = attorneys.attorney_id\nWHERE attorneys.join_year >= 2015;", "latency_sec": 0.5444769859313965, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses COUNT(DISTINCT cases.case_id) while the Generated SQL uses COUNT(*). The former counts unique case IDs, while the latter counts all rows. If multiple entries in 'cases' share the same case_id for attorneys joining in 2015 or later, the two queries would produce different results."}
{"example_id": 3246, "sql_complexity": "single join", "prompt": "What is the average eco-friendliness score of accommodations in Oceania by year?", "context": "CREATE TABLE Accommodations (Accommodation_ID INT, Accommodation_Name VARCHAR(50), City VARCHAR(30), Country VARCHAR(50), Eco_Friendliness_Score INT, Visit_Year INT); INSERT INTO Accommodations (Accommodation_ID, Accommodation_Name, City, Country, Eco_Friendliness_Score, Visit_Year) VALUES (1, 'EcoLodge', 'Sydney', 'Australia', 85, 2019), (2, 'GreenHotel', 'Melbourne', 'Australia', 90, 2019), (3, 'SustainableResort', 'Auckland', 'New Zealand', 80, 2019), (4, 'EcoVilla', 'Wellington', 'New Zealand', 88, 2019); CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(30)); INSERT INTO Countries (Country, Continent) VALUES ('Australia', 'Oceania'), ('New Zealand', 'Oceania');", "reference_sql": "SELECT C.Continent, V.Visit_Year, AVG(A.Eco_Friendliness_Score) AS Avg_Eco_Score  FROM Accommodations A  JOIN Countries C  ON A.Country = C.Country  WHERE C.Continent = 'Oceania'  GROUP BY C.Continent, V.Visit_Year  ORDER BY V.Visit_Year;", "generated_sql": "SELECT Visit_Year, AVG(Eco_Friendliness_Score) AS Avg_Eco_Friendliness_Score\nFROM Accommodations\nWHERE Country IN (SELECT Country FROM Countries WHERE Continent = 'Oceania')\nGROUP BY Visit_Year;", "raw_model_output": "SELECT Visit_Year, AVG(Eco_Friendliness_Score) AS Avg_Eco_Friendliness_Score\nFROM Accommodations\nWHERE Country IN (SELECT Country FROM Countries WHERE Continent = 'Oceania')\nGROUP BY Visit_Year;", "latency_sec": 1.0629470348358154, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'Continent' in the SELECT and GROUP BY clauses, while the Generated SQL omits it. Although both queries filter for 'Oceania' and aggregate by Visit_Year, the Reference query's output includes an additional 'Continent' column (always 'Oceania') which the Generated SQL does not. This difference in result structure makes them non-equivalent."}
{"example_id": 3056, "sql_complexity": "multiple_joins", "prompt": "Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.", "context": "CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);", "reference_sql": "SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;", "generated_sql": "SELECT DISTINCT s.*\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE s.isNonGMO = TRUE AND r.numStars >= 1;", "raw_model_output": "SELECT DISTINCT s.*\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE s.isNonGMO = TRUE AND r.numStars >= 1;", "latency_sec": 0.8526747226715088, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in three key aspects: 1) The Reference filters on Ingredients.isNonGMO while the Generated filters on Suppliers.isNonGMO. 2) The Reference uses Restaurants.numStars > 2 whereas the Generated uses r.numStars >= 1. 3) The Reference selects Suppliers.name while the Generated selects all columns from Suppliers (s.*). These differences in join conditions, filters, and selected columns make the queries non-equivalent."}
{"example_id": 264, "sql_complexity": "set operations", "prompt": "List the number of community health centers and infectious disease tracking facilities in 'southwest' regions.", "context": "CREATE TABLE centers (id INT, name TEXT, region TEXT); INSERT INTO centers (id, name, region) VALUES (1, 'Center A', 'southwest'); INSERT INTO centers (id, name, region) VALUES (2, 'Center B', 'northeast'); INSERT INTO centers (id, name, region) VALUES (3, 'Center C', 'northwest'); CREATE TABLE diseases (id INT, name TEXT, region TEXT); INSERT INTO diseases (id, name, region) VALUES (1, 'Disease A', 'southwest'); INSERT INTO diseases (id, name, region) VALUES (2, 'Disease B', 'southeast');", "reference_sql": "SELECT COUNT(*) FROM ( (SELECT * FROM centers WHERE region = 'southwest') UNION (SELECT * FROM diseases WHERE region = 'southwest') );", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS community_health_centers,\n    (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS infectious_disease_tracking_facilities;", "raw_model_output": "SELECT \n    (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS community_health_centers,\n    (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS infectious_disease_tracking_facilities;", "latency_sec": 0.6113119125366211, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single count of all unique rows from both tables combined, while the Generated SQL returns two separate counts. The Reference SQL's UNION combines rows from centers and diseases (count 2 in this case), whereas the Generated SQL shows 1 and 1 for each table individually. The result structures and values differ."}
{"example_id": 2838, "sql_complexity": "basic SQL", "prompt": "What is the minimum safety rating of electric vehicles in the 'green_cars' table?", "context": "CREATE TABLE green_cars (id INT, make VARCHAR(50), model VARCHAR(50), type VARCHAR(50), safety_rating INT);", "reference_sql": "SELECT MIN(safety_rating) FROM green_cars WHERE type = 'Electric';", "generated_sql": "SELECT MIN(safety_rating) \nFROM green_cars \nWHERE type = 'electric';", "raw_model_output": "SELECT MIN(safety_rating) \nFROM green_cars \nWHERE type = 'electric';", "latency_sec": 0.41888904571533203, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. The difference in case ('Electric' vs 'electric') does not affect the result because SQL string comparisons are typically case-insensitive by default in most database systems. Both queries select the minimum safety_rating from green_cars where the type matches the specified value, regardless of case."}
{"example_id": 1187, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 authors with the highest number of articles published in The Guardian?", "context": "CREATE TABLE authors (id INT, name VARCHAR(100), publisher VARCHAR(50)); CREATE TABLE articles_authors (article_id INT, author_id INT); INSERT INTO authors (id, name, publisher) VALUES (1, 'Author1', 'The Guardian'), (2, 'Author2', 'The Guardian'), (3, 'Author3', 'The Guardian'); INSERT INTO articles_authors (article_id, author_id) VALUES (1, 1), (2, 2), (3, 1), (3, 2), (3, 3); INSERT INTO articles (id, title, publication_date, publisher) VALUES (1, 'Article1', '2021-01-01', 'The Guardian'), (2, 'Article2', '2021-01-02', 'The Guardian'), (3, 'Article3', '2021-01-03', 'The Guardian');", "reference_sql": "SELECT a.name, COUNT(aa.article_id) AS articles_count FROM authors a JOIN articles_authors aa ON a.id = aa.author_id JOIN articles ar ON aa.article_id = ar.id WHERE ar.publisher = 'The Guardian' GROUP BY a.name ORDER BY articles_count DESC LIMIT 3;", "generated_sql": "SELECT a.name\nFROM authors a\nJOIN articles_authors aa ON a.id = aa.author_id\nJOIN articles ar ON aa.article_id = ar.id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.id, a.name\nORDER BY COUNT(ar.id) DESC\nLIMIT 3;", "raw_model_output": "SELECT a.name\nFROM authors a\nJOIN articles_authors aa ON a.id = aa.author_id\nJOIN articles ar ON aa.article_id = ar.id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.id, a.name\nORDER BY COUNT(ar.id) DESC\nLIMIT 3;", "latency_sec": 0.745974063873291, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects both 'a.name' and 'COUNT(aa.article_id)' as 'articles_count', while the Generated SQL only selects 'a.name'. Additionally, the Generated SQL groups by 'a.id, a.name' instead of just 'a.name', which could affect results if authors had non-unique names. However, the primary discrepancy is the different output columns, making the result sets structurally different."}
{"example_id": 360, "sql_complexity": "window functions", "prompt": "What is the change in crime rate for each category, between this year and last year, for the same time period?", "context": "CREATE TABLE CrimeStatistics (ID INT, CrimeType VARCHAR(50), Date TIMESTAMP, Count INT); INSERT INTO CrimeStatistics (ID, CrimeType, Date, Count) VALUES (1, 'Theft', '2022-01-01 00:00:00', 100), (2, 'Vandalism', '2022-01-01 00:00:00', 50), (3, 'Theft', '2022-01-02 00:00:00', 120), (4, 'Vandalism', '2022-01-02 00:00:00', 60), (5, 'Theft', '2021-01-01 00:00:00', 80), (6, 'Vandalism', '2021-01-01 00:00:00', 40), (7, 'Theft', '2021-01-02 00:00:00', 90), (8, 'Vandalism', '2021-01-02 00:00:00', 45);", "reference_sql": "SELECT CrimeType, (SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date) ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) - SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date)) AS CrimeRateChange FROM CrimeStatistics WHERE Date BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND CURRENT_DATE;", "generated_sql": "SELECT\n    CrimeType,\n    SUM(CASE WHEN YEAR(Date) = YEAR(CURRENT_DATE) THEN Count ELSE 0 END) -\n    SUM(CASE WHEN YEAR(Date) = YEAR(CURRENT_DATE) - 1 THEN Count ELSE 0 END) AS ChangeInCrimeRate\nFROM\n    CrimeStatistics\nWHERE\n    YEAR(Date) IN (YEAR(CURRENT_DATE), YEAR(CURRENT_DATE) - 1)\nGROUP BY\n    CrimeType;", "raw_model_output": "SELECT\n    CrimeType,\n    SUM(CASE WHEN YEAR(Date) = YEAR(CURRENT_DATE) THEN Count ELSE 0 END) -\n    SUM(CASE WHEN YEAR(Date) = YEAR(CURRENT_DATE) - 1 THEN Count ELSE 0 END) AS ChangeInCrimeRate\nFROM\n    CrimeStatistics\nWHERE\n    YEAR(Date) IN (YEAR(CURRENT_DATE), YEAR(CURRENT_DATE) - 1)\nGROUP BY\n    CrimeType;", "latency_sec": 1.1916029453277588, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses window functions to calculate a row-level difference between the previous row's sum and current sum, which does not properly aggregate yearly totals. The Generated SQL correctly groups by CrimeType and calculates the difference between summed counts for the current and previous years. The Reference SQL's approach would produce incorrect results when multiple entries exist per year, as it does not aggregate by year before calculating the difference."}
{"example_id": 335, "sql_complexity": "single join", "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000", "context": "CREATE TABLE policies (policy_number INT);CREATE TABLE claims (claim_id INT, policy_number INT, claim_amount DECIMAL(10,2), claim_date DATE);", "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "generated_sql": "SELECT \n    c.policy_number, \n    c.claim_amount, \n    c.claim_date\nFROM \n    claims c\nWHERE \n    c.policy_number IN (\n        SELECT \n            policy_number\n        FROM \n            claims\n        GROUP BY \n            policy_number\n        HAVING \n            COUNT(*) > 2 AND \n            SUM(claim_amount) > 5000\n    );", "raw_model_output": "SELECT \n    c.policy_number, \n    c.claim_amount, \n    c.claim_date\nFROM \n    claims c\nWHERE \n    c.policy_number IN (\n        SELECT \n            policy_number\n        FROM \n            claims\n        GROUP BY \n            policy_number\n        HAVING \n            COUNT(*) > 2 AND \n            SUM(claim_amount) > 5000\n    );", "latency_sec": 0.9971809387207031, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their grouping and filtering logic. The reference query groups by policy_number, claim_amount, and claim_date, requiring each unique (policy, amount, date) combination to have >2 claims and sum >5000. The generated query filters policies with >2 total claims and sum >5000, then returns all claims for those policies. This leads to different result sets: the reference query's grouping creates more restrictive conditions per (policy, amount, date) tuple, while the generated query returns all claims for qualifying policies."}
{"example_id": 2866, "sql_complexity": "basic SQL", "prompt": "What is the number of hospitals in 'rural_healthcare' table?", "context": "CREATE TABLE rural_healthcare (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO rural_healthcare (name, type, location) VALUES ('Rural General Hospital', 'Hospital', 'Bushland'), ('Rural Community Hospital', 'Hospital', 'Forest Region');", "reference_sql": "SELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "generated_sql": "SELECT COUNT(*) AS number_of_hospitals\nFROM rural_healthcare\nWHERE type = 'Hospital';", "raw_model_output": "SELECT COUNT(*) AS number_of_hospitals\nFROM rural_healthcare\nWHERE type = 'Hospital';", "latency_sec": 0.7035667896270752, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows where type = 'Hospital'. The generated query adds an alias (number_of_hospitals) to the COUNT(*) result, but this does not affect the actual value returned. The semantic meaning remains the same."}
{"example_id": 4440, "sql_complexity": "multiple_joins", "prompt": "What is the average session length for each game genre in the last month, sorted by average session length.", "context": "CREATE TABLE game_sessions(id INT, user_id INT, game_name VARCHAR(50), start_time DATETIME, end_time DATETIME); CREATE TABLE games(id INT, name VARCHAR(50), genre VARCHAR(50));", "reference_sql": "SELECT genres.genre, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) as avg_session_length FROM game_sessions JOIN games ON game_sessions.game_name = games.name JOIN (SELECT DISTINCT game_name, genre FROM game_sessions JOIN games ON game_sessions.game_name = games.name) genres ON games.name = genres.game_name WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY genres.genre ORDER BY avg_session_length DESC;", "generated_sql": "SELECT \n    g.genre,\n    AVG(TIMESTAMPDIFF(SECOND, gs.start_time, gs.end_time)) AS avg_session_length_seconds\nFROM \n    game_sessions gs\nJOIN \n    games g ON gs.game_name = g.name\nWHERE \n    gs.start_time >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\n    AND gs.end_time >= gs.start_time\nGROUP BY \n    g.genre\nORDER BY \n    avg_session_length_seconds;", "raw_model_output": "SELECT \n    g.genre,\n    AVG(TIMESTAMPDIFF(SECOND, gs.start_time, gs.end_time)) AS avg_session_length_seconds\nFROM \n    game_sessions gs\nJOIN \n    games g ON gs.game_name = g.name\nWHERE \n    gs.start_time >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\n    AND gs.end_time >= gs.start_time\nGROUP BY \n    g.genre\nORDER BY \n    avg_session_length_seconds;", "latency_sec": 0.8739159107208252, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in three key aspects: 1) The Reference SQL includes a subquery that may deduplicate game_name/genre pairs, while the Generated SQL skips this step. 2) The Generated SQL adds a condition (end_time >= start_time) not present in the Reference SQL, which could exclude invalid sessions. 3) The Reference SQL orders results in descending order while the Generated SQL uses ascending order. These differences would produce different results."}
{"example_id": 451, "sql_complexity": "single join", "prompt": "Which customers have made a transaction over 500 in the \"risk_management\" category?", "context": "CREATE TABLE customers (id INT, name VARCHAR(50), category VARCHAR(50)); INSERT INTO customers (id, name, category) VALUES (1, 'John Doe', 'risk_management'); INSERT INTO customers (id, name, category) VALUES (2, 'Jane Smith', 'compliance'); INSERT INTO customers (id, name, category) VALUES (3, 'Jim Brown', 'risk_management'); CREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10, 2)); INSERT INTO transactions (id, customer_id, amount) VALUES (1, 1, 500.00); INSERT INTO transactions (id, customer_id, amount) VALUES (2, 1, 200.00); INSERT INTO transactions (id, customer_id, amount) VALUES (3, 2, 100.00); INSERT INTO transactions (id, customer_id, amount) VALUES (4, 3, 750.00);", "reference_sql": "SELECT c.name FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE c.category = 'risk_management' AND t.amount > 500;", "generated_sql": "SELECT c.id, c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management' AND t.amount > 500;", "raw_model_output": "SELECT c.id, c.name\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management' AND t.amount > 500;", "latency_sec": 0.8492732048034668, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent because they select different columns. The Reference SQL only selects 'c.name', while the Generated SQL selects both 'c.id' and 'c.name'. Although both filter the same rows, the result sets differ in structure."}
{"example_id": 2879, "sql_complexity": "basic SQL", "prompt": "Update the FoodSafetyRecords.OrganicFarms table to include a new record for a certified organic farm in Kenya.", "context": "CREATE TABLE FoodSafetyRecords.OrganicFarms (farmName TEXT, country TEXT, certified BOOLEAN);", "reference_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) VALUES ('Ngong Organic Farm', 'Kenya', TRUE);", "generated_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified)\nVALUES ('New Organic Farm', 'Kenya', TRUE);", "raw_model_output": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified)\nVALUES ('New Organic Farm', 'Kenya', TRUE);", "latency_sec": 0.49867916107177734, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The two queries differ in the farmName value inserted ('Ngong Organic Farm' vs 'New Organic Farm'). While the structure and other values (country 'Kenya', certified TRUE) are identical, the distinct farmName results in different data being inserted, making them semantically non-equivalent."}
{"example_id": 5688, "sql_complexity": "single join", "prompt": "What is the total amount donated to a specific cause?", "context": "CREATE TABLE causes (id INT, name TEXT); CREATE TABLE donations (id INT, donor_id INT, cause_id INT, donation_amount DECIMAL(10,2)); INSERT INTO causes (id, name) VALUES (1, 'Cause A'), (2, 'Cause B'); INSERT INTO donations (id, donor_id, cause_id, donation_amount) VALUES (1, 1, 1, 50.00), (2, 2, 1, 100.00);", "reference_sql": "SELECT SUM(donation_amount) FROM donations JOIN causes ON donations.cause_id = causes.id WHERE causes.name = 'Cause A';", "generated_sql": "SELECT SUM(donation_amount) AS total_donated\nFROM donations\nWHERE cause_id = ?;", "raw_model_output": "SELECT SUM(donation_amount) AS total_donated\nFROM donations\nWHERE cause_id = ?;", "latency_sec": 0.5157270431518555, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total donations for 'Cause A'. The Reference SQL uses a JOIN to filter by cause name, while the Generated SQL directly filters by cause_id. Since 'Cause A' has cause_id=1 in the sample data, the Generated SQL with cause_id=1 would produce the same result. The SUM operation is equivalent when filtering on the correct cause_id."}
{"example_id": 3273, "sql_complexity": "multiple_joins", "prompt": "List all departments, the number of chemicals they handle, and the number of machines used in their manufacturing processes.", "context": "CREATE TABLE Departments (DepartmentID INT, DepartmentName VARCHAR(20)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Manufacturing'), (2, 'Engineering'), (3, 'Chemical Safety'), (4, 'Product Development'); CREATE TABLE Chemicals (ChemicalID INT, ChemicalName VARCHAR(20), DepartmentID INT); INSERT INTO Chemicals (ChemicalID, ChemicalName, DepartmentID) VALUES (1, 'Hydrochloric Acid', 1), (2, 'Nitric Acid', 2), (3, 'Sodium Hydroxide', 3), (4, 'New Chemical', 4); CREATE TABLE Machinery (MachineID INT, MachineName VARCHAR(20), DepartmentID INT); INSERT INTO Machinery (MachineID, MachineName, DepartmentID) VALUES (1, 'Mixer 1', 1), (2, 'Cutter 2', 2), (3, 'Dispenser 3', 3), (4, 'Innovator 4', 4);", "reference_sql": "SELECT D.DepartmentName, COUNT(C.ChemicalID) AS ChemicalCount, COUNT(M.MachineID) AS MachineCount FROM Departments D LEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID LEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID GROUP BY D.DepartmentName;", "generated_sql": "SELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COUNT(DISTINCT c.ChemicalID) AS ChemicalCount,\n    COUNT(DISTINCT m.MachineID) AS MachineCount\nFROM \n    Departments d\nLEFT JOIN \n    Chemicals c ON d.DepartmentID = c.DepartmentID\nLEFT JOIN \n    Machinery m ON d.DepartmentID = m.DepartmentID\nGROUP BY \n    d.DepartmentID, d.DepartmentName;", "raw_model_output": "SELECT \n    d.DepartmentID,\n    d.DepartmentName,\n    COUNT(DISTINCT c.ChemicalID) AS ChemicalCount,\n    COUNT(DISTINCT m.MachineID) AS MachineCount\nFROM \n    Departments d\nLEFT JOIN \n    Chemicals c ON d.DepartmentID = c.DepartmentID\nLEFT JOIN \n    Machinery m ON d.DepartmentID = m.DepartmentID\nGROUP BY \n    d.DepartmentID, d.DepartmentName;", "latency_sec": 1.6438472270965576, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only DepartmentName with counts, while the Generated SQL includes DepartmentID as an additional column. Additionally, the Generated SQL uses COUNT(DISTINCT) which could differ from COUNT in cases with duplicate values (though in this specific dataset with unique IDs, it would produce the same numerical results). The differing output columns and aggregation methods make them non-equivalent."}
{"example_id": 1895, "sql_complexity": "window functions", "prompt": "What is the average safety score of chemical production sites in the United States, partitioned by state and ranked in descending order?", "context": "CREATE TABLE production_sites (site_id INT, site_name TEXT, country TEXT, state TEXT, safety_score FLOAT); INSERT INTO production_sites (site_id, site_name, country, state, safety_score) VALUES (1, 'Site A', 'USA', 'NY', 92.5), (2, 'Site B', 'USA', 'CA', 87.4), (3, 'Site C', 'USA', 'TX', 95.3), (4, 'Site D', 'USA', 'FL', 89.2);", "reference_sql": "SELECT state, AVG(safety_score) as avg_safety_score, ROW_NUMBER() OVER (ORDER BY AVG(safety_score) DESC) as rank FROM production_sites WHERE country = 'USA' GROUP BY state ORDER BY rank;", "generated_sql": "SELECT \n    state, \n    AVG(safety_score) AS average_safety_score\nFROM \n    production_sites\nWHERE \n    country = 'USA'\nGROUP BY \n    state\nORDER BY \n    average_safety_score DESC;", "raw_model_output": "SELECT \n    state, \n    AVG(safety_score) AS average_safety_score\nFROM \n    production_sites\nWHERE \n    country = 'USA'\nGROUP BY \n    state\nORDER BY \n    average_safety_score DESC;", "latency_sec": 0.8549480438232422, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an additional 'rank' column generated by ROW_NUMBER() that is not present in the Generated SQL. While both queries group by state and order by safety score descending, the Reference SQL's result set has an extra column, making them structurally different. The Generated SQL omits the rank calculation entirely."}
{"example_id": 4669, "sql_complexity": "set operations", "prompt": "Identify the number of IoT devices in each country and the total number of devices.", "context": "CREATE TABLE device_country (device_id INT, country TEXT); INSERT INTO device_country (device_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'), (4, 'Brazil'); CREATE TABLE device_info (device_id INT, device_type TEXT); INSERT INTO device_info (device_id, device_type) VALUES (1, 'Soil Sensor'), (2, 'Temperature Sensor'), (3, 'Humidity Sensor'), (4, 'Precision Sprayer');", "reference_sql": "SELECT country, COUNT(*) AS device_count FROM device_country GROUP BY country UNION SELECT 'Total' AS country, COUNT(*) FROM device_country;", "generated_sql": "SELECT \n    dc.country,\n    COUNT(*) AS device_count\nFROM \n    device_country dc\nGROUP BY \n    dc.country\n\nUNION ALL\n\nSELECT \n    'Total' AS country,\n    COUNT(*) AS device_count\nFROM \n    device_country;", "raw_model_output": "SELECT \n    dc.country,\n    COUNT(*) AS device_count\nFROM \n    device_country dc\nGROUP BY \n    dc.country\n\nUNION ALL\n\nSELECT \n    'Total' AS country,\n    COUNT(*) AS device_count\nFROM \n    device_country;", "latency_sec": 0.8868470191955566, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result by grouping device counts by country and adding a 'Total' row. The difference between UNION and UNION ALL is irrelevant here because the two result sets (country groups and 'Total') have distinct values. The 'Total' row cannot conflict with existing country names, so both queries return identical rows."}
{"example_id": 5302, "sql_complexity": "multiple_joins", "prompt": "Find the supplier with the lowest average delivery time for orders in the last month.", "context": "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", "reference_sql": "SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;", "generated_sql": "SELECT s.SupplierID, s.SupplierName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATE('2022-01-01') AND o.OrderDate <= DATE('2022-01-31')\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AVG(o.DeliveryTime) ASC\nLIMIT 1;", "raw_model_output": "SELECT s.SupplierID, s.SupplierName\nFROM Suppliers s\nJOIN Products p ON s.SupplierID = p.SupplierID\nJOIN Orders o ON p.ProductID = o.ProductID\nWHERE o.OrderDate >= DATE('2022-01-01') AND o.OrderDate <= DATE('2022-01-31')\nGROUP BY s.SupplierID, s.SupplierName\nORDER BY AVG(o.DeliveryTime) ASC\nLIMIT 1;", "latency_sec": 0.8063952922821045, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects.  The Reference query calculates the average delivery time for each supplier from the last month, while the Generated query filters orders within a specific date range (2022-01-01 to 2022-01-31) and returns only the supplier with the lowest average delivery time (due to the LIMIT 1 clause).  Additionally, the Reference query groups by SupplierName, while the Generated query groups by SupplierID and SupplierName.  The selection of columns also differs, with the Reference including the average delivery time and the Generated only including supplier identifiers."}
{"example_id": 267, "sql_complexity": "subqueries", "prompt": "What is the total number of disability support programs offered in urban and rural areas, and the percentage of total programs for each area type?", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(255), area_type VARCHAR(255));", "reference_sql": "SELECT area_type, COUNT(*) as total_programs, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs) , 2) as percentage_of_total FROM programs WHERE area_type IN ('urban', 'rural') GROUP BY area_type;", "generated_sql": "SELECT\n    area_type,\n    COUNT(*) AS total_programs,\n    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM programs) AS percentage_of_total\nFROM\n    programs\nWHERE\n    area_type IN ('urban', 'rural')\nGROUP BY\n    area_type;", "raw_model_output": "SELECT\n    area_type,\n    COUNT(*) AS total_programs,\n    (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM programs) AS percentage_of_total\nFROM\n    programs\nWHERE\n    area_type IN ('urban', 'rural')\nGROUP BY\n    area_type;", "latency_sec": 0.9556169509887695, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses ROUND() to format the percentage to 2 decimal places, while the Generated SQL calculates the exact value without rounding. This difference in handling decimal precision makes the queries non-equivalent in terms of output formatting, even though the underlying logic is identical."}
{"example_id": 3028, "sql_complexity": "basic SQL", "prompt": "What is the number of startups founded by non-binary individuals in the technology industry?", "context": "CREATE TABLE company (id INT, name TEXT, founder_gender TEXT, industry TEXT); INSERT INTO company (id, name, founder_gender, industry) VALUES (1, 'CodeForAll', 'Non-binary', 'Technology'); INSERT INTO company (id, name, founder_gender, industry) VALUES (2, 'TechVillage', 'Male', 'Technology');", "reference_sql": "SELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "generated_sql": "SELECT COUNT(*) AS startup_count\nFROM company\nWHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "raw_model_output": "SELECT COUNT(*) AS startup_count\nFROM company\nWHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "latency_sec": 0.5548689365386963, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the same rows in the 'company' table where founder_gender is 'Non-binary' and industry is 'Technology'. The generated query adds an alias 'startup_count' to the COUNT(*) result, but this does not affect the actual value returned. The semantic result (the numeric count) remains identical."}
{"example_id": 3282, "sql_complexity": "aggregation", "prompt": "Which marine species have been observed in both the Arctic and Antarctic oceans?", "context": "CREATE TABLE marine_species (id INT, species_name VARCHAR(50), common_name VARCHAR(50), region VARCHAR(20));INSERT INTO marine_species (id, species_name, common_name, region) VALUES (1, 'Orcinus_orca', 'Killer Whale', 'Arctic');INSERT INTO marine_species (id, species_name, common_name, region) VALUES (2, 'Balaenoptera_bonaerensis', 'Antarctic Minke Whale', 'Antarctic');", "reference_sql": "SELECT species_name FROM marine_species WHERE region IN ('Arctic', 'Antarctic') GROUP BY species_name HAVING COUNT(DISTINCT region) = 2;", "generated_sql": "SELECT species_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name\nHAVING COUNT(DISTINCT region) = 2;", "raw_model_output": "SELECT species_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name\nHAVING COUNT(DISTINCT region) = 2;", "latency_sec": 0.593339204788208, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The Reference SQL and Generated SQL are identical in structure and logic. Both queries select species_name from marine_species where region is 'Arctic' or 'Antarctic', group by species_name, and filter with HAVING COUNT(DISTINCT region) = 2. Since the queries are exactly the same, they will produce identical results."}
{"example_id": 3474, "sql_complexity": "subqueries", "prompt": "What is the total transaction volume for the top 3 digital assets by market capitalization in the 'developed_markets' schema?", "context": "CREATE SCHEMA developed_markets; CREATE TABLE developed_markets.digital_assets (asset_name VARCHAR(10), market_cap BIGINT, daily_transaction_volume BIGINT); INSERT INTO developed_markets.digital_assets (asset_name, market_cap, daily_transaction_volume) VALUES ('AssetG', 30000000, 15000000), ('AssetH', 25000000, 12000000), ('AssetI', 20000000, 10000000), ('AssetJ', 15000000, 8000000), ('AssetK', 10000000, 6000000);", "reference_sql": "SELECT SUM(daily_transaction_volume) FROM (SELECT daily_transaction_volume FROM developed_markets.digital_assets ORDER BY market_cap DESC FETCH NEXT 3 ROWS ONLY) t;", "generated_sql": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n    SELECT daily_transaction_volume\n    FROM developed_markets.digital_assets\n    ORDER BY market_cap DESC\n    LIMIT 3\n) sub;", "raw_model_output": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n    SELECT daily_transaction_volume\n    FROM developed_markets.digital_assets\n    ORDER BY market_cap DESC\n    LIMIT 3\n) sub;", "latency_sec": 0.6370749473571777, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of the top 3 daily_transaction_volume values after ordering by market_cap in descending order. The difference between FETCH NEXT 3 ROWS ONLY and LIMIT 3 is syntactic (specific to different SQL dialects) but semantically equivalent in this context. The subquery structure, ordering, and aggregation logic are identical."}
{"example_id": 1626, "sql_complexity": "aggregation", "prompt": "Find the total value of social impact bonds issued by each organization.", "context": "CREATE TABLE social_impact_bonds (id INT, organization_name VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO social_impact_bonds (id, organization_name, issue_year, value) VALUES (1, 'Acme Corp', 2018, 2000000), (2, 'XYZ Foundation', 2019, 3000000), (3, 'Global Giving', 2018, 1500000), (4, 'Acme Corp', 2019, 2500000), (5, 'XYZ Foundation', 2018, 1000000);", "reference_sql": "SELECT organization_name, SUM(value) as total_value FROM social_impact_bonds GROUP BY organization_name;", "generated_sql": "SELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "raw_model_output": "SELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "latency_sec": 0.542165994644165, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and capitalization of keywords), which do not affect semantic meaning. Both queries group by organization_name and calculate the sum of value for each group."}
{"example_id": 1315, "sql_complexity": "single join", "prompt": "List all the transactions made by clients living in New York with a transaction amount greater than $1000.", "context": "CREATE TABLE transactions (id INT, client_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (id, client_id, transaction_amount, transaction_date) VALUES (1, 3, 1500.00, '2022-01-01'), (2, 4, 800.00, '2022-01-02'), (3, 3, 1200.00, '2022-01-03'); CREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');", "reference_sql": "SELECT transactions.id, transactions.client_id, transactions.transaction_amount, transactions.transaction_date FROM transactions INNER JOIN clients ON transactions.client_id = clients.id WHERE clients.state = 'New York' AND transactions.transaction_amount > 1000.00;", "generated_sql": "SELECT t.*\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York' AND t.transaction_amount > 1000;", "raw_model_output": "SELECT t.*\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York' AND t.transaction_amount > 1000;", "latency_sec": 0.566295862197876, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve transactions with client state 'New York' and transaction amount > 1000. The generated query uses table aliases and selects all columns from transactions (t.*), which corresponds to the explicitly listed columns in the reference query. The join condition and where filters are identical."}
{"example_id": 520, "sql_complexity": "multiple_joins", "prompt": "What is the total number of electric vehicles sold in 'California' in the 'sales' schema?", "context": "CREATE TABLE sales_regions (id INT, name VARCHAR(50));   CREATE TABLE sales (id INT, region_id INT, vehicle_count INT);   CREATE TABLE vehicles (id INT, type VARCHAR(50));   INSERT INTO sales_regions VALUES (1, 'California');   INSERT INTO sales VALUES (1, 1, 5000);   INSERT INTO vehicles VALUES (1, 'electric');", "reference_sql": "SELECT SUM(sales.vehicle_count) FROM sales INNER JOIN sales_regions ON sales.region_id = sales_regions.id INNER JOIN vehicles ON sales.id = vehicles.id WHERE vehicles.type = 'electric' AND sales_regions.name = 'California';", "generated_sql": "SELECT SUM(v.vehicle_count) AS total_electric_vehicles_sold\nFROM sales s\nJOIN sales_regions sr ON s.region_id = sr.id\nJOIN vehicles v ON v.id = s.id\nWHERE sr.name = 'California' AND v.type = 'electric';", "raw_model_output": "SELECT SUM(v.vehicle_count) AS total_electric_vehicles_sold\nFROM sales s\nJOIN sales_regions sr ON s.region_id = sr.id\nJOIN vehicles v ON v.id = s.id\nWHERE sr.name = 'California' AND v.type = 'electric';", "latency_sec": 0.6804120540618896, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query sums 'sales.vehicle_count' (correct column from the sales table), while the generated query incorrectly sums 'v.vehicle_count' (a column that does not exist in the vehicles table). The schema shows 'vehicle_count' exists in 'sales', not 'vehicles'."}
{"example_id": 3999, "sql_complexity": "single join", "prompt": "What is the total number of tickets sold for performances with a rating of 5?", "context": "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", "reference_sql": "SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;", "generated_sql": "SELECT COUNT(*) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "raw_model_output": "SELECT COUNT(*) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "latency_sec": 0.7930309772491455, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the total tickets sold (sum of ticket quantities) for performances with a rating of 5, while the Generated SQL counts the number of performances with a rating of 5. They aggregate different data (sum vs. count) and do not produce the same result."}
{"example_id": 2261, "sql_complexity": "multiple_joins", "prompt": "What is the total number of animals that have been released into 'protected' habitats, and the average weight of those animals?", "context": "CREATE TABLE habitats (habitat_id INT, habitat_name VARCHAR(50), habitat_status VARCHAR(50)); INSERT INTO habitats (habitat_id, habitat_name, habitat_status) VALUES (1, 'Habitat A', 'protected'), (2, 'Habitat B', 'unprotected'); CREATE TABLE animal_habitats (animal_id INT, habitat_id INT, animal_weight FLOAT); INSERT INTO animal_habitats (animal_id, habitat_id, animal_weight) VALUES (101, 1, 25.5), (102, 2, 15.2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');", "reference_sql": "SELECT COUNT(*), AVG(animal_habitats.animal_weight) FROM animal_habitats INNER JOIN animals ON animal_habitats.animal_id = animals.animal_id INNER JOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id WHERE habitats.habitat_status = 'protected';", "generated_sql": "SELECT \n    COUNT(DISTINCT a.animal_id) AS total_animals_released,\n    AVG(ah.animal_weight) AS average_weight\nFROM \n    animals a\nJOIN \n    animal_habitats ah ON a.animal_id = ah.animal_id\nJOIN \n    habitats h ON ah.habitat_id = h.habitat_id\nWHERE \n    h.habitat_status = 'protected';", "raw_model_output": "SELECT \n    COUNT(DISTINCT a.animal_id) AS total_animals_released,\n    AVG(ah.animal_weight) AS average_weight\nFROM \n    animals a\nJOIN \n    animal_habitats ah ON a.animal_id = ah.animal_id\nJOIN \n    habitats h ON ah.habitat_id = h.habitat_id\nWHERE \n    h.habitat_status = 'protected';", "latency_sec": 0.8322079181671143, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses COUNT(*) which counts all rows, while the Generated SQL uses COUNT(DISTINCT a.animal_id) which counts unique animal IDs. If an animal appears multiple times in the animal_habitats table for the same habitat, the COUNT values would differ. Additionally, the Generated SQL explicitly aliases columns with different names (total_animals_released vs COUNT(*)), though the semantic difference lies in the aggregation method."}
{"example_id": 3439, "sql_complexity": "multiple_joins", "prompt": "How many menu items contain ingredients sourced from local suppliers for each restaurant?", "context": "CREATE TABLE restaurants (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO restaurants VALUES (1, 'Restaurant A', 'City A'); INSERT INTO restaurants VALUES (2, 'Restaurant B', 'City B'); CREATE TABLE menu_items (id INT, name VARCHAR(50), restaurant_id INT, price DECIMAL(5,2)); INSERT INTO menu_items VALUES (1, 'Item A', 1, 10.99); INSERT INTO menu_items VALUES (2, 'Item B', 1, 12.99); INSERT INTO menu_items VALUES (3, 'Item C', 2, 11.99); CREATE TABLE ingredients (id INT, name VARCHAR(50), local_source BOOLEAN, menu_item_id INT); INSERT INTO ingredients VALUES (1, 'Ingredient A', TRUE, 1); INSERT INTO ingredients VALUES (2, 'Ingredient B', FALSE, 1); INSERT INTO ingredients VALUES (3, 'Ingredient C', TRUE, 2); INSERT INTO ingredients VALUES (4, 'Ingredient D', FALSE, 2); INSERT INTO ingredients VALUES (5, 'Ingredient E', TRUE, 3);", "reference_sql": "SELECT r.name, COUNT(DISTINCT mi.id) as num_local_items FROM restaurants r JOIN menu_items mi ON r.id = mi.restaurant_id JOIN ingredients i ON mi.id = i.menu_item_id WHERE i.local_source = TRUE GROUP BY r.name;", "generated_sql": "SELECT \n    r.name AS restaurant_name,\n    COUNT(DISTINCT mi.id) AS menu_items_with_local_ingredients\nFROM \n    restaurants r\nJOIN \n    menu_items mi ON r.id = mi.restaurant_id\nJOIN \n    ingredients ing ON mi.id = ing.menu_item_id\nWHERE \n    ing.local_source = TRUE\nGROUP BY \n    r.name;", "raw_model_output": "SELECT \n    r.name AS restaurant_name,\n    COUNT(DISTINCT mi.id) AS menu_items_with_local_ingredients\nFROM \n    restaurants r\nJOIN \n    menu_items mi ON r.id = mi.restaurant_id\nJOIN \n    ingredients ing ON mi.id = ing.menu_item_id\nWHERE \n    ing.local_source = TRUE\nGROUP BY \n    r.name;", "latency_sec": 1.188795804977417, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining identical tables with the same conditions. The only differences are column aliases (e.g., 'name' vs 'restaurant_name', 'num_local_items' vs 'menu_items_with_local_ingredients'), which do not affect the semantic meaning of the result. The aggregation logic (COUNT(DISTINCT mi.id)) and grouping (GROUP BY r.name) are identical."}
{"example_id": 2265, "sql_complexity": "aggregation", "prompt": "Hourly revenue for a specific movie?", "context": "CREATE TABLE Movie_Revenue (id INT, movie_title VARCHAR(100), revenue_time TIME, revenue DECIMAL(10,2));", "reference_sql": "SELECT revenue_time, SUM(revenue) FROM Movie_Revenue WHERE movie_title = 'Spider-Man: No Way Home' GROUP BY revenue_time;", "generated_sql": "SELECT movie_title, revenue_time, revenue\nFROM Movie_Revenue\nWHERE movie_title = 'YourMovieTitle';", "raw_model_output": "SELECT movie_title, revenue_time, revenue\nFROM Movie_Revenue\nWHERE movie_title = 'YourMovieTitle';", "latency_sec": 0.4805588722229004, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query aggregates revenue by revenue_time for a specific movie, while the generated query retrieves individual rows without aggregation. The generated query also uses a different movie title in the WHERE clause and selects additional columns (movie_title) not present in the reference query."}
{"example_id": 1763, "sql_complexity": "multiple_joins", "prompt": "What is the total food and beverage revenue last month for hotels in 'Bangkok'?", "context": "CREATE TABLE revenue (hotel_id INT, revenue_source VARCHAR(50), revenue INT, revenue_date DATE); INSERT INTO revenue (hotel_id, revenue_source, revenue, revenue_date) VALUES (5, 'Room revenue', 12000, '2022-03-01'), (5, 'Food and beverage', 4000, '2022-03-02'), (5, 'Other revenue', 1000, '2022-03-03'); CREATE TABLE hotels (hotel_id INT, city VARCHAR(50)); INSERT INTO hotels (hotel_id, city) VALUES (5, 'Bangkok'); CREATE TABLE dates (date DATE); INSERT INTO dates (date) VALUES ('2022-03-01'), ('2022-03-02'), ('2022-03-03');", "reference_sql": "SELECT SUM(revenue) FROM revenue JOIN hotels ON revenue.hotel_id = hotels.hotel_id JOIN dates ON revenue.revenue_date = dates.date WHERE hotels.city = 'Bangkok' AND revenue_source = 'Food and beverage' AND dates.date >= DATEADD(month, -1, GETDATE());", "generated_sql": "SELECT SUM(r.revenue) AS total_food_beverage_revenue_last_month\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE r.revenue_source = 'Food and beverage'\n  AND h.city = 'Bangkok'\n  AND r.revenue_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n  AND r.revenue_date < DATE_TRUNC('month', CURRENT_DATE);", "raw_model_output": "SELECT SUM(r.revenue) AS total_food_beverage_revenue_last_month\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE r.revenue_source = 'Food and beverage'\n  AND h.city = 'Bangkok'\n  AND r.revenue_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month')\n  AND r.revenue_date < DATE_TRUNC('month', CURRENT_DATE);", "latency_sec": 0.9612061977386475, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their date range logic. The Reference SQL uses DATEADD(month, -1, GETDATE()) which captures dates from the same day of the previous month onward (e.g., March 5th if today is April 5th). The Generated SQL uses DATE_TRUNC to capture the entire previous month (e.g., March 1st to March 31st). This results in different date ranges being included, making the queries non-equivalent."}
{"example_id": 5499, "sql_complexity": "set operations", "prompt": "How many legal aid clinics and community mediation centers are there in total, and what is the sum of cases handled by each type of center, for centers located in the state of California?", "context": "CREATE TABLE LegalAidClinics (ClinicName text, State text, NumCases int); INSERT INTO LegalAidClinics VALUES ('Clinic1', 'CA', 30, '2022-01-01'), ('Clinic2', 'CA', 25, '2022-01-01'); CREATE TABLE CommunityMediationCenters (CenterName text, State text, NumCases int); INSERT INTO CommunityMediationCenters VALUES ('CM1', 'CA', 22, '2022-01-01'), ('CM2', 'CA', 28, '2022-01-01');", "reference_sql": "SELECT State, 'Legal Aid Clinics' AS CenterType, COUNT(*) AS NumCenters, SUM(NumCases) AS TotalCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT State, 'Community Mediation Centers', COUNT(*), SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM LegalAidClinics WHERE State = 'CA') AS TotalLegalAidClinics,\n    (SELECT COUNT(*) FROM CommunityMediationCenters WHERE State = 'CA') AS TotalMediationCenters,\n    (SELECT SUM(NumCases) FROM LegalAidClinics WHERE State = 'CA') AS TotalLegalAidCases,\n    (SELECT SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA') AS TotalMediationCases;", "raw_model_output": "SELECT \n    (SELECT COUNT(*) FROM LegalAidClinics WHERE State = 'CA') AS TotalLegalAidClinics,\n    (SELECT COUNT(*) FROM CommunityMediationCenters WHERE State = 'CA') AS TotalMediationCenters,\n    (SELECT SUM(NumCases) FROM LegalAidClinics WHERE State = 'CA') AS TotalLegalAidCases,\n    (SELECT SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA') AS TotalMediationCases;", "latency_sec": 1.723494052886963, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows (one for each center type) with columns State, CenterType, NumCenters, TotalCases, while the Generated SQL returns a single row with four separate columns for counts and sums. The structure and output format differ significantly, making them non-equivalent."}
{"example_id": 2408, "sql_complexity": "aggregation", "prompt": "What is the average number of victories for players from Japan and South Korea, partitioned by game mode?", "context": "CREATE TABLE PlayerVictories (PlayerID INT, GameMode VARCHAR(255), Victories INT, Country VARCHAR(255)); INSERT INTO PlayerVictories (PlayerID, GameMode, Victories, Country) VALUES (1, 'Battle Royale', 25, 'Japan'), (2, 'Team Deathmatch', 18, 'South Korea');", "reference_sql": "SELECT GameMode, AVG(Victories) as AvgVictories FROM PlayerVictories WHERE Country IN ('Japan', 'South Korea') GROUP BY GameMode, Country WITH ROLLUP;", "generated_sql": "SELECT \n    GameMode,\n    AVG(Victories) AS AvgVictories\nFROM \n    PlayerVictories\nWHERE \n    Country IN ('Japan', 'South Korea')\nGROUP BY \n    GameMode;", "raw_model_output": "SELECT \n    GameMode,\n    AVG(Victories) AS AvgVictories\nFROM \n    PlayerVictories\nWHERE \n    Country IN ('Japan', 'South Korea')\nGROUP BY \n    GameMode;", "latency_sec": 0.6714098453521729, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in grouping and aggregation. The Reference SQL groups by both GameMode and Country with ROLLUP, producing subtotals and a grand total. The Generated SQL groups only by GameMode, aggregating across all countries. This leads to different result structures and values when multiple countries exist within the same GameMode."}
{"example_id": 2729, "sql_complexity": "subqueries", "prompt": "Find the total number of trips made by shared autonomous vehicles in Seattle", "context": "CREATE TABLE shared_vehicles (id INT, vehicle_type VARCHAR(20), is_autonomous BOOLEAN, trip_count INT); INSERT INTO shared_vehicles (id, vehicle_type, is_autonomous, trip_count) VALUES (1, 'ebike', false, 1200), (2, 'escooter', false, 800), (3, 'car', true, 1500); CREATE TABLE city_data (city VARCHAR(20), has_autonomous_vehicles BOOLEAN); INSERT INTO city_data (city, has_autonomous_vehicles) VALUES ('Seattle', true), ('Denver', false), ('Portland', true);", "reference_sql": "SELECT SUM(trip_count) FROM shared_vehicles WHERE is_autonomous = true AND vehicle_type != 'ebike' AND vehicle_type != 'escooter' AND city IN (SELECT city FROM city_data WHERE has_autonomous_vehicles = true AND city = 'Seattle');", "generated_sql": "SELECT SUM(trip_count) AS total_trips\nFROM shared_vehicles\nWHERE is_autonomous = TRUE\n  AND id IN (\n    SELECT id FROM shared_vehicles\n    WHERE vehicle_type = 'car'\n  )\n  AND EXISTS (\n    SELECT 1 FROM city_data\n    WHERE city = 'Seattle' AND has_autonomous_vehicles = TRUE\n  );", "raw_model_output": "SELECT SUM(trip_count) AS total_trips\nFROM shared_vehicles\nWHERE is_autonomous = TRUE\n  AND id IN (\n    SELECT id FROM shared_vehicles\n    WHERE vehicle_type = 'car'\n  )\n  AND EXISTS (\n    SELECT 1 FROM city_data\n    WHERE city = 'Seattle' AND has_autonomous_vehicles = TRUE\n  );", "latency_sec": 0.9651548862457275, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'city' column in the shared_vehicles table, which does not exist according to the provided schema. The Generated SQL correctly uses a subquery to check for the existence of 'Seattle' in city_data. Additionally, the conditions differ: the Reference SQL filters by vehicle_type != 'ebike' and != 'escooter' while the Generated SQL specifically filters for 'car' vehicles. These differences in schema usage and filtering criteria make the queries non-equivalent."}
{"example_id": 2952, "sql_complexity": "aggregation", "prompt": "Show the total budget allocated for each program category in 2023.", "context": "CREATE TABLE Budget (id INT, category TEXT, year INT, allocated_amount INT); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (1, 'Education', 2023, 30000); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (2, 'Healthcare', 2023, 50000);", "reference_sql": "SELECT category, SUM(allocated_amount) FROM Budget WHERE year = 2023 GROUP BY category;", "generated_sql": "SELECT category, SUM(allocated_amount) AS total_budget\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "raw_model_output": "SELECT category, SUM(allocated_amount) AS total_budget\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "latency_sec": 0.9052460193634033, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (category and summed allocated_amount) from the same table with the same filtering (year = 2023) and grouping (category). The only difference is the alias 'total_budget' in the generated query, which doesn't affect the semantic meaning of the result set."}
{"example_id": 4328, "sql_complexity": "aggregation", "prompt": "What is the average cargo handling time in hours for each port?", "context": "CREATE TABLE cargo_handling (id INT, port_id INT, time_in_hours DECIMAL(5,2)); INSERT INTO cargo_handling (id, port_id, time_in_hours) VALUES (1, 1, 20.5), (2, 1, 22.3), (3, 2, 18.7);", "reference_sql": "SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id;", "generated_sql": "SELECT port_id, AVG(time_in_hours) AS average_handling_time\nFROM cargo_handling\nGROUP BY port_id;", "raw_model_output": "SELECT port_id, AVG(time_in_hours) AS average_handling_time\nFROM cargo_handling\nGROUP BY port_id;", "latency_sec": 0.5666968822479248, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by port_id and calculate the average time_in_hours. The generated query adds an alias (average_handling_time) for the computed column, but this does not affect the semantic result set structure or values."}
{"example_id": 4915, "sql_complexity": "window functions", "prompt": "Calculate the percentage of total Europium production for each country.", "context": "CREATE TABLE europium_production (country VARCHAR(50), quantity INT);", "reference_sql": "SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;", "generated_sql": "SELECT \n    country,\n    (quantity * 100.0) / (SELECT SUM(quantity) FROM europium_production) AS percentage_of_total\nFROM \n    europium_production;", "raw_model_output": "SELECT \n    country,\n    (quantity * 100.0) / (SELECT SUM(quantity) FROM europium_production) AS percentage_of_total\nFROM \n    europium_production;", "latency_sec": 0.5582320690155029, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of each country's production relative to the total production. The reference query uses a window function (SUM(quantity) OVER (PARTITION BY NULL)) to compute the total, while the generated query uses a scalar subquery (SELECT SUM(quantity) FROM europium_production). Both approaches effectively compute the same total sum and apply it to each row, resulting in identical output."}
{"example_id": 5030, "sql_complexity": "subqueries", "prompt": "What is the success rate of diverse-led startups (at least 1 female or underrepresented racial or ethnic group executive) in the past 3 years?", "context": "CREATE TABLE DiverseStartups(id INT, name TEXT, country TEXT, year INT, success BOOLEAN);   INSERT INTO DiverseStartups VALUES (1, 'FemTech', 'USA', 2020, true), (2, 'GreenCity', 'Canada', 2019, false), (3, 'AI-Health', 'UK', 2021, true), (4, 'SolarEnergy', 'USA', 2020, false), (5, 'DataAnalytics', 'Germany', 2019, true), (6, 'SmartGrid', 'USA', 2021, true), (7, 'CloudServices', 'India', 2020, false), (8, 'RenewableEnergy', 'USA', 2019, true);", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3) AS success_rate FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3 AND success = true;", "generated_sql": "SELECT \n    ROUND(AVG(CASE WHEN success = TRUE THEN 1 ELSE 0 END) * 100, 2) AS success_rate_percentage\nFROM \n    DiverseStartups\nWHERE \n    year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3;", "raw_model_output": "SELECT \n    ROUND(AVG(CASE WHEN success = TRUE THEN 1 ELSE 0 END) * 100, 2) AS success_rate_percentage\nFROM \n    DiverseStartups\nWHERE \n    year >= EXTRACT(YEAR FROM CURRENT_DATE) - 3;", "latency_sec": 0.7116010189056396, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their calculation and output formatting. The Reference SQL calculates the exact percentage using COUNT(*) * 100.0 / (subquery count), while the Generated SQL uses AVG(CASE...) * 100 with ROUND(..., 2). The rounding in the Generated SQL introduces potential precision differences, making the results not strictly equivalent."}
{"example_id": 4626, "sql_complexity": "aggregation", "prompt": "What was the maximum number of training hours for farmers in each country in 2020?", "context": "CREATE TABLE training (id INT, country_id INT, farmer_id INT, hours INT, date DATE);", "reference_sql": "SELECT country_id, MAX(hours) FROM training WHERE YEAR(date) = 2020 GROUP BY country_id;", "generated_sql": "SELECT country_id, MAX(hours) AS max_hours\nFROM training\nWHERE YEAR(date) = 2020\nGROUP BY country_id;", "raw_model_output": "SELECT country_id, MAX(hours) AS max_hours\nFROM training\nWHERE YEAR(date) = 2020\nGROUP BY country_id;", "latency_sec": 0.7424142360687256, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The generated query adds an alias 'max_hours' to the MAX(hours) column, but this does not affect the result set's content or structure. Both queries select the same columns, apply identical filtering (YEAR(date) = 2020), and group by country_id. The alias only changes the column name in the output, not the underlying data."}
{"example_id": 2703, "sql_complexity": "set operations", "prompt": "Identify the species unique to 'MarineResearchAreaA' and 'MarineResearchAreaB'", "context": "CREATE TABLE ResearchAreaSpecies (area VARCHAR(255), species VARCHAR(255)); INSERT INTO ResearchAreaSpecies (area, species) VALUES ('MarineResearchAreaA', 'Coral'), ('MarineResearchAreaA', 'Starfish'), ('MarineResearchAreaB', 'Jellyfish');", "reference_sql": "(SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB') UNION (SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA');", "generated_sql": "SELECT species\nFROM ResearchAreaSpecies\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\nGROUP BY species\nHAVING COUNT(DISTINCT area) = 1;", "raw_model_output": "SELECT species\nFROM ResearchAreaSpecies\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\nGROUP BY species\nHAVING COUNT(DISTINCT area) = 1;", "latency_sec": 0.6671819686889648, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve species that are present in exactly one of the two research areas. The Reference SQL uses EXCEPT and UNION to compute the symmetric difference between the two areas, while the Generated SQL uses GROUP BY and HAVING to find species appearing in only one area. The result sets are identical."}
{"example_id": 200, "sql_complexity": "window functions", "prompt": "List the top three categories of workforce development programs with the highest budget increases.", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(50), budget DECIMAL(10, 2), category VARCHAR(50), budget_date DATE);", "reference_sql": "SELECT category, SUM(budget - LAG(budget) OVER (PARTITION BY category ORDER BY budget_date)) as total_budget_increase FROM programs GROUP BY category ORDER BY total_budget_increase DESC LIMIT 3;", "generated_sql": "SELECT category, \n       (MAX(budget) - MIN(budget)) AS budget_increase\nFROM programs\nGROUP BY category\nORDER BY budget_increase DESC\nLIMIT 3;", "raw_model_output": "SELECT category, \n       (MAX(budget) - MIN(budget)) AS budget_increase\nFROM programs\nGROUP BY category\nORDER BY budget_increase DESC\nLIMIT 3;", "latency_sec": 0.5391378402709961, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total budget increase by summing consecutive differences between budgets ordered by date (effectively last budget - first budget). The generated query calculates the difference between the maximum and minimum budgets for each category. These two approaches can yield different results, especially when budgets fluctuate over time (e.g., max/min may not align with first/last values)."}
{"example_id": 5131, "sql_complexity": "basic SQL", "prompt": "How many wells were drilled in the Eagle Ford Shale and Bakken Formation?", "context": "CREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), num_drilled INT); INSERT INTO wells (id, region, well_type, num_drilled) VALUES (1, 'Eagle Ford Shale', 'Oil', 2000), (2, 'Eagle Ford Shale', 'Gas', 1500), (3, 'Bakken Formation', 'Oil', 1000), (4, 'Bakken Formation', 'Gas', 1200);", "reference_sql": "SELECT SUM(num_drilled) as total_wells FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "generated_sql": "SELECT SUM(num_drilled) AS total_wells_drilled\nFROM wells\nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "raw_model_output": "SELECT SUM(num_drilled) AS total_wells_drilled\nFROM wells\nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "latency_sec": 0.8444311618804932, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of num_drilled for wells in the 'Eagle Ford Shale' and 'Bakken Formation' regions. The only difference is the column alias name (total_wells vs. total_wells_drilled), which doesn't affect the semantic result."}
{"example_id": 1160, "sql_complexity": "subqueries", "prompt": "What is the total revenue generated from ads on Instagram in March 2021, for users in the 'brand' category who have posted more than 10 times?", "context": "CREATE TABLE ads (ad_id INT, user_id INT, platform VARCHAR(255), ad_revenue DECIMAL(10,2), post_count INT); INSERT INTO ads (ad_id, user_id, platform, ad_revenue, post_count) VALUES (1, 1, 'Instagram', 150.50, 12), (2, 2, 'Twitter', 80.00, 15), (3, 3, 'Instagram', 120.75, 8);", "reference_sql": "SELECT SUM(ad_revenue) FROM ads WHERE platform = 'Instagram' AND MONTH(ad_date) = 3 AND YEAR(ad_date) = 2021 AND user_id IN (SELECT user_id FROM users WHERE category = 'brand' AND post_count > 10);", "generated_sql": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10;", "raw_model_output": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10;", "latency_sec": 0.5435349941253662, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes additional conditions: filtering by ad_date (MONTH and YEAR) and a subquery on a non-existent 'users' table (which isn't part of the provided schema). The Generated SQL omits these constraints and incorrectly references 'post_count' without verifying if it's from the correct table. The absence of the 'users' table in the schema also makes the Reference SQL invalid."}
{"example_id": 4708, "sql_complexity": "subqueries", "prompt": "What is the maximum number of high-level threats reported by a single agency in a month?", "context": "CREATE TABLE Threat_Intelligence (Threat_ID INT, Threat_Type VARCHAR(50), Threat_Level VARCHAR(50), Reported_Date DATE, Reporting_Agency VARCHAR(50)); CREATE VIEW High_Level_Threats AS SELECT Threat_Type, Threat_Level, Reported_Date FROM Threat_Intelligence WHERE Threat_Level = 'High';", "reference_sql": "SELECT Reporting_Agency, MAX(Number_of_High_Level_Threats) as Max_High_Level_Threats_in_a_Month FROM (SELECT Reporting_Agency, TO_CHAR(Reported_Date, 'YYYY-MM') as Month, COUNT(*) as Number_of_High_Level_Threats FROM High_Level_Threats GROUP BY Reporting_Agency, Month) GROUP BY Reporting_Agency;", "generated_sql": "SELECT MAX(Threat_Count) AS Max_High_Level_Threats_Per_Agency_Per_Month\nFROM (\n    SELECT Reporting_Agency, EXTRACT(YEAR FROM Reported_Date) AS Year, EXTRACT(MONTH FROM Reported_Date) AS Month, COUNT(*) AS Threat_Count\n    FROM Threat_Intelligence\n    WHERE Threat_Level = 'High'\n    GROUP BY Reporting_Agency, Year, Month\n) AS Monthly_Threats;", "raw_model_output": "SELECT MAX(Threat_Count) AS Max_High_Level_Threats_Per_Agency_Per_Month\nFROM (\n    SELECT Reporting_Agency, EXTRACT(YEAR FROM Reported_Date) AS Year, EXTRACT(MONTH FROM Reported_Date) AS Month, COUNT(*) AS Threat_Count\n    FROM Threat_Intelligence\n    WHERE Threat_Level = 'High'\n    GROUP BY Reporting_Agency, Year, Month\n) AS Monthly_Threats;", "latency_sec": 1.2947039604187012, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL calculates the maximum number of high-level threats per month for each agency (grouping by Reporting_Agency and Month), while the Generated SQL finds the overall maximum threat count across all agencies and months without per-agency aggregation. The Generated SQL's outer query returns a single value, whereas the Reference SQL returns multiple rows grouped by agency."}
{"example_id": 5608, "sql_complexity": "set operations", "prompt": "List the suppliers that provide materials for both product A and product C.", "context": "CREATE TABLE products (product_id INT, product_name TEXT); CREATE TABLE materials (material_id INT, material_name TEXT, product_id INT, supplier_id INT); INSERT INTO products (product_id, product_name) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'); INSERT INTO materials (material_id, material_name, product_id, supplier_id) VALUES (1, 'Material 1', 1, 101), (2, 'Material 2', 1, 102), (3, 'Material 3', 2, 103), (4, 'Material 4', 3, 101), (5, 'Material 5', 3, 102);", "reference_sql": "SELECT supplier_id FROM materials WHERE product_id = 1 INTERSECT SELECT supplier_id FROM materials WHERE product_id = 3;", "generated_sql": "SELECT DISTINCT m1.supplier_id\nFROM materials m1\nJOIN materials m2 ON m1.supplier_id = m2.supplier_id\nWHERE m1.product_id = (SELECT product_id FROM products WHERE product_name = 'Product A')\n  AND m2.product_id = (SELECT product_id FROM products WHERE product_name = 'Product C');", "raw_model_output": "SELECT DISTINCT m1.supplier_id\nFROM materials m1\nJOIN materials m2 ON m1.supplier_id = m2.supplier_id\nWHERE m1.product_id = (SELECT product_id FROM products WHERE product_name = 'Product A')\n  AND m2.product_id = (SELECT product_id FROM products WHERE product_name = 'Product C');", "latency_sec": 0.77984619140625, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries find supplier_ids that are common between product_id 1 (Product A) and product_id 3 (Product C). The Reference SQL uses INTERSECT to return distinct common supplier_ids, while the Generated SQL uses a JOIN on supplier_id with DISTINCT to achieve the same result. The sample data shows suppliers 101 and 102 are present in both products, so both queries return the same values."}
{"example_id": 1506, "sql_complexity": "basic SQL", "prompt": "How many habitats are in the 'animal_habitats' table?", "context": "CREATE TABLE animal_habitats (id INT PRIMARY KEY, habitat_name VARCHAR, num_animals INT);", "reference_sql": "SELECT COUNT(*) FROM animal_habitats;", "generated_sql": "SELECT COUNT(*) AS total_habitats FROM animal_habitats;", "raw_model_output": "SELECT COUNT(*) AS total_habitats FROM animal_habitats;", "latency_sec": 0.6954631805419922, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries return the same numerical count of rows from the animal_habitats table. The generated query adds an alias (total_habitats) for the COUNT(*) column, but this does not affect the actual value returned. The result is a single row with a single column containing the total number of habitats."}
{"example_id": 3117, "sql_complexity": "aggregation", "prompt": "What is the percentage of the population that has access to clean water in each continent?", "context": "CREATE TABLE water_data (id INT, country VARCHAR(50), continent CHAR(2), access_to_clean_water BOOLEAN); INSERT INTO water_data VALUES (1, 'Canada', 'NA', true), (2, 'Mexico', 'NA', false), (3, 'Brazil', 'SA', true), (4, 'Russia', 'EU', true);", "reference_sql": "SELECT continent, COUNT(*) FILTER (WHERE access_to_clean_water) * 100.0 / COUNT(*) AS percentage FROM water_data GROUP BY continent;", "generated_sql": "SELECT \n    continent,\n    ROUND(AVG(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) * 100, 2) AS percentage_with_access\nFROM \n    water_data\nGROUP BY \n    continent;", "raw_model_output": "SELECT \n    continent,\n    ROUND(AVG(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) * 100, 2) AS percentage_with_access\nFROM \n    water_data\nGROUP BY \n    continent;", "latency_sec": 0.6246318817138672, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the exact percentage using COUNT(*) FILTER and 100.0 for precise division, while the Generated SQL uses AVG with CASE and ROUND to two decimal places. The rounding in the Generated SQL may alter results for non-integer percentages, making them non-equivalent."}
{"example_id": 3542, "sql_complexity": "window functions", "prompt": "What is the average yield of crops for each country, ranked by average yield?", "context": "CREATE TABLE farming (id INT, name TEXT, country TEXT, crop TEXT, yield INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'USA', 'Corn', 120), (2, 'Brown Farm', 'Canada', 'Soybeans', 45), (3, 'Jones Farm', 'Mexico', 'Wheat', 80);", "reference_sql": "SELECT country, AVG(yield) as avg_yield, ROW_NUMBER() OVER (ORDER BY AVG(yield) DESC) as rank FROM farming GROUP BY country;", "generated_sql": "SELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "raw_model_output": "SELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "latency_sec": 0.7624812126159668, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a ROW_NUMBER() column that assigns ranks based on average yield, while the Generated SQL only returns country and average_yield without ranking. The result sets have different column counts and semantics."}
{"example_id": 2274, "sql_complexity": "subqueries", "prompt": "Add a new crop 'amaranth' to farm 'Nourishing Harvest' with yield 50 in 2023", "context": "CREATE TABLE farms (id INT, name TEXT, location TEXT, size FLOAT); INSERT INTO farms (id, name, location, size) VALUES (1, 'Nourishing Harvest', 'Mexico', 120.0); CREATE TABLE crops (id INT, farm_id INT, crop TEXT, yield INT, year INT);", "reference_sql": "INSERT INTO crops (id, farm_id, crop, yield, year) VALUES (5, (SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "generated_sql": "INSERT INTO crops (farm_id, crop, yield, year)\nSELECT id, 'amaranth', 50, 2023\nFROM farms\nWHERE name = 'Nourishing Harvest';", "raw_model_output": "INSERT INTO crops (farm_id, crop, yield, year)\nSELECT id, 'amaranth', 50, 2023\nFROM farms\nWHERE name = 'Nourishing Harvest';", "latency_sec": 0.7039790153503418, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL explicitly sets the 'id' value to 5, while the Generated SQL omits the 'id' column and relies on auto-incrementing (assuming it's defined). Additionally, the Generated SQL would insert multiple rows if multiple farms had the same name, whereas the Reference SQL would only insert one row (since the subquery returns a single id). The explicit id value and potential for multiple rows make them non-equivalent."}
{"example_id": 3705, "sql_complexity": "subqueries", "prompt": "What is the percentage of unions with collective bargaining agreements in the Midwest region?", "context": "CREATE TABLE collective_bargaining (bargaining_id INT, union_name VARCHAR(50), contract_start_date DATE, contract_end_date DATE, region VARCHAR(50));CREATE VIEW union_region AS SELECT DISTINCT union_name, region FROM collective_bargaining;", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) as percentage FROM union_region ur WHERE ur.region = 'Midwest' AND EXISTS (SELECT 1 FROM collective_bargaining cb WHERE cb.union_name = ur.union_name);", "generated_sql": "SELECT \n    (COUNT(DISTINCT union_name) * 100.0) / NULLIF((SELECT COUNT(DISTINCT union_name) FROM union_region), 0) AS percentage_unions_midwest\nFROM \n    union_region\nWHERE \n    region = 'Midwest';", "raw_model_output": "SELECT \n    (COUNT(DISTINCT union_name) * 100.0) / NULLIF((SELECT COUNT(DISTINCT union_name) FROM union_region), 0) AS percentage_unions_midwest\nFROM \n    union_region\nWHERE \n    region = 'Midwest';", "latency_sec": 0.7454929351806641, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their denominator calculation. The Reference SQL uses the total number of rows in union_region (COUNT(*)), while the Generated SQL uses the count of distinct union_names in union_region (COUNT(DISTINCT union_name)). Additionally, the Reference SQL includes an EXISTS clause that is redundant due to the union_region view's source table, but the Generated SQL omits this. However, the critical difference lies in the denominator, which leads to different results when there are multiple (union_name, region) pairs for the same union_name."}
{"example_id": 240, "sql_complexity": "aggregation", "prompt": "What is the average capacity of renewable energy projects for each country?", "context": "CREATE TABLE projects (name TEXT, type TEXT, capacity INTEGER, country TEXT); INSERT INTO projects (name, type, capacity, country) VALUES ('Project 1', 'Wind', 100, 'USA'), ('Project 2', 'Solar', 200, 'Germany'), ('Project 3', 'Wind', 300, 'France');", "reference_sql": "SELECT country, AVG(capacity) FROM projects GROUP BY country", "generated_sql": "SELECT country, AVG(capacity) AS average_capacity\nFROM projects\nWHERE type IN ('Wind', 'Solar')\nGROUP BY country;", "raw_model_output": "SELECT country, AVG(capacity) AS average_capacity\nFROM projects\nWHERE type IN ('Wind', 'Solar')\nGROUP BY country;", "latency_sec": 0.7692930698394775, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes all projects regardless of type, while the Generated SQL filters projects to only those with type 'Wind' or 'Solar'. Although the sample data contains only Wind and Solar projects, the WHERE clause makes the Generated SQL semantically different in general cases where other project types might exist."}
{"example_id": 2132, "sql_complexity": "set operations", "prompt": "What is the average caseload per attorney in community legal clinics in California, and how does it compare to the state average?", "context": "CREATE TABLE cali_community_legal_clinics(id INT, attorney_count INT, cases_handled INT, state VARCHAR(255));", "reference_sql": "SELECT state, AVG(cases_handled/attorney_count) AS avg_caseload FROM cali_community_legal_clinics WHERE state = 'California' GROUP BY state UNION ALL SELECT 'California', AVG(cases_handled/attorney_count) FROM cali_community_legal_clinics WHERE state = 'California';", "generated_sql": "SELECT \n    AVG(cases_handled * 1.0 / attorney_count) AS avg_caseload_per_attorney_in_CA,\n    (SELECT AVG(cases_handled * 1.0 / attorney_count) FROM cali_community_legal_clinics) AS state_average_caseload\nFROM cali_community_legal_clinics\nWHERE state = 'California';", "raw_model_output": "SELECT \n    AVG(cases_handled * 1.0 / attorney_count) AS avg_caseload_per_attorney_in_CA,\n    (SELECT AVG(cases_handled * 1.0 / attorney_count) FROM cali_community_legal_clinics) AS state_average_caseload\nFROM cali_community_legal_clinics\nWHERE state = 'California';", "latency_sec": 0.8216161727905273, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in structure and logic. The Reference SQL returns two rows with state and average caseload for California, while the Generated SQL returns one row with two columns: California's average caseload and the overall table average (not restricted to California). The subquery in Generated SQL computes a different value than the Reference SQL's second SELECT."}
{"example_id": 3276, "sql_complexity": "basic SQL", "prompt": "What is the total energy consumption of the Chemical Plant B in the last quarter?", "context": "CREATE TABLE EnergyConsumption (EnergyID INT, Plant VARCHAR(255), EnergyQuantity DECIMAL(5,2), Timestamp DATETIME);", "reference_sql": "SELECT SUM(EnergyQuantity) FROM EnergyConsumption WHERE Plant = 'Chemical Plant B' AND Timestamp BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE();", "generated_sql": "SELECT SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);", "raw_model_output": "SELECT SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND Timestamp >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);", "latency_sec": 0.5599920749664307, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses BETWEEN with CURRENT_DATE() as the upper bound, which includes all timestamps up to the end of the current day. The Generated SQL only has a lower bound (>= DATE_SUB(...)), so it includes records up to the current moment (not the end of the day). This difference in upper bound handling makes them non-equivalent."}
{"example_id": 3074, "sql_complexity": "multiple_joins", "prompt": "Find the top 5 players with the highest scores in the 'historical_tournaments' view, including their scores and the names of the tournaments they participated in.", "context": "CREATE VIEW historical_tournaments AS SELECT tournaments.tournament_name, players.player_name, players.score FROM tournaments JOIN players_scores ON tournaments.tournament_id = players_scores.tournament_id JOIN players ON players_scores.player_id = players.player_id;  CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT);  CREATE TABLE players_scores (player_id INT, tournament_id INT, score INT);  CREATE TABLE players (player_id INT, player_name TEXT);", "reference_sql": "SELECT players.player_name, MAX(players_scores.score) as high_score, tournaments.tournament_name FROM historical_tournaments JOIN players ON historical_tournaments.player_id = players.player_id JOIN players_scores ON historical_tournaments.player_id = players_scores.player_id JOIN tournaments ON players_scores.tournament_id = tournaments.tournament_id GROUP BY players.player_id, tournaments.tournament_name ORDER BY high_score DESC LIMIT 5;", "generated_sql": "SELECT player_name, score, tournament_name\nFROM (\n    SELECT \n        player_name, \n        score, \n        tournament_name,\n        ROW_NUMBER() OVER (ORDER BY score DESC) AS rn\n    FROM historical_tournaments\n) sub\nWHERE rn <= 5;", "raw_model_output": "SELECT player_name, score, tournament_name\nFROM (\n    SELECT \n        player_name, \n        score, \n        tournament_name,\n        ROW_NUMBER() OVER (ORDER BY score DESC) AS rn\n    FROM historical_tournaments\n) sub\nWHERE rn <= 5;", "latency_sec": 0.920114278793335, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL groups by player and tournament to find each player's highest score per tournament, then orders by that maximum score. The Generated SQL simply selects the top 5 rows from historical_tournaments ordered by score, without grouping or considering per-player/per-tournament maxima. The Generated SQL also lacks the MAX() aggregation and grouping logic present in the Reference SQL."}
{"example_id": 2219, "sql_complexity": "window functions", "prompt": "What is the average population of cities with a UNESCO World Heritage designation, ordered by designation date?", "context": "CREATE TABLE cities (name VARCHAR(255), population INT, designation_date DATE); INSERT INTO cities (name, population, designation_date) VALUES ('Paris', 2141000, '1991-09-16'); INSERT INTO cities (name, population, designation_date) VALUES ('Rio de Janeiro', 6727000, '2012-07-01');", "reference_sql": "SELECT AVG(population) FROM (SELECT population, ROW_NUMBER() OVER (ORDER BY designation_date) rn FROM cities WHERE name IN (SELECT name FROM heritagesites)) t WHERE rn % 2 = 1;", "generated_sql": "SELECT AVG(population) AS average_population\nFROM cities\nWHERE designation_date IS NOT NULL\nORDER BY designation_date;", "raw_model_output": "SELECT AVG(population) AS average_population\nFROM cities\nWHERE designation_date IS NOT NULL\nORDER BY designation_date;", "latency_sec": 0.5529019832611084, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the average of population values from cities where names exist in heritagesites, using row numbering on designation_date and filtering odd rows. The generated query averages all cities with non-null designation_date without any name filtering or row-numbering logic. Differences include: 1) The reference query filters cities by heritagesites, 2) The reference query uses row numbering and odd-row filtering, 3) The generated query lacks the heritagesites filter and row-numbering logic."}
{"example_id": 3786, "sql_complexity": "aggregation", "prompt": "Display the names and average co-owner percentages for all properties in the 'property_coownership' table where the co-owner percentage is greater than 60.", "context": "CREATE TABLE property_coownership (property_id INT, owner VARCHAR(255), percentage INT); INSERT INTO property_coownership (property_id, owner, percentage) VALUES (1, 'Mohammed', 70), (1, 'Fatima', 30), (2, 'Jamal', 65), (2, 'Aisha', 35), (3, 'Ali', 75), (3, 'Khadija', 25);", "reference_sql": "SELECT owner, AVG(percentage) FROM property_coownership WHERE percentage > 60 GROUP BY owner;", "generated_sql": "SELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "raw_model_output": "SELECT owner, AVG(percentage) AS average_percentage\nFROM property_coownership\nWHERE percentage > 60\nGROUP BY owner;", "latency_sec": 0.5302178859710693, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (owner and average percentage) from the same table, apply the same filter (percentage > 60), and group by owner. The only difference is that the generated query explicitly names the calculated column 'average_percentage' while the reference query relies on the default column name. Semantically, they produce identical result sets with the same data values."}
{"example_id": 2357, "sql_complexity": "basic SQL", "prompt": "What is the total amount of climate finance invested in renewable energy projects by public and private sectors in Africa?", "context": "CREATE TABLE renewable_energy_projects (project_id INT, sector TEXT, investor_type TEXT, region TEXT, amount FLOAT); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (1, 'Renewable Energy', 'Public', 'Africa', 5000000); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (2, 'Renewable Energy', 'Private', 'Africa', 7000000);", "reference_sql": "SELECT SUM(amount) FROM renewable_energy_projects WHERE sector = 'Renewable Energy' AND region = 'Africa';", "generated_sql": "SELECT \n    investor_type, \n    SUM(amount) AS total_investment\nFROM \n    renewable_energy_projects\nWHERE \n    region = 'Africa'\nGROUP BY \n    investor_type;", "raw_model_output": "SELECT \n    investor_type, \n    SUM(amount) AS total_investment\nFROM \n    renewable_energy_projects\nWHERE \n    region = 'Africa'\nGROUP BY \n    investor_type;", "latency_sec": 0.6028838157653809, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns a single total sum of amounts for Renewable Energy projects in Africa, while the generated query groups results by investor_type, returning separate sums for each investor type in Africa. The generated query includes additional columns (investor_type) and partitions the data into multiple rows, making the results structurally and semantically different."}
{"example_id": 1009, "sql_complexity": "multiple_joins", "prompt": "Find the number of IoT sensors installed in each farm that use Sprinkler irrigation.", "context": "CREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, Farm_id) VALUES (1, 'Soil Moisture', 1), (2, 'Temperature', 1), (3, 'Humidity', 2); CREATE TABLE Irrigation (id INT, Farm_id INT, irrigation_type VARCHAR(50), duration INT); INSERT INTO Irrigation (id, Farm_id, irrigation_type, duration) VALUES (1, 1, 'Sprinkler', 30), (2, 2, 'Drip', 45);", "reference_sql": "SELECT f.id, COUNT(s.id) FROM Farmers f JOIN Irrigation i ON f.id = i.Farm_id JOIN IoT_Sensors s ON f.id = s.Farm_id WHERE i.irrigation_type = 'Sprinkler' GROUP BY f.id;", "generated_sql": "SELECT \n    i.Farm_id, \n    COUNT(s.id) AS sensor_count\nFROM \n    IoT_Sensors s\nJOIN \n    Irrigation i ON s.Farm_id = i.Farm_id\nWHERE \n    i.irrigation_type = 'Sprinkler'\nGROUP BY \n    i.Farm_id;", "raw_model_output": "SELECT \n    i.Farm_id, \n    COUNT(s.id) AS sensor_count\nFROM \n    IoT_Sensors s\nJOIN \n    Irrigation i ON s.Farm_id = i.Farm_id\nWHERE \n    i.irrigation_type = 'Sprinkler'\nGROUP BY \n    i.Farm_id;", "latency_sec": 0.6905827522277832, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of IoT_Sensors per Farm_id where the associated Irrigation entry has 'Sprinkler' type. The Reference SQL uses Farmers table joins, while the Generated SQL directly joins IoT_Sensors and Irrigation. Since Farm_id in both tables corresponds to the same identifier, and the grouping/conditions are equivalent, the results will match. The only difference is column naming (f.id vs i.Farm_id) and table usage, but the semantic logic remains the same."}
{"example_id": 4217, "sql_complexity": "subqueries", "prompt": "Show consumer preference data for foundations, excluding products from the USA.", "context": "CREATE TABLE cosmetics (product_id INT, product_name VARCHAR(100), product_type VARCHAR(50), is_cruelty_free BOOLEAN, consumer_preference_score INT); INSERT INTO cosmetics (product_id, product_name, product_type, is_cruelty_free, consumer_preference_score) VALUES (1, 'Lipstick A', 'Lipstick', TRUE, 80), (2, 'Foundation B', 'Foundation', FALSE, 90), (3, 'Mascara C', 'Mascara', TRUE, 85), (4, 'Eyeshadow D', 'Eyeshadow', TRUE, 70), (5, 'Blush E', 'Blush', FALSE, 95); CREATE TABLE ingredient_sourcing (ingredient_id INT, ingredient_name VARCHAR(100), sourcing_country VARCHAR(50), is_organic BOOLEAN); INSERT INTO ingredient_sourcing (ingredient_id, ingredient_name, sourcing_country, is_organic) VALUES (1, 'Rosehip Oil', 'Chile', TRUE), (2, 'Shea Butter', 'Ghana', TRUE), (3, 'Jojoba Oil', 'India', TRUE), (4, 'Coconut Oil', 'Philippines', FALSE), (5, 'Aloe Vera', 'USA', TRUE);", "reference_sql": "SELECT * FROM cosmetics WHERE product_type = 'Foundation' AND product_id NOT IN (SELECT cosmetics.product_id FROM cosmetics INNER JOIN ingredient_sourcing ON cosmetics.product_id = ingredient_sourcing.ingredient_id WHERE ingredient_sourcing.sourcing_country = 'USA');", "generated_sql": "SELECT product_name, consumer_preference_score\nFROM cosmetics\nWHERE product_type = 'Foundation' AND product_id NOT IN (\n    SELECT product_id FROM cosmetics WHERE product_name LIKE '%USA%'\n);", "raw_model_output": "SELECT product_name, consumer_preference_score\nFROM cosmetics\nWHERE product_type = 'Foundation' AND product_id NOT IN (\n    SELECT product_id FROM cosmetics WHERE product_name LIKE '%USA%'\n);\n", "latency_sec": 0.9953701496124268, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL filters products based on a join with ingredient_sourcing where sourcing_country = 'USA', while the Generated SQL uses a product_name LIKE '%USA%' condition. These subqueries target entirely different data relationships (sourcing country vs. product name), and their logic would produce different results in general cases. In the provided sample data, both might return the same result, but this is coincidental and not guaranteed for all data."}
{"example_id": 5620, "sql_complexity": "basic SQL", "prompt": "What is the recycling rate of plastic in the residential sector in the state of New York?", "context": "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", "reference_sql": "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "generated_sql": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential'\n  AND city = 'New York City'\n  AND material = 'plastic';", "raw_model_output": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE sector = 'residential'\n  AND city = 'New York City'\n  AND material = 'plastic';", "latency_sec": 0.74462890625, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same column ('recycling_rate') from the same table ('recycling_rates_city') and apply identical WHERE conditions (sector = 'residential', city = 'New York City', material = 'plastic'). The order of conditions in the WHERE clause does not affect the result set."}
{"example_id": 3151, "sql_complexity": "basic SQL", "prompt": "List all biotech startups that received funding in 2022 and their respective funding amounts.", "context": "CREATE TABLE biotech_startups (name TEXT, funding FLOAT, date DATE); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupA', 3500000, '2022-02-28'); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupB', 4500000, '2022-07-12');", "reference_sql": "SELECT name, funding FROM biotech_startups WHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "generated_sql": "SELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "raw_model_output": "SELECT name, funding\nFROM biotech_startups\nWHERE EXTRACT(YEAR FROM date) = 2022;", "latency_sec": 0.5338678359985352, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select startups with dates in 2022. The BETWEEN clause includes all dates from '2022-01-01' to '2022-12-31', while EXTRACT(YEAR FROM date) = 2022 achieves the same by filtering the year part. For the given data and all possible dates in 2022, both conditions produce identical results."}
{"example_id": 2136, "sql_complexity": "window functions", "prompt": "What is the total military equipment sales revenue for each sales representative by fiscal year?", "context": "CREATE TABLE SalesReps (SalesRepID INT, SalesRepName VARCHAR(50), FiscalYear INT, Revenue DECIMAL(10,2)); INSERT INTO SalesReps (SalesRepID, SalesRepName, FiscalYear, Revenue) VALUES (1, 'John Doe', 2020, 150000.00), (2, 'Jane Smith', 2020, 200000.00), (1, 'John Doe', 2021, 180000.00), (2, 'Jane Smith', 2021, 250000.00);", "reference_sql": "SELECT SalesRepName, FiscalYear, SUM(Revenue) OVER (PARTITION BY SalesRepName ORDER BY FiscalYear) AS TotalRevenue FROM SalesReps;", "generated_sql": "SELECT \n    SalesRepID,\n    FiscalYear,\n    SUM(Revenue) AS TotalRevenue\nFROM \n    SalesReps\nGROUP BY \n    SalesRepID,\n    FiscalYear;", "raw_model_output": "SELECT \n    SalesRepID,\n    FiscalYear,\n    SUM(Revenue) AS TotalRevenue\nFROM \n    SalesReps\nGROUP BY \n    SalesRepID,\n    FiscalYear;", "latency_sec": 0.6460978984832764, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL uses a window function to calculate a running total of Revenue per SalesRepName across FiscalYears, while the Generated SQL aggregates Revenue by SalesRepID and FiscalYear, producing individual year totals instead of cumulative sums. Additionally, the columns differ (SalesRepName vs. SalesRepID) and the data semantics (running total vs. per-group sum) are fundamentally different."}
{"example_id": 5452, "sql_complexity": "basic SQL", "prompt": "What is the name of the farms with a size greater than 150 acres located in 'Texas'?", "context": "CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(50), size INT, location VARCHAR(50)); INSERT INTO farms (id, name, size, location) VALUES (1, 'Smith Farms', 200, 'Texas'), (2, 'Johnson Farms', 100, 'California');", "reference_sql": "SELECT name FROM farms WHERE size > 150 AND location = 'Texas'", "generated_sql": "SELECT name\nFROM farms\nWHERE size > 150 AND location = 'Texas';", "raw_model_output": "SELECT name\nFROM farms\nWHERE size > 150 AND location = 'Texas';", "latency_sec": 0.9890079498291016, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries have identical structure and logic. The only difference is whitespace formatting (line breaks) which does not affect SQL semantics. Both select 'name' from 'farms' where size > 150 and location is 'Texas'."}
{"example_id": 5152, "sql_complexity": "aggregation", "prompt": "How many international tourists visited Portugal in 2020, broken down by continent?", "context": "CREATE TABLE international_tourists(tourist_id INT, country TEXT, arrival_year INT, continent TEXT);INSERT INTO international_tourists (tourist_id, country, arrival_year, continent) VALUES (1, 'Spain', 2020, 'Europe'), (2, 'France', 2020, 'Europe'), (3, 'Brazil', 2020, 'South America'), (4, 'United States', 2020, 'North America'), (5, 'China', 2020, 'Asia');", "reference_sql": "SELECT continent, COUNT(*) FROM international_tourists WHERE arrival_year = 2020 GROUP BY continent;", "generated_sql": "SELECT continent, COUNT(tourist_id) AS number_of_tourists\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "raw_model_output": "SELECT continent, COUNT(tourist_id) AS number_of_tourists\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "latency_sec": 0.6008613109588623, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query counts all tourists from 2020 across all countries, grouped by continent. The generated query filters for tourists from 'Portugal' (which doesn't exist in the data) and would return no results. The WHERE clause conditions differ significantly, making the queries non-equivalent."}
{"example_id": 2477, "sql_complexity": "set operations", "prompt": "What is the carbon price in Europe and Australia for the last quarter of 2020?", "context": "CREATE TABLE CarbonPrices (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonPrices (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2020, 4, 25), ('Australia', 2020, 4, 15); CREATE TABLE CarbonTaxes (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonTaxes (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2019, 4, 20), ('Australia', 2019, 4, 10);", "reference_sql": "SELECT Context.Country, Context.CarbonPrice FROM ( SELECT * FROM CarbonPrices WHERE CarbonPrices.Country IN ('Europe', 'Australia') AND CarbonPrices.Year = 2020 AND CarbonPrices.Quarter = 4 UNION SELECT * FROM CarbonTaxes WHERE CarbonTaxes.Country IN ('Europe', 'Australia') AND CarbonTaxes.Year = 2020 AND CarbonTaxes.Quarter = 4 ) AS Context;", "generated_sql": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020 AND Quarter = 4 AND (Country = 'Europe' OR Country = 'Australia');", "raw_model_output": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020 AND Quarter = 4 AND (Country = 'Europe' OR Country = 'Australia');", "latency_sec": 0.5988779067993164, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL combines data from both CarbonPrices and CarbonTaxes tables using UNION, while the Generated SQL only queries the CarbonPrices table. The Generated SQL lacks the CarbonTaxes table entirely, so it would miss any relevant entries in CarbonTaxes. Although in the provided sample data CarbonTaxes has no 2020 entries, the queries are not equivalent in general."}
{"example_id": 4573, "sql_complexity": "subqueries", "prompt": "Find the names of all the indigenous communities in the 'Arctic_Communities' table that have a population size greater than the average population size in the 'Antarctic_Communities' table.", "context": "CREATE TABLE Arctic_Communities (name TEXT, population INTEGER); CREATE TABLE Antarctic_Communities (name TEXT, population INTEGER);", "reference_sql": "SELECT name FROM Arctic_Communities WHERE Arctic_Communities.population > (SELECT AVG(population) FROM Antarctic_Communities)", "generated_sql": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "raw_model_output": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "latency_sec": 0.6075100898742676, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select names from Arctic_Communities where population exceeds the average population of Antarctic_Communities. The Generated SQL simplifies the syntax by omitting the table name in the WHERE clause (since the FROM clause already specifies Arctic_Communities), but the semantic meaning remains identical."}
{"example_id": 3596, "sql_complexity": "window functions", "prompt": "What is the total revenue for each game in the \"Gaming\" category?", "context": "CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));", "reference_sql": "SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;", "generated_sql": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "raw_model_output": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "latency_sec": 0.4496638774871826, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total revenue per category for each row using a window function, while the generated query filters to only 'Gaming' category, groups by GameName, and sums revenue per game. The output columns, aggregation logic, and filtering differ significantly."}
{"example_id": 5039, "sql_complexity": "subqueries", "prompt": "What is the total number of community policing events in 'City Park' in 2021?", "context": "CREATE TABLE locations (id INT, name VARCHAR(255)); CREATE TABLE community_policing (id INT, location_id INT, year INT, events INT); INSERT INTO locations (id, name) VALUES (1, 'City Park'); INSERT INTO community_policing (id, location_id, year, events) VALUES (1, 1, 2021, 5);", "reference_sql": "SELECT SUM(events) FROM community_policing WHERE location_id = (SELECT id FROM locations WHERE name = 'City Park') AND year = 2021;", "generated_sql": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park' AND cp.year = 2021;", "raw_model_output": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park' AND cp.year = 2021;", "latency_sec": 0.674901008605957, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of 'events' from the community_policing table where the location corresponds to 'City Park' (via location_id matching the locations table) and the year is 2021. The reference uses a subquery to get the location_id, while the generated query uses a JOIN. Semantically, they filter the same data and produce identical results given the schema constraints (assuming unique location names)."}
{"example_id": 2724, "sql_complexity": "basic SQL", "prompt": "What is the earliest installation date for solar panels in Italy?", "context": "CREATE TABLE solar_panels_italy (id INT, installation_date DATE); INSERT INTO solar_panels_italy (id, installation_date) VALUES (1, '2018-01-01'), (2, '2019-01-01'), (3, '2020-01-01');", "reference_sql": "SELECT MIN(installation_date) as earliest_date FROM solar_panels_italy;", "generated_sql": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "raw_model_output": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "latency_sec": 0.8401281833648682, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the minimum installation_date from the same table. The only difference is the column alias name ('earliest_date' vs 'earliest_installation_date'), which doesn't affect the semantic meaning or result of the query."}
{"example_id": 2200, "sql_complexity": "single join", "prompt": "Which diversity programs are currently being participated in by employees in the HR department?", "context": "CREATE TABLE Employees (Employee_ID INT, First_Name VARCHAR(20), Last_Name VARCHAR(20), Department VARCHAR(20), Salary DECIMAL(10,2), Date_Hired DATE); CREATE TABLE Diversity_Programs (Program_ID INT, Program_Name VARCHAR(50), Participant_ID INT, Date_Started DATE, Date_Ended DATE);", "reference_sql": "SELECT dp.Program_Name FROM Diversity_Programs dp JOIN Employees e ON dp.Participant_ID = e.Employee_ID WHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "generated_sql": "SELECT DISTINCT dp.Program_Name\nFROM Diversity_Programs dp\nJOIN Employees e ON dp.Participant_ID = e.Employee_ID\nWHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "raw_model_output": "SELECT DISTINCT dp.Program_Name\nFROM Diversity_Programs dp\nJOIN Employees e ON dp.Participant_ID = e.Employee_ID\nWHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "latency_sec": 0.7708568572998047, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The generated query adds DISTINCT, which ensures unique Program_Name values. The reference query may return duplicates if multiple Diversity_Programs entries exist for the same Program_Name. This difference in output uniqueness makes them non-equivalent."}
{"example_id": 4359, "sql_complexity": "window functions", "prompt": "Which destinations have the least hotel awards?", "context": "CREATE TABLE Destinations (destination_id INT, destination_name TEXT, country TEXT, awards INT); INSERT INTO Destinations (destination_id, destination_name, country, awards) VALUES (1, 'City A', 'Germany', 3), (2, 'City B', 'Switzerland', 5), (3, 'City C', 'Norway', 2);", "reference_sql": "SELECT destination_name, country, awards, RANK() OVER (PARTITION BY country ORDER BY awards ASC) AS rank FROM Destinations;", "generated_sql": "SELECT destination_name\nFROM Destinations\nWHERE awards = (SELECT MIN(awards) FROM Destinations);", "raw_model_output": "SELECT destination_name\nFROM Destinations\nWHERE awards = (SELECT MIN(awards) FROM Destinations);", "latency_sec": 0.5372998714447021, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates rankings within each country based on awards, while the Generated SQL selects destinations with the minimum awards globally. They differ in both output columns (rank vs. destination_name) and logic (window function vs. scalar subquery). The first returns all rows with rankings, the second only rows matching the global minimum awards."}
{"example_id": 1373, "sql_complexity": "subqueries", "prompt": "What is the total value of military equipment sales to Africa in the last 12 months?", "context": "CREATE TABLE Military_Equipment_Sales(sale_id INT, sale_date DATE, equipment_type VARCHAR(50), country VARCHAR(50), sale_value DECIMAL(10,2));", "reference_sql": "SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN (SELECT country FROM World_Countries WHERE continent = 'Africa') AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "generated_sql": "SELECT SUM(sale_value) AS total_sales\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "raw_model_output": "SELECT SUM(sale_value) AS total_sales\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "latency_sec": 0.5933361053466797, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query uses a subquery to select countries in Africa from the World_Countries table, while the generated query incorrectly filters for 'Africa' as a country name. This would only work if 'Africa' was a valid country in the Military_Equipment_Sales table, which is unlikely. The semantic meaning differs because the first query considers all African countries (via a join) while the second explicitly looks for a continent name as a country."}
{"example_id": 904, "sql_complexity": "basic SQL", "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?", "context": "CREATE TABLE loans (id INT, amount DECIMAL, date DATE, loan_type VARCHAR); INSERT INTO loans (id, amount, date, loan_type) VALUES (1, 5000, '2021-09-05', 'Shariah-compliant'), (2, 7000, '2021-10-07', 'socially responsible'), (3, 9000, '2021-11-03', 'Shariah-compliant'), (4, 11000, '2021-12-31', 'Shariah-compliant');", "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';", "generated_sql": "SELECT MIN(amount) AS min_shariah_compliant_loan_amount\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date >= '2021-10-01'\n  AND date <= '2021-12-31';", "raw_model_output": "SELECT MIN(amount) AS min_shariah_compliant_loan_amount\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date >= '2021-10-01'\n  AND date <= '2021-12-31';", "latency_sec": 0.6495561599731445, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter loans with 'Shariah-compliant' type in the fourth quarter of 2021. The reference query uses EXTRACT(YEAR) = 2021 and EXTRACT(QUARTER) = 4, while the generated query uses date between '2021-10-01' and '2021-12-31', which covers the same period. The MIN(amount) calculation is identical in both."}
{"example_id": 3299, "sql_complexity": "set operations", "prompt": "How many schools and hospitals are there in Colombia and which ones need repairs?", "context": "CREATE TABLE schools (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN); CREATE TABLE hospitals (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN);", "reference_sql": "SELECT 'Schools' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM schools WHERE country = 'Colombia' UNION ALL SELECT 'Hospitals' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM hospitals WHERE country = 'Colombia';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM schools WHERE country = 'Colombia') AS total_schools,\n    (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia') AS total_hospitals,\n    (SELECT GROUP_CONCAT(name) FROM schools WHERE country = 'Colombia' AND needs_repair = TRUE) AS schools_needing_repairs,\n    (SELECT GROUP_CONCAT(name) FROM hospitals WHERE country = 'Colombia' AND needs_repair = TRUE) AS hospitals_needing_repairs;", "raw_model_output": "SELECT \n    (SELECT COUNT(*) FROM schools WHERE country = 'Colombia') AS total_schools,\n    (SELECT COUNT(*) FROM hospitals WHERE country = 'Colombia') AS total_hospitals,\n    (SELECT GROUP_CONCAT(name) FROM schools WHERE country = 'Colombia' AND needs_repair = TRUE) AS schools_needing_repairs,\n    (SELECT GROUP_CONCAT(name) FROM hospitals WHERE country = 'Colombia' AND needs_repair = TRUE) AS hospitals_needing_repairs;", "latency_sec": 1.1560931205749512, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns two rows (Schools/Hospitals) with aggregated counts and repair sums, while the Generated SQL returns a single row with separate counts and concatenated names of facilities needing repairs. The structure, column names, and data types differ significantly."}
{"example_id": 907, "sql_complexity": "set operations", "prompt": "What is the total quantity of items with type 'E' or type 'F' in warehouse O and warehouse P?", "context": "CREATE TABLE warehouse_o(item_id INT, item_type VARCHAR(10), quantity INT);CREATE TABLE warehouse_p(item_id INT, item_type VARCHAR(10), quantity INT);INSERT INTO warehouse_o(item_id, item_type, quantity) VALUES (1, 'E', 200), (2, 'F', 300), (3, 'E', 50), (4, 'F', 400);INSERT INTO warehouse_p(item_id, item_type, quantity) VALUES (1, 'E', 150), (2, 'F', 250), (3, 'E', 40), (4, 'F', 350);", "reference_sql": "SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F') UNION ALL SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F');", "generated_sql": "SELECT \n    SUM(CASE WHEN item_type IN ('E', 'F') THEN quantity ELSE 0 END) AS total_quantity\nFROM (\n    SELECT item_type, quantity FROM warehouse_o\n    UNION ALL\n    SELECT item_type, quantity FROM warehouse_p\n) AS combined\nWHERE item_type IN ('E', 'F');", "raw_model_output": "SELECT \n    SUM(CASE WHEN item_type IN ('E', 'F') THEN quantity ELSE 0 END) AS total_quantity\nFROM (\n    SELECT item_type, quantity FROM warehouse_o\n    UNION ALL\n    SELECT item_type, quantity FROM warehouse_p\n) AS combined\nWHERE item_type IN ('E', 'F');", "latency_sec": 0.7353410720825195, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns individual quantities from both tables where item_type is 'E' or 'F', while the generated query aggregates all such quantities into a single sum. The first produces multiple rows of raw values, the second a single summed value. Their result structures and outputs differ fundamentally."}
{"example_id": 1400, "sql_complexity": "single join", "prompt": "What is the maximum co-ownership duration for properties in the neighborhood of 'Chinatown' in San Francisco?'", "context": "CREATE TABLE sf_neighborhoods (neighborhood_id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO sf_neighborhoods (neighborhood_id, name, city) VALUES (1, 'Chinatown', 'San Francisco'); CREATE TABLE co_ownership (co_ownership_id INT, property_id INT, co_owner_id INT, start_date DATE, end_date DATE); INSERT INTO co_ownership (co_ownership_id, property_id, co_owner_id, start_date, end_date) VALUES (1, 1, 2, '2010-01-01', '2020-01-01'), (2, 2, 3, '2015-01-01', '2022-01-01'); CREATE TABLE properties (property_id INT, city VARCHAR(255)); INSERT INTO properties (property_id, city) VALUES (1, 'San Francisco'), (2, 'San Francisco');", "reference_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) as max_duration FROM co_ownership JOIN properties ON co_ownership.property_id = properties.property_id WHERE properties.city = 'San Francisco' AND name = 'Chinatown';", "generated_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) AS max_co_ownership_duration\nFROM co_ownership\nJOIN properties ON co_ownership.property_id = properties.property_id\nJOIN sf_neighborhoods ON properties.city = sf_neighborhoods.city\nWHERE sf_neighborhoods.name = 'Chinatown' AND sf_neighborhoods.city = 'San Francisco';", "raw_model_output": "SELECT MAX(DATEDIFF(end_date, start_date)) AS max_co_ownership_duration\nFROM co_ownership\nJOIN properties ON co_ownership.property_id = properties.property_id\nJOIN sf_neighborhoods ON properties.city = sf_neighborhoods.city\nWHERE sf_neighborhoods.name = 'Chinatown' AND sf_neighborhoods.city = 'San Francisco';", "latency_sec": 1.00482177734375, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'name' column in the WHERE clause without joining with the sf_neighborhoods table, which is where the 'name' column resides. This would result in an error because 'name' is not available in the joined tables (co_ownership and properties). The Generated SQL correctly joins with sf_neighborhoods and filters on its 'name' column, making the two queries semantically different."}
{"example_id": 5248, "sql_complexity": "window functions", "prompt": "Find the top 5 games by rating", "context": "CREATE TABLE games (game_id INT PRIMARY KEY, name VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2));", "reference_sql": "SELECT * FROM (SELECT name, rating, ROW_NUMBER() OVER (ORDER BY rating DESC) as rn FROM games) t WHERE rn <= 5;", "generated_sql": "SELECT name, genre, rating\nFROM games\nORDER BY rating DESC\nLIMIT 5;", "raw_model_output": "SELECT name, genre, rating\nFROM games\nORDER BY rating DESC\nLIMIT 5;", "latency_sec": 0.6658499240875244, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query includes a row number (rn) column and selects all columns from the subquery, while the generated query replaces the row number with the genre column and omits the row number. This results in different column structures and data content (genre vs. row number)."}
{"example_id": 778, "sql_complexity": "single join", "prompt": "What is the maximum property price in wheelchair-accessible neighborhoods in Singapore?", "context": "CREATE TABLE Singapore_Neighborhoods (Neighborhood_Name TEXT, Wheelchair_Accessibility BOOLEAN); INSERT INTO Singapore_Neighborhoods (Neighborhood_Name, Wheelchair_Accessibility) VALUES ('Orchard', true), ('Marina Bay', true), ('Chinatown', false), ('Little India', false), ('Bugis', true); CREATE TABLE Singapore_Properties (Neighborhood_Name TEXT, Property_Price INTEGER); INSERT INTO Singapore_Properties (Neighborhood_Name, Property_Price) VALUES ('Orchard', 2000000), ('Marina Bay', 3000000), ('Chinatown', 1500000), ('Little India', 1200000), ('Bugis', 1800000);", "reference_sql": "SELECT MAX(Singapore_Properties.Property_Price) FROM Singapore_Properties INNER JOIN Singapore_Neighborhoods ON Singapore_Properties.Neighborhood_Name = Singapore_Neighborhoods.Neighborhood_Name WHERE Singapore_Neighborhoods.Wheelchair_Accessibility = true;", "generated_sql": "SELECT MAX(Property_Price) AS Max_Price\nFROM Singapore_Properties\nWHERE Neighborhood_Name IN (\n    SELECT Neighborhood_Name\n    FROM Singapore_Neighborhoods\n    WHERE Wheelchair_Accessibility = TRUE\n);", "raw_model_output": "SELECT MAX(Property_Price) AS Max_Price\nFROM Singapore_Properties\nWHERE Neighborhood_Name IN (\n    SELECT Neighborhood_Name\n    FROM Singapore_Neighborhoods\n    WHERE Wheelchair_Accessibility = TRUE\n);", "latency_sec": 0.5858378410339355, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum property price from neighborhoods with wheelchair accessibility. The Reference SQL uses an INNER JOIN with a WHERE clause, while the Generated SQL uses a subquery with IN. Both correctly filter neighborhoods based on Wheelchair_Accessibility = true and compute the same MAX(Property_Price) value."}
{"example_id": 3859, "sql_complexity": "aggregation", "prompt": "What is the total number of mental health parity violations by month and year?", "context": "CREATE TABLE mental_health_parity_reports (report_id INT, violation_date DATE); INSERT INTO mental_health_parity_reports (report_id, violation_date) VALUES (1, '2022-01-01'), (2, '2022-02-15'), (3, '2022-03-05'), (4, '2022-04-20'), (5, '2021-06-12'), (6, '2021-07-28');", "reference_sql": "SELECT EXTRACT(MONTH FROM violation_date) AS month, EXTRACT(YEAR FROM violation_date) AS year, COUNT(*) FROM mental_health_parity_reports GROUP BY month, year;", "generated_sql": "SELECT \n    EXTRACT(YEAR FROM violation_date) AS year,\n    EXTRACT(MONTH FROM violation_date) AS month,\n    COUNT(*) AS total_violations\nFROM \n    mental_health_parity_reports\nGROUP BY \n    year,\n    month\nORDER BY \n    year,\n    month;", "raw_model_output": "SELECT \n    EXTRACT(YEAR FROM violation_date) AS year,\n    EXTRACT(MONTH FROM violation_date) AS month,\n    COUNT(*) AS total_violations\nFROM \n    mental_health_parity_reports\nGROUP BY \n    year,\n    month\nORDER BY \n    year,\n    month;", "latency_sec": 1.0724680423736572, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries group by year and month, count violations, and return the same data. The differences (column order, alias names, and ORDER BY) do not affect the semantic result. The GROUP BY order (month/year vs year/month) is functionally equivalent, and the COUNT(*) alias change/ORDER BY clause does not alter the underlying data."}
{"example_id": 3551, "sql_complexity": "multiple_joins", "prompt": "List all artists who have performed in New York and Chicago, along with their highest-earning performance.", "context": "CREATE TABLE artist_events (artist_id INT, event_id INT, earnings DECIMAL(5,2)); CREATE TABLE artists (id INT, name VARCHAR(50)); CREATE TABLE events (id INT, city VARCHAR(20));", "reference_sql": "SELECT artists.name, MAX(artist_events.earnings) FROM artists INNER JOIN artist_events ON artists.id = artist_events.artist_id INNER JOIN events ON artist_events.event_id = events.id WHERE city IN ('New York', 'Chicago') GROUP BY artists.name;", "generated_sql": "SELECT a.id, a.name, MAX(ae.earnings) AS highest_earning\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nJOIN events e ON ae.event_id = e.id\nWHERE e.city IN ('New York', 'Chicago')\nGROUP BY a.id, a.name\nHAVING COUNT(DISTINCT e.city) = 2;", "raw_model_output": "SELECT a.id, a.name, MAX(ae.earnings) AS highest_earning\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nJOIN events e ON ae.event_id = e.id\nWHERE e.city IN ('New York', 'Chicago')\nGROUP BY a.id, a.name\nHAVING COUNT(DISTINCT e.city) = 2;", "latency_sec": 1.0128931999206543, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their filtering logic. The Reference SQL returns artists with any events in 'New York' or 'Chicago' (grouped by name), while the Generated SQL adds a HAVING clause requiring artists to have events in both cities (COUNT(DISTINCT e.city) = 2). This makes the Generated SQL more restrictive, excluding artists who only performed in one of the two cities."}
{"example_id": 5168, "sql_complexity": "aggregation", "prompt": "Get the number of renewable energy projects in Australia for each project type.", "context": "CREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT);", "reference_sql": "SELECT project_type, COUNT(*) FROM renewable_projects WHERE project_location = 'Australia' GROUP BY project_type;", "generated_sql": "SELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "raw_model_output": "SELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "latency_sec": 0.5641930103302002, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (project_type and count of records), apply the same filter (project_location = 'Australia'), and group by the same column (project_type). The only difference is that the generated query adds an alias (project_count) to the COUNT(*) column, which does not affect the semantic result set. The data returned (grouped project types and their counts) remains identical."}
{"example_id": 4916, "sql_complexity": "aggregation", "prompt": "What is the maximum revenue generated from selling Yttrium in India in the past 3 years?", "context": "CREATE TABLE Yttrium_Sales (id INT PRIMARY KEY, year INT, country VARCHAR(20), quantity INT, price PER_KG); INSERT INTO Yttrium_Sales (id, year, country, quantity, price) VALUES (1, 2019, 'India', 120, 40), (2, 2020, 'India', 130, 45), (3, 2021, 'India', 140, 50), (4, 2019, 'China', 150, 35), (5, 2020, 'China', 160, 40), (6, 2021, 'China', 170, 45);", "reference_sql": "SELECT MAX(quantity * price) FROM Yttrium_Sales WHERE country = 'India' GROUP BY year ORDER BY year DESC LIMIT 3;", "generated_sql": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India' AND year >= (SELECT MAX(year) FROM Yttrium_Sales) - 2;", "raw_model_output": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India' AND year >= (SELECT MAX(year) FROM Yttrium_Sales) - 2;", "latency_sec": 0.6147470474243164, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns the maximum revenue per year for India, grouped by year and ordered descendingly, with 3 results. The Generated SQL calculates the maximum revenue across all years >= (max year - 2) without grouping, returning a single value. They differ in grouping, ordering, and result structure."}
{"example_id": 812, "sql_complexity": "multiple_joins", "prompt": "What is the average salary of 'engineer' workers in each factory?", "context": "CREATE TABLE factories (factory_id INT, factory_name VARCHAR(20)); INSERT INTO factories VALUES (1, 'Factory X'), (2, 'Factory Y'), (3, 'Factory Z'); CREATE TABLE roles (role_id INT, role_name VARCHAR(20)); INSERT INTO roles VALUES (1, 'engineer'), (2, 'manager'), (3, 'assistant'); CREATE TABLE workers (worker_id INT, factory_id INT, role_id INT, salary DECIMAL(5,2)); INSERT INTO workers VALUES (1, 1, 1, 50000.00), (2, 1, 2, 70000.00), (3, 2, 1, 55000.00), (4, 2, 3, 40000.00), (5, 3, 1, 60000.00);", "reference_sql": "SELECT f.factory_name, AVG(salary) FROM workers w INNER JOIN factories f ON w.factory_id = f.factory_id INNER JOIN roles r ON w.role_id = r.role_id WHERE r.role_name = 'engineer' GROUP BY f.factory_name;", "generated_sql": "SELECT \n    f.factory_name,\n    AVG(w.salary) AS average_salary\nFROM \n    workers w\nJOIN \n    factories f ON w.factory_id = f.factory_id\nJOIN \n    roles r ON w.role_id = r.role_id\nWHERE \n    r.role_name = 'engineer'\nGROUP BY \n    f.factory_name;", "raw_model_output": "SELECT \n    f.factory_name,\n    AVG(w.salary) AS average_salary\nFROM \n    workers w\nJOIN \n    factories f ON w.factory_id = f.factory_id\nJOIN \n    roles r ON w.role_id = r.role_id\nWHERE \n    r.role_name = 'engineer'\nGROUP BY \n    f.factory_name;", "latency_sec": 0.9797089099884033, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the average salary per factory for workers with the 'engineer' role. They use identical table joins (workers-factories-roles), same filtering condition (role_name = 'engineer'), and group by factory_name. The only differences are formatting (alias naming and whitespace) and the explicit alias in the generated query, which does not affect the result set's data."}
{"example_id": 5784, "sql_complexity": "set operations", "prompt": "List the number of users who have completed a workout of a specific type (e.g. Running) and have a membership status of 'Active'.", "context": "CREATE TABLE workouts (id INT, user_id INT, workout_type VARCHAR(20)); CREATE TABLE members (id INT, name VARCHAR(50), membership_status VARCHAR(20), state VARCHAR(20)); INSERT INTO workouts (id, user_id, workout_type) VALUES (1, 1, 'Running'), (2, 1, 'Cycling'), (3, 2, 'Running'), (4, 3, 'Cycling'), (5, 3, 'Swimming'), (6, 4, 'Running'), (7, 4, 'Swimming'); INSERT INTO members (id, name, membership_status, state) VALUES (1, 'John Doe', 'Active', 'Texas'), (2, 'Jane Doe', 'Inactive', 'California'), (3, 'Bob Smith', 'Active', 'Texas'), (4, 'Alice Johnson', 'Active', 'California');", "reference_sql": "SELECT COUNT(*) FROM (SELECT user_id FROM workouts WHERE workout_type = 'Running' INTERSECT SELECT id FROM members WHERE membership_status = 'Active') AS user_set;", "generated_sql": "SELECT COUNT(DISTINCT w.user_id) AS user_count\nFROM workouts w\nJOIN members m ON w.user_id = m.id\nWHERE w.workout_type = 'Running' AND m.membership_status = 'Active';", "raw_model_output": "SELECT COUNT(DISTINCT w.user_id) AS user_count\nFROM workouts w\nJOIN members m ON w.user_id = m.id\nWHERE w.workout_type = 'Running' AND m.membership_status = 'Active';", "latency_sec": 0.6806402206420898, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct users who have at least one 'Running' workout and are active members. The Reference SQL uses INTERSECT to find common user_ids between 'Running' workouts and active members, while the Generated SQL joins the tables and uses COUNT(DISTINCT) to achieve the same result. Both approaches ensure uniqueness and filter the same conditions."}
{"example_id": 3038, "sql_complexity": "subqueries", "prompt": "What is the total assets of clients who have invested in mutual funds but not in stocks?", "context": "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks'), (3, 'Mutual Funds');", "reference_sql": "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type = 'Mutual Funds' AND c.client_id NOT IN (SELECT client_id FROM investments WHERE investment_type = 'Stocks');", "generated_sql": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nJOIN investments i ON c.client_id = i.client_id\nWHERE i.investment_type = 'Mutual Funds'\n  AND c.client_id NOT IN (\n      SELECT client_id FROM investments WHERE investment_type = 'Stocks'\n  );", "raw_model_output": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nJOIN investments i ON c.client_id = i.client_id\nWHERE i.investment_type = 'Mutual Funds'\n  AND c.client_id NOT IN (\n      SELECT client_id FROM investments WHERE investment_type = 'Stocks'\n  );", "latency_sec": 0.8693339824676514, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns individual client total_assets values, while the Generated SQL aggregates them using SUM(). The Generated query also adds an alias (total_assets) for the aggregated result, which changes the output structure and semantics."}
{"example_id": 1078, "sql_complexity": "basic SQL", "prompt": "What is the maximum and minimum temperature difference between any two Arctic research stations?", "context": "CREATE TABLE arctic_stations (id INT, name TEXT, location TEXT, temperature DECIMAL(5,2)); INSERT INTO arctic_stations (id, name, location, temperature) VALUES (1, 'Station A', 'Greenland', 2.3), (2, 'Station B', 'Canada', -5.2);", "reference_sql": "SELECT a.name as station1, b.name as station2, MAX(ABS(a.temperature - b.temperature)) as temp_diff FROM arctic_stations a, arctic_stations b ORDER BY temp_diff DESC LIMIT 1", "generated_sql": "SELECT \n    MAX(temperature) - MIN(temperature) AS temperature_difference\nFROM \n    arctic_stations;", "raw_model_output": "SELECT \n    MAX(temperature) - MIN(temperature) AS temperature_difference\nFROM \n    arctic_stations;", "latency_sec": 0.5333907604217529, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the maximum absolute temperature difference between any two stations (returning station names and the difference), while the Generated SQL computes the overall temperature range (max - min) without considering station pairs. Though both capture the same numerical value (max - min = max absolute difference), their result structures differ: the first returns multiple columns with station pairs, the second only a single value. Semantic equivalence requires identical result sets, which is not the case here."}
{"example_id": 5015, "sql_complexity": "basic SQL", "prompt": "Calculate the average recycling rate", "context": "CREATE TABLE recycling_rates (id INT PRIMARY KEY, location VARCHAR(50), rate FLOAT);", "reference_sql": "SELECT AVG(rate) FROM recycling_rates;", "generated_sql": "SELECT AVG(rate) AS average_recycling_rate FROM recycling_rates;", "raw_model_output": "SELECT AVG(rate) AS average_recycling_rate FROM recycling_rates;", "latency_sec": 0.7239151000976562, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average of the 'rate' column from the recycling_rates table. The generated query adds an alias 'average_recycling_rate' to the computed value, but this does not affect the actual result set. The semantic meaning remains the same as the core computation (AVG(rate)) is identical."}
{"example_id": 1533, "sql_complexity": "subqueries", "prompt": "Which programs had the highest volunteer participation rate in the last quarter?", "context": "CREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), NumVolunteers INT); CREATE TABLE VolunteerEvents (EventID INT, ProgramID INT, EventDate DATE, NumVolunteers INT);", "reference_sql": "SELECT p.ProgramName, COUNT(v.EventID) / (SELECT COUNT(*) FROM VolunteerEvents WHERE EventDate >= DATEADD(quarter, -1, GETDATE())) * 100.0 AS VolunteerParticipationRate FROM Programs p INNER JOIN VolunteerEvents v ON p.ProgramID = v.ProgramID WHERE v.EventDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.ProgramName ORDER BY VolunteerParticipationRate DESC;", "generated_sql": "SELECT \n    p.ProgramID, \n    p.ProgramName, \n    (ve.NumVolunteers::DECIMAL / p.NumVolunteers) AS ParticipationRate\nFROM \n    Programs p\nJOIN \n    VolunteerEvents ve ON p.ProgramID = ve.ProgramID\nWHERE \n    ve.EventDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\nGROUP BY \n    p.ProgramID, p.ProgramName, p.NumVolunteers\nHAVING \n    (ve.NumVolunteers::DECIMAL / p.NumVolunteers) = (\n        SELECT MAX(ParticipationRate) FROM (\n            SELECT \n                (SUM(ve.NumVolunteers)::DECIMAL / p.NumVolunteers) AS ParticipationRate\n            FROM \n                Programs p2\n            JOIN \n                VolunteerEvents ve ON p2.ProgramID = ve.ProgramID\n            WHERE \n                ve.EventDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n            GROUP BY \n                p2.ProgramID, p2.NumVolunteers\n        ) AS Rates\n    );", "raw_model_output": "SELECT \n    p.ProgramID, \n    p.ProgramName, \n    (ve.NumVolunteers::DECIMAL / p.NumVolunteers) AS ParticipationRate\nFROM \n    Programs p\nJOIN \n    VolunteerEvents ve ON p.ProgramID = ve.ProgramID\nWHERE \n    ve.EventDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\nGROUP BY \n    p.ProgramID, p.ProgramName, p.NumVolunteers\nHAVING \n    (ve.NumVolunteers::DECIMAL / p.NumVolunteers) = (\n        SELECT MAX(ParticipationRate) FROM (\n            SELECT \n                (SUM(ve.NumVolunteers)::DECIMAL / p.NumVolunteers) AS ParticipationRate\n            FROM \n                Programs p2\n            JOIN \n                VolunteerEvents ve ON p2.ProgramID = ve.ProgramID\n            WHERE \n                ve.EventDate >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH)\n            GROUP BY \n                p2.ProgramID, p2.NumVolunteers\n        ) AS Rates\n    );", "latency_sec": 1.4400367736816406, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in calculation logic and output. The reference query calculates participation rate as (program-specific event count / total events in last quarter) * 100, while the generated query uses (event volunteer count / program's total volunteers). The generated query also filters for maximum participation rate via HAVING, whereas the reference orders all programs. Additionally, date functions and grouping strategies differ."}
{"example_id": 4021, "sql_complexity": "subqueries", "prompt": "What is the percentage of energy efficiency improvement, per sector, compared to 2015 levels?", "context": "CREATE TABLE energy_efficiency (id INT, sector VARCHAR(50), year INT, efficiency FLOAT); INSERT INTO energy_efficiency (id, sector, year, efficiency) VALUES (1, 'Industry', 2015, 100.0), (2, 'Industry', 2020, 105.0), (3, 'Residential', 2015, 100.0), (4, 'Residential', 2020, 103.0);", "reference_sql": "SELECT sector, (SUM(efficiency) / (SELECT SUM(efficiency) FROM energy_efficiency WHERE year = 2015 AND sector = e.sector) * 100.0) - 100.0 AS improvement FROM energy_efficiency e WHERE year = 2020 GROUP BY sector;", "generated_sql": "SELECT \n    sector,\n    ((MAX(CASE WHEN year = 2020 THEN efficiency END) - \n      MAX(CASE WHEN year = 2015 THEN efficiency END)) / \n     MAX(CASE WHEN year = 2015 THEN efficiency END)) * 100 AS efficiency_improvement_percentage\nFROM \n    energy_efficiency\nGROUP BY \n    sector;", "raw_model_output": "SELECT \n    sector,\n    ((MAX(CASE WHEN year = 2020 THEN efficiency END) - \n      MAX(CASE WHEN year = 2015 THEN efficiency END)) / \n     MAX(CASE WHEN year = 2015 THEN efficiency END)) * 100 AS efficiency_improvement_percentage\nFROM \n    energy_efficiency\nGROUP BY \n    sector;", "latency_sec": 0.7972798347473145, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL calculates the percentage improvement based on the sum of efficiencies for each sector across all years, while the Generated SQL calculates the percentage improvement using individual year values. If there are multiple entries per sector/year, the SUM in the Reference SQL would aggregate values, whereas the Generated SQL's MAX(CASE...) would only consider the maximum value for each year, leading to different results."}
{"example_id": 1551, "sql_complexity": "single join", "prompt": "How many unique donors made donations in the healthcare industry in Q3 2022?", "context": "CREATE TABLE donations (id INT, donor_id INT, amount FLOAT, donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 7, 100, '2022-07-01'); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (2, 8, 200, '2022-09-15'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (7, 'Charlie Davis', 'Healthcare', '2022-07-01'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (8, 'Dana Wilson', 'Healthcare', '2022-09-15');", "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE industry = 'Healthcare' AND donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "generated_sql": "SELECT COUNT(DISTINCT donor_id) AS unique_donors\nFROM donations\nJOIN donors ON donations.donor_id = donors.id\nWHERE donors.industry = 'Healthcare'\n  AND donation_date >= '2022-07-01'\n  AND donation_date < '2022-10-01';", "raw_model_output": "SELECT COUNT(DISTINCT donor_id) AS unique_donors\nFROM donations\nJOIN donors ON donations.donor_id = donors.id\nWHERE donors.industry = 'Healthcare'\n  AND donation_date >= '2022-07-01'\n  AND donation_date < '2022-10-01';", "latency_sec": 0.9275088310241699, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count distinct donor_ids from donations joined with donors where industry is 'Healthcare' and donation dates fall within the same range. The date conditions (BETWEEN '2022-07-01' AND '2022-09-30' vs >= '2022-07-01' and < '2022-10-01') are equivalent, as BETWEEN is inclusive and the second version excludes the end date explicitly. The JOIN conditions and filtering criteria are identical."}
{"example_id": 2592, "sql_complexity": "window functions", "prompt": "What is the third highest account balance for Shariah-compliant finance customers?", "context": "CREATE TABLE shariah_compliant_finance(customer_id INT, account_balance DECIMAL(10, 2)); INSERT INTO shariah_compliant_finance VALUES (1, 5000), (2, 7000), (3, 6000), (4, 8000), (5, 9000);", "reference_sql": "SELECT account_balance FROM (SELECT account_balance, RANK() OVER (ORDER BY account_balance DESC) as rn FROM shariah_compliant_finance) t WHERE rn = 3;", "generated_sql": "SELECT DISTINCT account_balance\nFROM shariah_compliant_finance\nORDER BY account_balance DESC\nLIMIT 1 OFFSET 2;", "raw_model_output": "SELECT DISTINCT account_balance\nFROM shariah_compliant_finance\nORDER BY account_balance DESC\nLIMIT 1 OFFSET 2;", "latency_sec": 0.6396641731262207, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the third highest account balance. The reference query uses RANK() to find the third distinct rank, while the generated query uses ORDER BY with LIMIT/OFFSET. In the provided data, all account balances are unique, so both approaches return the same value (7000)."}
{"example_id": 3795, "sql_complexity": "single join", "prompt": "What is the total quantity of unsold garments for each manufacturer based in 'Italy' or 'Spain'?", "context": "CREATE TABLE manufacturers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE garments (id INT PRIMARY KEY, manufacturer_id INT, quantity_manufactured INT, quantity_sold INT);", "reference_sql": "SELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) as total_unsold_quantity FROM manufacturers m JOIN garments g ON m.id = g.manufacturer_id WHERE m.country IN ('Italy', 'Spain') GROUP BY m.name;", "generated_sql": "SELECT \n    m.name AS manufacturer_name,\n    SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold_garments\nFROM \n    manufacturers m\nJOIN \n    garments g ON m.id = g.manufacturer_id\nWHERE \n    m.country IN ('Italy', 'Spain')\nGROUP BY \n    m.name;", "raw_model_output": "SELECT \n    m.name AS manufacturer_name,\n    SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold_garments\nFROM \n    manufacturers m\nJOIN \n    garments g ON m.id = g.manufacturer_id\nWHERE \n    m.country IN ('Italy', 'Spain')\nGROUP BY \n    m.name;", "latency_sec": 0.9608540534973145, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are semantically equivalent. Both perform an inner join between manufacturers and garments tables on manufacturer_id, filter by countries 'Italy' and 'Spain', group by manufacturer name, and calculate the total unsold quantity as the sum of (quantity_manufactured - quantity_sold). The only differences are in column aliases (total_unsold_quantity vs. total_unsold_garments and manufacturer_name vs. name), which do not affect the result set's content or structure."}
{"example_id": 4138, "sql_complexity": "window functions", "prompt": "How many lifelong learning courses has a student with ID '2' completed, in chronological order?", "context": "CREATE TABLE lifelong_learning (student_id INT, course_id INT, completion_date DATE); INSERT INTO lifelong_learning VALUES (2, 1001, '2015-01-01'), (2, 1002, '2016-01-01');", "reference_sql": "SELECT student_id, course_id, COUNT(course_id) OVER (PARTITION BY student_id ORDER BY completion_date) as completed_courses FROM lifelong_learning WHERE student_id = 2;", "generated_sql": "SELECT COUNT(*) AS courses_completed\nFROM lifelong_learning\nWHERE student_id = 2\nORDER BY completion_date;", "raw_model_output": "SELECT COUNT(*) AS courses_completed\nFROM lifelong_learning\nWHERE student_id = 2\nORDER BY completion_date;", "latency_sec": 0.5705957412719727, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns multiple rows with a running count of courses per student, while the Generated SQL returns a single row with a total count. The first includes course_id and a window function, the second only counts rows without preserving course details."}
{"example_id": 312, "sql_complexity": "aggregation", "prompt": "List the top 3 most represented ethnicities in movies produced in the USA.", "context": "CREATE TABLE movies (title VARCHAR(255), production_country VARCHAR(64), lead_actor_ethnicity VARCHAR(64));", "reference_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count FROM movies WHERE production_country = 'USA' GROUP BY lead_actor_ethnicity ORDER BY count DESC LIMIT 3;", "generated_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY count DESC\nLIMIT 3;", "raw_model_output": "SELECT lead_actor_ethnicity, COUNT(*) AS count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY count DESC\nLIMIT 3;", "latency_sec": 0.5092220306396484, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure, logic, and syntax. Both select the lead_actor_ethnicity and count of movies from the USA, group by ethnicity, order by count descending, and limit to 3 results. The formatting differences (e.g., line breaks) do not affect semantic equivalence."}
{"example_id": 4298, "sql_complexity": "single join", "prompt": "How many users joined the gym in Q1 2023?", "context": "CREATE TABLE memberships (id INT, user_id INT, join_date DATE); INSERT INTO memberships (id, user_id, join_date) VALUES (1, 5, '2023-01-15'), (2, 6, '2023-02-03'), (3, 7, '2023-03-20'), (4, 8, '2022-12-31');", "reference_sql": "SELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "generated_sql": "SELECT COUNT(*) AS num_users_joined_q1_2023\nFROM memberships\nWHERE join_date >= '2023-01-01' AND join_date < '2023-04-01';", "raw_model_output": "SELECT COUNT(*) AS num_users_joined_q1_2023\nFROM memberships\nWHERE join_date >= '2023-01-01' AND join_date < '2023-04-01';", "latency_sec": 0.5738329887390137, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count memberships with join_date in the first quarter of 2023. The Reference SQL uses BETWEEN '2023-01-01' AND '2023-03-31' (inclusive), while the Generated SQL uses >= '2023-01-01' and < '2023-04-01' (which implicitly includes all dates up to 2023-03-31). The sample data shows 3 matching rows in both cases."}
{"example_id": 5211, "sql_complexity": "multiple_joins", "prompt": "What is the average transaction value in the last week, split by product category and customer demographics?", "context": "CREATE TABLE transactions (transaction_id INT, customer_id INT, product_id INT, category_id INT, transaction_date DATE, amount DECIMAL(10,2)); CREATE TABLE customers (customer_id INT, age INT, gender VARCHAR(10), location VARCHAR(255)); CREATE TABLE products (product_id INT, name VARCHAR(255), category_id INT);", "reference_sql": "SELECT c.age, c.gender, p.category_id, AVG(t.amount) as avg_transaction_value FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id INNER JOIN products p ON t.product_id = p.product_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY c.age, c.gender, p.category_id;", "generated_sql": "SELECT \n    p.category_id,\n    c.age,\n    c.gender,\n    AVG(t.amount) AS average_transaction_value\nFROM \n    transactions t\nJOIN \n    products p ON t.product_id = p.product_id\nJOIN \n    customers c ON t.customer_id = c.customer_id\nWHERE \n    t.transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY \n    p.category_id,\n    c.age,\n    c.gender;", "raw_model_output": "SELECT \n    p.category_id,\n    c.age,\n    c.gender,\n    AVG(t.amount) AS average_transaction_value\nFROM \n    transactions t\nJOIN \n    products p ON t.product_id = p.product_id\nJOIN \n    customers c ON t.customer_id = c.customer_id\nWHERE \n    t.transaction_date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY \n    p.category_id,\n    c.age,\n    c.gender;", "latency_sec": 1.3184137344360352, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform identical joins (transactions-customers-products), same date filter (last 7 days), same aggregation (AVG(amount)), and same grouping by age, gender, and category_id. The differences are purely syntactic: column order in SELECT/GROUP BY and minor date expression variations (DATE_SUB vs. CURRENT_DATE - INTERVAL)."}
{"example_id": 382, "sql_complexity": "window functions", "prompt": "What is the average annual precipitation in the past 10 years for each weather station?", "context": "CREATE TABLE WeatherStation (ID INT, Name VARCHAR(100), Location VARCHAR(100), Elevation FLOAT, AnnualPrecipitation FLOAT); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (1, 'Station A', 'Arctic Circle', 100, 450); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (2, 'Station B', 'North Pole', 200, 300);", "reference_sql": "SELECT Name, AVG(AnnualPrecipitation) OVER (PARTITION BY Name ORDER BY Name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AvgAnnualPrecipitation FROM WeatherStation WHERE YEAR(CurrentDate) - YEAR(DateInstalled) BETWEEN 1 AND 10;", "generated_sql": "SELECT \n    Name,\n    AVG(AnnualPrecipitation) AS AvgPrecipitationLast10Years\nFROM \n    WeatherStation\nGROUP BY \n    Name;", "raw_model_output": "SELECT \n    Name,\n    AVG(AnnualPrecipitation) AS AvgPrecipitationLast10Years\nFROM \n    WeatherStation\nGROUP BY \n    Name;", "latency_sec": 0.6152482032775879, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL references a non-existent 'DateInstalled' column in its WHERE clause, making it invalid. Additionally, the Reference SQL uses a window function that returns one row per original row (with repeated averages for each Name), while the Generated SQL groups results by Name, returning one row per Name. The semantic structure and validity differ significantly."}
{"example_id": 2190, "sql_complexity": "single join", "prompt": "What is the total number of humanitarian assistance events by each country in the last 3 years?", "context": "CREATE TABLE Humanitarian_Assistance (id INT, country VARCHAR(50), year INT, events INT); CREATE TABLE Countries (id INT, name VARCHAR(50), region VARCHAR(50));", "reference_sql": "SELECT co.name, SUM(ha.events) FROM Humanitarian_Assistance ha INNER JOIN Countries co ON ha.country = co.name WHERE ha.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) GROUP BY co.name;", "generated_sql": "SELECT \n    c.name AS country,\n    SUM(ha.events) AS total_events\nFROM \n    Humanitarian_Assistance ha\nJOIN \n    Countries c ON ha.country = c.name\nWHERE \n    ha.year >= (SELECT MAX(year) FROM Humanitarian_Assistance) - 2\nGROUP BY \n    c.name;", "raw_model_output": "SELECT \n    c.name AS country,\n    SUM(ha.events) AS total_events\nFROM \n    Humanitarian_Assistance ha\nJOIN \n    Countries c ON ha.country = c.name\nWHERE \n    ha.year >= (SELECT MAX(year) FROM Humanitarian_Assistance) - 2\nGROUP BY \n    c.name;", "latency_sec": 0.986098051071167, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query uses a fixed range based on the current year (YEAR(CURRENT_DATE) - 3 to YEAR(CURRENT_DATE)), while the generated query uses a dynamic range based on the maximum year in the Humanitarian_Assistance table (MAX(year) - 2). These conditions may not align if the latest year in the table differs from the current year, leading to different subsets of data being aggregated."}
{"example_id": 1852, "sql_complexity": "set operations", "prompt": "Compare coal production and employment rates in China and India between 2018 and 2020.", "context": "CREATE TABLE china_coal_production (year INT, production FLOAT); INSERT INTO china_coal_production (year, production) VALUES (2018, 3500.0), (2019, 3600.0), (2020, 3700.0); CREATE TABLE china_employment (year INT, employment FLOAT); INSERT INTO china_employment (year, employment) VALUES (2018, 8000000.0), (2019, 8100000.0), (2020, 8200000.0); CREATE TABLE india_coal_production (year INT, production FLOAT); INSERT INTO india_coal_production (year, production) VALUES (2018, 700.0), (2019, 750.0), (2020, 800.0); CREATE TABLE india_employment (year INT, employment FLOAT); INSERT INTO india_employment (year, employment) VALUES (2018, 1000000.0), (2019, 1050000.0), (2020, 1100000.0);", "reference_sql": "SELECT 'China' AS country, china_coal_production.production, china_employment.employment FROM china_coal_production INNER JOIN china_employment ON china_coal_production.year = china_employment.year WHERE china_coal_production.year BETWEEN 2018 AND 2020 UNION ALL SELECT 'India', india_coal_production.production, india_employment.employment FROM india_coal_production INNER JOIN india_employment ON india_coal_production.year = india_employment.year WHERE india_coal_production.year BETWEEN 2018 AND 2020;", "generated_sql": "SELECT \n    c.year,\n    c.production AS china_coal_production,\n    c.employment AS china_employment,\n    i.production AS india_coal_production,\n    i.employment AS india_employment\nFROM \n    china_coal_production c\nJOIN \n    china_employment ce ON c.year = ce.year\nJOIN \n    india_coal_production i ON c.year = i.year\nJOIN \n    india_employment ie ON c.year = ie.year\nWHERE \n    c.year BETWEEN 2018 AND 2020\nORDER BY \n    c.year;", "raw_model_output": "SELECT \n    c.year,\n    c.production AS china_coal_production,\n    c.employment AS china_employment,\n    i.production AS india_coal_production,\n    i.employment AS india_employment\nFROM \n    china_coal_production c\nJOIN \n    china_employment ce ON c.year = ce.year\nJOIN \n    india_coal_production i ON c.year = i.year\nJOIN \n    india_employment ie ON c.year = ie.year\nWHERE \n    c.year BETWEEN 2018 AND 2020\nORDER BY \n    c.year;", "latency_sec": 1.553333044052124, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns two rows per year (China and India) with columns 'country', 'production', 'employment', while the Generated SQL returns one row per year with separate columns for China and India's production/employment. The structure, column names, and row count differ significantly."}
{"example_id": 2535, "sql_complexity": "subqueries", "prompt": "What is the maximum safety rating for vehicles in the vehiclesafety schema?", "context": "CREATE TABLE VehicleSafety (id INT, vehicle_id INT, safetyrating INT, PRIMARY KEY (id)); CREATE TABLE Vehicles (id INT, make VARCHAR(50), model VARCHAR(50), PRIMARY KEY (id)); CREATE TABLE LuxuryVehicles (id INT, vehicle_id INT, PRIMARY KEY (id), FOREIGN KEY (vehicle_id) REFERENCES Vehicles(id));", "reference_sql": "SELECT MAX(safetyrating) FROM vehicleSafety JOIN Vehicles ON vehicleSafety.vehicle_id = Vehicles.id WHERE EXISTS (SELECT * FROM LuxuryVehicles WHERE Vehicles.id = LuxuryVehicles.vehicle_id);", "generated_sql": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "raw_model_output": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "latency_sec": 0.4758880138397217, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters vehicles that exist in LuxuryVehicles via the EXISTS clause, while the Generated SQL considers all vehicles in VehicleSafety without any restrictions. The MAX(safetyrating) could differ if there are non-luxury vehicles with higher safety ratings than luxury vehicles."}
{"example_id": 2140, "sql_complexity": "aggregation", "prompt": "What was the total amount of minerals extracted in the 'north' region for each month in 2020?", "context": "CREATE TABLE extraction(id INT, location TEXT, month INT, year INT, minerals_extracted FLOAT);INSERT INTO extraction(id, location, month, year, minerals_extracted) VALUES (1, 'north', 1, 2020, 1500), (2, 'north', 2, 2020, 1800), (3, 'south', 1, 2020, 1200);", "reference_sql": "SELECT month, SUM(minerals_extracted) FROM extraction WHERE location = 'north' AND year = 2020 GROUP BY month;", "generated_sql": "SELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month;", "raw_model_output": "SELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month;", "latency_sec": 0.6014060974121094, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (month and aggregated minerals_extracted), apply identical WHERE conditions (location = 'north' and year = 2020), and group by the same column (month). The only difference is the aliasing of the aggregated column (total_minerals_extracted vs. no alias), which does not affect the semantic result set's data content."}
{"example_id": 4779, "sql_complexity": "window functions", "prompt": "What is the average CO2 emission for the top 3 highest emitting countries since 2015?", "context": "CREATE TABLE emissions (country VARCHAR(50), year INT, co2_emission INT); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2015, 5373978000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2015, 10498600000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2015, 2633830000); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2016, 5518004000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2016, 10813000000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2016, 2799280000);", "reference_sql": "SELECT AVG(co2_emission) as avg_emission FROM (SELECT country, year, co2_emission, ROW_NUMBER() OVER (ORDER BY co2_emission DESC) as rn FROM emissions WHERE year >= 2015) t WHERE rn <= 3 GROUP BY country;", "generated_sql": "SELECT AVG(co2_emission) AS average_emission\nFROM (\n    SELECT country, SUM(co2_emission) AS total_emission\n    FROM emissions\n    WHERE year >= 2015\n    GROUP BY country\n    ORDER BY total_emission DESC\n    LIMIT 3\n) AS top_countries;", "raw_model_output": "SELECT AVG(co2_emission) AS average_emission\nFROM (\n    SELECT country, SUM(co2_emission) AS total_emission\n    FROM emissions\n    WHERE year >= 2015\n    GROUP BY country\n    ORDER BY total_emission DESC\n    LIMIT 3\n) AS top_countries;", "latency_sec": 0.7009131908416748, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the average of the top 3 highest CO2 emissions (per row) grouped by country, while the Generated SQL sums emissions per country first, then averages the top 3 countries by total emissions. They aggregate data differently: the first focuses on individual row rankings, the second on country-level totals."}
{"example_id": 1015, "sql_complexity": "subqueries", "prompt": "List the top 3 most expensive eco-friendly products in Europe and their suppliers.", "context": "CREATE TABLE Suppliers (supplierID INT, supplierName VARCHAR(50), country VARCHAR(50)); CREATE TABLE Products (productID INT, productName VARCHAR(50), price DECIMAL(10,2), ecoFriendly BOOLEAN, supplierID INT);", "reference_sql": "SELECT P.productName, P.price, S.supplierName FROM (SELECT * FROM Products WHERE ecoFriendly = TRUE ORDER BY price DESC LIMIT 3) P JOIN Suppliers S ON P.supplierID = S.supplierID;", "generated_sql": "SELECT p.productName, p.price, s.supplierName\nFROM Products p\nJOIN Suppliers s ON p.supplierID = s.supplierID\nWHERE p.ecoFriendly = TRUE AND s.country = 'Europe'\nORDER BY p.price DESC\nLIMIT 3;", "raw_model_output": "SELECT p.productName, p.price, s.supplierName\nFROM Products p\nJOIN Suppliers s ON p.supplierID = s.supplierID\nWHERE p.ecoFriendly = TRUE AND s.country = 'Europe'\nORDER BY p.price DESC\nLIMIT 3;", "latency_sec": 0.9418120384216309, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in filtering conditions. The Reference SQL filters only on ecoFriendly = TRUE, while the Generated SQL adds an additional WHERE condition (s.country = 'Europe'). This extra filter in the Generated SQL will exclude suppliers not from Europe, producing different results."}
{"example_id": 3715, "sql_complexity": "aggregation", "prompt": "What is the average age of engines still in service for each engine type?", "context": "CREATE TABLE Engine (id INT, aircraft_id INT, engine_type VARCHAR(255), hours_since_last_service INT, manufacture_year INT); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (1, 1, 'GE90-115B', 500, 2000); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (2, 2, 'CFM56-5B', 1000, 1995); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (3, 1, 'GE90-115B', 700, 2002);", "reference_sql": "SELECT engine_type, AVG(YEAR(CURRENT_DATE) - manufacture_year) as avg_age FROM Engine GROUP BY engine_type;", "generated_sql": "SELECT \n    engine_type,\n    AVG(CURRENT_YEAR - manufacture_year) AS average_age_in_years\nFROM \n    Engine\nGROUP BY \n    engine_type;", "raw_model_output": "SELECT \n    engine_type,\n    AVG(CURRENT_YEAR - manufacture_year) AS average_age_in_years\nFROM \n    Engine\nGROUP BY \n    engine_type;", "latency_sec": 0.57942795753479, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of engines by subtracting the manufacture_year from the current year, grouped by engine_type. The Reference SQL uses YEAR(CURRENT_DATE) to get the current year, while the Generated SQL uses CURRENT_YEAR. Assuming CURRENT_YEAR represents the same value as YEAR(CURRENT_DATE), the calculations are equivalent. The column alias difference (avg_age vs average_age_in_years) does not affect semantic equivalence."}
{"example_id": 1957, "sql_complexity": "set operations", "prompt": "What is the average temperature recorded for the 'polar_bear' species in the 'Arctic_Animals' table compared to the 'penguin' species in the 'Antarctic_Animals' table?", "context": "CREATE TABLE Arctic_Animals (species TEXT, avg_temp FLOAT); CREATE TABLE Antarctic_Animals (species TEXT, avg_temp FLOAT);", "reference_sql": "SELECT AVG(Arctic_Animals.avg_temp) FROM Arctic_Animals WHERE Arctic_Animals.species = 'polar_bear' INTERSECT SELECT AVG(Antarctic_Animals.avg_temp) FROM Antarctic_Animals WHERE Antarctic_Animals.species = 'penguin'", "generated_sql": "SELECT \n  (SELECT AVG(avg_temp) FROM Arctic_Animals WHERE species = 'polar_bear') AS Arctic_Polar_Bear_Temp,\n  (SELECT AVG(avg_temp) FROM Antarctic_Animals WHERE species = 'penguin') AS Antarctic_Penguin_Temp;", "raw_model_output": "SELECT \n  (SELECT AVG(avg_temp) FROM Arctic_Animals WHERE species = 'polar_bear') AS Arctic_Polar_Bear_Temp,\n  (SELECT AVG(avg_temp) FROM Antarctic_Animals WHERE species = 'penguin') AS Antarctic_Penguin_Temp;", "latency_sec": 0.8865489959716797, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses INTERSECT to find common rows between two aggregated values, returning a result only if the averages are equal. The Generated SQL returns both averages as separate columns in a single row, without comparing them. The first query's result depends on equality between the two averages, while the second query explicitly retrieves both values independently."}
{"example_id": 1311, "sql_complexity": "basic SQL", "prompt": "What is the total number of veteran job applications in Texas in the last year?", "context": "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", "reference_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);", "generated_sql": "SELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas' AND application_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);", "raw_model_output": "SELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas' AND application_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);", "latency_sec": 0.9321348667144775, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count records where state is 'Texas' and application_date is within the last year. The only differences are the use of CURRENT_DATE vs. CURDATE() (which both return the current date in MySQL) and an alias in the generated query (which doesn't affect the result). The semantic logic remains identical."}
{"example_id": 2997, "sql_complexity": "window functions", "prompt": "What is the earliest capture time for each satellite image in the 'satellite_images' table?", "context": "CREATE TABLE satellite_images (image_id INT, image_url TEXT, capture_time TIMESTAMP); INSERT INTO satellite_images (image_id, image_url, capture_time) VALUES (1, 'image1.jpg', '2022-01-01 10:00:00'), (2, 'image2.jpg', '2021-05-01 10:00:00');", "reference_sql": "SELECT image_id, MIN(capture_time) OVER (PARTITION BY image_id) FROM satellite_images;", "generated_sql": "SELECT image_id, capture_time AS earliest_capture_time\nFROM satellite_images\nWHERE capture_time = (\n    SELECT MIN(capture_time)\n    FROM satellite_images AS si2\n    WHERE si2.image_id = satellite_images.image_id\n);", "raw_model_output": "SELECT image_id, capture_time AS earliest_capture_time\nFROM satellite_images\nWHERE capture_time = (\n    SELECT MIN(capture_time)\n    FROM satellite_images AS si2\n    WHERE si2.image_id = satellite_images.image_id\n);", "latency_sec": 1.1146140098571777, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns all rows with the minimum capture_time per image_id (which equals capture_time if image_id is unique). The Generated SQL filters to only include rows where capture_time equals the minimum for their image_id. If there are multiple rows with the same image_id, the Generated SQL would return fewer rows (only the earliest capture_time per image_id) compared to the Reference SQL, which returns all rows with the min value. Thus, they are not semantically equivalent in general."}
{"example_id": 3743, "sql_complexity": "aggregation", "prompt": "What is the maximum budget spent on peacekeeping operations by each department?", "context": "CREATE TABLE DepartmentPeacekeeping (id INT, department VARCHAR(50), budget INT);", "reference_sql": "SELECT department, MAX(budget) FROM DepartmentPeacekeeping GROUP BY department;", "generated_sql": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "raw_model_output": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "latency_sec": 0.7851471900939941, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by 'department' and calculate the maximum 'budget' for each group. The generated query adds an alias 'max_budget' to the MAX(budget) column, but this does not affect the semantic result set structure or data. The core logic of grouping and aggregation remains identical."}
{"example_id": 4664, "sql_complexity": "multiple_joins", "prompt": "Calculate the total number of volunteer hours contributed by volunteers from 'California' in 'Health' projects in 2021.", "context": "CREATE TABLE volunteers (volunteer_id INT, name VARCHAR(255), state VARCHAR(255));", "reference_sql": "SELECT SUM(vh.hours) as total_hours FROM volunteer_projects vp JOIN volunteer_hours vh ON vp.project_id = vh.project_id JOIN volunteers vol ON vh.volunteer_id = vol.volunteer_id WHERE vp.cause = 'Health' AND vol.state = 'California' AND vh.volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';", "generated_sql": "SELECT SUM(hours) AS total_hours\nFROM volunteer_hours vh\nJOIN volunteers v ON vh.volunteer_id = v.volunteer_id\nJOIN projects p ON vh.project_id = p.project_id\nWHERE v.state = 'California'\n  AND p.category = 'Health'\n  AND YEAR(vh.date) = 2021;", "raw_model_output": "SELECT SUM(hours) AS total_hours\nFROM volunteer_hours vh\nJOIN volunteers v ON vh.volunteer_id = v.volunteer_id\nJOIN projects p ON vh.project_id = p.project_id\nWHERE v.state = 'California'\n  AND p.category = 'Health'\n  AND YEAR(vh.date) = 2021;", "latency_sec": 0.6252028942108154, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in key conditions and column names. The Reference SQL uses 'cause' in volunteer_projects and 'volunteer_date' in volunteer_hours, while the Generated SQL uses 'category' in projects and 'date'. These columns may not correspond, and 'BETWEEN' vs 'YEAR()' could yield different results if dates have time components. Additionally, the tables joined (volunteer_projects vs projects) may not be equivalent."}
{"example_id": 251, "sql_complexity": "set operations", "prompt": "Compare the number of economic diversification projects in two regions, one in Europe and one in Oceania, by showing the project type and the number of projects in each region.", "context": "CREATE TABLE economic_diversification (region VARCHAR(50), project_type VARCHAR(50), project_start_date DATE);", "reference_sql": "SELECT 'Europe' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Europe' UNION ALL SELECT 'Oceania' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Oceania';", "generated_sql": "SELECT \n    project_type,\n    COUNT(CASE WHEN region = 'Europe' THEN 1 END) AS europe_projects,\n    COUNT(CASE WHEN region = 'Oceania' THEN 1 END) AS oceania_projects\nFROM \n    economic_diversification\nWHERE \n    region IN ('Europe', 'Oceania')\nGROUP BY \n    project_type;", "raw_model_output": "SELECT \n    project_type,\n    COUNT(CASE WHEN region = 'Europe' THEN 1 END) AS europe_projects,\n    COUNT(CASE WHEN region = 'Oceania' THEN 1 END) AS oceania_projects\nFROM \n    economic_diversification\nWHERE \n    region IN ('Europe', 'Oceania')\nGROUP BY \n    project_type;", "latency_sec": 8.144499063491821, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries produce different result structures. The Reference SQL returns two rows per project_type (one for Europe and one for Oceania) with columns (region, project_type, project_count), while the Generated SQL returns one row per project_type with columns (project_type, europe_projects, oceania_projects). The semantic equivalence depends on identical output structure, which is not the case here."}
{"example_id": 610, "sql_complexity": "subqueries", "prompt": "What is the percentage of community development projects completed in 'Caribbean' in 2020?", "context": "CREATE TABLE community_projects (project_id INT, project_name TEXT, location TEXT, completion_year INT); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (1, 'Community Center', 'Southern Region, Caribbean', 2020); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (2, 'Park Renovation', 'Northern Region, Caribbean', 2019); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (3, 'Library Construction', 'Caribbean', 2020);", "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects WHERE location = 'Caribbean')) FROM community_projects WHERE completion_year = 2020 AND location = 'Caribbean';", "generated_sql": "SELECT \n  (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM community_projects) AS percentage_completed_in_caribbean_2020\nFROM \n  community_projects\nWHERE \n  location LIKE '%Caribbean%' AND\n  completion_year = 2020;", "raw_model_output": "SELECT \n  (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM community_projects) AS percentage_completed_in_caribbean_2020\nFROM \n  community_projects\nWHERE \n  location LIKE '%Caribbean%' AND\n  completion_year = 2020;", "latency_sec": 0.6617398262023926, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the percentage of Caribbean projects completed in 2020 relative to all Caribbean projects (denominator = total Caribbean projects). The Generated SQL calculates the percentage of projects in the Caribbean (using LIKE '%Caribbean%') completed in 2020 relative to all projects (denominator = total projects). The denominators differ (Caribbean-specific vs. total projects) and the location filtering logic differs (exact match vs. partial match), leading to different results."}
{"example_id": 421, "sql_complexity": "set operations", "prompt": "What is the combined landfill capacity for 'City A' and 'City B'?", "context": "CREATE TABLE landfill_capacity (city VARCHAR(255), capacity INT); INSERT INTO landfill_capacity (city, capacity) VALUES ('City A', 500000), ('City B', 600000);", "reference_sql": "SELECT SUM(capacity) FROM (SELECT capacity FROM landfill_capacity WHERE city = 'City A' UNION ALL SELECT capacity FROM landfill_capacity WHERE city = 'City B') AS combined_capacity;", "generated_sql": "SELECT SUM(capacity) AS total_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "raw_model_output": "SELECT SUM(capacity) AS total_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "latency_sec": 0.4683237075805664, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of capacities for 'City A' and 'City B'. The reference query uses a subquery with UNION ALL to combine the capacities before summing, while the generated query directly filters and sums the capacities. Since both approaches aggregate the same set of values, they produce identical results."}
{"example_id": 880, "sql_complexity": "aggregation", "prompt": "Show veteran employment statistics for each state in the 'veteran_employment' table", "context": "CREATE TABLE veteran_employment (employee_id INT, state VARCHAR(2), job_title VARCHAR(50), employment_date DATE);", "reference_sql": "SELECT state, COUNT(*) as veteran_employees FROM veteran_employment WHERE state IN ('CA', 'NY', 'TX', 'FL', 'PA') GROUP BY state;", "generated_sql": "SELECT \n    state,\n    COUNT(*) AS total_veterans,\n    COUNT(DISTINCT employee_id) AS unique_veterans,\n    AVG(CASE WHEN employment_date IS NOT NULL THEN 1 ELSE 0 END) * 100 AS employment_rate_percentage\nFROM \n    veteran_employment\nGROUP BY \n    state;", "raw_model_output": "SELECT \n    state,\n    COUNT(*) AS total_veterans,\n    COUNT(DISTINCT employee_id) AS unique_veterans,\n    AVG(CASE WHEN employment_date IS NOT NULL THEN 1 ELSE 0 END) * 100 AS employment_rate_percentage\nFROM \n    veteran_employment\nGROUP BY \n    state;", "latency_sec": 0.7845418453216553, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL counts all employees in specific states, while the Generated SQL includes additional columns (unique_veterans, employment_rate_percentage) and lacks the state filter. The Generated SQL also calculates an employment rate percentage, which the Reference SQL does not. These differences in structure and logic make their results distinct."}
{"example_id": 454, "sql_complexity": "single join", "prompt": "Which excavation sites have more than 10 artifacts?", "context": "CREATE TABLE ExcavationSite (SiteID INT, SiteName VARCHAR(50)); INSERT INTO ExcavationSite (SiteID, SiteName) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE Artifact (ArtifactID INT, SiteID INT, ObjectType VARCHAR(50)); INSERT INTO Artifact (ArtifactID, SiteID, ObjectType) VALUES (1, 1, 'Pottery'), (2, 1, 'Tool'), (3, 2, 'Statue'), (4, 2, 'Bead'), (5, 3, 'Bead'), (6, 3, 'Bead'), (7, 3, 'Bead'), (8, 3, 'Bead'), (9, 3, 'Bead'), (10, 3, 'Bead'), (11, 3, 'Bead');", "reference_sql": "SELECT e.SiteName FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName HAVING COUNT(a.ArtifactID) > 10;", "generated_sql": "SELECT SiteID, SiteName\nFROM ExcavationSite\nWHERE SiteID IN (\n    SELECT SiteID\n    FROM Artifact\n    GROUP BY SiteID\n    HAVING COUNT(*) > 10\n);", "raw_model_output": "SELECT SiteID, SiteName\nFROM ExcavationSite\nWHERE SiteID IN (\n    SELECT SiteID\n    FROM Artifact\n    GROUP BY SiteID\n    HAVING COUNT(*) > 10\n);", "latency_sec": 0.6269888877868652, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL groups by SiteName (which may not be unique) and counts artifacts, potentially combining multiple sites with the same name. The Generated SQL groups by SiteID (unique) and filters based on artifact count per site. If multiple sites shared the same SiteName, the Reference SQL would aggregate their artifacts together, while the Generated SQL would treat them separately. Additionally, the Reference SQL returns only SiteName, whereas the Generated SQL returns SiteID and SiteName."}
{"example_id": 1086, "sql_complexity": "aggregation", "prompt": "What is the total CO2 emission for each equipment type, excluding equipment that is older than 8 years?", "context": "CREATE TABLE EmissionData (EquipmentID INT, EquipmentType VARCHAR(50), CO2Emission INT, Age INT); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (1, 'Excavator', 50, 8); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (2, 'Haul Truck', 70, 7); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (3, 'Shovel', 30, 6); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (4, 'Drilling Rig', 40, 3);", "reference_sql": "SELECT EquipmentType, SUM(CO2Emission) as TotalCO2Emission FROM EmissionData WHERE Age <= 8 GROUP BY EquipmentType;", "generated_sql": "SELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "raw_model_output": "SELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "latency_sec": 1.4332869052886963, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure, column aliases, filtering conditions, and grouping logic. Both select EquipmentType and sum CO2Emission where Age <= 8, grouped by EquipmentType. The formatting differences (e.g., line breaks, capitalization) do not affect semantic equivalence."}
{"example_id": 3455, "sql_complexity": "basic SQL", "prompt": "What are the names of all innovation projects in the 'rural_infrastructure' table, excluding those with a budget over 50000?", "context": "CREATE TABLE rural_infrastructure (name VARCHAR(255), budget INT); INSERT INTO rural_infrastructure (name, budget) VALUES ('Dam Construction', 40000), ('Well Digging', 30000), ('Irrigation System', 70000);", "reference_sql": "SELECT name FROM rural_infrastructure WHERE budget <= 50000;", "generated_sql": "SELECT name\nFROM rural_infrastructure\nWHERE name LIKE '%innovation%'\n  AND budget <= 50000;", "raw_model_output": "SELECT name\nFROM rural_infrastructure\nWHERE name LIKE '%innovation%'\n  AND budget <= 50000;", "latency_sec": 0.4980449676513672, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query selects all projects with a budget <= 50000, which includes 'Dam Construction' (40000) and 'Well Digging' (30000). The generated query adds an extra condition WHERE name LIKE '%innovation%', which matches no rows in the sample data. Thus, the generated query returns an empty result set while the reference query returns two rows."}
{"example_id": 3936, "sql_complexity": "window functions", "prompt": "What is the total investment per client for each investment type?", "context": "CREATE TABLE clients (client_id INT, name TEXT, investment_type TEXT, investment FLOAT); INSERT INTO clients (client_id, name, investment_type, investment) VALUES (1, 'John Doe', 'Stocks', 3000.00), (1, 'John Doe', 'Bonds', 2000.00), (2, 'Jane Smith', 'Stocks', 5000.00);", "reference_sql": "SELECT client_id, name, investment_type, SUM(investment) OVER (PARTITION BY client_id, investment_type ORDER BY client_id) as total_investment FROM clients;", "generated_sql": "SELECT \n    client_id, \n    investment_type, \n    SUM(investment) AS total_investment\nFROM \n    clients\nGROUP BY \n    client_id, \n    investment_type;", "raw_model_output": "SELECT \n    client_id, \n    investment_type, \n    SUM(investment) AS total_investment\nFROM \n    clients\nGROUP BY \n    client_id, \n    investment_type;", "latency_sec": 0.6694071292877197, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses a window function to retain all rows while adding a running total, includes the 'name' column, and partitions by client_id and investment_type. The Generated SQL aggregates rows using GROUP BY, omitting the 'name' column and collapsing multiple rows into one per client_id/investment_type combination. The result sets differ in structure (columns) and behavior (aggregation vs. windowing)."}
{"example_id": 1838, "sql_complexity": "window functions", "prompt": "What are the top 3 species with the most sightings across all arctic research stations?", "context": "CREATE TABLE research_station (id INT, name TEXT); INSERT INTO research_station (id, name) VALUES (1, 'Station A'); INSERT INTO research_station (id, name) VALUES (2, 'Station B'); CREATE TABLE species_observations (station_id INT, species_name TEXT, sightings INT); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 1', 10); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 2', 5); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 1', 8); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 3', 15);", "reference_sql": "SELECT species_name, SUM(sightings) as total_sightings, RANK() OVER (ORDER BY SUM(sightings) DESC) as rank FROM species_observations GROUP BY species_name HAVING rank <= 3;", "generated_sql": "SELECT species_name, SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nLIMIT 3;", "raw_model_output": "SELECT species_name, SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nLIMIT 3;", "latency_sec": 0.9592509269714355, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a 'rank' column in the output, while the Generated SQL does not. Additionally, the Reference SQL uses a HAVING clause with RANK(), which may not be valid in standard SQL (analytic functions cannot be used in HAVING). Even if valid, the result sets differ in column structure, making them non-equivalent."}
{"example_id": 3091, "sql_complexity": "single join", "prompt": "Find the number of hybrid vehicles sold in the US, Germany, and Japan.", "context": "CREATE TABLE vehicle_sales (sale_id INT, vehicle_id INT, country VARCHAR(20), quantity INT); CREATE TABLE vehicles (vehicle_id INT, model VARCHAR(20), manufacture VARCHAR(20), vehicle_type VARCHAR(20));", "reference_sql": "SELECT SUM(vs.quantity) FROM vehicle_sales vs JOIN vehicles v ON vs.vehicle_id = v.vehicle_id WHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "generated_sql": "SELECT country, SUM(quantity) AS total_hybrid_vehicles_sold\nFROM vehicle_sales\nWHERE vehicle_id IN (\n    SELECT vehicle_id FROM vehicles WHERE vehicle_type = 'hybrid'\n)\n  AND country IN ('US', 'Germany', 'Japan')\nGROUP BY country;", "raw_model_output": "SELECT country, SUM(quantity) AS total_hybrid_vehicles_sold\nFROM vehicle_sales\nWHERE vehicle_id IN (\n    SELECT vehicle_id FROM vehicles WHERE vehicle_type = 'hybrid'\n)\n  AND country IN ('US', 'Germany', 'Japan')\nGROUP BY country;", "latency_sec": 1.1936280727386475, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns a single total sum of hybrid vehicle sales across all specified countries, while the generated query groups results by country, producing separate totals for each. The output structure and aggregation scope differ, making them non-equivalent."}
{"example_id": 2399, "sql_complexity": "set operations", "prompt": "What is the average duration of criminal trials for Indigenous defendants compared to non-Indigenous defendants in Canada and New Zealand?", "context": "CREATE TABLE canada_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO canada_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 60), (2, 'Non-Indigenous', 45);CREATE TABLE nz_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO nz_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 70), (2, 'Non-Indigenous', 50);", "reference_sql": "SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Non-Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Non-Indigenous';", "generated_sql": "SELECT \n    'Canada' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM canada_criminal_trials\n\nUNION ALL\n\nSELECT \n    'New Zealand' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM nz_criminal_trials;", "raw_model_output": "SELECT \n    'Canada' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM canada_criminal_trials\n\nUNION ALL\n\nSELECT \n    'New Zealand' AS country,\n    AVG(CASE WHEN defendant_type = 'Indigenous' THEN days_to_completion END) AS avg_days_indigenous,\n    AVG(CASE WHEN defendant_type = 'Non-Indigenous' THEN days_to_completion END) AS avg_days_non_indigenous\nFROM nz_criminal_trials;", "latency_sec": 1.2288827896118164, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries produce different result structures. The Reference SQL returns four rows with a single average value each, while the Generated SQL returns two rows with two average values per row. Although the underlying data and calculations are the same, the output format differs, making them structurally and semantically non-equivalent."}
{"example_id": 2972, "sql_complexity": "set operations", "prompt": "How many indigenous communities are in the Arctic Research Station 13 and 14?", "context": "CREATE TABLE Arctic_Research_Station_13 (id INT, community TEXT); CREATE TABLE Arctic_Research_Station_14 (id INT, community TEXT);", "reference_sql": "SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13; SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14; SELECT COUNT(DISTINCT community) FROM (SELECT * FROM Arctic_Research_Station_13 UNION ALL SELECT * FROM Arctic_Research_Station_14) AS Arctic_Communities;", "generated_sql": "SELECT \n    (SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13) +\n    (SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14) AS total_indigenous_communities;", "raw_model_output": "SELECT \n    (SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13) +\n    (SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14) AS total_indigenous_communities;", "latency_sec": 0.6095728874206543, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL computes three separate counts: distinct communities in each table individually and a combined count across both tables. The Generated SQL sums the individual counts from each table, which does not account for overlapping communities between the tables. This leads to incorrect results when there are duplicate communities in both tables, making the queries semantically different."}
{"example_id": 5576, "sql_complexity": "window functions", "prompt": "Who are the top 5 users with the most followers, and what is their location?", "context": "CREATE TABLE user_data (user_id INT, name VARCHAR(50), followers INT, location VARCHAR(50)); INSERT INTO user_data (user_id, name, followers, location) VALUES (1, 'Alice', 10000, 'New York'), (2, 'Bob', 15000, 'California'), (3, 'Charlie', 12000, 'Texas'), (4, 'David', 8000, 'Florida'), (5, 'Eve', 9000, 'Illinois');", "reference_sql": "SELECT name, location FROM (SELECT name, location, ROW_NUMBER() OVER (ORDER BY followers DESC) AS rank FROM user_data) AS user_ranks WHERE rank <= 5;", "generated_sql": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "raw_model_output": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nLIMIT 5;", "latency_sec": 0.49097394943237305, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the top 5 users by followers in descending order. The Reference SQL uses ROW_NUMBER() to assign ranks and filters where rank <= 5, while the Generated SQL directly uses ORDER BY with LIMIT 5. Since the data has unique follower counts, both approaches yield identical results. The subquery in the Reference SQL is unnecessary but does not alter the outcome in this specific case."}
{"example_id": 1560, "sql_complexity": "basic SQL", "prompt": "What is the average media literacy score for users in the 'Young Adult' age group who have completed at least one disinformation detection course?", "context": "CREATE TABLE users (id INT, age VARCHAR(20), media_literacy_score INT, courses_completed INT);", "reference_sql": "SELECT AVG(media_literacy_score) FROM users WHERE age = 'Young Adult' AND courses_completed > 0;", "generated_sql": "SELECT AVG(media_literacy_score) AS average_score\nFROM users\nWHERE age = 'Young Adult' AND courses_completed >= 1;", "raw_model_output": "SELECT AVG(media_literacy_score) AS average_score\nFROM users\nWHERE age = 'Young Adult' AND courses_completed >= 1;", "latency_sec": 0.566601037979126, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The conditions 'courses_completed > 0' and 'courses_completed >= 1' are mathematically equivalent for integer values. Both filter rows where courses_completed is a positive integer. The generated query adds an alias 'average_score' which does not affect the computed value."}
{"example_id": 1201, "sql_complexity": "basic SQL", "prompt": "What is the maximum energy efficiency rating of hydroelectric dams in Canada?", "context": "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "generated_sql": "SELECT MAX(energy_efficiency_rating) AS max_efficiency_rating\nFROM hydro_dams\nWHERE country = 'Canada';", "raw_model_output": "SELECT MAX(energy_efficiency_rating) AS max_efficiency_rating\nFROM hydro_dams\nWHERE country = 'Canada';", "latency_sec": 0.5560970306396484, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum energy_efficiency_rating from hydro_dams where country is 'Canada'. The generated query adds an alias (max_efficiency_rating) for the computed column, but this does not affect the semantic result - the scalar value returned remains the same."}
{"example_id": 4243, "sql_complexity": "single join", "prompt": "How many orders were placed by new and returning customers in each month of the year 2021?'", "context": "CREATE TABLE customer (id INT, first_order_date DATE, last_order_date DATE);", "reference_sql": "INSERT INTO customer (id, first_order_date, last_order_date) SELECT customer_id, MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id; SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, CASE WHEN DATEDIFF(last_order_date, first_order_date) > 30 THEN 'returning' ELSE 'new' END AS customer_type, COUNT(DISTINCT id) AS num_orders FROM orders JOIN customer ON orders.customer_id = customer.id WHERE YEAR(order_date) = 2021 GROUP BY year, month, customer_type;", "generated_sql": "SELECT\n    DATE_TRUNC('month', first_order_date) AS month,\n    COUNT(*) AS total_orders\nFROM\n    customer\nWHERE\n    EXTRACT(YEAR FROM first_order_date) = 2021\nGROUP BY\n    month\nUNION ALL\nSELECT\n    DATE_TRUNC('month', last_order_date) AS month,\n    COUNT(*) AS total_orders\nFROM\n    customer\nWHERE\n    EXTRACT(YEAR FROM last_order_date) = 2021;", "raw_model_output": "```sql\nSELECT\n    DATE_TRUNC('month', first_order_date) AS month,\n    COUNT(*) AS total_orders\nFROM\n    customer\nWHERE\n    EXTRACT(YEAR FROM first_order_date) = 2021\nGROUP BY\n    month\nUNION ALL\nSELECT\n    DATE_TRUNC('month', last_order_date) AS month,\n    COUNT(*) AS total_orders\nFROM\n    customer\nWHERE\n    EXTRACT(YEAR FROM last_order_date) = 2021;\n```", "latency_sec": 0.9092588424682617, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries have different purposes and structures. The Reference SQL calculates order counts per month and customer type (new/returning) by joining orders and customer tables, while the Generated SQL counts customers based on first/last order dates in 2021 without involving the orders table. They differ in tables used, columns selected, and business logic (order counts vs. customer counts)."}
{"example_id": 2321, "sql_complexity": "subqueries", "prompt": "What are the names and types of vessels used in research expeditions in the regions with the lowest ocean acidification levels?", "context": "CREATE TABLE ocean_acidification (id INT PRIMARY KEY, region VARCHAR(255), year INT, acidification_level INT); INSERT INTO ocean_acidification (id, region, year, acidification_level) VALUES (1, 'Arctic Ocean', 2018, 20), (2, 'Southern Ocean', 2019, 22); CREATE TABLE expedition_vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), region VARCHAR(255)); INSERT INTO expedition_vessels (id, name, type, region) VALUES (1, 'Sea Researcher', 'Research Vessel', 'Arctic Ocean');", "reference_sql": "SELECT v.name, v.type FROM expedition_vessels v INNER JOIN ocean_acidification oa ON v.region = oa.region WHERE oa.acidification_level = (SELECT MIN(acidification_level) FROM ocean_acidification);", "generated_sql": "SELECT name, type\nFROM expedition_vessels\nWHERE region IN (\n    SELECT region\n    FROM ocean_acidification\n    WHERE acidification_level = (\n        SELECT MIN(acidification_level)\n        FROM ocean_acidification\n    )\n)\nAND type = 'Research Vessel';", "raw_model_output": "SELECT name, type\nFROM expedition_vessels\nWHERE region IN (\n    SELECT region\n    FROM ocean_acidification\n    WHERE acidification_level = (\n        SELECT MIN(acidification_level)\n        FROM ocean_acidification\n    )\n)\nAND type = 'Research Vessel';", "latency_sec": 0.7928719520568848, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL does not filter by vessel type, while the Generated SQL includes an explicit AND type = 'Research Vessel' condition. This makes the Generated SQL more restrictive, potentially excluding rows that the Reference SQL would include."}
{"example_id": 4349, "sql_complexity": "multiple_joins", "prompt": "Show the research grants awarded to professors in the Computer Science department.", "context": "CREATE TABLE departments (id INT, name VARCHAR(50)); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'), (2, 'Mathematics'); CREATE TABLE professors (id INT, name VARCHAR(50), department_id INT); INSERT INTO professors (id, name, department_id) VALUES (1, 'John Smith', 1), (2, 'Jane Doe', 2); CREATE TABLE grants (id INT, professor_id INT, year INT, amount FLOAT); INSERT INTO grants (id, professor_id, year, amount) VALUES (1, 1, 2021, 5000.0), (2, 2, 2020, 7000.0);", "reference_sql": "SELECT professors.name, grants.amount FROM professors INNER JOIN grants ON professors.id = grants.professor_id INNER JOIN departments ON professors.department_id = departments.id WHERE departments.name = 'Computer Science';", "generated_sql": "SELECT g.*\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "raw_model_output": "SELECT g.*\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "latency_sec": 0.5622711181640625, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects specific columns (professors.name and grants.amount), while the Generated SQL selects all columns from the grants table (g.*). This results in different output structures, even though both queries filter the same data through identical joins and conditions."}
{"example_id": 476, "sql_complexity": "basic SQL", "prompt": "Insert new food safety records for locations \"A123\", \"B456\", and \"C789\"", "context": "CREATE TABLE food_safety_records (id INT, location VARCHAR(255), inspection_date DATE, violation_count INT);", "reference_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', '2022-03-01', 0), ('B456', '2022-03-05', 2), ('C789', '2022-03-10', 1);", "generated_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count)\nVALUES \n('A123', CURRENT_DATE, 0),\n('B456', CURRENT_DATE, 0),\n('C789', CURRENT_DATE, 0);", "raw_model_output": "INSERT INTO food_safety_records (location, inspection_date, violation_count)\nVALUES \n('A123', CURRENT_DATE, 0),\n('B456', CURRENT_DATE, 0),\n('C789', CURRENT_DATE, 0);", "latency_sec": 1.1612169742584229, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The two queries are not equivalent. The Reference SQL inserts specific dates and violation counts ('2022-03-01', 0), ('2022-03-05', 2), ('2022-03-10', 1), while the Generated SQL uses CURRENT_DATE (which would insert today's date) and always 0 for violation_count. The values for inspection_date and violation_count differ between the two queries."}
{"example_id": 2908, "sql_complexity": "single join", "prompt": "List all co-owners and the properties they own in New York, NY.", "context": "CREATE TABLE properties (id INT, city VARCHAR(50), price INT); CREATE TABLE co_owners (property_id INT, owner_name VARCHAR(50)); INSERT INTO properties (id, city, price) VALUES (1, 'New York', 800000), (2, 'Los Angeles', 600000); INSERT INTO co_owners (property_id, owner_name) VALUES (1, 'David'), (1, 'Ella'), (2, 'Frank');", "reference_sql": "SELECT properties.city, co_owners.owner_name FROM properties INNER JOIN co_owners ON properties.id = co_owners.property_id WHERE properties.city = 'New York';", "generated_sql": "SELECT co_owners.owner_name, properties.id AS property_id, properties.city, properties.price\nFROM co_owners\nJOIN properties ON co_owners.property_id = properties.id\nWHERE properties.city = 'New York';", "raw_model_output": "SELECT co_owners.owner_name, properties.id AS property_id, properties.city, properties.price\nFROM co_owners\nJOIN properties ON co_owners.property_id = properties.id\nWHERE properties.city = 'New York';", "latency_sec": 0.6153819561004639, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 'city' and 'owner_name', while the Generated SQL includes additional columns ('property_id', 'price') and reorders the selected columns. Although both queries join the same tables and apply the same WHERE condition, the result sets differ in column composition, making them non-equivalent."}
{"example_id": 636, "sql_complexity": "set operations", "prompt": "Insert new data into the 'cosmetic_ingredients' table for a vegan eyeshadow product by brand 'Ara' with ingredients 'Mica', 'Iron Oxide', 'Titanium Dioxide' and 'Zinc Oxide'.", "context": "CREATE TABLE cosmetic_ingredients (ingredient_id INT, product_name TEXT, brand_name TEXT, ingredient_type TEXT);", "reference_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES (NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient'); INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type, ingredient_name) SELECT ingredient_id, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Mica' FROM cosmetic_ingredients WHERE ingredient_name = 'Mica' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Iron Oxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Titanium Dioxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Zinc Oxide';", "generated_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type)\nVALUES\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "raw_model_output": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type)\nVALUES\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Mica'),\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Iron Oxide'),\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Titanium Dioxide'),\n(NULL, 'Vegan Eyeshadow', 'Ara', 'Zinc Oxide');", "latency_sec": 0.8035068511962891, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains an invalid SELECT statement that references a non-existent 'ingredient_name' column (the schema only includes 'ingredient_id', 'product_name', 'brand_name', and 'ingredient_type'). Additionally, the first INSERT in the Reference SQL sets 'ingredient_type' to 'Ingredient' instead of the actual ingredient names. The Generated SQL correctly inserts four rows with the actual ingredient names as 'ingredient_type' values. The Reference SQL is invalid and semantically different due to schema mismatch and incorrect data insertion."}
{"example_id": 3404, "sql_complexity": "multiple_joins", "prompt": "What are the names of startups that have received funding from investors with over 3 million funds, and are involved in Genetic Research or Bioprocess Engineering?", "context": "CREATE TABLE public.investors ( id SERIAL PRIMARY KEY, name VARCHAR(100), type VARCHAR(50), funds INTEGER ); CREATE TABLE public.investments ( id SERIAL PRIMARY KEY, investor_id INTEGER, startup_id INTEGER ); CREATE TABLE public.startups ( id SERIAL PRIMARY KEY, name VARCHAR(100), industry VARCHAR(50), funding INTEGER );", "reference_sql": "SELECT startups.name FROM public.startups JOIN public.investments ON startups.id = investments.startup_id JOIN public.investors ON investments.investor_id = investors.id WHERE (startups.industry = 'Genetic Research' OR startups.industry = 'Bioprocess Engineering') AND investors.funds > 3000000;", "generated_sql": "SELECT s.name\nFROM startups s\nJOIN investments i ON s.id = i.startup_id\nJOIN investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND (s.industry = 'Genetic Research' OR s.industry = 'Bioprocess Engineering');", "raw_model_output": "SELECT s.name\nFROM startups s\nJOIN investments i ON s.id = i.startup_id\nJOIN investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND (s.industry = 'Genetic Research' OR s.industry = 'Bioprocess Engineering');", "latency_sec": 0.934391975402832, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve startup names by joining the same tables with identical conditions. The only differences are table aliases (public. prefix removed, e.g., 'startups' vs 's') and the order of conditions in the WHERE clause. Since SQL's AND operator is commutative and aliases don't affect logic, the semantic meaning remains identical."}
{"example_id": 134, "sql_complexity": "subqueries", "prompt": "Who are the top 3 authors with the most citations in the Mathematics department in the past 5 years?", "context": "CREATE TABLE authors (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO authors (id, name, department) VALUES (1, 'Author Name', 'Mathematics'); CREATE TABLE publications (id INT, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), year INT, cites INT); INSERT INTO publications (id, title, author, journal, year, cites) VALUES (1, 'Publication Title', 'Author Name', 'Journal Name', 2021, 10);", "reference_sql": "SELECT author, SUM(cites) as total_cites FROM publications WHERE author IN (SELECT name FROM authors WHERE department = 'Mathematics') AND year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY author ORDER BY total_cites DESC LIMIT 3;", "generated_sql": "SELECT a.name\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics' AND p.year >= (YEAR(CURRENT_DATE) - 5)\nGROUP BY a.name\nORDER BY SUM(p.cites) DESC\nLIMIT 3;", "raw_model_output": "SELECT a.name\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics' AND p.year >= (YEAR(CURRENT_DATE) - 5)\nGROUP BY a.name\nORDER BY SUM(p.cites) DESC\nLIMIT 3;", "latency_sec": 0.7357239723205566, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year filtering logic. The Reference SQL uses `BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE)` (inclusive of both bounds), while the Generated SQL uses `p.year >= (YEAR(CURRENT_DATE) - 5)` (only lower bound). This means the Generated SQL could include publications from years beyond the current year if they exist, whereas the Reference SQL explicitly limits to the 5-year window ending in the current year. Additionally, the Reference SQL selects `author` (from `publications`) while the Generated SQL selects `a.name` (from `authors`), though the values would be equivalent due to the join condition."}
{"example_id": 592, "sql_complexity": "set operations", "prompt": "How many public healthcare facilities and public parks are there in total, in the 'StateData' schema's 'StateHealthcare' and 'StateParks' tables?", "context": "CREATE SCHEMA StateData; CREATE TABLE StateHealthcare (Name varchar(255), Type varchar(255)); INSERT INTO StateHealthcare (Name, Type) VALUES ('FacilityA', 'Public'), ('FacilityB', 'Public'), ('FacilityC', 'Private'); CREATE TABLE StateParks (Name varchar(255), Type varchar(255)); INSERT INTO StateParks (Name, Type) VALUES ('ParkA', 'Public'), ('ParkB', 'Public'), ('ParkC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public') +\n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public') AS TotalPublicFacilitiesAndParks;", "raw_model_output": "SELECT \n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public') +\n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public') AS TotalPublicFacilitiesAndParks;", "latency_sec": 0.9208118915557861, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (one for StateHealthcare and one for StateParks) as two rows via UNION ALL, while the Generated SQL returns a single row with the summed total of both counts. The output structure and values differ."}
{"example_id": 1989, "sql_complexity": "single join", "prompt": "What are the names and production dates of garments made from fabrics with a sustainability score over 70, produced after 2021-01-01?", "context": "CREATE TABLE fabrics (id INT, name VARCHAR(50), type VARCHAR(50), sustainability_score INT); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (1, 'Organic Linen', 'Natural', 80); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (2, 'Recycled Nylon', 'Synthetic', 72);", "reference_sql": "SELECT garments.name, garments.production_date FROM garments JOIN fabrics ON garments.fabric_id = fabrics.id WHERE fabrics.sustainability_score > 70 AND garments.production_date > '2021-01-01';", "generated_sql": "SELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70\n  AND g.production_date > '2021-01-01';", "raw_model_output": "SELECT g.name, g.production_date\nFROM garments g\nJOIN fabrics f ON g.fabric_id = f.id\nWHERE f.sustainability_score > 70\n  AND g.production_date > '2021-01-01';", "latency_sec": 0.6538219451904297, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operation: joining the 'garments' and 'fabrics' tables on fabric_id, filtering rows where sustainability_score > 70 and production_date > '2021-01-01', and selecting the same columns. The only differences are the use of table aliases (garments \u2192 g, fabrics \u2192 f) and shorthand column references (g.name instead of garments.name), which do not affect semantic meaning."}
{"example_id": 1388, "sql_complexity": "aggregation", "prompt": "What was the total donation amount by each organization in the last 30 days?", "context": "CREATE TABLE organization_donations (id INT, organization TEXT, donation_date DATE, donation_amount DECIMAL(10,2)); INSERT INTO organization_donations (id, organization, donation_date, donation_amount) VALUES (1, 'Organization A', '2021-03-15', 100.00), (2, 'Organization B', '2021-03-25', 200.00);", "reference_sql": "SELECT organization, SUM(donation_amount) FROM organization_donations WHERE donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY organization;", "generated_sql": "SELECT \n    organization, \n    SUM(donation_amount) AS total_donation_amount\nFROM \n    organization_donations\nWHERE \n    donation_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY \n    organization;", "raw_model_output": "SELECT \n    organization, \n    SUM(donation_amount) AS total_donation_amount\nFROM \n    organization_donations\nWHERE \n    donation_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY \n    organization;", "latency_sec": 0.627377986907959, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total donations per organization for the last 30 days. The date filtering uses different syntax (DATE_SUB vs. CURRENT_DATE - INTERVAL) but achieves the same result. The generated query adds an alias (total_donation_amount) which doesn't affect semantic equivalence."}
{"example_id": 1628, "sql_complexity": "window functions", "prompt": "What is the ranking of national security measures for Russia based on the publication date?", "context": "CREATE TABLE national_security (id INT, title VARCHAR(255), description TEXT, agency VARCHAR(255), date DATE); INSERT INTO national_security (id, title, description, agency, date) VALUES (1, 'National Cyber Strategy', 'Outlines the approach to protecting the American people and the American way of life in the digital age', 'White House', '2018-09-20'); INSERT INTO national_security (id, title, description, agency, date) VALUES (2, 'Cybersecurity and Infrastructure Security Agency Act of 2018', 'Establishes the Cybersecurity and Infrastructure Security Agency within the Department of Homeland Security', 'Congress', '2018-11-16'); INSERT INTO national_security (id, title, description, agency, date) VALUES (3, 'Russian Military Doctrine', 'Outlines the country\u2019s stance on military security', 'Russian Government', '2014-12-26');", "reference_sql": "SELECT title, description, agency, date, ROW_NUMBER() OVER (PARTITION BY agency ORDER BY date DESC) as ranking FROM national_security WHERE agency = 'Russian Government';", "generated_sql": "SELECT id, title, date\nFROM national_security\nWHERE agency = 'Russian Government'\nORDER BY date ASC;", "raw_model_output": "SELECT id, title, date\nFROM national_security\nWHERE agency = 'Russian Government'\nORDER BY date ASC;", "latency_sec": 0.6604948043823242, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects title, description, agency, date, and a ranking column with ROW_NUMBER(), while the Generated SQL selects id, title, and date. Additionally, the Reference SQL filters by agency and orders by date DESC, whereas the Generated SQL orders by date ASC. The column sets and ordering differ, leading to different result structures."}
{"example_id": 2300, "sql_complexity": "aggregation", "prompt": "What is the minimum capacity for schools in each location ('community_development')?", "context": "CREATE TABLE community_development.schools (id INT, name VARCHAR(50), capacity INT, location VARCHAR(50));", "reference_sql": "SELECT location, MIN(capacity) FROM community_development.schools GROUP BY location;", "generated_sql": "SELECT location, MIN(capacity) AS min_capacity\nFROM community_development.schools\nGROUP BY location;", "raw_model_output": "SELECT location, MIN(capacity) AS min_capacity\nFROM community_development.schools\nGROUP BY location;", "latency_sec": 0.4434218406677246, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group schools by location and calculate the minimum capacity per location. The generated query adds an alias 'min_capacity' for the MIN(capacity) column, but this does not affect the semantic result set. The GROUP BY clause and aggregate function remain identical."}
{"example_id": 4976, "sql_complexity": "set operations", "prompt": "What is the most common hashtag used in posts made by users from Brazil?", "context": "CREATE TABLE posts (id INT, user_id INT, content TEXT, hashtags TEXT, post_date DATE); INSERT INTO posts (id, user_id, content, hashtags, post_date) VALUES (1, 1, 'Hello World', '#datascience', '2022-06-01'), (2, 1, 'I love data', '#ai', '2022-06-02'), (3, 2, 'Ol\u00e1 Mundo', '#brasil', '2022-06-03'); CREATE TABLE users (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO users (id, name, country) VALUES (1, 'Jo\u00e3o Silva', 'Brazil'), (2, 'Maria Souza', 'Brazil');", "reference_sql": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(hashtags, ' ', n.n), ' ', -1) hashtag, COUNT(*) count FROM posts JOIN users ON posts.user_id = users.id CROSS JOIN (SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) n WHERE users.country = 'Brazil' GROUP BY hashtag ORDER BY count DESC LIMIT 1;", "generated_sql": "SELECT hashtags\nFROM posts\nJOIN users ON posts.user_id = users.id\nWHERE users.country = 'Brazil'\nGROUP BY hashtags\nORDER BY COUNT(*) DESC\nLIMIT 1;", "raw_model_output": "SELECT hashtags\nFROM posts\nJOIN users ON posts.user_id = users.id\nWHERE users.country = 'Brazil'\nGROUP BY hashtags\nORDER BY COUNT(*) DESC\nLIMIT 1;", "latency_sec": 0.6337261199951172, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL splits multi-tag posts into individual hashtags using SUBSTRING_INDEX and a numbers table, while the Generated SQL treats the entire hashtags column as a single string. This means the Reference SQL counts individual hashtags (e.g., splitting '#datascience #ai' into two entries) whereas the Generated SQL would count it as one. The grouping and counting logic differs fundamentally when multiple hashtags exist in a single post."}
{"example_id": 4637, "sql_complexity": "single join", "prompt": "What is the total value of transactions for each customer in the last 30 days?", "context": "CREATE TABLE transactions (id INT, customer_id INT, value DECIMAL(10, 2), transaction_date DATE); INSERT INTO transactions (id, customer_id, value, transaction_date) VALUES (1, 1, 100, '2022-01-01'), (2, 1, 200, '2022-01-15'), (3, 2, 50, '2022-01-05'), (4, 2, 150, '2022-01-30'), (5, 3, 300, '2022-01-20');", "reference_sql": "SELECT c.id, SUM(t.value) FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE t.transaction_date >= CURDATE() - INTERVAL 30 DAY GROUP BY c.id;", "generated_sql": "SELECT \n    customer_id, \n    SUM(value) AS total_value\nFROM \n    transactions\nWHERE \n    transaction_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY \n    customer_id;", "raw_model_output": "SELECT \n    customer_id, \n    SUM(value) AS total_value\nFROM \n    transactions\nWHERE \n    transaction_date >= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY \n    customer_id;", "latency_sec": 0.5985128879547119, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of transaction values for each customer over the last 30 days. The Reference SQL uses an INNER JOIN with customers (which is redundant since the transactions table already contains customer_id) and groups by c.id. The Generated SQL directly groups by customer_id from transactions. The date filtering syntax differs slightly (CURDATE() vs CURRENT_DATE with INTERVAL '30 days'), but both compute the same 30-day window. Since the output columns (customer_id) and aggregation logic are equivalent, the results would be identical under the same data constraints."}
{"example_id": 4947, "sql_complexity": "aggregation", "prompt": "What is the total revenue for drugs approved between 2017 and 2019?", "context": "CREATE TABLE drug_sales_3 (drug_name TEXT, revenue FLOAT, year INT); INSERT INTO drug_sales_3 (drug_name, revenue, year) VALUES ('DrugG', 20000000, 2019), ('DrugG', 19000000, 2018), ('DrugH', 15000000, 2017), ('DrugH', 16000000, 2018);", "reference_sql": "SELECT drug_name, SUM(revenue) FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019 GROUP BY drug_name;", "generated_sql": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "raw_model_output": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "latency_sec": 0.7540740966796875, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL groups results by drug_name and calculates per-drug revenue sums, while the Generated SQL calculates a single total revenue without grouping. The first returns multiple rows (one per drug) with drug names, while the second returns a single row without drug names."}
{"example_id": 4767, "sql_complexity": "window functions", "prompt": "List the top 2 AI algorithms with the highest explainability scores, by algorithm subtype, ordered by scores in descending order for the European region.", "context": "CREATE TABLE ai_algorithms (algorithm_id INT, algorithm_name VARCHAR(50), algorithm_subtype VARCHAR(50), region VARCHAR(50), explainability_score FLOAT); INSERT INTO ai_algorithms (algorithm_id, algorithm_name, algorithm_subtype, region, explainability_score) VALUES (1, 'AlgoA', 'Tree-based', 'Europe', 0.85), (2, 'AlgoB', 'Computer Vision', 'Europe', 0.92), (3, 'AlgoC', 'Tree-based', 'Europe', 0.78), (4, 'AlgoD', 'Transformer', 'Europe', 0.90), (5, 'AlgoE', 'Tree-based', 'Europe', 0.80);", "reference_sql": "SELECT algorithm_subtype, region, * FROM (SELECT algorithm_subtype, region, algorithm_id, algorithm_name, explainability_score, RANK() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rank FROM ai_algorithms WHERE region = 'Europe') ranked WHERE rank <= 2 ORDER BY algorithm_subtype, region, explainability_score DESC;", "generated_sql": "SELECT algorithm_name, algorithm_subtype, explainability_score\nFROM ai_algorithms\nWHERE region = 'Europe'\nORDER BY algorithm_subtype, explainability_score DESC\nLIMIT 2;", "raw_model_output": "SELECT algorithm_name, algorithm_subtype, explainability_score\nFROM ai_algorithms\nWHERE region = 'Europe'\nORDER BY algorithm_subtype, explainability_score DESC\nLIMIT 2;", "latency_sec": 0.5837960243225098, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects top 2 algorithms per algorithm_subtype (using RANK()) within Europe, while the Generated SQL simply takes the first 2 rows after ordering by algorithm_subtype and explainability_score. The Reference SQL includes all columns and may return more rows (e.g., 2 per subtype), whereas the Generated SQL returns only 2 rows with specific columns. The logic and output structure differ significantly."}
{"example_id": 4495, "sql_complexity": "basic SQL", "prompt": "Which countries are the top 3 sources of sustainable textiles?", "context": "CREATE TABLE Textile_Sources (Source_ID INT, Source_Country TEXT, Sustainable BOOLEAN, Quantity INT); INSERT INTO Textile_Sources (Source_ID, Source_Country, Sustainable, Quantity) VALUES (1, 'India', true, 1000), (2, 'Bangladesh', false, 800), (3, 'China', true, 1200), (4, 'Vietnam', false, 900), (5, 'Italy', true, 1100), (6, 'USA', false, 700);", "reference_sql": "SELECT Source_Country FROM Textile_Sources WHERE Sustainable = true ORDER BY Quantity DESC LIMIT 3;", "generated_sql": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nORDER BY Quantity DESC\nLIMIT 3;", "raw_model_output": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nORDER BY Quantity DESC\nLIMIT 3;", "latency_sec": 0.6959609985351562, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select Source_Country from Textile_Sources where Sustainable is true, order by Quantity descending, and limit to 3 results. The only differences are case sensitivity of the boolean value (true vs TRUE) and formatting whitespace, which do not affect semantic meaning in SQL."}
{"example_id": 2513, "sql_complexity": "single join", "prompt": "What is the total number of concert ticket sales for artists who released their first album between 2015 and 2017?", "context": "CREATE TABLE ConcertTicketSales (id INT, year INT, artist_id INT); CREATE TABLE ArtistAlbums (id INT, artist_id INT, year INT);", "reference_sql": "SELECT COUNT(DISTINCT cts.artist_id) FROM ConcertTicketSales cts JOIN ArtistAlbums a ON cts.artist_id = a.artist_id WHERE a.year BETWEEN 2015 AND 2017;", "generated_sql": "SELECT SUM(CTS.id) AS total_ticket_sales\nFROM ConcertTicketSales CTS\nJOIN (\n    SELECT artist_id, MIN(year) AS first_album_year\n    FROM ArtistAlbums\n    GROUP BY artist_id\n) AA ON CTS.artist_id = AA.artist_id\nWHERE AA.first_album_year BETWEEN 2015 AND 2017;", "raw_model_output": "SELECT SUM(CTS.id) AS total_ticket_sales\nFROM ConcertTicketSales CTS\nJOIN (\n    SELECT artist_id, MIN(year) AS first_album_year\n    FROM ArtistAlbums\n    GROUP BY artist_id\n) AA ON CTS.artist_id = AA.artist_id\nWHERE AA.first_album_year BETWEEN 2015 AND 2017;", "latency_sec": 0.8614540100097656, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query counts distinct artist_ids from ConcertTicketSales joined with ArtistAlbums where album year is between 2015-2017. The generated query sums ticket IDs from ConcertTicketSales joined with a subquery that finds each artist's first album year, filtering on that first year being between 2015-2017. Key differences: 1) Aggregation method (COUNT(DISTINCT) vs SUM) 2) Filter logic (any album year vs first album year) 3) Output column (artist count vs ticket sales sum)."}
{"example_id": 873, "sql_complexity": "subqueries", "prompt": "Identify attorneys who have never handled cases in the 'West' region but have in the 'North' or 'South'.", "context": "CREATE TABLE attorney_regions(attorney_id INT, region VARCHAR(20)); INSERT INTO attorney_regions(attorney_id, region) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'), (5, 'West'), (6, 'North'); CREATE TABLE handled_cases(attorney_id INT, case_id INT); INSERT INTO handled_cases(attorney_id, case_id) VALUES (1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (1, 107), (1, 108);", "reference_sql": "SELECT h.attorney_id FROM attorney_regions h LEFT JOIN handled_cases i ON h.attorney_id = i.attorney_id WHERE h.region IN ('North', 'South') AND h.region != 'West' AND i.attorney_id IS NOT NULL AND h.attorney_id NOT IN (SELECT attorney_id FROM attorney_regions WHERE region = 'West');", "generated_sql": "SELECT DISTINCT ar.attorney_id\nFROM attorney_regions ar\nWHERE ar.region IN ('North', 'South')\n  AND ar.attorney_id NOT IN (\n    SELECT ar2.attorney_id\n    FROM attorney_regions ar2\n    WHERE ar2.region = 'West'\n  )\n  AND ar.attorney_id IN (\n    SELECT hc.attorney_id\n    FROM handled_cases hc\n    JOIN attorney_regions ar3 ON hc.attorney_id = ar3.attorney_id\n    WHERE ar3.region IN ('North', 'South')\n  );", "raw_model_output": "SELECT DISTINCT ar.attorney_id\nFROM attorney_regions ar\nWHERE ar.region IN ('North', 'South')\n  AND ar.attorney_id NOT IN (\n    SELECT ar2.attorney_id\n    FROM attorney_regions ar2\n    WHERE ar2.region = 'West'\n  )\n  AND ar.attorney_id IN (\n    SELECT hc.attorney_id\n    FROM handled_cases hc\n    JOIN attorney_regions ar3 ON hc.attorney_id = ar3.attorney_id\n    WHERE ar3.region IN ('North', 'South')\n  );", "latency_sec": 0.9485678672790527, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in handling duplicates. The Reference SQL may return duplicate attorney_ids if an attorney has multiple cases, while the Generated SQL uses SELECT DISTINCT to eliminate duplicates. Additionally, the Generated SQL's third condition ensures the attorney has at least one case in North/South regions, whereas the Reference SQL's LEFT JOIN with i.attorney_id IS NOT NULL achieves a similar effect but may include duplicates."}
{"example_id": 471, "sql_complexity": "set operations", "prompt": "Find the number of donations made by first-time donors in the last quarter.", "context": "CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationType TEXT, DonationAmount FLOAT); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationType, DonationAmount) VALUES (1, 1, '2021-01-01', 'Individual', 100), (2, 2, '2021-02-01', 'Corporate', 5000);", "reference_sql": "SELECT COUNT(*) FROM (SELECT DonationID FROM Donations WHERE DonationType = 'Individual' AND DonationDate >= DATEADD(quarter, -1, CURRENT_DATE) EXCEPT SELECT DonationID FROM PreviousDonations) AS FirstTimeDonors;", "generated_sql": "SELECT COUNT(*) AS FirstTimeDonations\nFROM Donations d1\nWHERE d1.DonationDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n  AND NOT EXISTS (\n    SELECT 1\n    FROM Donations d2\n    WHERE d2.DonorID = d1.DonorID\n      AND d2.DonationID < d1.DonationID\n  );", "raw_model_output": "SELECT COUNT(*) AS FirstTimeDonations\nFROM Donations d1\nWHERE d1.DonationDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n  AND NOT EXISTS (\n    SELECT 1\n    FROM Donations d2\n    WHERE d2.DonorID = d1.DonorID\n      AND d2.DonationID < d1.DonationID\n  );", "latency_sec": 1.215522050857544, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL references a non-existent 'PreviousDonations' table, making it invalid. The Generated SQL correctly identifies first-time donations by checking for the absence of prior donations for the same donor. Even if 'PreviousDonations' were valid, the Reference SQL's logic (EXCEPT) would differ from the Generated SQL's NOT EXISTS approach, and the date range calculations (DATEADD vs. DATE_SUB) might not align exactly."}
{"example_id": 1301, "sql_complexity": "multiple_joins", "prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?", "context": "CREATE TABLE farmers (id INT, name VARCHAR(50), location VARCHAR(50), crops VARCHAR(50)); CREATE TABLE crops (id INT, name VARCHAR(50), yield INT); CREATE TABLE sales (id INT, farmer_id INT, crop_name VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO farmers VALUES (1, 'Jane Doe', 'Summerfield', 'Corn'); INSERT INTO crops VALUES (1, 'Corn', 100); INSERT INTO sales VALUES (1, 1, 'Corn', 50, 2.50);", "reference_sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';", "generated_sql": "SELECT SUM(sales.quantity) AS total_corn_sold\nFROM sales\nJOIN farmers ON sales.farmer_id = farmers.id\nWHERE farmers.location = 'Summerfield' AND sales.crop_name = 'Corn';", "raw_model_output": "SELECT SUM(sales.quantity) AS total_corn_sold\nFROM sales\nJOIN farmers ON sales.farmer_id = farmers.id\nWHERE farmers.location = 'Summerfield' AND sales.crop_name = 'Corn';", "latency_sec": 1.0110538005828857, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total quantity of Corn sold by farmers in Summerfield. The Reference SQL joins with the crops table and filters on crops.name = 'Corn', while the Generated SQL directly filters on sales.crop_name = 'Corn'. Since the sales.crop_name is already 'Corn' (as per the data), the filtering condition is equivalent. The join with crops is redundant in this specific case but doesn't affect the result."}
{"example_id": 4667, "sql_complexity": "aggregation", "prompt": "Find the number of unique organizations in each country in the Philanthropy Trends table?", "context": "CREATE TABLE PhilanthropyTrends (OrgID INT, Name TEXT, Country TEXT);", "reference_sql": "SELECT Country, COUNT(DISTINCT OrgID) as UniqueOrganizations FROM PhilanthropyTrends GROUP BY Country;", "generated_sql": "SELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;", "raw_model_output": "SELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;", "latency_sec": 0.772071123123169, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select the 'Country' column and count distinct 'OrgID' values, grouping results by 'Country'. The only differences are whitespace formatting and keyword casing (lowercase vs uppercase), which do not affect semantic meaning in SQL."}
{"example_id": 1006, "sql_complexity": "subqueries", "prompt": "What is the average word count of news articles written by investigative journalists?", "context": "CREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, position VARCHAR(20), country VARCHAR(50)); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (1, 'Anna Smith', 'Female', 35, 'News Reporter', 'USA'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (2, 'Mike Johnson', 'Male', 40, 'Investigative Journalist', 'Canada'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (3, 'Sofia Rodriguez', 'Female', 32, 'Investigative Journalist', 'Mexico'); CREATE TABLE news_articles (id INT, title VARCHAR(100), content TEXT, publication_date DATE, reporter_id INT); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (1, 'News Article 1', 'Content of News Article 1', '2021-01-01', 2); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (2, 'News Article 2', 'Content of News Article 2', '2021-02-01', 3);", "reference_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS avg_word_count FROM news_articles WHERE reporter_id IN (SELECT id FROM reporters WHERE position = 'Investigative Journalist');", "generated_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS average_word_count\nFROM news_articles\nJOIN reporters ON news_articles.reporter_id = reporters.id\nWHERE reporters.position = 'Investigative Journalist';", "raw_model_output": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS average_word_count\nFROM news_articles\nJOIN reporters ON news_articles.reporter_id = reporters.id\nWHERE reporters.position = 'Investigative Journalist';", "latency_sec": 1.1925430297851562, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average word count of news articles written by investigative journalists. The Reference SQL uses a subquery with IN to filter reporter_ids, while the Generated SQL uses a JOIN to combine articles with reporters. Both approaches correctly identify the same set of articles (those linked to reporters with 'Investigative Journalist' position) and apply the same word count calculation. The semantic result is identical."}
{"example_id": 3635, "sql_complexity": "set operations", "prompt": "Which brands have certifications related to cruelty-free, vegan, or organic products?", "context": "CREATE TABLE brands (brand_name VARCHAR(50), is_cruelty_free BOOLEAN, is_vegan BOOLEAN, is_organic BOOLEAN); INSERT INTO brands (brand_name, is_cruelty_free, is_vegan, is_organic) VALUES ('Lush', TRUE, TRUE, FALSE), ('The Body Shop', TRUE, FALSE, FALSE), ('Est\u00e9e Lauder', FALSE, FALSE, FALSE), ('Urban Decay', TRUE, TRUE, FALSE), ('Maybelline', FALSE, FALSE, FALSE), ('Kat Von D', TRUE, TRUE, FALSE), ('Tarte', TRUE, TRUE, TRUE);", "reference_sql": "SELECT brand_name, 'Cruelty-free' as certification FROM brands WHERE is_cruelty_free = TRUE UNION SELECT brand_name, 'Vegan' as certification FROM brands WHERE is_vegan = TRUE UNION SELECT brand_name, 'Organic' as certification FROM brands WHERE is_organic = TRUE;", "generated_sql": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "raw_model_output": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "latency_sec": 0.6267988681793213, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a list of brand names with their corresponding certification type (Cruelty-free/Vegan/Organic) as separate rows, allowing brands to appear multiple times if they meet multiple criteria. The Generated SQL returns only brand names once if they meet any of the criteria, without indicating which certification they hold. The result structures and content differ."}
{"example_id": 4932, "sql_complexity": "basic SQL", "prompt": "Delete the workout row with the id of 2.", "context": "CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);", "reference_sql": "DELETE FROM Workouts WHERE id = 2;", "generated_sql": "DELETE FROM Workouts WHERE id = 2;", "raw_model_output": "DELETE FROM Workouts WHERE id = 2;", "latency_sec": 0.44000887870788574, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They both delete the row from the Workouts table where the id is 2, which corresponds to the 'Cycling' workout. The DELETE statements are exactly the same, so they will produce the same result."}
{"example_id": 365, "sql_complexity": "aggregation", "prompt": "Identify the total number of military personnel and their corresponding rank for each branch and country in the 'military_personnel' table, sorted by the total number of personnel in descending order.", "context": "CREATE TABLE military_personnel (id INT, branch VARCHAR(255), rank VARCHAR(255), country VARCHAR(255), personnel INT);", "reference_sql": "SELECT branch, country, SUM(personnel) as total_personnel FROM military_personnel GROUP BY branch, country ORDER BY total_personnel DESC;", "generated_sql": "SELECT branch, country, rank, SUM(personnel) AS total_personnel\nFROM military_personnel\nGROUP BY branch, country, rank\nORDER BY total_personnel DESC;", "raw_model_output": "SELECT branch, country, rank, SUM(personnel) AS total_personnel\nFROM military_personnel\nGROUP BY branch, country, rank\nORDER BY total_personnel DESC;", "latency_sec": 0.5733020305633545, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the GROUP BY clause. The reference query groups by (branch, country), aggregating all ranks within each branch-country pair. The generated query groups by (branch, country, rank), which splits the aggregation into separate groups for each rank. This results in different row counts and summed values, making them non-equivalent."}
{"example_id": 521, "sql_complexity": "subqueries", "prompt": "How many vessels have not had an inspection in the past year?", "context": "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", "reference_sql": "SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());", "generated_sql": "SELECT COUNT(*) AS vessels_without_recent_inspection\nFROM vessels\nLEFT JOIN safety_records ON vessels.name = safety_records.vessel_name\nWHERE safety_records.inspection_date IS NULL\n   OR safety_records.inspection_date < CURRENT_DATE - INTERVAL '1 year';", "raw_model_output": "SELECT COUNT(*) AS vessels_without_recent_inspection\nFROM vessels\nLEFT JOIN safety_records ON vessels.name = safety_records.vessel_name\nWHERE safety_records.inspection_date IS NULL\n   OR safety_records.inspection_date < CURRENT_DATE - INTERVAL '1 year';", "latency_sec": 0.6812050342559814, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL counts vessels that have no inspections in the last year (using NOT IN), while the Generated SQL uses a LEFT JOIN and counts rows where inspection_date is NULL or older than a year. However, the Generated SQL may overcount vessels with multiple safety records (e.g., a vessel with multiple old inspections would be counted multiple times), whereas the Reference SQL counts each vessel once. Additionally, the Generated SQL's OR condition may include vessels with no inspections at all, which aligns with the Reference SQL, but the row-counting vs. vessel-counting difference makes them non-equivalent."}
{"example_id": 5687, "sql_complexity": "multiple_joins", "prompt": "List organizations with more than 200 volunteers, and their average donation amounts, excluding donations less than $10.", "context": "CREATE TABLE organizations (org_id INT, org_name TEXT, social_impact_score INT);CREATE TABLE volunteers (vol_id INT, org_id INT, vol_country TEXT);CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount INT, donation_date DATE);", "reference_sql": "SELECT o.org_name, AVG(donation_amount) AS avg_donation_amount FROM organizations o JOIN volunteers v ON o.org_id = v.org_id JOIN donations don ON o.org_id = don.org_id WHERE donation_amount >= 10 GROUP BY o.org_name HAVING COUNT(v.vol_id) > 200;", "generated_sql": "SELECT \n    o.org_name,\n    AVG(d.donation_amount) AS average_donation\nFROM \n    organizations o\nJOIN \n    volunteers v ON o.org_id = v.org_id\nLEFT JOIN \n    donations d ON v.org_id = d.donor_id\nWHERE \n    d.donation_amount >= 10\nGROUP BY \n    o.org_name\nHAVING \n    COUNT(v.vol_id) > 200;", "raw_model_output": "SELECT \n    o.org_name,\n    AVG(d.donation_amount) AS average_donation\nFROM \n    organizations o\nJOIN \n    volunteers v ON o.org_id = v.org_id\nLEFT JOIN \n    donations d ON v.org_id = d.donor_id\nWHERE \n    d.donation_amount >= 10\nGROUP BY \n    o.org_name\nHAVING \n    COUNT(v.vol_id) > 200;", "latency_sec": 1.0239760875701904, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their JOIN conditions and types. The reference query joins donations on o.org_id = don.org_id (organization ID), while the generated query LEFT JOINs donations on v.org_id = d.donor_id (volunteer's org ID to donor ID). This changes the data relationship being queried. Additionally, the generated query uses a LEFT JOIN but filters on d.donation_amount >= 10, which effectively acts like an INNER JOIN, but the fundamental data relationships being joined are different."}
{"example_id": 1281, "sql_complexity": "subqueries", "prompt": "Find the top 3 contributors with the lowest recycling rate in the 'waste_contributors' table.", "context": "CREATE TABLE waste_contributors (contributor VARCHAR(20), recycling_rate FLOAT); INSERT INTO waste_contributors (contributor, recycling_rate) VALUES ('Manufacturing', 0.4), ('Commercial', 0.38), ('Residential', 0.35), ('Institutional', 0.32), ('Agricultural', 0.2), ('Industrial', 0.15);", "reference_sql": "SELECT contributor FROM waste_contributors WHERE recycling_rate IN (SELECT MIN(recycling_rate) FROM waste_contributors) LIMIT 3;", "generated_sql": "SELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "raw_model_output": "SELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nLIMIT 3;", "latency_sec": 0.6959638595581055, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query selects contributors with the minimum recycling rate (only 'Industrial' in the data) and limits to 3 rows, while the generated query returns the top 3 contributors by lowest recycling rate (Industrial, Agricultural, Institutional) and includes the recycling_rate column. The result sets differ in both data (1 row vs 3 rows) and structure (column count)."}
{"example_id": 5669, "sql_complexity": "window functions", "prompt": "What is the total number of new and returning volunteers in each program in each month?", "context": "CREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, ProgramID INT, VolunteerDate DATE, IsReturning BOOLEAN); INSERT INTO Volunteers (VolunteerID, VolunteerName, ProgramID, VolunteerDate, IsReturning) VALUES (6, 'David Kim', 1, '2022-03-01', FALSE), (7, 'Emily Chen', 2, '2022-03-15', TRUE), (8, 'James Lee', 2, '2022-04-01', FALSE), (9, 'Grace Park', 3, '2022-04-15', TRUE), (10, 'Daniel Kim', 1, '2022-04-01', FALSE);", "reference_sql": "SELECT ProgramID, EXTRACT(MONTH FROM VolunteerDate) AS Month, SUM(CASE WHEN IsReturning THEN 1 ELSE 0 END) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) + COUNT(DISTINCT VolunteerID) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) AS TotalVolunteers FROM Volunteers;", "generated_sql": "SELECT\n    ProgramID,\n    EXTRACT(YEAR FROM VolunteerDate) AS Year,\n    EXTRACT(MONTH FROM VolunteerDate) AS Month,\n    SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n    SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY ProgramID, Year, Month\nORDER BY ProgramID, Year, Month;", "raw_model_output": "SELECT\n    ProgramID,\n    EXTRACT(YEAR FROM VolunteerDate) AS Year,\n    EXTRACT(MONTH FROM VolunteerDate) AS Month,\n    SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n    SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY ProgramID, Year, Month\nORDER BY ProgramID, Year, Month;", "latency_sec": 1.0822198390960693, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses window functions to calculate a cumulative 'TotalVolunteers' by adding returning volunteer counts and distinct volunteer counts, while the Generated SQL aggregates data into separate 'NewVolunteers' and 'ReturningVolunteers' columns. Additionally, the Reference SQL extracts only the month, whereas the Generated SQL separates year and month. The output structure, aggregation logic, and column definitions differ significantly."}
{"example_id": 3576, "sql_complexity": "window functions", "prompt": "What is the difference in the number of eco-friendly hotels between the top 2 countries?", "context": "CREATE TABLE eco_hotel_count (country TEXT, num_hotels INT); INSERT INTO eco_hotel_count (country, num_hotels) VALUES ('France', 100), ('Italy', 120), ('Germany', 150), ('Spain', 110), ('UK', 160);", "reference_sql": "SELECT (MAX(num_hotels) OVER (PARTITION BY num_hotels <= 2) - MIN(num_hotels) OVER (PARTITION BY num_hotels <= 2)) AS hotel_difference FROM eco_hotel_count WHERE country IN ('France', 'Italy');", "generated_sql": "SELECT \n    MAX(num_hotels) - MIN(num_hotels) AS difference_in_hotels\nFROM (\n    SELECT country, num_hotels\n    FROM eco_hotel_count\n    ORDER BY num_hotels DESC\n    LIMIT 2\n) AS top_countries;", "raw_model_output": "SELECT \n    MAX(num_hotels) - MIN(num_hotels) AS difference_in_hotels\nFROM (\n    SELECT country, num_hotels\n    FROM eco_hotel_count\n    ORDER BY num_hotels DESC\n    LIMIT 2\n) AS top_countries;", "latency_sec": 1.8913068771362305, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the difference between max and min num_hotels for rows where num_hotels <= 2 (which doesn't apply here) but filters to France and Italy, resulting in a 20 difference (120-100). The Generated SQL selects top 2 hotels from the entire table (UK and Germany) and calculates their difference (160-150=10). The datasets and calculation logic differ significantly."}
{"example_id": 1970, "sql_complexity": "multiple_joins", "prompt": "List all players who have played a specific VR game, 'CyberSphere', and their ages.", "context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');", "reference_sql": "SELECT Players.Age, Players.PlayerID FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';", "generated_sql": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "raw_model_output": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "latency_sec": 0.8846220970153809, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (PlayerID and Age) from the Players table, join with VRPlayers and VRGames on identical conditions, and apply the same filter on VRGames.Title. The differences are purely syntactic (column order and table aliases) and do not affect the result."}
{"example_id": 2414, "sql_complexity": "window functions", "prompt": "List the policy areas with the lowest citizen satisfaction scores.", "context": "CREATE TABLE Policy (Area VARCHAR(20), Score INT); INSERT INTO Policy (Area, Score) VALUES ('Transportation', 70), ('Education', 85), ('Healthcare', 75), ('PublicSafety', 80);", "reference_sql": "SELECT Area, Score FROM (SELECT Area, Score, ROW_NUMBER() OVER (ORDER BY Score) AS RN FROM Policy) X WHERE RN IN (1, 2);", "generated_sql": "SELECT Area\nFROM Policy\nWHERE Score = (SELECT MIN(Score) FROM Policy);", "raw_model_output": "SELECT Area\nFROM Policy\nWHERE Score = (SELECT MIN(Score) FROM Policy);", "latency_sec": 0.47626495361328125, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL retrieves the top 2 lowest scores (rows 1 and 2) using ROW_NUMBER(), while the Generated SQL only retrieves the single lowest score (MIN(Score)). The Reference SQL returns two rows (Transportation and Healthcare), whereas the Generated SQL returns only one row (Transportation)."}
{"example_id": 1898, "sql_complexity": "single join", "prompt": "What are the total sales for each drug in Q2 2020?", "context": "CREATE TABLE drugs (drug_id INT, drug_name TEXT); INSERT INTO drugs (drug_id, drug_name) VALUES (1001, 'Ibuprofen'), (1002, 'Paracetamol'), (1003, 'Aspirin'); CREATE TABLE sales (sale_id INT, drug_id INT, sale_date DATE, revenue FLOAT); INSERT INTO sales (sale_id, drug_id, sale_date, revenue) VALUES (1, 1001, '2020-04-05', 1800.0), (2, 1002, '2020-04-10', 2300.0), (3, 1003, '2020-04-15', 1400.0), (4, 1001, '2020-05-20', 1900.0), (5, 1002, '2020-06-25', 2400.0);", "reference_sql": "SELECT drug_name, SUM(revenue) as total_sales FROM sales JOIN drugs ON sales.drug_id = drugs.drug_id WHERE sale_date BETWEEN '2020-04-01' AND '2020-06-30' GROUP BY drug_name;", "generated_sql": "SELECT \n    d.drug_name,\n    SUM(s.revenue) AS total_sales\nFROM \n    drugs d\nJOIN \n    sales s ON d.drug_id = s.drug_id\nWHERE \n    s.sale_date >= '2020-04-01' AND s.sale_date < '2020-07-01'\nGROUP BY \n    d.drug_name;", "raw_model_output": "SELECT \n    d.drug_name,\n    SUM(s.revenue) AS total_sales\nFROM \n    drugs d\nJOIN \n    sales s ON d.drug_id = s.drug_id\nWHERE \n    s.sale_date >= '2020-04-01' AND s.sale_date < '2020-07-01'\nGROUP BY \n    d.drug_name;", "latency_sec": 0.7817490100860596, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate total sales per drug within the same date range. The Reference SQL uses BETWEEN '2020-04-01' AND '2020-06-30' (inclusive), while the Generated SQL uses >= '2020-04-01' and < '2020-07-01' (which includes all dates up to June 30th). The date ranges are functionally equivalent. The JOIN conditions, aggregation, and grouping logic are identical, with only syntactic differences (e.g., aliasing and column qualification)."}
{"example_id": 2403, "sql_complexity": "multiple_joins", "prompt": "Who is the most frequent customer ordering vegetarian items?", "context": "CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50)); INSERT INTO customers VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); CREATE TABLE orders (order_id INT, customer_id INT, menu_id INT, order_date DATE); INSERT INTO orders VALUES (1, 1, 1, '2022-01-01'), (2, 2, 3, '2022-01-02'), (3, 3, 2, '2022-01-03'); CREATE TABLE menu (menu_id INT, item_name VARCHAR(50), is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu VALUES (1, 'Veggie Burger', true, 8.99), (2, 'Cheeseburger', false, 7.99), (3, 'Tofu Stir Fry', true, 11.99);", "reference_sql": "SELECT customers.customer_name, COUNT(orders.order_id) as order_count FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN menu ON orders.menu_id = menu.menu_id WHERE menu.is_vegetarian = true GROUP BY customers.customer_name ORDER BY order_count DESC LIMIT 1;", "generated_sql": "SELECT c.customer_id, c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_id, c.customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "raw_model_output": "SELECT c.customer_id, c.customer_name\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN menu m ON o.menu_id = m.menu_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_id, c.customer_name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "latency_sec": 1.0953559875488281, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns (customer_name vs. customer_id and customer_name) and grouping strategy (grouping by customer_name only vs. customer_id and customer_name). While both count vegetarian orders per customer, the Generated SQL returns customer_id and customer_name, whereas the Reference SQL only returns customer_name. Additionally, grouping by customer_id ensures uniqueness in the Generated SQL, while grouping by customer_name alone could aggregate customers with identical names (though the sample data has unique names). The output structures differ, making them non-equivalent."}
{"example_id": 124, "sql_complexity": "set operations", "prompt": "Find the intersection of AI and accessibility research projects in the EU and those in Africa.", "context": "CREATE SCHEMA if not exists accessibility; CREATE TABLE if not exists accessibility.research (id INT PRIMARY KEY, project_name VARCHAR(255), region VARCHAR(255)); INSERT INTO accessibility.research (id, project_name, region) VALUES (1, 'AI for Accessibility EU', 'EU'), (2, 'Accessibility Africa', 'Africa'), (3, 'AI for Accessibility Africa', 'Africa'), (4, 'Accessibility EU', 'EU');", "reference_sql": "SELECT project_name FROM accessibility.research WHERE region = 'EU' INTERSECT SELECT project_name FROM accessibility.research WHERE region = 'Africa';", "generated_sql": "SELECT project_name, region\nFROM accessibility.research\nWHERE project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%'\n  AND region IN ('EU', 'Africa')\nGROUP BY project_name, region\nHAVING COUNT(DISTINCT region) = 2;", "raw_model_output": "SELECT project_name, region\nFROM accessibility.research\nWHERE project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%'\n  AND region IN ('EU', 'Africa')\nGROUP BY project_name, region\nHAVING COUNT(DISTINCT region) = 2;", "latency_sec": 0.8483610153198242, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL finds project_names present in both 'EU' and 'Africa' regions using INTERSECT, while the Generated SQL filters project_names containing 'AI' and 'Accessibility' and requires them to exist in both regions. The Generated SQL has additional string matching conditions on project_name that the Reference SQL does not, making them non-equivalent."}
{"example_id": 1231, "sql_complexity": "basic SQL", "prompt": "What is the average ticket price for performances at the 'Downtown Theater'?", "context": "CREATE TABLE DowntownTheater (show_name TEXT, date DATE, ticket_price FLOAT); INSERT INTO DowntownTheater (show_name, date, ticket_price) VALUES ('Play 1', '2022-01-01', 30.0), ('Play 2', '2022-01-02', 40.0), ('Concert 1', '2022-01-03', 50.0);", "reference_sql": "SELECT AVG(ticket_price) FROM DowntownTheater WHERE show_name = 'Downtown Theater'", "generated_sql": "SELECT AVG(ticket_price) AS average_ticket_price\nFROM DowntownTheater;", "raw_model_output": "SELECT AVG(ticket_price) AS average_ticket_price\nFROM DowntownTheater;", "latency_sec": 0.709805965423584, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters for show_name = 'Downtown Theater' which doesn't exist in the sample data (the actual show names are 'Play 1', 'Play 2', 'Concert 1'), resulting in NULL. The Generated SQL calculates the average of all tickets. The first returns NULL, the second returns 40.0. They are not equivalent."}
{"example_id": 1485, "sql_complexity": "set operations", "prompt": "How many public schools and public libraries exist in total, in the 'CityData' schema's 'CityEducation' and 'CityLibrary' tables?", "context": "CREATE SCHEMA CityData; CREATE TABLE CityEducation (Name varchar(255), Type varchar(255)); INSERT INTO CityEducation (Name, Type) VALUES ('SchoolA', 'Public'), ('SchoolB', 'Public'), ('SchoolC', 'Private'); CREATE TABLE CityLibrary (Name varchar(255), Type varchar(255)); INSERT INTO CityLibrary (Name, Type) VALUES ('LibraryA', 'Public'), ('LibraryB', 'Public'), ('LibraryC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') +\n    (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS TotalPublicFacilities;", "raw_model_output": "SELECT \n    (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') +\n    (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS TotalPublicFacilities;", "latency_sec": 0.6046390533447266, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns two separate counts (one for CityEducation and one for CityLibrary) as two rows via UNION ALL, while the generated query returns a single row with the summed total. The output structure and values differ (2 + 2 vs 4), making them non-equivalent."}
{"example_id": 5806, "sql_complexity": "single join", "prompt": "List the top 3 countries with the most veteran employment in the IT industry", "context": "CREATE TABLE veteran_employment (employee_id INT, industry VARCHAR(255), salary DECIMAL(10,2), state VARCHAR(2), country VARCHAR(255)); CREATE TABLE countries (country_id INT, country VARCHAR(255));", "reference_sql": "SELECT country, COUNT(*) as num_veterans FROM veteran_employment JOIN countries ON veteran_employment.country = countries.country WHERE industry = 'IT' GROUP BY country ORDER BY num_veterans DESC LIMIT 3;", "generated_sql": "SELECT c.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nJOIN countries c ON ve.country = c.country\nWHERE ve.industry = 'IT'\nGROUP BY c.country\nORDER BY veteran_count DESC\nLIMIT 3;", "raw_model_output": "SELECT c.country, COUNT(*) AS veteran_count\nFROM veteran_employment ve\nJOIN countries c ON ve.country = c.country\nWHERE ve.industry = 'IT'\nGROUP BY c.country\nORDER BY veteran_count DESC\nLIMIT 3;", "latency_sec": 0.6597611904144287, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform the same operations: joining veteran_employment with countries on country, filtering for industry 'IT', grouping by country, counting veterans, ordering by count descending, and limiting to 3 results. The differences are purely syntactic (table aliases and column aliases) and do not affect the semantic outcome."}
{"example_id": 4126, "sql_complexity": "window functions", "prompt": "What is the average crime rate per capita in each neighborhood?", "context": "CREATE TABLE neighborhoods (name VARCHAR(255), population INT, crime_count INT); INSERT INTO neighborhoods (name, population, crime_count) VALUES ('Central Park', 1000, 25), ('Harlem', 2500, 75), ('Brooklyn', 5000, 120);", "reference_sql": "SELECT name, AVG(crime_count/population) OVER (PARTITION BY name) FROM neighborhoods;", "generated_sql": "SELECT \n    name,\n    (crime_count::DECIMAL / population) AS crime_rate_per_capita\nFROM \n    neighborhoods;", "raw_model_output": "SELECT \n    name,\n    (crime_count::DECIMAL / population) AS crime_rate_per_capita\nFROM \n    neighborhoods;", "latency_sec": 0.5579311847686768, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses integer division (crime_count/population) without explicit casting, which would truncate results in databases like PostgreSQL. The Generated SQL explicitly casts crime_count to DECIMAL, ensuring floating-point division. This difference in division behavior makes the queries non-equivalent."}
{"example_id": 4559, "sql_complexity": "basic SQL", "prompt": "List the top 3 energy efficient appliances in the US by energy star rating?", "context": "CREATE TABLE appliances (id INT, name VARCHAR(255), country VARCHAR(255), energy_star_rating INT); INSERT INTO appliances (id, name, country, energy_star_rating) VALUES (1, 'Fridge A', 'USA', 5), (2, 'TV B', 'USA', 4), (3, 'Laptop C', 'USA', 5), (4, 'Microwave D', 'USA', 3);", "reference_sql": "SELECT name, energy_star_rating FROM appliances WHERE country = 'USA' ORDER BY energy_star_rating DESC LIMIT 3;", "generated_sql": "SELECT name, energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nLIMIT 3;", "raw_model_output": "SELECT name, energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nLIMIT 3;", "latency_sec": 0.8209049701690674, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and spacing) which do not affect SQL execution. Both select the same columns, apply the same WHERE condition, sort by energy_star_rating in descending order, and limit results to 3 rows."}
{"example_id": 456, "sql_complexity": "window functions", "prompt": "List the intelligence operations and their corresponding threat levels, and rank them based on their threat level and budget.", "context": "CREATE TABLE intel_ops_threat (id INT, operation VARCHAR, threat VARCHAR, budget INT); INSERT INTO intel_ops_threat (id, operation, threat, budget) VALUES (1, 'Operation Red Folder', 'High', 5000000), (2, 'Operation Black Vault', 'Medium', 7000000), (3, 'Operation Blue Sail', 'Low', 6000000);", "reference_sql": "SELECT operation, threat, budget, ROW_NUMBER() OVER (PARTITION BY threat ORDER BY budget DESC) as rank FROM intel_ops_threat;", "generated_sql": "SELECT operation, threat\nFROM intel_ops_threat\nORDER BY \n  CASE threat\n    WHEN 'High' THEN 1\n    WHEN 'Medium' THEN 2\n    WHEN 'Low' THEN 3\n  END,\n  budget DESC;", "raw_model_output": "SELECT operation, threat\nFROM intel_ops_threat\nORDER BY \n  CASE threat\n    WHEN 'High' THEN 1\n    WHEN 'Medium' THEN 2\n    WHEN 'Low' THEN 3\n  END,\n  budget DESC;", "latency_sec": 0.6398427486419678, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes 'budget' and adds a 'rank' column using ROW_NUMBER(), while the Generated SQL only selects 'operation' and 'threat' and orders by a custom threat priority and budget. The result sets differ in both column structure and functionality (ranking vs. ordering)."}
{"example_id": 459, "sql_complexity": "set operations", "prompt": "What is the total installed capacity of hydroelectric power plants in Brazil and Canada?", "context": "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", "reference_sql": "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');", "generated_sql": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "raw_model_output": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "latency_sec": 0.564661979675293, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate capacity values (Brazil and Canada) using UNION, while the Generated SQL returns a single summed value of both countries' capacities. The output structures differ (two rows vs. one row with a total), so they are not semantically equivalent."}
{"example_id": 2356, "sql_complexity": "window functions", "prompt": "Find the total billing amount for attorneys in the 'Criminal Law' practice area, for the year 2020, partitioned by attorney's last name and ordered by the total billing amount in descending order.", "context": "CREATE TABLE Attorneys (AttorneyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), PracticeArea VARCHAR(50), TotalBilling FLOAT, BillingYear INT); INSERT INTO Attorneys (AttorneyID, FirstName, LastName, PracticeArea, TotalBilling, BillingYear) VALUES (1, 'Clara', 'Rivera', 'Personal Injury', 8000.00, 2020), (2, 'Jamal', 'Lee', 'Personal Injury', 6000.00, 2019), (3, 'Sophia', 'Gomez', 'Criminal Law', 9000.00, 2020);", "reference_sql": "SELECT LastName, SUM(TotalBilling) OVER (PARTITION BY PracticeArea, LastName, BillingYear) AS TotalBilling FROM Attorneys WHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020 ORDER BY TotalBilling DESC;", "generated_sql": "SELECT \n    LastName,\n    SUM(TotalBilling) AS TotalBillingAmount\nFROM \n    Attorneys\nWHERE \n    PracticeArea = 'Criminal Law' AND\n    BillingYear = 2020\nGROUP BY \n    LastName\nORDER BY \n    TotalBillingAmount DESC;", "raw_model_output": "SELECT \n    LastName,\n    SUM(TotalBilling) AS TotalBillingAmount\nFROM \n    Attorneys\nWHERE \n    PracticeArea = 'Criminal Law' AND\n    BillingYear = 2020\nGROUP BY \n    LastName\nORDER BY \n    TotalBillingAmount DESC;", "latency_sec": 0.6952261924743652, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 0, "prompt_eval_sec": null, "tokens_completion": 0, "completion_eval_sec": null, "tokens_total": null, "tokens_per_sec": null, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate the sum per (PracticeArea, LastName, BillingYear) without grouping, while the Generated SQL groups by LastName and sums TotalBilling. If there are multiple entries per LastName in the filtered data, the Generated SQL would aggregate them into one row per LastName, whereas the Reference SQL would retain individual rows. In the given sample data, they produce the same result, but they are not semantically equivalent in general."}
