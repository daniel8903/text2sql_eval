{"example_id": 2656, "sql_complexity": "multiple_joins", "prompt": "Find the drugs and their respective total sales for rare diseases indication with sales greater than the average sales for infectious diseases.", "context": "CREATE TABLE sales (id INT, drug_id INT, quarter INT, year INT, revenue FLOAT); INSERT INTO sales (id, drug_id, quarter, year, revenue) VALUES (1, 1, 1, 2022, 1500000); CREATE TABLE drugs (id INT, name VARCHAR(50), company VARCHAR(50), indication VARCHAR(50)); INSERT INTO drugs (id, name, company, indication) VALUES (1, 'DrugA', 'ABC Corp', 'Rare_Diseases');", "reference_sql": "SELECT s.drug_id, d.name, SUM(s.revenue) as total_sales FROM sales s JOIN drugs d ON s.drug_id = d.id WHERE d.indication = 'Rare_Diseases' GROUP BY s.drug_id HAVING total_sales > (SELECT AVG(s2.revenue) FROM sales s2 JOIN drugs d2 ON s2.drug_id = d2.id WHERE d2.indication = 'Infectious_Diseases')", "generated_sql": "SELECT \n    d.name,\n    SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(drug_total)\n    FROM (\n        SELECT SUM(s2.revenue) AS drug_total\n        FROM drugs d2\n        JOIN sales s2 ON d2.id = s2.drug_id\n        WHERE d2.indication = 'Infectious_Diseases'\n        GROUP BY d2.id\n    ) AS infectious_totals\n);", "raw_model_output": "SELECT \n    d.name,\n    SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.id = s.drug_id\nWHERE d.indication = 'Rare_Diseases'\nGROUP BY d.name\nHAVING SUM(s.revenue) > (\n    SELECT AVG(drug_total)\n    FROM (\n        SELECT SUM(s2.revenue) AS drug_total\n        FROM drugs d2\n        JOIN sales s2 ON d2.id = s2.drug_id\n        WHERE d2.indication = 'Infectious_Diseases'\n        GROUP BY d2.id\n    ) AS infectious_totals\n);", "latency_sec": 5.693547964096069, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 195, "prompt_eval_sec": null, "tokens_completion": 718, "completion_eval_sec": null, "tokens_total": 913, "tokens_per_sec": 160.35695242359333, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL groups by `s.drug_id` (unique identifier) while the Generated SQL groups by `d.name` (which may not be unique). Second, the HAVING clause in the Reference SQL compares against the average of individual sales revenues for Infectious_Diseases, whereas the Generated SQL compares against the average of per-drug total revenues. These differences in grouping and aggregation logic make the queries non-equivalent."}
{"example_id": 3008, "sql_complexity": "multiple_joins", "prompt": "Who are the users who used electric vehicles and their trip details?", "context": "CREATE TABLE users (id INT, name VARCHAR(50), age INT, gender VARCHAR(10), city VARCHAR(50));CREATE TABLE vehicles (id INT, vehicle_type VARCHAR(20), is_electric BOOLEAN);CREATE TABLE trips (id INT, user_id INT, vehicle_id INT, trip_distance FLOAT, trip_duration INT, departure_time TIMESTAMP, arrival_time TIMESTAMP);INSERT INTO users (id, name, age, gender, city) VALUES (3, 'Alex', 30, 'Female', 'New York');INSERT INTO vehicles (id, vehicle_type, is_electric) VALUES (1, 'Tesla', true), (2, 'Bike', false);INSERT INTO trips (id, user_id, vehicle_id, trip_distance, trip_duration, departure_time, arrival_time) VALUES (3, 3, 1, 15.3, 25, '2022-01-03 12:00:00', '2022-01-03 12:25:00');", "reference_sql": "SELECT u.name, v.vehicle_type, t.trip_distance, t.trip_duration FROM users u JOIN trips t ON u.id = t.user_id JOIN vehicles v ON t.vehicle_id = v.id WHERE v.is_electric = true;", "generated_sql": "SELECT u.id,\n       u.name,\n       u.age,\n       u.gender,\n       u.city,\n       t.id AS trip_id,\n       t.vehicle_id,\n       t.trip_distance,\n       t.trip_duration,\n       t.departure_time,\n       t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "raw_model_output": "SELECT u.id,\n       u.name,\n       u.age,\n       u.gender,\n       u.city,\n       t.id AS trip_id,\n       t.vehicle_id,\n       t.trip_distance,\n       t.trip_duration,\n       t.departure_time,\n       t.arrival_time\nFROM users u\nJOIN trips t ON u.id = t.user_id\nJOIN vehicles v ON t.vehicle_id = v.id\nWHERE v.is_electric = TRUE;", "latency_sec": 3.407297134399414, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 286, "prompt_eval_sec": null, "tokens_completion": 291, "completion_eval_sec": null, "tokens_total": 577, "tokens_per_sec": 169.34243690540498, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 4 specific columns (u.name, v.vehicle_type, t.trip_distance, t.trip_duration), while the Generated SQL selects 11 columns including all user and trip fields. The result sets have different structures and data scope, even though both filter electric vehicles via the same JOINs and WHERE clause."}
{"example_id": 2531, "sql_complexity": "basic SQL", "prompt": "Who is the top customer by sales in 2022?", "context": "CREATE TABLE customers (customer_id INT, total_sales_2022 FLOAT); INSERT INTO customers (customer_id, total_sales_2022) VALUES (1, 25000.0), (2, 30000.0), (3, 22000.0), (4, 35000.0);", "reference_sql": "SELECT customer_id, total_sales_2022 FROM customers ORDER BY total_sales_2022 DESC LIMIT 1;", "generated_sql": "SELECT customer_id\nFROM customers\nORDER BY total_sales_2022 DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "SELECT customer_id\nFROM customers\nORDER BY total_sales_2022 DESC\nFETCH FIRST 1 ROW ONLY;", "latency_sec": 2.2328338623046875, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 143, "prompt_eval_sec": null, "tokens_completion": 162, "completion_eval_sec": null, "tokens_total": 305, "tokens_per_sec": 136.597713403175, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query returns both customer_id and total_sales_2022 columns, while the generated query only returns customer_id. Although both identify the top customer by sales, the result sets differ in column selection."}
{"example_id": 3792, "sql_complexity": "single join", "prompt": "What is the maximum distance traveled by an electric vehicle in a single trip, grouped by vehicle model?", "context": "CREATE TABLE Trips (trip_id INT, vehicle_id INT, distance FLOAT); CREATE TABLE ElectricVehicleModels (vehicle_id INT, vehicle_model TEXT);", "reference_sql": "SELECT evm.vehicle_model, MAX(trips.distance) AS max_distance_traveled FROM Trips trips INNER JOIN ElectricVehicleModels evm ON trips.vehicle_id = evm.vehicle_id GROUP BY 1;", "generated_sql": "SELECT ev.vehicle_model,\n       MAX(t.distance) AS max_distance\nFROM Trips t\nJOIN ElectricVehicleModels ev ON t.vehicle_id = ev.vehicle_id\nGROUP BY ev.vehicle_model;", "raw_model_output": "SELECT ev.vehicle_model,\n       MAX(t.distance) AS max_distance\nFROM Trips t\nJOIN ElectricVehicleModels ev ON t.vehicle_id = ev.vehicle_id\nGROUP BY ev.vehicle_model;", "latency_sec": 2.2992000579833984, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 115, "prompt_eval_sec": null, "tokens_completion": 177, "completion_eval_sec": null, "tokens_total": 292, "tokens_per_sec": 127.00069269140059, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the maximum distance traveled per vehicle model by joining the Trips and ElectricVehicleModels tables. The differences are purely syntactic (table aliases) and do not affect the semantic outcome. Both group by the vehicle_model column, ensuring identical aggregation results."}
{"example_id": 2311, "sql_complexity": "subqueries", "prompt": "Determine the percentage of sales from each ingredient category", "context": "CREATE TABLE Sales_Details (sale_id INT, ingredient_id INT, quantity INT); INSERT INTO Sales_Details (sale_id, ingredient_id, quantity) VALUES (1, 1, 2), (1, 2, 8), (2, 1, 3), (2, 2, 7); CREATE TABLE Ingredient_Categories (ingredient_id INT, ingredient_category VARCHAR(255)); INSERT INTO Ingredient_Categories (ingredient_id, ingredient_category) VALUES (1, 'Legumes'), (2, 'Poultry');", "reference_sql": "SELECT ingredient_category, SUM(quantity) AS total_quantity, SUM(quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details) AS percentage_of_sales FROM Sales_Details, Ingredient_Categories WHERE Sales_Details.ingredient_id = Ingredient_Categories.ingredient_id GROUP BY ingredient_category;", "generated_sql": "SELECT\n  ic.ingredient_category,\n  (SUM(sd.quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details)) AS percentage\nFROM Sales_Details sd\nJOIN Ingredient_Categories ic ON sd.ingredient_id = ic.ingredient_id\nGROUP BY ic.ingredient_category;", "raw_model_output": "SELECT\n  ic.ingredient_category,\n  (SUM(sd.quantity) * 100.0 / (SELECT SUM(quantity) FROM Sales_Details)) AS percentage\nFROM Sales_Details sd\nJOIN Ingredient_Categories ic ON sd.ingredient_id = ic.ingredient_id\nGROUP BY ic.ingredient_category;", "latency_sec": 3.975131034851074, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 188, "prompt_eval_sec": null, "tokens_completion": 459, "completion_eval_sec": null, "tokens_total": 647, "tokens_per_sec": 162.76193019238156, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a 'total_quantity' column (SUM(quantity)) in the SELECT clause, while the Generated SQL omits this column. Although both calculate the percentage correctly and group by ingredient_category, the result sets differ in structure. Semantic equivalence requires identical output columns and values, which is not the case here."}
{"example_id": 3329, "sql_complexity": "set operations", "prompt": "Which causes received funding from donors in both the United States and Canada?", "context": "CREATE TABLE donor_location (donor_id INT, country VARCHAR(50), cause VARCHAR(50), donation DECIMAL(10,2)); INSERT INTO donor_location (donor_id, country, cause, donation) VALUES (1, 'United States', 'Global Health', 1000.00), (2, 'Canada', 'Education', 2000.00), (3, 'United States', 'Environment', 1500.00), (4, 'Canada', 'Animal Welfare', 2500.00);", "reference_sql": "SELECT cause FROM donor_location WHERE country = 'United States' INTERSECT SELECT cause FROM donor_location WHERE country = 'Canada';", "generated_sql": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "raw_model_output": "SELECT cause\nFROM donor_location\nWHERE country IN ('United States', 'Canada')\nGROUP BY cause\nHAVING COUNT(DISTINCT country) = 2;", "latency_sec": 13.455122232437134, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 188, "prompt_eval_sec": null, "tokens_completion": 236, "completion_eval_sec": null, "tokens_total": 424, "tokens_per_sec": 31.512162630365093, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve causes that exist in both 'United States' and 'Canada'. The reference query uses INTERSECT to find common causes between the two countries, while the generated query groups by cause and ensures each cause appears in both countries via COUNT(DISTINCT country) = 2. In the sample data, both return an empty set, and in all cases, they logically produce the same result."}
{"example_id": 2912, "sql_complexity": "single join", "prompt": "Which company has manufactured the most satellites?", "context": "CREATE TABLE manufacturers (id INT, name TEXT); CREATE TABLE satellites (id INT, manufacturer_id INT, name TEXT, launch_date DATE); INSERT INTO manufacturers (id, name) VALUES (1, 'SpaceX'), (2, 'Blue Origin'), (3, 'ISRO'), (4, 'CAST'); INSERT INTO satellites (id, manufacturer_id, name, launch_date) VALUES (1, 1, 'StarDragon', '2012-05-25'), (2, 1, 'Falcon', '2015-12-21'), (3, 2, 'New Glenn', '2022-01-11'), (4, 3, 'ChinaSat 1E', '2000-12-05'), (5, 3, 'ChinaSat 2A', '2003-08-13'), (6, 4, 'Shijian 9', '2017-11-19'), (7, 1, 'StarLink', '2020-05-24'), (8, 1, 'StarLink', '2020-06-13');", "reference_sql": "SELECT m.name, COUNT(s.id) FROM manufacturers m JOIN satellites s ON m.id = s.manufacturer_id GROUP BY m.name ORDER BY COUNT(s.id) DESC;", "generated_sql": "SELECT m.name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "raw_model_output": "SELECT m.name\nFROM manufacturers m\nJOIN satellites s ON m.id = s.manufacturer_id\nGROUP BY m.name\nORDER BY COUNT(*) DESC\nLIMIT 1;", "latency_sec": 2.327794075012207, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 306, "prompt_eval_sec": null, "tokens_completion": 159, "completion_eval_sec": null, "tokens_total": 465, "tokens_per_sec": 199.75993795652286, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns all manufacturers with their satellite counts ordered by count descending, while the Generated SQL only returns the top manufacturer with the highest count (due to LIMIT 1). The Generated SQL lacks the COUNT(s.id) column and restricts output to a single row."}
{"example_id": 3170, "sql_complexity": "aggregation", "prompt": "Determine the total production quantity of silver for mining sites in Mexico, between the dates '2017-05-01' and '2017-09-30', having less than 40 employees.", "context": "CREATE TABLE silver_mine_2 (site_id INT, country VARCHAR(50), num_employees INT, extraction_date DATE, quantity INT); INSERT INTO silver_mine_2 (site_id, country, num_employees, extraction_date, quantity) VALUES (1, 'Mexico', 35, '2017-05-02', 1200), (2, 'Mexico', 30, '2017-08-31', 1800), (3, 'Mexico', 37, '2017-07-04', 2200);", "reference_sql": "SELECT country, SUM(quantity) as total_silver_prod FROM silver_mine_2 WHERE num_employees < 40 AND country = 'Mexico' AND extraction_date >= '2017-05-01' AND extraction_date <= '2017-09-30' GROUP BY country;", "generated_sql": "SELECT SUM(quantity) AS total_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "raw_model_output": "SELECT SUM(quantity) AS total_production\nFROM silver_mine_2\nWHERE country = 'Mexico'\n  AND extraction_date BETWEEN '2017-05-01' AND '2017-09-30'\n  AND num_employees < 40;", "latency_sec": 1.8711402416229248, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 221, "prompt_eval_sec": null, "tokens_completion": 128, "completion_eval_sec": null, "tokens_total": 349, "tokens_per_sec": 186.51728621757206, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total silver production for Mexican mines with fewer than 40 employees between 2017-05-01 and 2017-09-30. The Reference query groups by country (which is redundant here since the WHERE clause restricts to 'Mexico') and returns a row with country and total, while the Generated query directly returns the aggregated sum. The filtering conditions and aggregation logic are identical, so the result sets are equivalent."}
{"example_id": 3518, "sql_complexity": "basic SQL", "prompt": "Insert new records of ticket sales for a new event, including event and salesperson information.", "context": "CREATE TABLE salesperson (salesperson_id INT, name VARCHAR(50), position VARCHAR(50)); CREATE TABLE tickets (ticket_id INT, salesperson_id INT, event_id INT, price DECIMAL(5,2), quantity INT); CREATE TABLE events (event_id INT, name VARCHAR(50), date DATE); INSERT INTO salesperson VALUES (1, 'John Doe', 'Senior Salesperson'); INSERT INTO events VALUES (2, 'New Event', '2023-04-15');", "reference_sql": "INSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity) VALUES (2, 1, 2, 75, 50), (3, 2, 2, 65, 75); INSERT INTO events (event_id, name, date) VALUES (2, 'New Event', '2023-04-15');", "generated_sql": "Insert a new event\nINSERT INTO events (event_id, name, date)\nVALUES (3, 'Evening Gala', '2023-05-01');", "raw_model_output": "-- Insert a new event\nINSERT INTO events (event_id, name, date)\nVALUES (3, 'Evening Gala', '2023-05-01');\n\n-- Insert a new salesperson\nINSERT INTO salesperson (salesperson_id, name, position)\nVALUES (2, 'Jane Smith', 'Sales Associate');\n\n-- Insert a new ticket sale linking the new event and the new salesperson\nINSERT INTO tickets (ticket_id, salesperson_id, event_id, price, quantity)\nVALUES (101, 2, 3, 75.00, 50);", "latency_sec": 10.925364971160889, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 180, "prompt_eval_sec": null, "tokens_completion": 1469, "completion_eval_sec": null, "tokens_total": 1649, "tokens_per_sec": 150.9331728828079, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts two tickets and an event (with event_id=2), while the Generated SQL only inserts a new event (event_id=3). They operate on different tables (tickets vs. events) and insert different data. The Generated SQL does not replicate the ticket insertions or the event duplication from the Reference SQL."}
{"example_id": 3925, "sql_complexity": "set operations", "prompt": "What is the total number of students and staff with accommodations in the \"disability_services\" schema, excluding the \"accessibility_parking\" type?", "context": "CREATE SCHEMA disability_services; CREATE TABLE staff (id INT, name VARCHAR(50), accommodation VARCHAR(50)); CREATE TABLE students (id INT, name VARCHAR(50), accommodation VARCHAR(50));", "reference_sql": "SELECT COUNT(*) FROM disability_services.staff WHERE accommodation != 'accessibility_parking' UNION SELECT COUNT(*) FROM disability_services.students WHERE accommodation != 'accessibility_parking';", "generated_sql": "SELECT \n  (SELECT COUNT(*) \n   FROM disability_services.students \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking')\n+ (SELECT COUNT(*) \n   FROM disability_services.staff \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking') AS total_count;", "raw_model_output": "SELECT \n  (SELECT COUNT(*) \n   FROM disability_services.students \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking')\n+ (SELECT COUNT(*) \n   FROM disability_services.staff \n   WHERE accommodation IS NOT NULL \n     AND accommodation <> 'accessibility_parking') AS total_count;", "latency_sec": 4.055042028427124, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 136, "prompt_eval_sec": null, "tokens_completion": 523, "completion_eval_sec": null, "tokens_total": 659, "tokens_per_sec": 162.51372868152836, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (staff and students) as individual rows, while the Generated SQL calculates the sum of both counts in a single row. The structure of the results differs (two rows vs. one row with a total), making them semantically non-equivalent."}
{"example_id": 3340, "sql_complexity": "subqueries", "prompt": "Calculate the total revenue for garments manufactured in the US and sold in California.", "context": "CREATE TABLE garment_manufacturing(id INT PRIMARY KEY, garment_id INT, country VARCHAR(50), material VARCHAR(50), manufacturing_date DATE, quantity INT); CREATE TABLE garment_sales(id INT PRIMARY KEY, garment_id INT, store_id INT, sale_date DATE, units INT, revenue DECIMAL(10,2));", "reference_sql": "SELECT SUM(gs.revenue) FROM garment_manufacturing gm JOIN garment_sales gs ON gm.garment_id = gs.garment_id WHERE gm.country = 'United States' AND gs.store_id IN (SELECT id FROM stores WHERE region = 'California');", "generated_sql": "SELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm\n  ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US'\n  AND gs.store_id IN (/* list of California store IDs, for example: 101, 102, 103 */);", "raw_model_output": "Assuming that the sale location (California) is determined by the store_id \u2013 that is, only sales from certain stores (whose IDs you know are located in California) should be counted \u2013 you could write the query as follows. (Note that because no store location details are present in the schema, you\u2019ll need to replace the placeholder list with the actual California store IDs.)\n\nSELECT SUM(gs.revenue) AS total_revenue\nFROM garment_sales gs\nJOIN garment_manufacturing gm\n  ON gs.garment_id = gm.garment_id\nWHERE gm.country = 'US'\n  AND gs.store_id IN (/* list of California store IDs, for example: 101, 102, 103 */);\n\nIf you later have a separate table containing store locations, you could join that table to filter for California. This query uses only the provided schema.", "latency_sec": 20.752126932144165, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 145, "prompt_eval_sec": null, "tokens_completion": 3066, "completion_eval_sec": null, "tokens_total": 3211, "tokens_per_sec": 154.7311275851102, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the country condition ('United States' vs 'US') and the Generated SQL contains a commented-out subquery in the IN clause, which would make it invalid. Unless 'US' is explicitly equivalent to 'United States' in the database, the WHERE clauses would filter different data."}
{"example_id": 596, "sql_complexity": "basic SQL", "prompt": "What is the minimum energy production cost of wind farms in Spain?", "context": "CREATE TABLE wind_farm_costs (id INT, name TEXT, country TEXT, energy_production_cost FLOAT); INSERT INTO wind_farm_costs (id, name, country, energy_production_cost) VALUES (1, 'Las Tiesas', 'Spain', 0.045), (2, 'Eolo', 'Spain', 0.050);", "reference_sql": "SELECT MIN(energy_production_cost) FROM wind_farm_costs WHERE country = 'Spain';", "generated_sql": "SELECT MIN(energy_production_cost) AS minimum_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "raw_model_output": "SELECT MIN(energy_production_cost) AS minimum_cost\nFROM wind_farm_costs\nWHERE country = 'Spain';", "latency_sec": 1.9753270149230957, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 154, "prompt_eval_sec": null, "tokens_completion": 100, "completion_eval_sec": null, "tokens_total": 254, "tokens_per_sec": 128.58630397959138, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the minimum energy_production_cost from wind_farm_costs where country is 'Spain'. The only difference is the alias 'minimum_cost' in the generated query, which doesn't affect the semantic result - the value returned remains the same."}
{"example_id": 2604, "sql_complexity": "subqueries", "prompt": "What is the maximum number of virtual tours taken by a single user in the UK?", "context": "CREATE TABLE virtual_tour_data (user_id INT, hotel_id INT, tour_date DATE); INSERT INTO virtual_tour_data (user_id, hotel_id, tour_date) VALUES (1, 10, '2022-01-01'), (2, 11, '2022-01-03'), (3, 12, '2022-01-05'), (4, 10, '2022-01-07'), (5, 10, '2022-01-09'); CREATE TABLE hotels (hotel_id INT, hotel_name TEXT, country TEXT); INSERT INTO hotels (hotel_id, hotel_name, country) VALUES (10, 'Royal Park Hotel', 'UK'), (11, 'The Ritz London', 'UK'), (12, 'Hotel de Crillon', 'France');", "reference_sql": "SELECT MAX(vt.user_tours) FROM (SELECT user_id, COUNT(DISTINCT hotel_id) as user_tours FROM virtual_tour_data WHERE country = 'UK' GROUP BY user_id) as vt;", "generated_sql": "SELECT MAX(tour_count) AS max_tours\nFROM (\n    SELECT v.user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data v\n    JOIN hotels h ON v.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY v.user_id\n) AS user_tours;", "raw_model_output": "SELECT MAX(tour_count) AS max_tours\nFROM (\n    SELECT v.user_id, COUNT(*) AS tour_count\n    FROM virtual_tour_data v\n    JOIN hotels h ON v.hotel_id = h.hotel_id\n    WHERE h.country = 'UK'\n    GROUP BY v.user_id\n) AS user_tours;", "latency_sec": 3.0453169345855713, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 251, "prompt_eval_sec": null, "tokens_completion": 334, "completion_eval_sec": null, "tokens_total": 585, "tokens_per_sec": 192.0982323239243, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'country' column that does not exist in the virtual_tour_data table, making it invalid. The Generated SQL correctly joins with the hotels table to filter by country. Additionally, the Reference SQL uses COUNT(DISTINCT hotel_id) while the Generated SQL uses COUNT(*), which would produce different results if users had multiple tours to the same hotel. However, in the given data, both would return 1, but the Reference SQL is syntactically incorrect."}
{"example_id": 5812, "sql_complexity": "single join", "prompt": "Calculate the percentage of Shariah-compliant investments held by each investor in the top 5 countries with the highest percentage?", "context": "CREATE TABLE investors (investor_id INT, investor_name TEXT, country TEXT); INSERT INTO investors (investor_id, investor_name, country) VALUES (1, 'Al Thani', 'Qatar'), (2, 'Saudi Investment Group', 'Saudi Arabia'), (3, 'Temasek Holdings', 'Singapore'); CREATE TABLE investments (investment_id INT, investor_id INT, investment_type TEXT, investment_value DECIMAL, is_shariah_compliant BOOLEAN); INSERT INTO investments (investment_id, investor_id, investment_type, investment_value, is_shariah_compliant) VALUES (1, 1, 'Real Estate', 15000000, true), (2, 2, 'Stocks', 20000000, false);", "reference_sql": "SELECT investor_name, ROUND((SUM(CASE WHEN is_shariah_compliant THEN investment_value ELSE 0 END) / SUM(investment_value)) * 100, 2) AS percentage FROM investments JOIN investors ON investments.investor_id = investors.investor_id GROUP BY investor_name ORDER BY percentage DESC LIMIT 5;", "generated_sql": "SELECT \n    inv.investor_id,\n    inv.investor_name,\n    inv.country,\n    (SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) * 100.0 / COUNT(i.investment_id)) AS shariah_percentage\n  FROM investors inv\n  LEFT JOIN investments i \n    ON inv.investor_id = i.investor_id\n  GROUP BY inv.investor_id, inv.investor_name, inv.country\n),\ncountry_percentage AS (\n  SELECT \n    inv.country,\n    (SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) * 100.0 / COUNT(i.investment_id)) AS country_shariah_percentage\n  FROM investors inv\n  JOIN investments i \n    ON inv.investor_id = i.investor_id\n  GROUP BY inv.country\n)\nSELECT \n  ip.investor_id,\n  ip.investor_name,\n  ip.country,\n  ip.shariah_percentage\nFROM investor_percentage ip\nWHERE ip.country IN (\n    SELECT cp.country\n    FROM country_percentage cp\n    ORDER BY cp.country_shariah_percentage DESC\n    FETCH FIRST 5 ROWS ONLY\n)\nORDER BY ip.country, ip.investor_id;", "raw_model_output": "WITH investor_percentage AS (\n  SELECT \n    inv.investor_id,\n    inv.investor_name,\n    inv.country,\n    (SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) * 100.0 / COUNT(i.investment_id)) AS shariah_percentage\n  FROM investors inv\n  LEFT JOIN investments i \n    ON inv.investor_id = i.investor_id\n  GROUP BY inv.investor_id, inv.investor_name, inv.country\n),\ncountry_percentage AS (\n  SELECT \n    inv.country,\n    (SUM(CASE WHEN i.is_shariah_compliant THEN 1 ELSE 0 END) * 100.0 / COUNT(i.investment_id)) AS country_shariah_percentage\n  FROM investors inv\n  JOIN investments i \n    ON inv.investor_id = i.investor_id\n  GROUP BY inv.country\n)\nSELECT \n  ip.investor_id,\n  ip.investor_name,\n  ip.country,\n  ip.shariah_percentage\nFROM investor_percentage ip\nWHERE ip.country IN (\n    SELECT cp.country\n    FROM country_percentage cp\n    ORDER BY cp.country_shariah_percentage DESC\n    FETCH FIRST 5 ROWS ONLY\n)\nORDER BY ip.country, ip.investor_id;", "latency_sec": 9.970039129257202, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 243, "prompt_eval_sec": null, "tokens_completion": 1436, "completion_eval_sec": null, "tokens_total": 1679, "tokens_per_sec": 168.40455470961533, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in multiple aspects.  The Reference SQL calculates the percentage of investment value that is shariah compliant, while the Generated SQL calculates the percentage of investments (count) that are shariah compliant.  The Generated SQL also includes additional columns (investor_id, country) and performs a more complex filtering based on country-level shariah compliance percentages.  Additionally, the Generated SQL uses a LEFT JOIN which includes investors with no investments, while the Reference SQL uses an INNER JOIN.  These differences in calculation, data selection, and filtering mean the queries will not produce the same results."}
{"example_id": 4706, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 customers by total spend on makeup products from Italy and Spain?", "context": "CREATE TABLE customers (customer_id INT, customer_name TEXT, country TEXT); INSERT INTO customers (customer_id, customer_name, country) VALUES (1, 'Alessandro Martini', 'IT'), (2, 'Laura Rossi', 'ES'), (3, 'Daniela Gonzalez', 'MX'), (4, 'Jose Hernandez', 'ES'), (5, 'Sophia Rodriguez', 'IT'); CREATE TABLE sales (sale_id INT, customer_id INT, product_id INT, sale_quantity INT, sale_country TEXT); INSERT INTO sales (sale_id, customer_id, product_id, sale_quantity, sale_country) VALUES (1, 1, 1, 100, 'IT'), (2, 2, 2, 150, 'ES'), (3, 3, 3, 200, 'MX'), (4, 4, 4, 250, 'ES'), (5, 5, 5, 300, 'IT'); CREATE TABLE products (product_id INT, product_name TEXT, category TEXT); INSERT INTO products (product_id, product_name, category) VALUES (1, 'Eyeshadow Palette', 'makeup'), (2, 'Liquid Lipstick', 'makeup'), (3, 'BB Cream', 'makeup'), (4, 'Volumizing Mascara', 'makeup'), (5, 'Nourishing Lip Balm', 'makeup');", "reference_sql": "SELECT c.customer_name, SUM(s.sale_quantity) as total_spent_on_makeup FROM sales s JOIN customers c ON s.customer_id = c.customer_id JOIN products p ON s.product_id = p.product_id WHERE c.country IN ('IT', 'ES') AND p.category = 'makeup' GROUP BY c.customer_name ORDER BY total_spent_on_makeup DESC LIMIT 3;", "generated_sql": "SELECT c.customer_name,\n       SUM(s.sale_quantity) AS total_spend\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE p.category = 'makeup'\n  AND c.country IN ('IT', 'ES')\nGROUP BY c.customer_id, c.customer_name\nORDER BY total_spend DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT c.customer_name,\n       SUM(s.sale_quantity) AS total_spend\nFROM customers c\nJOIN sales s ON c.customer_id = s.customer_id\nJOIN products p ON s.product_id = p.product_id\nWHERE p.category = 'makeup'\n  AND c.country IN ('IT', 'ES')\nGROUP BY c.customer_id, c.customer_name\nORDER BY total_spend DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 34.275799036026, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 376, "prompt_eval_sec": null, "tokens_completion": 547, "completion_eval_sec": null, "tokens_total": 923, "tokens_per_sec": 26.928620950014018, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining the same tables with identical conditions. The GROUP BY clause in the generated query includes both customer_id and customer_name, which is functionally equivalent to grouping by customer_name alone since customer_id is unique. The ORDER BY and LIMIT clauses are semantically equivalent (ORDER BY ... DESC LIMIT 3 vs. ORDER BY ... FETCH FIRST 3 ROWS ONLY). The alias names (total_spent_on_makeup vs. total_spend) do not affect the result."}
{"example_id": 1515, "sql_complexity": "multiple_joins", "prompt": "What is the average age of clients who lost cases in the 'personal injury' category?", "context": "CREATE TABLE Cases (CaseID int, ClientID int, Category varchar(50)); INSERT INTO Cases (CaseID, ClientID, Category) VALUES (701, 7, 'Personal Injury'); CREATE TABLE Clients (ClientID int, Age int, Gender varchar(10)); INSERT INTO Clients (ClientID, Age, Gender) VALUES (7, 45, 'Male'); CREATE TABLE CaseOutcomes (CaseID int, Outcome varchar(50)); INSERT INTO CaseOutcomes (CaseID, Outcome) VALUES (701, 'Lost');", "reference_sql": "SELECT AVG(C.Age) as AvgAge FROM Clients C INNER JOIN Cases CA ON C.ClientID = CA.ClientID INNER JOIN CaseOutcomes CO ON CA.CaseID = CO.CaseID WHERE CA.Category = 'Personal Injury' AND CO.Outcome = 'Lost';", "generated_sql": "SELECT AVG(cl.Age) AS AverageAge\nFROM Cases cs\nJOIN Clients cl ON cs.ClientID = cl.ClientID\nJOIN CaseOutcomes co ON cs.CaseID = co.CaseID\nWHERE LOWER(cs.Category) = 'personal injury'\n  AND co.Outcome = 'Lost';", "raw_model_output": "SELECT AVG(cl.Age) AS AverageAge\nFROM Cases cs\nJOIN Clients cl ON cs.ClientID = cl.ClientID\nJOIN CaseOutcomes co ON cs.CaseID = co.CaseID\nWHERE LOWER(cs.Category) = 'personal injury'\n  AND co.Outcome = 'Lost';", "latency_sec": 4.008548021316528, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 194, "prompt_eval_sec": null, "tokens_completion": 456, "completion_eval_sec": null, "tokens_total": 650, "tokens_per_sec": 162.1534771551821, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of clients with 'Personal Injury' cases that resulted in a 'Lost' outcome. The generated query uses LOWER() on the category, but since the stored value is exactly 'Personal Injury', the case-insensitive comparison behaves identically to the exact match in the reference query. All joins, filters, and aggregation logic are equivalent."}
{"example_id": 4388, "sql_complexity": "subqueries", "prompt": "Insert a new drug with a price 10% higher than the average price", "context": "CREATE TABLE drugs (drug_id INT, drug_name VARCHAR(50), price DECIMAL(10, 2)); INSERT INTO drugs (drug_id, drug_name, price) VALUES (1, 'DrugA', 50), (2, 'DrugB', 75), (3, 'DrugC', 100)", "reference_sql": "INSERT INTO drugs (drug_id, drug_name, price) VALUES ((SELECT MAX(drug_id) FROM drugs) + 1, 'DrugD', (SELECT AVG(price) * 1.1 FROM drugs))", "generated_sql": "INSERT INTO drugs (drug_id, drug_name, price)\nSELECT MAX(drug_id) + 1, 'New Drug', AVG(price) * 1.1 FROM drugs;", "raw_model_output": "INSERT INTO drugs (drug_id, drug_name, price)\nSELECT MAX(drug_id) + 1, 'New Drug', AVG(price) * 1.1 FROM drugs;", "latency_sec": 5.398855924606323, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 148, "prompt_eval_sec": null, "tokens_completion": 752, "completion_eval_sec": null, "tokens_total": 900, "tokens_per_sec": 166.7019851183798, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in the drug_name value inserted ('DrugD' vs 'New Drug'). While both calculate drug_id and price identically (using MAX(drug_id)+1 and AVG(price)*1.1), the distinct drug_name values make the results non-equivalent."}
{"example_id": 5431, "sql_complexity": "basic SQL", "prompt": "What is the average CO2 emission of ride-hailing vehicles in San Francisco?", "context": "CREATE TABLE SFRideHailing (id INT, company VARCHAR(20), co2_emission DECIMAL(5,2));", "reference_sql": "SELECT AVG(co2_emission) FROM SFRideHailing WHERE company = 'Uber';", "generated_sql": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "raw_model_output": "SELECT AVG(co2_emission) AS average_co2_emission\nFROM SFRideHailing;", "latency_sec": 2.8811941146850586, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 109, "prompt_eval_sec": null, "tokens_completion": 165, "completion_eval_sec": null, "tokens_total": 274, "tokens_per_sec": 95.09945845143126, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters results to only include rows where company = 'Uber' before calculating the average, while the Generated SQL calculates the average for all rows in the table without any filtering. Without the WHERE clause, the Generated SQL may include data from other companies, leading to a different result."}
{"example_id": 3531, "sql_complexity": "single join", "prompt": "What is the total number of workouts and total workout time per user for users with a membership type of 'Basic'?", "context": "CREATE TABLE Members (id INT, user_name VARCHAR, membership_type VARCHAR, signup_date DATE); CREATE TABLE Workouts (id INT, user_id INT, workout_date DATE, workout_duration INT); INSERT INTO Members (id, user_name, membership_type, signup_date) VALUES (1, 'John Doe', 'Premium', '2020-01-01'), (2, 'Jane Smith', 'Basic', '2019-06-15'), (3, 'Alice Johnson', 'Premium', '2020-03-20'); INSERT INTO Workouts (id, user_id, workout_date, workout_duration) VALUES (1, 1, '2020-01-01', 60), (2, 1, '2020-01-02', 70), (3, 2, '2019-06-15', 90), (4, 3, '2020-03-20', 65), (5, 3, '2020-03-21', 70);", "reference_sql": "SELECT Members.user_name, SUM(Workouts.workout_duration) AS total_workout_time, COUNT(Workouts.id) AS total_workouts FROM Members JOIN Workouts ON Members.id = Workouts.user_id WHERE Members.membership_type = 'Basic' GROUP BY Members.user_name;", "generated_sql": "SELECT \n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    COALESCE(SUM(w.workout_duration), 0) AS total_workout_time\nFROM Members m\nLEFT JOIN Workouts w ON m.id = w.user_id\nWHERE m.membership_type = 'Basic'\nGROUP BY m.user_name;", "raw_model_output": "SELECT \n    m.user_name,\n    COUNT(w.id) AS total_workouts,\n    COALESCE(SUM(w.workout_duration), 0) AS total_workout_time\nFROM Members m\nLEFT JOIN Workouts w ON m.id = w.user_id\nWHERE m.membership_type = 'Basic'\nGROUP BY m.user_name;", "latency_sec": 2.7594552040100098, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 301, "prompt_eval_sec": null, "tokens_completion": 272, "completion_eval_sec": null, "tokens_total": 573, "tokens_per_sec": 207.64968359237096, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their join type (INNER vs LEFT) and handling of NULLs. The Reference SQL uses an INNER JOIN which excludes 'Basic' members with no workouts, while the Generated SQL uses a LEFT JOIN and COALESCE to include them with 0 values. This leads to different result sets when there are 'Basic' members without associated workouts."}
{"example_id": 5678, "sql_complexity": "set operations", "prompt": "How many public works projects are there in 'Sydney' and 'Melbourne' combined?", "context": "CREATE TABLE PublicWorksC(id INT, city VARCHAR(20), project VARCHAR(30)); INSERT INTO PublicWorksC(id, city, project) VALUES (1, 'Sydney', 'Park Renovation'), (2, 'Melbourne', 'Sidewalk Repair');", "reference_sql": "SELECT COUNT(*) FROM (SELECT city FROM PublicWorksC WHERE city = 'Sydney' UNION ALL SELECT city FROM PublicWorksC WHERE city = 'Melbourne') AS Total;", "generated_sql": "SELECT COUNT(*) AS TotalProjects\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "raw_model_output": "SELECT COUNT(*) AS TotalProjects\nFROM PublicWorksC\nWHERE city IN ('Sydney', 'Melbourne');", "latency_sec": 2.1626222133636475, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 137, "prompt_eval_sec": null, "tokens_completion": 161, "completion_eval_sec": null, "tokens_total": 298, "tokens_per_sec": 137.79568070583346, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows where the city is either 'Sydney' or 'Melbourne'. The Reference SQL uses a subquery with UNION ALL to combine results from two separate selects, but since UNION ALL preserves all rows (and the cities are mutually exclusive), the total count matches the Generated SQL's direct WHERE city IN (...) condition."}
{"example_id": 5792, "sql_complexity": "multiple_joins", "prompt": "How many cases were handled by attorneys in the 'Los Angeles' office?", "context": "CREATE TABLE offices (office_id INT, office_name VARCHAR(20), city VARCHAR(20), state VARCHAR(20)); INSERT INTO offices (office_id, office_name, city, state) VALUES (1, 'Boston', 'Boston', 'MA'), (2, 'New York', 'New York', 'NY'), (3, 'Los Angeles', 'Los Angeles', 'CA'); CREATE TABLE attorneys (attorney_id INT, office_id INT); INSERT INTO attorneys (attorney_id, office_id) VALUES (1, 1), (2, 2), (3, 3); CREATE TABLE cases (case_id INT, attorney_id INT); INSERT INTO cases (case_id, attorney_id) VALUES (1, 1), (2, 2), (3, 3);", "reference_sql": "SELECT COUNT(*) FROM cases JOIN attorneys ON cases.attorney_id = attorneys.attorney_id JOIN offices ON attorneys.office_id = offices.office_id WHERE offices.city = 'Los Angeles';", "generated_sql": "SELECT COUNT(c.case_id) AS num_cases\nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nJOIN offices o ON a.office_id = o.office_id\nWHERE o.office_name = 'Los Angeles';", "raw_model_output": "SELECT COUNT(c.case_id) AS num_cases\nFROM cases c\nJOIN attorneys a ON c.attorney_id = a.attorney_id\nJOIN offices o ON a.office_id = o.office_id\nWHERE o.office_name = 'Los Angeles';", "latency_sec": 2.6601359844207764, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 244, "prompt_eval_sec": null, "tokens_completion": 252, "completion_eval_sec": null, "tokens_total": 496, "tokens_per_sec": 186.4566333844772, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their WHERE clause conditions: the Reference SQL filters on 'offices.city = 'Los Angeles'', while the Generated SQL filters on 'o.office_name = 'Los Angeles''. Although in the provided sample data the office_name and city values coincide for Los Angeles, the schema does not enforce a relationship between these columns. Semantically, they are not equivalent because they could produce different results with different data (e.g., if an office's name differed from its city)."}
{"example_id": 5148, "sql_complexity": "window functions", "prompt": "List the unique types of smart city technologies that have been implemented in the top 3 most populous countries in the world.", "context": "CREATE TABLE smart_city_tech (tech_type VARCHAR(255), country VARCHAR(255)); CREATE TABLE country_populations (country VARCHAR(255), population INT);", "reference_sql": "SELECT DISTINCT tech_type FROM smart_city_tech SCT WHERE country IN (SELECT country FROM (SELECT country, ROW_NUMBER() OVER (ORDER BY population DESC) as rank FROM country_populations) CP WHERE rank <= 3);", "generated_sql": "SELECT DISTINCT sct.tech_type\nFROM smart_city_tech sct\nWHERE sct.country IN (\n    SELECT cp.country\n    FROM country_populations cp\n    ORDER BY cp.population DESC\n    FETCH FIRST 3 ROWS ONLY\n);", "raw_model_output": "SELECT DISTINCT sct.tech_type\nFROM smart_city_tech sct\nWHERE sct.country IN (\n    SELECT cp.country\n    FROM country_populations cp\n    ORDER BY cp.population DESC\n    FETCH FIRST 3 ROWS ONLY\n);", "latency_sec": 3.1790971755981445, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 122, "prompt_eval_sec": null, "tokens_completion": 317, "completion_eval_sec": null, "tokens_total": 439, "tokens_per_sec": 138.08951905265448, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the top 3 countries by population. The reference query uses ROW_NUMBER() to explicitly rank countries and filter the top 3, while the generated query uses ORDER BY with FETCH FIRST 3 ROWS ONLY. Both approaches yield the same set of countries, ensuring the same result for the outer query selecting distinct tech_types."}
{"example_id": 5547, "sql_complexity": "multiple_joins", "prompt": "Which species have a population growth rate higher than the average for protected areas?", "context": "CREATE TABLE species (id INT, name VARCHAR(50), population DECIMAL(5,2), protected_area_id INT, growth_rate DECIMAL(5,2)); INSERT INTO species (id, name, population, protected_area_id, growth_rate) VALUES (1, 'Species 1', 500.00, 1, 0.05), (2, 'Species 2', 800.00, 1, 0.03), (3, 'Species 3', 1200.00, 2, 0.07), (4, 'Species 4', 700.00, 2, 0.02); CREATE TABLE protected_areas (id INT, name VARCHAR(50)); INSERT INTO protected_areas (id, name) VALUES (1, 'Area 1'), (2, 'Area 2');", "reference_sql": "SELECT s.name, s.growth_rate FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id GROUP BY s.name, s.growth_rate HAVING s.growth_rate > (SELECT AVG(s.growth_rate) FROM species s INNER JOIN protected_areas pa ON s.protected_area_id = pa.id);", "generated_sql": "SELECT s.id, s.name, s.population, s.protected_area_id, s.growth_rate\nFROM species s\nJOIN (SELECT protected_area_id, AVG(growth_rate) AS avg_growth_rate\n      FROM species\n      GROUP BY protected_area_id) AS pa_avg\n  ON s.protected_area_id = pa_avg.protected_area_id\nWHERE s.growth_rate > pa_avg.avg_growth_rate;", "raw_model_output": "SELECT s.id, s.name, s.population, s.protected_area_id, s.growth_rate\nFROM species s\nJOIN (SELECT protected_area_id, AVG(growth_rate) AS avg_growth_rate\n      FROM species\n      GROUP BY protected_area_id) AS pa_avg\n  ON s.protected_area_id = pa_avg.protected_area_id\nWHERE s.growth_rate > pa_avg.avg_growth_rate;", "latency_sec": 3.4322619438171387, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 259, "prompt_eval_sec": null, "tokens_completion": 351, "completion_eval_sec": null, "tokens_total": 610, "tokens_per_sec": 177.72536303613168, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL compares each species' growth_rate to the overall average growth rate of all species (global average), while the Generated SQL compares each species' growth_rate to the average growth rate within its specific protected area (area-specific average). The HAVING clause in the Reference SQL uses a scalar subquery for the global average, whereas the Generated SQL uses a JOIN with a subquery that calculates per-area averages. This results in different filtering conditions and outputs."}
{"example_id": 5498, "sql_complexity": "aggregation", "prompt": "Identify the destinations with the highest number of repeat visitors from the US.", "context": "CREATE TABLE RepeatTravelers (Visitor VARCHAR(20), Destination VARCHAR(20), VisitCount INT); INSERT INTO RepeatTravelers (Visitor, Destination, VisitCount) VALUES ('David', 'Paris', 3), ('Ella', 'London', 4), ('Fiona', 'Paris', 2);", "reference_sql": "SELECT Destination, AVG(VisitCount) AS AvgVisitCount FROM RepeatTravelers WHERE Visitor LIKE '%USA%' GROUP BY Destination ORDER BY AvgVisitCount DESC;", "generated_sql": "SELECT \n    Destination, \n    COUNT(DISTINCT Visitor) AS USRepeatVisitorCount\n  FROM RepeatTravelers\n  GROUP BY Destination\n)\nSELECT Destination\nFROM VisitorCounts\nWHERE USRepeatVisitorCount = (\n  SELECT MAX(USRepeatVisitorCount)\n  FROM VisitorCounts\n);", "raw_model_output": "Since no column indicates a visitor\u2019s country, we must assume that all rows represent US visitors. Under that assumption, \u201cdestinations with the highest number of repeat visitors\u201d means we need to count, for each destination, the number of distinct visitors (each of whom is by definition a repeat traveler) and then return the destination or destinations having the maximum count. One ANSI\u2011SQL solution is:\n\nWITH VisitorCounts AS (\n  SELECT \n    Destination, \n    COUNT(DISTINCT Visitor) AS USRepeatVisitorCount\n  FROM RepeatTravelers\n  GROUP BY Destination\n)\nSELECT Destination\nFROM VisitorCounts\nWHERE USRepeatVisitorCount = (\n  SELECT MAX(USRepeatVisitorCount)\n  FROM VisitorCounts\n);\n\nThis statement first computes the count of repeat visitors (assumed to be US visitors) per destination and then selects the destination(s) having the maximum count.", "latency_sec": 10.136094093322754, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 142, "prompt_eval_sec": null, "tokens_completion": 1339, "completion_eval_sec": null, "tokens_total": 1481, "tokens_per_sec": 146.1115086703489, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries perform different operations. The Reference SQL calculates the average VisitCount for US-based visitors per destination, while the Generated SQL counts distinct US visitors per destination and finds the maximum. The Generated SQL also lacks the WHERE Visitor LIKE '%USA%' filter present in the Reference SQL. The output metrics (average vs. count) and logic (grouping/averaging vs. finding max count) differ fundamentally."}
{"example_id": 3546, "sql_complexity": "window functions", "prompt": "What are the cryptocurrency exchanges with their corresponding blockchain companies, ranked by exchange ID in ascending order, for the Bitcoin platform?", "context": "CREATE TABLE cryptocurrency_exchanges (exchange_id INT, exchange_name VARCHAR(50), company_id INT); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (1, 'Binance', 1); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (2, 'Coinbase', 2); INSERT INTO cryptocurrency_exchanges (exchange_id, exchange_name, company_id) VALUES (3, 'Kraken', 3); CREATE TABLE blockchain_companies (company_id INT, company_name VARCHAR(50), platform VARCHAR(50)); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (1, 'Binance', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (2, 'Blockstream', 'Bitcoin'); INSERT INTO blockchain_companies (company_id, company_name, platform) VALUES (3, 'Blockchair', 'Bitcoin');", "reference_sql": "SELECT ce.exchange_name, bc.company_name, ce.exchange_id, ROW_NUMBER() OVER (PARTITION BY bc.platform ORDER BY ce.exchange_id ASC) as rank FROM cryptocurrency_exchanges ce JOIN blockchain_companies bc ON ce.company_id = bc.company_id WHERE bc.platform = 'Bitcoin';", "generated_sql": "SELECT ce.exchange_name,\n       bc.company_name\nFROM cryptocurrency_exchanges AS ce\nJOIN blockchain_companies AS bc\n  ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "raw_model_output": "SELECT ce.exchange_name,\n       bc.company_name\nFROM cryptocurrency_exchanges AS ce\nJOIN blockchain_companies AS bc\n  ON ce.company_id = bc.company_id\nWHERE bc.platform = 'Bitcoin'\nORDER BY ce.exchange_id ASC;", "latency_sec": 3.2778260707855225, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 284, "prompt_eval_sec": null, "tokens_completion": 315, "completion_eval_sec": null, "tokens_total": 599, "tokens_per_sec": 182.74307027415009, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an additional 'rank' column generated by the ROW_NUMBER() function and does not have an ORDER BY clause, while the Generated SQL omits the 'rank' column and includes an ORDER BY ce.exchange_id ASC. The presence of different columns and different sorting behavior makes the queries semantically distinct."}
{"example_id": 486, "sql_complexity": "single join", "prompt": "What is the average price of paintings from African artists in our collection?", "context": "CREATE TABLE Artworks (id INT, title VARCHAR(50), price DECIMAL(10,2), medium VARCHAR(50), artist_nationality VARCHAR(50)); CREATE TABLE Collections (id INT, name VARCHAR(50), continent VARCHAR(50));", "reference_sql": "SELECT AVG(Artworks.price) FROM Artworks INNER JOIN Collections ON Artworks.artist_nationality = Collections.continent WHERE Artworks.medium = 'Painting' AND Collections.continent = 'Africa';", "generated_sql": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'painting'\n  AND artist_nationality = 'African';", "raw_model_output": "SELECT AVG(price) AS average_price\nFROM Artworks\nWHERE medium = 'painting'\n  AND artist_nationality = 'African';", "latency_sec": 6.6000518798828125, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 131, "prompt_eval_sec": null, "tokens_completion": 807, "completion_eval_sec": null, "tokens_total": 938, "tokens_per_sec": 142.12009497365568, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL joins Artworks with Collections on artist_nationality = continent and filters for Collections.continent = 'Africa', while the Generated SQL directly filters Artworks.artist_nationality = 'African' without any join. The conditions and table relationships differ: the Reference uses a join with Collections and filters on continent, whereas the Generated SQL skips the join and uses a direct artist_nationality check. Additionally, 'Africa' (continent name) vs. 'African' (nationality value) are semantically different."}
{"example_id": 794, "sql_complexity": "multiple_joins", "prompt": "Which suppliers have provided raw materials for the production of chemicals with high environmental impact?", "context": "CREATE TABLE suppliers (id INT, name TEXT); INSERT INTO suppliers (id, name) VALUES (1, 'Supplier1'), (2, 'Supplier2'), (3, 'Supplier3'); CREATE TABLE chemicals (id INT, name TEXT, environmental_impact INT); INSERT INTO chemicals (id, name, environmental_impact) VALUES (1, 'ChemA', 10), (2, 'ChemB', 20), (3, 'ChemC', 15); CREATE TABLE raw_materials (chemical_id INT, supplier_id INT); INSERT INTO raw_materials (chemical_id, supplier_id) VALUES (1, 1), (1, 2), (2, 3), (3, 1);", "reference_sql": "SELECT s.name FROM suppliers s INNER JOIN raw_materials rm ON s.id = rm.supplier_id INNER JOIN chemicals c ON rm.chemical_id = c.id WHERE c.environmental_impact > 10;", "generated_sql": "SELECT DISTINCT s.id, s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact >= 15;", "raw_model_output": "SELECT DISTINCT s.id, s.name\nFROM suppliers s\nJOIN raw_materials rm ON s.id = rm.supplier_id\nJOIN chemicals c ON rm.chemical_id = c.id\nWHERE c.environmental_impact >= 15;", "latency_sec": 5.6082963943481445, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 231, "prompt_eval_sec": null, "tokens_completion": 699, "completion_eval_sec": null, "tokens_total": 930, "tokens_per_sec": 165.82575787849288, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL uses 'environmental_impact > 10' while the Generated SQL uses 'environmental_impact >= 15'. Although in the provided data these conditions yield the same chemicals (15 and 20), they are not mathematically equivalent in general. Second, the Generated SQL includes 'DISTINCT' which eliminates duplicate supplier entries, whereas the Reference SQL does not. This could lead to different result sets if a supplier is linked to multiple qualifying chemicals."}
{"example_id": 3164, "sql_complexity": "set operations", "prompt": "What is the average age of patients who received therapy in 'clinic_a' and 'clinic_b'?", "context": "CREATE TABLE clinic_a (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_a (patient_id, age, therapy_received) VALUES (1, 35, true), (2, 42, true), (3, 28, false); CREATE TABLE clinic_b (patient_id INT, age INT, therapy_received BOOLEAN); INSERT INTO clinic_b (patient_id, age, therapy_received) VALUES (4, 50, true), (5, 32, false), (6, 45, true);", "reference_sql": "SELECT AVG(age) FROM (SELECT age FROM clinic_a WHERE therapy_received = true UNION ALL SELECT age FROM clinic_b WHERE therapy_received = true) AS combined_clinics;", "generated_sql": "SELECT AVG(age) AS average_age\nFROM (\n  SELECT age FROM clinic_a WHERE therapy_received = TRUE\n  UNION ALL\n  SELECT age FROM clinic_b WHERE therapy_received = TRUE\n) AS combined_clinics;", "raw_model_output": "SELECT AVG(age) AS average_age\nFROM (\n  SELECT age FROM clinic_a WHERE therapy_received = TRUE\n  UNION ALL\n  SELECT age FROM clinic_b WHERE therapy_received = TRUE\n) AS combined_clinics;", "latency_sec": 2.9314019680023193, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 195, "prompt_eval_sec": null, "tokens_completion": 248, "completion_eval_sec": null, "tokens_total": 443, "tokens_per_sec": 151.1222291707384, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of patients who received therapy (therapy_received = true) from both clinic_a and clinic_b. The structure is identical, with the same UNION ALL logic and aggregation. The differences (column alias in outer query, capitalization of TRUE, and subquery alias) do not affect semantic equivalence."}
{"example_id": 3704, "sql_complexity": "aggregation", "prompt": "What is the total sales revenue for each category of garments in the South America region in Q1 2022?", "context": "CREATE TABLE sales_category (sale_id INT, garment_category VARCHAR(50), sale_date DATE, total_sales DECIMAL(10, 2), region VARCHAR(50));", "reference_sql": "SELECT garment_category, SUM(total_sales) FROM sales_category WHERE sale_date BETWEEN '2022-01-01' AND '2022-03-31' AND region = 'South America' GROUP BY garment_category;", "generated_sql": "SELECT \n    garment_category, \n    SUM(total_sales) AS total_sales_revenue\nFROM \n    sales_category\nWHERE \n    region = 'South America' AND\n    sale_date BETWEEN '2022-01-01' AND '2022-03-31'\nGROUP BY \n    garment_category;", "raw_model_output": "SELECT \n    garment_category, \n    SUM(total_sales) AS total_sales_revenue\nFROM \n    sales_category\nWHERE \n    region = 'South America' AND\n    sale_date BETWEEN '2022-01-01' AND '2022-03-31'\nGROUP BY \n    garment_category;", "latency_sec": 2.94803524017334, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 266, "completion_eval_sec": null, "tokens_total": 389, "tokens_per_sec": 131.95228968061028, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (garment_category and SUM(total_sales)), apply identical WHERE conditions (region = 'South America' and sale_date between '2022-01-01' and '2022-03-31'), and group by the same column (garment_category). The only difference is the alias name for the aggregated column (total_sales vs. total_sales_revenue), which does not affect the semantic result."}
{"example_id": 2851, "sql_complexity": "single join", "prompt": "How many cases were handled by attorneys who joined the firm in 2015 or later?", "context": "CREATE TABLE attorneys (attorney_id INT, join_year INT); CREATE TABLE cases (case_id INT, attorney_id INT, billing_amount INT);", "reference_sql": "SELECT COUNT(DISTINCT cases.case_id) FROM cases INNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id WHERE attorneys.join_year >= 2015;", "generated_sql": "SELECT COUNT(*) AS case_count\nFROM cases\nINNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id\nWHERE attorneys.join_year >= 2015;", "raw_model_output": "SELECT COUNT(*) AS case_count\nFROM cases\nINNER JOIN attorneys ON cases.attorney_id = attorneys.attorney_id\nWHERE attorneys.join_year >= 2015;", "latency_sec": 2.334507942199707, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 113, "prompt_eval_sec": null, "tokens_completion": 236, "completion_eval_sec": null, "tokens_total": 349, "tokens_per_sec": 149.49617163056305, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses COUNT(DISTINCT cases.case_id) while the Generated SQL uses COUNT(*). If there are multiple entries in the 'cases' table with the same case_id for a given attorney, the COUNT(DISTINCT) would count each unique case_id once, whereas COUNT(*) would count all rows. This difference in aggregation logic makes the queries non-equivalent."}
{"example_id": 3246, "sql_complexity": "single join", "prompt": "What is the average eco-friendliness score of accommodations in Oceania by year?", "context": "CREATE TABLE Accommodations (Accommodation_ID INT, Accommodation_Name VARCHAR(50), City VARCHAR(30), Country VARCHAR(50), Eco_Friendliness_Score INT, Visit_Year INT); INSERT INTO Accommodations (Accommodation_ID, Accommodation_Name, City, Country, Eco_Friendliness_Score, Visit_Year) VALUES (1, 'EcoLodge', 'Sydney', 'Australia', 85, 2019), (2, 'GreenHotel', 'Melbourne', 'Australia', 90, 2019), (3, 'SustainableResort', 'Auckland', 'New Zealand', 80, 2019), (4, 'EcoVilla', 'Wellington', 'New Zealand', 88, 2019); CREATE TABLE Countries (Country VARCHAR(50), Continent VARCHAR(30)); INSERT INTO Countries (Country, Continent) VALUES ('Australia', 'Oceania'), ('New Zealand', 'Oceania');", "reference_sql": "SELECT C.Continent, V.Visit_Year, AVG(A.Eco_Friendliness_Score) AS Avg_Eco_Score  FROM Accommodations A  JOIN Countries C  ON A.Country = C.Country  WHERE C.Continent = 'Oceania'  GROUP BY C.Continent, V.Visit_Year  ORDER BY V.Visit_Year;", "generated_sql": "SELECT a.Visit_Year, AVG(a.Eco_Friendliness_Score) AS Average_Eco_Friendliness_Score\nFROM Accommodations AS a\nJOIN Countries AS c ON a.Country = c.Country\nWHERE c.Continent = 'Oceania'\nGROUP BY a.Visit_Year;", "raw_model_output": "SELECT a.Visit_Year, AVG(a.Eco_Friendliness_Score) AS Average_Eco_Friendliness_Score\nFROM Accommodations AS a\nJOIN Countries AS c ON a.Country = c.Country\nWHERE c.Continent = 'Oceania'\nGROUP BY a.Visit_Year;", "latency_sec": 2.771820068359375, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 280, "prompt_eval_sec": null, "tokens_completion": 265, "completion_eval_sec": null, "tokens_total": 545, "tokens_per_sec": 196.62170940359144, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'Continent' in both the SELECT and GROUP BY clauses, while the Generated SQL omits it. Although the WHERE clause restricts to 'Oceania', the output structure differs (extra column in Reference SQL). Semantic equivalence requires identical result sets, including column structure."}
{"example_id": 3056, "sql_complexity": "multiple_joins", "prompt": "Identify all suppliers who provide non-GMO ingredients to restaurants with Michelin stars.", "context": "CREATE TABLE Suppliers (id INT, name VARCHAR(50), isNonGMO BOOLEAN); CREATE TABLE Restaurants (id INT, name VARCHAR(50), numStars INT); CREATE TABLE Ingredients (supplierId INT, restaurantId INT, isNonGMO BOOLEAN);", "reference_sql": "SELECT Suppliers.name FROM Suppliers INNER JOIN Ingredients ON Suppliers.id = Ingredients.supplierId INNER JOIN Restaurants ON Ingredients.restaurantId = Restaurants.id WHERE Restaurants.numStars > 2 AND Ingredients.isNonGMO = TRUE;", "generated_sql": "SELECT DISTINCT s.id, s.name, s.isNonGMO\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE\n  AND r.numStars > 0;", "raw_model_output": "SELECT DISTINCT s.id, s.name, s.isNonGMO\nFROM Suppliers s\nJOIN Ingredients i ON s.id = i.supplierId\nJOIN Restaurants r ON i.restaurantId = r.id\nWHERE i.isNonGMO = TRUE\n  AND r.numStars > 0;", "latency_sec": 3.007964849472046, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 133, "prompt_eval_sec": null, "tokens_completion": 326, "completion_eval_sec": null, "tokens_total": 459, "tokens_per_sec": 152.5948682813109, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in several key aspects. 1) The selected columns are different (the Reference query only selects 'name', while the Generated query selects 'id', 'name', and 'isNonGMO'). 2) The WHERE clause conditions differ: the Reference uses 'Restaurants.numStars > 2' while the Generated uses 'r.numStars > 0'. 3) The Generated query includes a 'DISTINCT' keyword, which could eliminate duplicate rows present in the Reference query's results. These differences ensure the queries will not produce identical results."}
{"example_id": 264, "sql_complexity": "set operations", "prompt": "List the number of community health centers and infectious disease tracking facilities in 'southwest' regions.", "context": "CREATE TABLE centers (id INT, name TEXT, region TEXT); INSERT INTO centers (id, name, region) VALUES (1, 'Center A', 'southwest'); INSERT INTO centers (id, name, region) VALUES (2, 'Center B', 'northeast'); INSERT INTO centers (id, name, region) VALUES (3, 'Center C', 'northwest'); CREATE TABLE diseases (id INT, name TEXT, region TEXT); INSERT INTO diseases (id, name, region) VALUES (1, 'Disease A', 'southwest'); INSERT INTO diseases (id, name, region) VALUES (2, 'Disease B', 'southeast');", "reference_sql": "SELECT COUNT(*) FROM ( (SELECT * FROM centers WHERE region = 'southwest') UNION (SELECT * FROM diseases WHERE region = 'southwest') );", "generated_sql": "SELECT\n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS num_community_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS num_infectious_disease_facilities;", "raw_model_output": "SELECT\n  (SELECT COUNT(*) FROM centers WHERE region = 'southwest') AS num_community_health_centers,\n  (SELECT COUNT(*) FROM diseases WHERE region = 'southwest') AS num_infectious_disease_facilities;", "latency_sec": 2.930253028869629, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 223, "prompt_eval_sec": null, "tokens_completion": 199, "completion_eval_sec": null, "tokens_total": 422, "tokens_per_sec": 144.01486692184744, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single count of combined rows from centers and diseases where region = 'southwest' (using UNION). The Generated SQL returns two separate counts as columns. While the sum of the Generated SQL's results (1 + 1 = 2) matches the Reference SQL's result, the structure and output format differ. The Reference SQL produces one column with a single value, while the Generated SQL produces two columns with separate values. Semantically, they are not equivalent due to differing result structures."}
{"example_id": 2838, "sql_complexity": "basic SQL", "prompt": "What is the minimum safety rating of electric vehicles in the 'green_cars' table?", "context": "CREATE TABLE green_cars (id INT, make VARCHAR(50), model VARCHAR(50), type VARCHAR(50), safety_rating INT);", "reference_sql": "SELECT MIN(safety_rating) FROM green_cars WHERE type = 'Electric';", "generated_sql": "SELECT MIN(safety_rating) AS min_safety_rating\nFROM green_cars\nWHERE type = 'electric';", "raw_model_output": "SELECT MIN(safety_rating) AS min_safety_rating\nFROM green_cars\nWHERE type = 'electric';", "latency_sec": 2.422060966491699, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 112, "prompt_eval_sec": null, "tokens_completion": 162, "completion_eval_sec": null, "tokens_total": 274, "tokens_per_sec": 113.12679729812203, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the minimum safety_rating from the green_cars table where the type matches a specific value. The only differences are the case of the string literal ('Electric' vs 'electric') and the addition of an alias (min_safety_rating). Assuming case-insensitive comparison (common in many SQL implementations), the WHERE clause conditions are equivalent. The alias does not affect the result's semantic content."}
{"example_id": 1187, "sql_complexity": "multiple_joins", "prompt": "Who are the top 3 authors with the highest number of articles published in The Guardian?", "context": "CREATE TABLE authors (id INT, name VARCHAR(100), publisher VARCHAR(50)); CREATE TABLE articles_authors (article_id INT, author_id INT); INSERT INTO authors (id, name, publisher) VALUES (1, 'Author1', 'The Guardian'), (2, 'Author2', 'The Guardian'), (3, 'Author3', 'The Guardian'); INSERT INTO articles_authors (article_id, author_id) VALUES (1, 1), (2, 2), (3, 1), (3, 2), (3, 3); INSERT INTO articles (id, title, publication_date, publisher) VALUES (1, 'Article1', '2021-01-01', 'The Guardian'), (2, 'Article2', '2021-01-02', 'The Guardian'), (3, 'Article3', '2021-01-03', 'The Guardian');", "reference_sql": "SELECT a.name, COUNT(aa.article_id) AS articles_count FROM authors a JOIN articles_authors aa ON a.id = aa.author_id JOIN articles ar ON aa.article_id = ar.id WHERE ar.publisher = 'The Guardian' GROUP BY a.name ORDER BY articles_count DESC LIMIT 3;", "generated_sql": "SELECT a.name, COUNT(ar.id) AS article_count\nFROM authors AS a\nJOIN articles_authors AS aa ON a.id = aa.author_id\nJOIN articles AS ar ON ar.id = aa.article_id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.name\nORDER BY COUNT(ar.id) DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT a.name, COUNT(ar.id) AS article_count\nFROM authors AS a\nJOIN articles_authors AS aa ON a.id = aa.author_id\nJOIN articles AS ar ON ar.id = aa.article_id\nWHERE ar.publisher = 'The Guardian'\nGROUP BY a.name\nORDER BY COUNT(ar.id) DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 4.523988962173462, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 273, "prompt_eval_sec": null, "tokens_completion": 595, "completion_eval_sec": null, "tokens_total": 868, "tokens_per_sec": 191.8660737808225, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve author names and their article counts from 'The Guardian', using identical joins, grouping, and ordering. The differences (column alias, LIMIT vs FETCH FIRST) are syntactic and do not affect the result set."}
{"example_id": 360, "sql_complexity": "window functions", "prompt": "What is the change in crime rate for each category, between this year and last year, for the same time period?", "context": "CREATE TABLE CrimeStatistics (ID INT, CrimeType VARCHAR(50), Date TIMESTAMP, Count INT); INSERT INTO CrimeStatistics (ID, CrimeType, Date, Count) VALUES (1, 'Theft', '2022-01-01 00:00:00', 100), (2, 'Vandalism', '2022-01-01 00:00:00', 50), (3, 'Theft', '2022-01-02 00:00:00', 120), (4, 'Vandalism', '2022-01-02 00:00:00', 60), (5, 'Theft', '2021-01-01 00:00:00', 80), (6, 'Vandalism', '2021-01-01 00:00:00', 40), (7, 'Theft', '2021-01-02 00:00:00', 90), (8, 'Vandalism', '2021-01-02 00:00:00', 45);", "reference_sql": "SELECT CrimeType, (SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date) ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING)) - SUM(Count) OVER (PARTITION BY CrimeType ORDER BY EXTRACT(YEAR FROM Date)) AS CrimeRateChange FROM CrimeStatistics WHERE Date BETWEEN DATE_TRUNC('year', CURRENT_DATE - INTERVAL '1 year') AND CURRENT_DATE;", "generated_sql": "SELECT \n  CrimeType,\n  SUM(CASE \n        WHEN Date >= '2022-01-01' \n         AND Date < '2023-01-01' THEN Count \n        ELSE 0 \n      END)\n  -\n  SUM(CASE \n        WHEN Date >= '2021-01-01' \n         AND Date < '2022-01-01' THEN Count \n        ELSE 0 \n      END) AS Change\nFROM CrimeStatistics\nGROUP BY CrimeType;", "raw_model_output": "SELECT \n  CrimeType,\n  SUM(CASE \n        WHEN Date >= '2022-01-01' \n         AND Date < '2023-01-01' THEN Count \n        ELSE 0 \n      END)\n  -\n  SUM(CASE \n        WHEN Date >= '2021-01-01' \n         AND Date < '2022-01-01' THEN Count \n        ELSE 0 \n      END) AS Change\nFROM CrimeStatistics\nGROUP BY CrimeType;", "latency_sec": 15.355394124984741, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 322, "prompt_eval_sec": null, "tokens_completion": 2225, "completion_eval_sec": null, "tokens_total": 2547, "tokens_per_sec": 165.87005056781837, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses window functions to calculate a 'CrimeRateChange' by comparing a specific preceding row's sum to the cumulative sum, but the WHERE clause restricts dates to the current year (2022), making it impossible to capture previous year data. The Generated SQL directly compares sums for 2022 and 2021 using explicit date ranges, which is semantically different. The Reference SQL's window function logic does not correctly compute year-over-year changes due to the date filter and window frame definition."}
{"example_id": 335, "sql_complexity": "single join", "prompt": "List the policy numbers, claim amounts, and claim dates for policies that have more than two claims and the total claim amount exceeds $5000", "context": "CREATE TABLE policies (policy_number INT);CREATE TABLE claims (claim_id INT, policy_number INT, claim_amount DECIMAL(10,2), claim_date DATE);", "reference_sql": "SELECT p.policy_number, c.claim_amount, c.claim_date FROM policies p INNER JOIN claims c ON p.policy_number = c.policy_number GROUP BY p.policy_number, c.claim_amount, c.claim_date HAVING COUNT(c.claim_id) > 2 AND SUM(c.claim_amount) > 5000;", "generated_sql": "SELECT \n    c.policy_number, \n    c.claim_amount, \n    c.claim_date\nFROM \n    claims c\nWHERE \n    c.policy_number IN (\n        SELECT \n            policy_number\n        FROM \n            claims\n        GROUP BY \n            policy_number\n        HAVING \n            COUNT(*) > 2 \n            AND SUM(claim_amount) > 5000\n    );", "raw_model_output": "SELECT \n    c.policy_number, \n    c.claim_amount, \n    c.claim_date\nFROM \n    claims c\nWHERE \n    c.policy_number IN (\n        SELECT \n            policy_number\n        FROM \n            claims\n        GROUP BY \n            policy_number\n        HAVING \n            COUNT(*) > 2 \n            AND SUM(claim_amount) > 5000\n    );", "latency_sec": 3.5444629192352295, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 128, "prompt_eval_sec": null, "tokens_completion": 410, "completion_eval_sec": null, "tokens_total": 538, "tokens_per_sec": 151.78604269785436, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query groups by policy_number, claim_amount, and claim_date, filtering groups with more than 2 claims and sum > 5000 for each specific (policy, amount, date) combination. The generated query filters policies with total claims > 2 and sum > 5000 (across all claims for the policy) and returns all claims for those policies. This leads to different results: the reference query focuses on specific claim combinations, while the generated query returns all claims for qualifying policies."}
{"example_id": 2866, "sql_complexity": "basic SQL", "prompt": "What is the number of hospitals in 'rural_healthcare' table?", "context": "CREATE TABLE rural_healthcare (name VARCHAR(255), type VARCHAR(255), location VARCHAR(255)); INSERT INTO rural_healthcare (name, type, location) VALUES ('Rural General Hospital', 'Hospital', 'Bushland'), ('Rural Community Hospital', 'Hospital', 'Forest Region');", "reference_sql": "SELECT COUNT(*) FROM rural_healthcare WHERE type = 'Hospital';", "generated_sql": "SELECT COUNT(*) AS hospital_count\nFROM rural_healthcare\nWHERE type = 'Hospital';", "raw_model_output": "SELECT COUNT(*) AS hospital_count\nFROM rural_healthcare\nWHERE type = 'Hospital';", "latency_sec": 2.213543176651001, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 141, "prompt_eval_sec": null, "tokens_completion": 93, "completion_eval_sec": null, "tokens_total": 234, "tokens_per_sec": 105.7128690636305, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows where type is 'Hospital'. The generated query adds an alias (hospital_count) to the COUNT(*) result, but this does not affect the actual value returned. The semantic result (a single numeric count) remains identical."}
{"example_id": 4440, "sql_complexity": "multiple_joins", "prompt": "What is the average session length for each game genre in the last month, sorted by average session length.", "context": "CREATE TABLE game_sessions(id INT, user_id INT, game_name VARCHAR(50), start_time DATETIME, end_time DATETIME); CREATE TABLE games(id INT, name VARCHAR(50), genre VARCHAR(50));", "reference_sql": "SELECT genres.genre, AVG(TIMESTAMPDIFF(SECOND, start_time, end_time)) as avg_session_length FROM game_sessions JOIN games ON game_sessions.game_name = games.name JOIN (SELECT DISTINCT game_name, genre FROM game_sessions JOIN games ON game_sessions.game_name = games.name) genres ON games.name = genres.game_name WHERE start_time >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY genres.genre ORDER BY avg_session_length DESC;", "generated_sql": "SELECT \n  g.genre,\n  AVG(gs.end_time - gs.start_time) AS avg_session_length\nFROM game_sessions AS gs\nJOIN games AS g\n  ON gs.game_name = g.name\nWHERE gs.start_time >= CURRENT_DATE - INTERVAL '1' MONTH\nGROUP BY g.genre\nORDER BY avg_session_length;", "raw_model_output": "SELECT \n  g.genre,\n  AVG(gs.end_time - gs.start_time) AS avg_session_length\nFROM game_sessions AS gs\nJOIN games AS g\n  ON gs.game_name = g.name\nWHERE gs.start_time >= CURRENT_DATE - INTERVAL '1' MONTH\nGROUP BY g.genre\nORDER BY avg_session_length;", "latency_sec": 9.285573959350586, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 130, "prompt_eval_sec": null, "tokens_completion": 1166, "completion_eval_sec": null, "tokens_total": 1296, "tokens_per_sec": 139.57133998108176, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL uses TIMESTAMPDIFF(SECOND, start_time, end_time) to calculate session length in seconds, while the Generated SQL uses (end_time - start_time) which returns days (as a decimal) in MySQL. Second, the Reference SQL orders results in descending order (ORDER BY avg_session_length DESC), whereas the Generated SQL uses the default ascending order. These differences in calculation units and sorting direction make the queries non-equivalent."}
{"example_id": 451, "sql_complexity": "single join", "prompt": "Which customers have made a transaction over 500 in the \"risk_management\" category?", "context": "CREATE TABLE customers (id INT, name VARCHAR(50), category VARCHAR(50)); INSERT INTO customers (id, name, category) VALUES (1, 'John Doe', 'risk_management'); INSERT INTO customers (id, name, category) VALUES (2, 'Jane Smith', 'compliance'); INSERT INTO customers (id, name, category) VALUES (3, 'Jim Brown', 'risk_management'); CREATE TABLE transactions (id INT, customer_id INT, amount DECIMAL(10, 2)); INSERT INTO transactions (id, customer_id, amount) VALUES (1, 1, 500.00); INSERT INTO transactions (id, customer_id, amount) VALUES (2, 1, 200.00); INSERT INTO transactions (id, customer_id, amount) VALUES (3, 2, 100.00); INSERT INTO transactions (id, customer_id, amount) VALUES (4, 3, 750.00);", "reference_sql": "SELECT c.name FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE c.category = 'risk_management' AND t.amount > 500;", "generated_sql": "SELECT DISTINCT c.id, c.name, c.category\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management'\n  AND t.amount > 500;", "raw_model_output": "SELECT DISTINCT c.id, c.name, c.category\nFROM customers c\nJOIN transactions t ON c.id = t.customer_id\nWHERE c.category = 'risk_management'\n  AND t.amount > 500;", "latency_sec": 3.2376890182495117, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 278, "prompt_eval_sec": null, "tokens_completion": 245, "completion_eval_sec": null, "tokens_total": 523, "tokens_per_sec": 161.5349704842144, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects only 'c.name', while the Generated SQL selects 'c.id, c.name, c.category' and uses DISTINCT. Additionally, the Generated SQL includes extra columns and enforces uniqueness, which changes the result structure and content compared to the Reference SQL."}
{"example_id": 2879, "sql_complexity": "basic SQL", "prompt": "Update the FoodSafetyRecords.OrganicFarms table to include a new record for a certified organic farm in Kenya.", "context": "CREATE TABLE FoodSafetyRecords.OrganicFarms (farmName TEXT, country TEXT, certified BOOLEAN);", "reference_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified) VALUES ('Ngong Organic Farm', 'Kenya', TRUE);", "generated_sql": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified)\nVALUES ('Organic Farm Kenya', 'Kenya', TRUE);", "raw_model_output": "INSERT INTO FoodSafetyRecords.OrganicFarms (farmName, country, certified)\nVALUES ('Organic Farm Kenya', 'Kenya', TRUE);", "latency_sec": 20.21441626548767, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 109, "prompt_eval_sec": null, "tokens_completion": 232, "completion_eval_sec": null, "tokens_total": 341, "tokens_per_sec": 16.869149003436405, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The two queries differ in the farmName value inserted. The reference query uses 'Ngong Organic Farm' while the generated query uses 'Organic Farm Kenya'. Although country and certified values are identical, the distinct farmName results in different data records being inserted."}
{"example_id": 5688, "sql_complexity": "single join", "prompt": "What is the total amount donated to a specific cause?", "context": "CREATE TABLE causes (id INT, name TEXT); CREATE TABLE donations (id INT, donor_id INT, cause_id INT, donation_amount DECIMAL(10,2)); INSERT INTO causes (id, name) VALUES (1, 'Cause A'), (2, 'Cause B'); INSERT INTO donations (id, donor_id, cause_id, donation_amount) VALUES (1, 1, 1, 50.00), (2, 2, 1, 100.00);", "reference_sql": "SELECT SUM(donation_amount) FROM donations JOIN causes ON donations.cause_id = causes.id WHERE causes.name = 'Cause A';", "generated_sql": "SELECT SUM(donation_amount) AS total_donated\nFROM donations\nWHERE cause_id = 1;", "raw_model_output": "SELECT SUM(donation_amount) AS total_donated\nFROM donations\nWHERE cause_id = 1;", "latency_sec": 3.6785690784454346, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 178, "prompt_eval_sec": null, "tokens_completion": 353, "completion_eval_sec": null, "tokens_total": 531, "tokens_per_sec": 144.34960678362492, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the total donations for 'Cause A'. The Reference SQL joins donations with causes and filters by name, while the Generated SQL directly uses cause_id=1 (which corresponds to 'Cause A' based on the data). Since the cause_id foreign key uniquely maps to the cause name, both queries aggregate the same set of donations."}
{"example_id": 3273, "sql_complexity": "multiple_joins", "prompt": "List all departments, the number of chemicals they handle, and the number of machines used in their manufacturing processes.", "context": "CREATE TABLE Departments (DepartmentID INT, DepartmentName VARCHAR(20)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Manufacturing'), (2, 'Engineering'), (3, 'Chemical Safety'), (4, 'Product Development'); CREATE TABLE Chemicals (ChemicalID INT, ChemicalName VARCHAR(20), DepartmentID INT); INSERT INTO Chemicals (ChemicalID, ChemicalName, DepartmentID) VALUES (1, 'Hydrochloric Acid', 1), (2, 'Nitric Acid', 2), (3, 'Sodium Hydroxide', 3), (4, 'New Chemical', 4); CREATE TABLE Machinery (MachineID INT, MachineName VARCHAR(20), DepartmentID INT); INSERT INTO Machinery (MachineID, MachineName, DepartmentID) VALUES (1, 'Mixer 1', 1), (2, 'Cutter 2', 2), (3, 'Dispenser 3', 3), (4, 'Innovator 4', 4);", "reference_sql": "SELECT D.DepartmentName, COUNT(C.ChemicalID) AS ChemicalCount, COUNT(M.MachineID) AS MachineCount FROM Departments D LEFT JOIN Chemicals C ON D.DepartmentID = C.DepartmentID LEFT JOIN Machinery M ON D.DepartmentID = M.DepartmentID GROUP BY D.DepartmentName;", "generated_sql": "SELECT \n  DepartmentName,\n  (SELECT COUNT(*) FROM Chemicals WHERE Chemicals.DepartmentID = Departments.DepartmentID) AS ChemicalCount,\n  (SELECT COUNT(*) FROM Machinery WHERE Machinery.DepartmentID = Departments.DepartmentID) AS MachineCount\nFROM Departments;", "raw_model_output": "SELECT \n  DepartmentName,\n  (SELECT COUNT(*) FROM Chemicals WHERE Chemicals.DepartmentID = Departments.DepartmentID) AS ChemicalCount,\n  (SELECT COUNT(*) FROM Machinery WHERE Machinery.DepartmentID = Departments.DepartmentID) AS MachineCount\nFROM Departments;", "latency_sec": 25.775294065475464, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 298, "prompt_eval_sec": null, "tokens_completion": 380, "completion_eval_sec": null, "tokens_total": 678, "tokens_per_sec": 26.304258577136558, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL groups by DepartmentName, which could merge multiple departments with the same name into a single row, while the Generated SQL returns each department as a separate row. Additionally, the Reference SQL uses LEFT JOINs with COUNT, which handles nulls implicitly, whereas the Generated SQL uses correlated subqueries. If DepartmentName is not unique, the grouping in the Reference SQL would aggregate counts differently than the Generated SQL's row-by-row approach."}
{"example_id": 1895, "sql_complexity": "window functions", "prompt": "What is the average safety score of chemical production sites in the United States, partitioned by state and ranked in descending order?", "context": "CREATE TABLE production_sites (site_id INT, site_name TEXT, country TEXT, state TEXT, safety_score FLOAT); INSERT INTO production_sites (site_id, site_name, country, state, safety_score) VALUES (1, 'Site A', 'USA', 'NY', 92.5), (2, 'Site B', 'USA', 'CA', 87.4), (3, 'Site C', 'USA', 'TX', 95.3), (4, 'Site D', 'USA', 'FL', 89.2);", "reference_sql": "SELECT state, AVG(safety_score) as avg_safety_score, ROW_NUMBER() OVER (ORDER BY AVG(safety_score) DESC) as rank FROM production_sites WHERE country = 'USA' GROUP BY state ORDER BY rank;", "generated_sql": "SELECT state, AVG(safety_score) AS avg_safety_score\nFROM production_sites\nWHERE country = 'USA'\nGROUP BY state\nORDER BY avg_safety_score DESC;", "raw_model_output": "SELECT state, AVG(safety_score) AS avg_safety_score\nFROM production_sites\nWHERE country = 'USA'\nGROUP BY state\nORDER BY avg_safety_score DESC;", "latency_sec": 4.9036478996276855, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 205, "prompt_eval_sec": null, "tokens_completion": 303, "completion_eval_sec": null, "tokens_total": 508, "tokens_per_sec": 103.59634508802527, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a ROW_NUMBER() column ('rank') based on sorted average safety scores, while the Generated SQL omits this column. Additionally, the Reference SQL orders by 'rank' (a sequential number) whereas the Generated SQL orders by the actual 'avg_safety_score' values. Though both queries group by state and calculate the same average, the output columns and ordering logic differ, making them non-equivalent."}
{"example_id": 4669, "sql_complexity": "set operations", "prompt": "Identify the number of IoT devices in each country and the total number of devices.", "context": "CREATE TABLE device_country (device_id INT, country TEXT); INSERT INTO device_country (device_id, country) VALUES (1, 'USA'), (2, 'Canada'), (3, 'Mexico'), (4, 'Brazil'); CREATE TABLE device_info (device_id INT, device_type TEXT); INSERT INTO device_info (device_id, device_type) VALUES (1, 'Soil Sensor'), (2, 'Temperature Sensor'), (3, 'Humidity Sensor'), (4, 'Precision Sprayer');", "reference_sql": "SELECT country, COUNT(*) AS device_count FROM device_country GROUP BY country UNION SELECT 'Total' AS country, COUNT(*) FROM device_country;", "generated_sql": "SELECT country, COUNT(*) AS device_count\nFROM device_country\nGROUP BY country\nUNION ALL\nSELECT 'Total', COUNT(*)\nFROM device_country;", "raw_model_output": "SELECT country, COUNT(*) AS device_count\nFROM device_country\nGROUP BY country\nUNION ALL\nSELECT 'Total', COUNT(*)\nFROM device_country;", "latency_sec": 3.5573158264160156, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 185, "prompt_eval_sec": null, "tokens_completion": 299, "completion_eval_sec": null, "tokens_total": 484, "tokens_per_sec": 136.05764110285043, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries produce the same result by grouping device counts by country and adding a 'Total' row. The difference between UNION and UNION ALL does not affect the outcome here because the two result sets (country groups and the 'Total' row) have no overlapping rows. The first query's UNION is functionally equivalent to UNION ALL in this context since no duplicates exist between the two parts."}
{"example_id": 5302, "sql_complexity": "multiple_joins", "prompt": "Find the supplier with the lowest average delivery time for orders in the last month.", "context": "CREATE TABLE Suppliers (SupplierID int, SupplierName varchar(50)); CREATE TABLE Products (ProductID int, ProductName varchar(50), SupplierID int); CREATE TABLE Orders (OrderID int, ProductID int, OrderDate date, DeliveryTime int); INSERT INTO Suppliers VALUES (1, 'SupplierA'), (2, 'SupplierB'); INSERT INTO Products VALUES (1, 'Organic Apples', 1), (2, 'Bananas', 2); INSERT INTO Orders VALUES (1, 1, '2022-01-01', 2), (2, 2, '2022-01-03', 3);", "reference_sql": "SELECT SupplierName, AVG(DeliveryTime) as AvgDeliveryTime FROM Orders o JOIN Products p ON o.ProductID = p.ProductID JOIN Suppliers sp ON p.SupplierID = sp.SupplierID WHERE OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY SupplierName ORDER BY AvgDeliveryTime ASC;", "generated_sql": "SELECT s.SupplierName,\n       AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Orders AS o\nJOIN Products AS p\n  ON o.ProductID = p.ProductID\nJOIN Suppliers AS s\n  ON p.SupplierID = s.SupplierID\nWHERE o.OrderDate BETWEEN\n      (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')\n  AND (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')\nGROUP BY s.SupplierName\nORDER BY AVG(o.DeliveryTime)\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "SELECT s.SupplierName,\n       AVG(o.DeliveryTime) AS AvgDeliveryTime\nFROM Orders AS o\nJOIN Products AS p\n  ON o.ProductID = p.ProductID\nJOIN Suppliers AS s\n  ON p.SupplierID = s.SupplierID\nWHERE o.OrderDate BETWEEN\n      (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month')\n  AND (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 day')\nGROUP BY s.SupplierName\nORDER BY AVG(o.DeliveryTime)\nFETCH FIRST 1 ROW ONLY; \n\n/* \nNote:\n\u2013 DATE_TRUNC and INTERVAL are commonly supported in many SQL systems.\n\u2013 This query identifies the supplier with the lowest average delivery time\n  for orders placed in the previous calendar month.\nIf your SQL dialect does not support DATE_TRUNC, you may need to use equivalent functions.\n*/", "latency_sec": 10.540209770202637, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 214, "prompt_eval_sec": null, "tokens_completion": 1278, "completion_eval_sec": null, "tokens_total": 1492, "tokens_per_sec": 141.55315999667397, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. 1) The date range in the WHERE clause: the Reference SQL uses DATEADD(month, -1, GETDATE()) which is equivalent to one month prior to the current date, while the Generated SQL uses a more restrictive range between the first day of the month two months ago and the last day of the month one month ago. 2) The Generated SQL includes a FETCH FIRST 1 ROW ONLY clause which limits the result to a single row, whereas the Reference SQL returns all grouped results. These differences in date filtering and result limitation make the queries non-equivalent."}
{"example_id": 267, "sql_complexity": "subqueries", "prompt": "What is the total number of disability support programs offered in urban and rural areas, and the percentage of total programs for each area type?", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(255), area_type VARCHAR(255));", "reference_sql": "SELECT area_type, COUNT(*) as total_programs, ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM programs) , 2) as percentage_of_total FROM programs WHERE area_type IN ('urban', 'rural') GROUP BY area_type;", "generated_sql": "SELECT \n  area_type,\n  COUNT(*) AS total_programs,\n  COUNT(*) * 100.0 / (\n    SELECT COUNT(*) \n    FROM programs\n    WHERE program_name LIKE '%disability support%'\n      AND area_type IN ('urban', 'rural')\n  ) AS percentage_of_total\nFROM programs\nWHERE program_name LIKE '%disability support%'\n  AND area_type IN ('urban', 'rural')\nGROUP BY area_type;", "raw_model_output": "Assuming that \u201cdisability support\u201d programs are identified by having the phrase \u201cdisability support\u201d in the program_name (and that you only want those offered in urban and rural areas), you can use a sub\u2010query to compute the overall count. One acceptable ANSI SQL solution is:\n\n---------------------------------\nSELECT \n  area_type,\n  COUNT(*) AS total_programs,\n  COUNT(*) * 100.0 / (\n    SELECT COUNT(*) \n    FROM programs\n    WHERE program_name LIKE '%disability support%'\n      AND area_type IN ('urban', 'rural')\n  ) AS percentage_of_total\nFROM programs\nWHERE program_name LIKE '%disability support%'\n  AND area_type IN ('urban', 'rural')\nGROUP BY area_type;\n---------------------------------\n\nThis query does the following:\n\u2022 It filters the programs to only those whose program_name contains \u201cdisability support\u201d and whose area_type is either 'urban' or 'rural'.\n\u2022 It groups the results by area_type.\n\u2022 It calculates both the count (total_programs) and the percentage with respect to the overall count of disability support programs offered in urban and rural areas.\n\nIf instead every row in programs is already a disability support program so that no further filtering is needed on program_name, simply remove the program_name condition in both the outer query and the subquery.", "latency_sec": 15.03528904914856, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 113, "prompt_eval_sec": null, "tokens_completion": 1528, "completion_eval_sec": null, "tokens_total": 1641, "tokens_per_sec": 109.1432292811776, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query calculates percentages based on the total number of programs in the entire table, while the generated query uses a subquery that filters programs with 'disability support' in the program_name. This changes the denominator in the percentage calculation, making the results different."}
{"example_id": 3028, "sql_complexity": "basic SQL", "prompt": "What is the number of startups founded by non-binary individuals in the technology industry?", "context": "CREATE TABLE company (id INT, name TEXT, founder_gender TEXT, industry TEXT); INSERT INTO company (id, name, founder_gender, industry) VALUES (1, 'CodeForAll', 'Non-binary', 'Technology'); INSERT INTO company (id, name, founder_gender, industry) VALUES (2, 'TechVillage', 'Male', 'Technology');", "reference_sql": "SELECT COUNT(*) FROM company WHERE founder_gender = 'Non-binary' AND industry = 'Technology';", "generated_sql": "SELECT COUNT(*) AS num_startups\nFROM company\nWHERE founder_gender = 'Non-binary'\n  AND industry = 'Technology';", "raw_model_output": "SELECT COUNT(*) AS num_startups\nFROM company\nWHERE founder_gender = 'Non-binary'\n  AND industry = 'Technology';", "latency_sec": 2.4404408931732178, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 157, "prompt_eval_sec": null, "tokens_completion": 102, "completion_eval_sec": null, "tokens_total": 259, "tokens_per_sec": 106.12836423308396, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the number of companies with founder_gender 'Non-binary' and industry 'Technology'. The generated query adds an alias 'num_startups' to the COUNT(*) result, but this does not affect the actual value returned. The WHERE conditions and table structure are identical in both queries."}
{"example_id": 3282, "sql_complexity": "aggregation", "prompt": "Which marine species have been observed in both the Arctic and Antarctic oceans?", "context": "CREATE TABLE marine_species (id INT, species_name VARCHAR(50), common_name VARCHAR(50), region VARCHAR(20));INSERT INTO marine_species (id, species_name, common_name, region) VALUES (1, 'Orcinus_orca', 'Killer Whale', 'Arctic');INSERT INTO marine_species (id, species_name, common_name, region) VALUES (2, 'Balaenoptera_bonaerensis', 'Antarctic Minke Whale', 'Antarctic');", "reference_sql": "SELECT species_name FROM marine_species WHERE region IN ('Arctic', 'Antarctic') GROUP BY species_name HAVING COUNT(DISTINCT region) = 2;", "generated_sql": "SELECT species_name, common_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name, common_name\nHAVING COUNT(DISTINCT region) = 2;", "raw_model_output": "SELECT species_name, common_name\nFROM marine_species\nWHERE region IN ('Arctic', 'Antarctic')\nGROUP BY species_name, common_name\nHAVING COUNT(DISTINCT region) = 2;", "latency_sec": 2.7445433139801025, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 183, "prompt_eval_sec": null, "tokens_completion": 310, "completion_eval_sec": null, "tokens_total": 493, "tokens_per_sec": 179.62915632949424, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects only 'species_name' and groups by it, while the Generated SQL adds 'common_name' to both the SELECT and GROUP BY clauses. This changes the result structure and grouping logic. The Generated SQL may return different rows if a species_name has multiple common_names across regions, and it includes an additional column in the output."}
{"example_id": 3474, "sql_complexity": "subqueries", "prompt": "What is the total transaction volume for the top 3 digital assets by market capitalization in the 'developed_markets' schema?", "context": "CREATE SCHEMA developed_markets; CREATE TABLE developed_markets.digital_assets (asset_name VARCHAR(10), market_cap BIGINT, daily_transaction_volume BIGINT); INSERT INTO developed_markets.digital_assets (asset_name, market_cap, daily_transaction_volume) VALUES ('AssetG', 30000000, 15000000), ('AssetH', 25000000, 12000000), ('AssetI', 20000000, 10000000), ('AssetJ', 15000000, 8000000), ('AssetK', 10000000, 6000000);", "reference_sql": "SELECT SUM(daily_transaction_volume) FROM (SELECT daily_transaction_volume FROM developed_markets.digital_assets ORDER BY market_cap DESC FETCH NEXT 3 ROWS ONLY) t;", "generated_sql": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n  SELECT daily_transaction_volume\n  FROM developed_markets.digital_assets\n  ORDER BY market_cap DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top_assets;", "raw_model_output": "SELECT SUM(daily_transaction_volume) AS total_transaction_volume\nFROM (\n  SELECT daily_transaction_volume\n  FROM developed_markets.digital_assets\n  ORDER BY market_cap DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top_assets;", "latency_sec": 3.428701877593994, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 213, "prompt_eval_sec": null, "tokens_completion": 252, "completion_eval_sec": null, "tokens_total": 465, "tokens_per_sec": 135.61983998629304, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of daily_transaction_volume for the top 3 assets by market_cap. The differences (FETCH NEXT 3 ROWS ONLY vs FETCH FIRST 3 ROWS ONLY, and subquery aliases) are syntactic variations with no semantic impact. The ordering, row limitation, and aggregation logic are identical."}
{"example_id": 1626, "sql_complexity": "aggregation", "prompt": "Find the total value of social impact bonds issued by each organization.", "context": "CREATE TABLE social_impact_bonds (id INT, organization_name VARCHAR(255), issue_year INT, value FLOAT); INSERT INTO social_impact_bonds (id, organization_name, issue_year, value) VALUES (1, 'Acme Corp', 2018, 2000000), (2, 'XYZ Foundation', 2019, 3000000), (3, 'Global Giving', 2018, 1500000), (4, 'Acme Corp', 2019, 2500000), (5, 'XYZ Foundation', 2018, 1000000);", "reference_sql": "SELECT organization_name, SUM(value) as total_value FROM social_impact_bonds GROUP BY organization_name;", "generated_sql": "SELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "raw_model_output": "SELECT organization_name, SUM(value) AS total_value\nFROM social_impact_bonds\nGROUP BY organization_name;", "latency_sec": 1.6752090454101562, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 204, "prompt_eval_sec": null, "tokens_completion": 98, "completion_eval_sec": null, "tokens_total": 302, "tokens_per_sec": 180.27600843455252, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and capitalization of keywords) which do not affect semantic meaning. Both queries select organization_name, sum the value column, and group by organization_name from the same table."}
{"example_id": 1315, "sql_complexity": "single join", "prompt": "List all the transactions made by clients living in New York with a transaction amount greater than $1000.", "context": "CREATE TABLE transactions (id INT, client_id INT, transaction_amount DECIMAL(10,2), transaction_date DATE); INSERT INTO transactions (id, client_id, transaction_amount, transaction_date) VALUES (1, 3, 1500.00, '2022-01-01'), (2, 4, 800.00, '2022-01-02'), (3, 3, 1200.00, '2022-01-03'); CREATE TABLE clients (id INT, name VARCHAR(255), state VARCHAR(255)); INSERT INTO clients (id, name, state) VALUES (3, 'Mike Johnson', 'New York'), (4, 'Sara Lee', 'California');", "reference_sql": "SELECT transactions.id, transactions.client_id, transactions.transaction_amount, transactions.transaction_date FROM transactions INNER JOIN clients ON transactions.client_id = clients.id WHERE clients.state = 'New York' AND transactions.transaction_amount > 1000.00;", "generated_sql": "SELECT t.*\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York'\n  AND t.transaction_amount > 1000;", "raw_model_output": "SELECT t.*\nFROM transactions t\nJOIN clients c ON t.client_id = c.id\nWHERE c.state = 'New York'\n  AND t.transaction_amount > 1000;", "latency_sec": 2.176136016845703, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 235, "prompt_eval_sec": null, "tokens_completion": 175, "completion_eval_sec": null, "tokens_total": 410, "tokens_per_sec": 188.40734072969056, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same rows from the transactions table by joining with clients where clients.state is 'New York' and transaction_amount exceeds 1000. The generated query uses 't.*' which includes all columns from transactions (matching the explicit column list in the reference query) and applies identical filtering conditions. Since the transactions table has exactly the four columns referenced, the result sets are identical."}
{"example_id": 520, "sql_complexity": "multiple_joins", "prompt": "What is the total number of electric vehicles sold in 'California' in the 'sales' schema?", "context": "CREATE TABLE sales_regions (id INT, name VARCHAR(50));   CREATE TABLE sales (id INT, region_id INT, vehicle_count INT);   CREATE TABLE vehicles (id INT, type VARCHAR(50));   INSERT INTO sales_regions VALUES (1, 'California');   INSERT INTO sales VALUES (1, 1, 5000);   INSERT INTO vehicles VALUES (1, 'electric');", "reference_sql": "SELECT SUM(sales.vehicle_count) FROM sales INNER JOIN sales_regions ON sales.region_id = sales_regions.id INNER JOIN vehicles ON sales.id = vehicles.id WHERE vehicles.type = 'electric' AND sales_regions.name = 'California';", "generated_sql": "SELECT SUM(s.vehicle_count) AS total_electric_vehicles_sold\nFROM sales s\nJOIN sales_regions sr ON s.region_id = sr.id\nJOIN vehicles v ON s.id = v.id\nWHERE sr.name = 'California'\n  AND v.type = 'electric';", "raw_model_output": "SELECT SUM(s.vehicle_count) AS total_electric_vehicles_sold\nFROM sales s\nJOIN sales_regions sr ON s.region_id = sr.id\nJOIN vehicles v ON s.id = v.id\nWHERE sr.name = 'California'\n  AND v.type = 'electric';", "latency_sec": 4.192970037460327, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 166, "prompt_eval_sec": null, "tokens_completion": 515, "completion_eval_sec": null, "tokens_total": 681, "tokens_per_sec": 162.41470697760585, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform identical operations: joining the same tables (sales, sales_regions, vehicles) with equivalent conditions, filtering on 'electric' vehicle type and 'California' region, and summing sales.vehicle_count. The differences are purely syntactic (table aliases and column reference styles) and do not affect the result."}
{"example_id": 3999, "sql_complexity": "single join", "prompt": "What is the total number of tickets sold for performances with a rating of 5?", "context": "CREATE TABLE performance (id INT PRIMARY KEY, name VARCHAR(255), date DATE, artist_id INT, rating INT); INSERT INTO performance (id, name, date, artist_id, rating) VALUES (1, 'Dance Recital', '2022-03-01', 1, 5);", "reference_sql": "SELECT SUM(t.quantity) as total_tickets_sold FROM performance p INNER JOIN ticket t ON p.id = t.performance_id WHERE p.rating = 5;", "generated_sql": "SELECT COUNT(*) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "raw_model_output": "SELECT COUNT(*) AS total_tickets_sold\nFROM performance\nWHERE rating = 5;", "latency_sec": 4.037743806838989, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 145, "prompt_eval_sec": null, "tokens_completion": 478, "completion_eval_sec": null, "tokens_total": 623, "tokens_per_sec": 154.2940884324519, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the total tickets sold (sum of quantity) for performances with a rating of 5 by joining with the ticket table. The Generated SQL counts the number of performances with a rating of 5 without considering ticket data. They differ in both the aggregation function (SUM vs COUNT) and the tables involved (ticket table missing in Generated SQL)."}
{"example_id": 2261, "sql_complexity": "multiple_joins", "prompt": "What is the total number of animals that have been released into 'protected' habitats, and the average weight of those animals?", "context": "CREATE TABLE habitats (habitat_id INT, habitat_name VARCHAR(50), habitat_status VARCHAR(50)); INSERT INTO habitats (habitat_id, habitat_name, habitat_status) VALUES (1, 'Habitat A', 'protected'), (2, 'Habitat B', 'unprotected'); CREATE TABLE animal_habitats (animal_id INT, habitat_id INT, animal_weight FLOAT); INSERT INTO animal_habitats (animal_id, habitat_id, animal_weight) VALUES (101, 1, 25.5), (102, 2, 15.2); CREATE TABLE animals (animal_id INT, animal_name VARCHAR(50)); INSERT INTO animals (animal_id, animal_name) VALUES (101, 'Dog'), (102, 'Cat');", "reference_sql": "SELECT COUNT(*), AVG(animal_habitats.animal_weight) FROM animal_habitats INNER JOIN animals ON animal_habitats.animal_id = animals.animal_id INNER JOIN habitats ON animal_habitats.habitat_id = habitats.habitat_id WHERE habitats.habitat_status = 'protected';", "generated_sql": "SELECT COUNT(*) AS total_animals,\n       AVG(ah.animal_weight) AS average_weight\nFROM animal_habitats AS ah\nJOIN habitats AS h ON ah.habitat_id = h.habitat_id\nWHERE h.habitat_status = 'protected';", "raw_model_output": "SELECT COUNT(*) AS total_animals,\n       AVG(ah.animal_weight) AS average_weight\nFROM animal_habitats AS ah\nJOIN habitats AS h ON ah.habitat_id = h.habitat_id\nWHERE h.habitat_status = 'protected';", "latency_sec": 4.026413917541504, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 245, "prompt_eval_sec": null, "tokens_completion": 450, "completion_eval_sec": null, "tokens_total": 695, "tokens_per_sec": 172.6101722856058, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the count of animal_habitats entries and the average animal_weight where habitat_status is 'protected'. The Reference SQL includes an unnecessary join with the animals table, but since no columns from animals are used in the SELECT or WHERE clauses, it doesn't affect the result. The Generated SQL simplifies this by omitting the redundant join while maintaining the same filtering and aggregation logic."}
{"example_id": 3439, "sql_complexity": "multiple_joins", "prompt": "How many menu items contain ingredients sourced from local suppliers for each restaurant?", "context": "CREATE TABLE restaurants (id INT, name VARCHAR(50), location VARCHAR(50)); INSERT INTO restaurants VALUES (1, 'Restaurant A', 'City A'); INSERT INTO restaurants VALUES (2, 'Restaurant B', 'City B'); CREATE TABLE menu_items (id INT, name VARCHAR(50), restaurant_id INT, price DECIMAL(5,2)); INSERT INTO menu_items VALUES (1, 'Item A', 1, 10.99); INSERT INTO menu_items VALUES (2, 'Item B', 1, 12.99); INSERT INTO menu_items VALUES (3, 'Item C', 2, 11.99); CREATE TABLE ingredients (id INT, name VARCHAR(50), local_source BOOLEAN, menu_item_id INT); INSERT INTO ingredients VALUES (1, 'Ingredient A', TRUE, 1); INSERT INTO ingredients VALUES (2, 'Ingredient B', FALSE, 1); INSERT INTO ingredients VALUES (3, 'Ingredient C', TRUE, 2); INSERT INTO ingredients VALUES (4, 'Ingredient D', FALSE, 2); INSERT INTO ingredients VALUES (5, 'Ingredient E', TRUE, 3);", "reference_sql": "SELECT r.name, COUNT(DISTINCT mi.id) as num_local_items FROM restaurants r JOIN menu_items mi ON r.id = mi.restaurant_id JOIN ingredients i ON mi.id = i.menu_item_id WHERE i.local_source = TRUE GROUP BY r.name;", "generated_sql": "SELECT r.name AS restaurant_name,\n       COUNT(DISTINCT mi.id) AS local_menu_item_count\nFROM restaurants r\nJOIN menu_items mi ON r.id = mi.restaurant_id\nJOIN ingredients i ON mi.id = i.menu_item_id\nWHERE i.local_source = TRUE\nGROUP BY r.id, r.name;", "raw_model_output": "SELECT r.name AS restaurant_name,\n       COUNT(DISTINCT mi.id) AS local_menu_item_count\nFROM restaurants r\nJOIN menu_items mi ON r.id = mi.restaurant_id\nJOIN ingredients i ON mi.id = i.menu_item_id\nWHERE i.local_source = TRUE\nGROUP BY r.id, r.name;", "latency_sec": 2.826720952987671, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 313, "prompt_eval_sec": null, "tokens_completion": 267, "completion_eval_sec": null, "tokens_total": 580, "tokens_per_sec": 205.18473865875424, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their GROUP BY clauses. The Reference SQL groups by 'r.name' alone, which could combine multiple restaurants with the same name. The Generated SQL groups by both 'r.id' and 'r.name', ensuring each restaurant is uniquely grouped. While the sample data has unique names, semantically, the GROUP BY logic differs, leading to potential different results if restaurants share the same name."}
{"example_id": 2265, "sql_complexity": "aggregation", "prompt": "Hourly revenue for a specific movie?", "context": "CREATE TABLE Movie_Revenue (id INT, movie_title VARCHAR(100), revenue_time TIME, revenue DECIMAL(10,2));", "reference_sql": "SELECT revenue_time, SUM(revenue) FROM Movie_Revenue WHERE movie_title = 'Spider-Man: No Way Home' GROUP BY revenue_time;", "generated_sql": "SELECT EXTRACT(HOUR FROM revenue_time) AS revenue_hour,\n       SUM(revenue) AS hourly_revenue\nFROM Movie_Revenue\nWHERE movie_title = 'Specific Movie'\nGROUP BY EXTRACT(HOUR FROM revenue_time)\nORDER BY revenue_hour;", "raw_model_output": "SELECT EXTRACT(HOUR FROM revenue_time) AS revenue_hour,\n       SUM(revenue) AS hourly_revenue\nFROM Movie_Revenue\nWHERE movie_title = 'Specific Movie'\nGROUP BY EXTRACT(HOUR FROM revenue_time)\nORDER BY revenue_hour;", "latency_sec": 5.232278108596802, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 100, "prompt_eval_sec": null, "tokens_completion": 510, "completion_eval_sec": null, "tokens_total": 610, "tokens_per_sec": 116.5840170073816, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL groups by the full 'revenue_time' (TIME type) and filters for 'Spider-Man: No Way Home', while the Generated SQL groups by the extracted HOUR from 'revenue_time', filters for 'Specific Movie', and adds an ORDER BY clause. The different grouping fields (full time vs. hour) and WHERE conditions ensure different results."}
{"example_id": 1763, "sql_complexity": "multiple_joins", "prompt": "What is the total food and beverage revenue last month for hotels in 'Bangkok'?", "context": "CREATE TABLE revenue (hotel_id INT, revenue_source VARCHAR(50), revenue INT, revenue_date DATE); INSERT INTO revenue (hotel_id, revenue_source, revenue, revenue_date) VALUES (5, 'Room revenue', 12000, '2022-03-01'), (5, 'Food and beverage', 4000, '2022-03-02'), (5, 'Other revenue', 1000, '2022-03-03'); CREATE TABLE hotels (hotel_id INT, city VARCHAR(50)); INSERT INTO hotels (hotel_id, city) VALUES (5, 'Bangkok'); CREATE TABLE dates (date DATE); INSERT INTO dates (date) VALUES ('2022-03-01'), ('2022-03-02'), ('2022-03-03');", "reference_sql": "SELECT SUM(revenue) FROM revenue JOIN hotels ON revenue.hotel_id = hotels.hotel_id JOIN dates ON revenue.revenue_date = dates.date WHERE hotels.city = 'Bangkok' AND revenue_source = 'Food and beverage' AND dates.date >= DATEADD(month, -1, GETDATE());", "generated_sql": "SELECT SUM(r.revenue) AS total_food_revenue\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE h.city = 'Bangkok'\n  AND r.revenue_source = 'Food and beverage'\n  AND EXTRACT(YEAR FROM r.revenue_date) = EXTRACT(YEAR FROM (CURRENT_DATE - INTERVAL '1' MONTH))\n  AND EXTRACT(MONTH FROM r.revenue_date) = EXTRACT(MONTH FROM (CURRENT_DATE - INTERVAL '1' MONTH));", "raw_model_output": "SELECT SUM(r.revenue) AS total_food_revenue\nFROM revenue r\nJOIN hotels h ON r.hotel_id = h.hotel_id\nWHERE h.city = 'Bangkok'\n  AND r.revenue_source = 'Food and beverage'\n  AND EXTRACT(YEAR FROM r.revenue_date) = EXTRACT(YEAR FROM (CURRENT_DATE - INTERVAL '1' MONTH))\n  AND EXTRACT(MONTH FROM r.revenue_date) = EXTRACT(MONTH FROM (CURRENT_DATE - INTERVAL '1' MONTH));", "latency_sec": 7.621938943862915, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 247, "prompt_eval_sec": null, "tokens_completion": 951, "completion_eval_sec": null, "tokens_total": 1198, "tokens_per_sec": 157.1778531451782, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses `dates.date >= DATEADD(month, -1, GETDATE())` to filter dates within the last month, while the Generated SQL checks if the revenue_date's year and month match the previous month's exact year and month. This leads to different date ranges: the Reference SQL includes all dates from the start of the previous month (e.g., Feb 3, 2022) onward, while the Generated SQL only includes the entire previous month (e.g., Feb 2022). For example, a revenue_date of '2022-03-02' (March 2, 2022) would be included in the Reference SQL but excluded by the Generated SQL if the current date is March 3, 2022."}
{"example_id": 5499, "sql_complexity": "set operations", "prompt": "How many legal aid clinics and community mediation centers are there in total, and what is the sum of cases handled by each type of center, for centers located in the state of California?", "context": "CREATE TABLE LegalAidClinics (ClinicName text, State text, NumCases int); INSERT INTO LegalAidClinics VALUES ('Clinic1', 'CA', 30, '2022-01-01'), ('Clinic2', 'CA', 25, '2022-01-01'); CREATE TABLE CommunityMediationCenters (CenterName text, State text, NumCases int); INSERT INTO CommunityMediationCenters VALUES ('CM1', 'CA', 22, '2022-01-01'), ('CM2', 'CA', 28, '2022-01-01');", "reference_sql": "SELECT State, 'Legal Aid Clinics' AS CenterType, COUNT(*) AS NumCenters, SUM(NumCases) AS TotalCases FROM LegalAidClinics WHERE State = 'CA' UNION ALL SELECT State, 'Community Mediation Centers', COUNT(*), SUM(NumCases) FROM CommunityMediationCenters WHERE State = 'CA';", "generated_sql": "SELECT 'LegalAidClinic' AS CenterType,\n       COUNT(*) AS TotalCenters,\n       SUM(NumCases) AS TotalCases\nFROM LegalAidClinics\nWHERE State = 'CA'\nUNION ALL\nSELECT 'CommunityMediationCenter' AS CenterType,\n       COUNT(*) AS TotalCenters,\n       SUM(NumCases) AS TotalCases\nFROM CommunityMediationCenters\nWHERE State = 'CA';", "raw_model_output": "SELECT 'LegalAidClinic' AS CenterType,\n       COUNT(*) AS TotalCenters,\n       SUM(NumCases) AS TotalCases\nFROM LegalAidClinics\nWHERE State = 'CA'\nUNION ALL\nSELECT 'CommunityMediationCenter' AS CenterType,\n       COUNT(*) AS TotalCenters,\n       SUM(NumCases) AS TotalCases\nFROM CommunityMediationCenters\nWHERE State = 'CA';", "latency_sec": 5.130561113357544, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 225, "prompt_eval_sec": null, "tokens_completion": 542, "completion_eval_sec": null, "tokens_total": 767, "tokens_per_sec": 149.4963188340348, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL includes the 'State' column in its output, while the Generated SQL omits it. Second, the CenterType labels differ: 'Legal Aid Clinics' vs. 'LegalAidClinic' and 'Community Mediation Centers' vs. 'CommunityMediationCenter'. These differences in column structure and string values make the results non-equivalent."}
{"example_id": 2408, "sql_complexity": "aggregation", "prompt": "What is the average number of victories for players from Japan and South Korea, partitioned by game mode?", "context": "CREATE TABLE PlayerVictories (PlayerID INT, GameMode VARCHAR(255), Victories INT, Country VARCHAR(255)); INSERT INTO PlayerVictories (PlayerID, GameMode, Victories, Country) VALUES (1, 'Battle Royale', 25, 'Japan'), (2, 'Team Deathmatch', 18, 'South Korea');", "reference_sql": "SELECT GameMode, AVG(Victories) as AvgVictories FROM PlayerVictories WHERE Country IN ('Japan', 'South Korea') GROUP BY GameMode, Country WITH ROLLUP;", "generated_sql": "SELECT \n    GameMode, \n    Country, \n    AVG(Victories) AS AverageVictories\nFROM PlayerVictories\nWHERE Country IN ('Japan', 'South Korea')\nGROUP BY GameMode, Country;", "raw_model_output": "SELECT \n    GameMode, \n    Country, \n    AVG(Victories) AS AverageVictories\nFROM PlayerVictories\nWHERE Country IN ('Japan', 'South Korea')\nGROUP BY GameMode, Country;", "latency_sec": 8.841708898544312, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 158, "prompt_eval_sec": null, "tokens_completion": 1143, "completion_eval_sec": null, "tokens_total": 1301, "tokens_per_sec": 147.14350075630685, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes 'WITH ROLLUP' which adds summary rows for aggregate calculations, while the Generated SQL does not. Additionally, the Reference SQL omits 'Country' from the SELECT and GROUP BY, whereas the Generated SQL includes it. These differences in grouping, aggregation, and output columns make the queries non-equivalent."}
{"example_id": 2729, "sql_complexity": "subqueries", "prompt": "Find the total number of trips made by shared autonomous vehicles in Seattle", "context": "CREATE TABLE shared_vehicles (id INT, vehicle_type VARCHAR(20), is_autonomous BOOLEAN, trip_count INT); INSERT INTO shared_vehicles (id, vehicle_type, is_autonomous, trip_count) VALUES (1, 'ebike', false, 1200), (2, 'escooter', false, 800), (3, 'car', true, 1500); CREATE TABLE city_data (city VARCHAR(20), has_autonomous_vehicles BOOLEAN); INSERT INTO city_data (city, has_autonomous_vehicles) VALUES ('Seattle', true), ('Denver', false), ('Portland', true);", "reference_sql": "SELECT SUM(trip_count) FROM shared_vehicles WHERE is_autonomous = true AND vehicle_type != 'ebike' AND vehicle_type != 'escooter' AND city IN (SELECT city FROM city_data WHERE has_autonomous_vehicles = true AND city = 'Seattle');", "generated_sql": "SELECT SUM(sv.trip_count) AS total_trips\nFROM shared_vehicles sv\nWHERE sv.is_autonomous = TRUE\n  AND EXISTS (\n      SELECT 1\n      FROM city_data cd\n      WHERE cd.city = 'Seattle'\n        AND cd.has_autonomous_vehicles = TRUE\n  );", "raw_model_output": "SELECT SUM(sv.trip_count) AS total_trips\nFROM shared_vehicles sv\nWHERE sv.is_autonomous = TRUE\n  AND EXISTS (\n      SELECT 1\n      FROM city_data cd\n      WHERE cd.city = 'Seattle'\n        AND cd.has_autonomous_vehicles = TRUE\n  );", "latency_sec": 9.17481017112732, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 207, "prompt_eval_sec": null, "tokens_completion": 1353, "completion_eval_sec": null, "tokens_total": 1560, "tokens_per_sec": 170.03076585815847, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains an invalid reference to a 'city' column in the shared_vehicles table, which does not exist in the schema. The Generated SQL correctly uses a subquery with EXISTS to check city_data, but lacks the vehicle_type filters and city condition present in the Reference SQL. Additionally, the Reference SQL's structure would result in an error, making the queries non-equivalent."}
{"example_id": 2952, "sql_complexity": "aggregation", "prompt": "Show the total budget allocated for each program category in 2023.", "context": "CREATE TABLE Budget (id INT, category TEXT, year INT, allocated_amount INT); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (1, 'Education', 2023, 30000); INSERT INTO Budget (id, category, year, allocated_amount) VALUES (2, 'Healthcare', 2023, 50000);", "reference_sql": "SELECT category, SUM(allocated_amount) FROM Budget WHERE year = 2023 GROUP BY category;", "generated_sql": "SELECT category, SUM(allocated_amount) AS total_allocated\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "raw_model_output": "SELECT category, SUM(allocated_amount) AS total_allocated\nFROM Budget\nWHERE year = 2023\nGROUP BY category;", "latency_sec": 2.2012689113616943, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 153, "prompt_eval_sec": null, "tokens_completion": 38, "completion_eval_sec": null, "tokens_total": 191, "tokens_per_sec": 86.76813587570649, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (category and summed allocated_amount) from the same table with identical filtering (year = 2023) and grouping (category). The only difference is the alias 'total_allocated' in the generated query, which doesn't affect the semantic result set."}
{"example_id": 4328, "sql_complexity": "aggregation", "prompt": "What is the average cargo handling time in hours for each port?", "context": "CREATE TABLE cargo_handling (id INT, port_id INT, time_in_hours DECIMAL(5,2)); INSERT INTO cargo_handling (id, port_id, time_in_hours) VALUES (1, 1, 20.5), (2, 1, 22.3), (3, 2, 18.7);", "reference_sql": "SELECT port_id, AVG(time_in_hours) FROM cargo_handling GROUP BY port_id;", "generated_sql": "SELECT port_id, AVG(time_in_hours) AS average_time_in_hours\nFROM cargo_handling\nGROUP BY port_id;", "raw_model_output": "SELECT port_id, AVG(time_in_hours) AS average_time_in_hours\nFROM cargo_handling\nGROUP BY port_id;", "latency_sec": 1.645664930343628, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 151, "prompt_eval_sec": null, "tokens_completion": 100, "completion_eval_sec": null, "tokens_total": 251, "tokens_per_sec": 152.52193528095006, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries compute the average time_in_hours per port_id. The generated query adds an alias for the computed column, but this does not affect the semantic result. The GROUP BY clause and aggregate function remain identical."}
{"example_id": 4915, "sql_complexity": "window functions", "prompt": "Calculate the percentage of total Europium production for each country.", "context": "CREATE TABLE europium_production (country VARCHAR(50), quantity INT);", "reference_sql": "SELECT country, quantity * 100.0 / SUM(quantity) OVER (PARTITION BY NULL) AS percentage FROM europium_production;", "generated_sql": "SELECT \n    country,\n    (quantity * 100.0 / (SELECT SUM(quantity) FROM europium_production)) AS production_percentage\nFROM europium_production;", "raw_model_output": "SELECT \n    country,\n    (quantity * 100.0 / (SELECT SUM(quantity) FROM europium_production)) AS production_percentage\nFROM europium_production;", "latency_sec": 2.742677927017212, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 93, "prompt_eval_sec": null, "tokens_completion": 302, "completion_eval_sec": null, "tokens_total": 395, "tokens_per_sec": 144.01982679372807, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of each country's production relative to the total production. The reference query uses a window function (SUM(quantity) OVER (PARTITION BY NULL)) to compute the total, while the generated query uses a subquery (SELECT SUM(quantity) FROM europium_production). Both approaches effectively calculate the same total sum, resulting in identical percentage values for each row."}
{"example_id": 5030, "sql_complexity": "subqueries", "prompt": "What is the success rate of diverse-led startups (at least 1 female or underrepresented racial or ethnic group executive) in the past 3 years?", "context": "CREATE TABLE DiverseStartups(id INT, name TEXT, country TEXT, year INT, success BOOLEAN);   INSERT INTO DiverseStartups VALUES (1, 'FemTech', 'USA', 2020, true), (2, 'GreenCity', 'Canada', 2019, false), (3, 'AI-Health', 'UK', 2021, true), (4, 'SolarEnergy', 'USA', 2020, false), (5, 'DataAnalytics', 'Germany', 2019, true), (6, 'SmartGrid', 'USA', 2021, true), (7, 'CloudServices', 'India', 2020, false), (8, 'RenewableEnergy', 'USA', 2019, true);", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3) AS success_rate FROM DiverseStartups WHERE year >= YEAR(CURRENT_DATE) - 3 AND success = true;", "generated_sql": "SELECT \n  100.0 * SUM(CASE WHEN success THEN 1 ELSE 0 END) / COUNT(*) AS success_rate\nFROM DiverseStartups\nWHERE year BETWEEN 2019 AND 2021;", "raw_model_output": "SELECT \n  100.0 * SUM(CASE WHEN success THEN 1 ELSE 0 END) / COUNT(*) AS success_rate\nFROM DiverseStartups\nWHERE year BETWEEN 2019 AND 2021;", "latency_sec": 5.016688108444214, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 254, "prompt_eval_sec": null, "tokens_completion": 631, "completion_eval_sec": null, "tokens_total": 885, "tokens_per_sec": 176.41120613225806, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses dynamic year filtering based on CURRENT_DATE (year >= YEAR(CURRENT_DATE) - 3), while the Generated SQL uses a fixed range (BETWEEN 2019 AND 2021). If the current year is not 2022, the time ranges differ. For example, if CURRENT_DATE is 2023, Reference SQL includes 2020-2023, but Generated SQL only includes 2019-2021. This discrepancy in filtering makes them non-equivalent."}
{"example_id": 4626, "sql_complexity": "aggregation", "prompt": "What was the maximum number of training hours for farmers in each country in 2020?", "context": "CREATE TABLE training (id INT, country_id INT, farmer_id INT, hours INT, date DATE);", "reference_sql": "SELECT country_id, MAX(hours) FROM training WHERE YEAR(date) = 2020 GROUP BY country_id;", "generated_sql": "SELECT\n  country_id,\n  MAX(total_hours) AS max_hours\nFROM (\n  SELECT\n    country_id,\n    farmer_id,\n    SUM(hours) AS total_hours\n  FROM training\n  WHERE date BETWEEN DATE '2020-01-01' AND DATE '2020-12-31'\n  GROUP BY country_id, farmer_id\n) AS farmer_totals\nGROUP BY country_id;", "raw_model_output": "SELECT\n  country_id,\n  MAX(total_hours) AS max_hours\nFROM (\n  SELECT\n    country_id,\n    farmer_id,\n    SUM(hours) AS total_hours\n  FROM training\n  WHERE date BETWEEN DATE '2020-01-01' AND DATE '2020-12-31'\n  GROUP BY country_id, farmer_id\n) AS farmer_totals\nGROUP BY country_id;", "latency_sec": 8.589581966400146, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 105, "prompt_eval_sec": null, "tokens_completion": 1054, "completion_eval_sec": null, "tokens_total": 1159, "tokens_per_sec": 134.93089704873395, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query finds the maximum individual 'hours' value per country for 2020, while the generated query first aggregates hours by farmer-country pairs (summing hours per farmer) and then finds the maximum of those summed values. The semantic difference lies in whether the maximum is calculated on raw hours (reference) or summed farmer-level hours (generated)."}
{"example_id": 2703, "sql_complexity": "set operations", "prompt": "Identify the species unique to 'MarineResearchAreaA' and 'MarineResearchAreaB'", "context": "CREATE TABLE ResearchAreaSpecies (area VARCHAR(255), species VARCHAR(255)); INSERT INTO ResearchAreaSpecies (area, species) VALUES ('MarineResearchAreaA', 'Coral'), ('MarineResearchAreaA', 'Starfish'), ('MarineResearchAreaB', 'Jellyfish');", "reference_sql": "(SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB') UNION (SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaB' EXCEPT SELECT species FROM ResearchAreaSpecies WHERE area = 'MarineResearchAreaA');", "generated_sql": "SELECT species\nFROM ResearchAreaSpecies\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\nGROUP BY species\nHAVING COUNT(DISTINCT area) = 1;", "raw_model_output": "SELECT species\nFROM ResearchAreaSpecies\nWHERE area IN ('MarineResearchAreaA', 'MarineResearchAreaB')\nGROUP BY species\nHAVING COUNT(DISTINCT area) = 1;", "latency_sec": 4.521795988082886, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 142, "prompt_eval_sec": null, "tokens_completion": 626, "completion_eval_sec": null, "tokens_total": 768, "tokens_per_sec": 169.84401817862872, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve species that are present in exactly one of the two research areas. The Reference SQL uses EXCEPT and UNION to compute the symmetric difference between the two areas, while the Generated SQL uses GROUP BY and HAVING to find species appearing in only one area. The result sets are identical."}
{"example_id": 200, "sql_complexity": "window functions", "prompt": "List the top three categories of workforce development programs with the highest budget increases.", "context": "CREATE TABLE programs (program_id INT, program_name VARCHAR(50), budget DECIMAL(10, 2), category VARCHAR(50), budget_date DATE);", "reference_sql": "SELECT category, SUM(budget - LAG(budget) OVER (PARTITION BY category ORDER BY budget_date)) as total_budget_increase FROM programs GROUP BY category ORDER BY total_budget_increase DESC LIMIT 3;", "generated_sql": "SELECT \n  category,\n  MAX(budget) - MIN(budget) AS budget_increase\nFROM programs\nWHERE UPPER(program_name) LIKE '%WORKFORCE DEVELOPMENT%'\nGROUP BY category\nORDER BY budget_increase DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT \n  category,\n  MAX(budget) - MIN(budget) AS budget_increase\nFROM programs\nWHERE UPPER(program_name) LIKE '%WORKFORCE DEVELOPMENT%'\nGROUP BY category\nORDER BY budget_increase DESC\nFETCH FIRST 3 ROWS ONLY; \n\n/* \nExplanation:\n1. We restrict analysis to programs whose names include \u201cworkforce development\u201d (ignoring letter\u2010case).\n2. For each resulting category, we compute the increase as the difference between the maximum and minimum budget (assuming that the change in budget over time is represented by entries with different budget_date values).\n3. Finally, we order by the budget increase in descending order and return the top three rows.\n*/", "latency_sec": 11.574874877929688, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 113, "prompt_eval_sec": null, "tokens_completion": 1689, "completion_eval_sec": null, "tokens_total": 1802, "tokens_per_sec": 155.68202844559045, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total budget increase by summing consecutive budget differences within each category (using LAG), while the generated query computes the difference between max and min budgets for programs with 'WORKFORCE DEVELOPMENT' in their name. Additionally, the generated query filters data explicitly, whereas the reference query processes all programs. These differences in calculation logic and data selection lead to distinct results."}
{"example_id": 5131, "sql_complexity": "basic SQL", "prompt": "How many wells were drilled in the Eagle Ford Shale and Bakken Formation?", "context": "CREATE TABLE wells (id INT, region VARCHAR(255), well_type VARCHAR(255), num_drilled INT); INSERT INTO wells (id, region, well_type, num_drilled) VALUES (1, 'Eagle Ford Shale', 'Oil', 2000), (2, 'Eagle Ford Shale', 'Gas', 1500), (3, 'Bakken Formation', 'Oil', 1000), (4, 'Bakken Formation', 'Gas', 1200);", "reference_sql": "SELECT SUM(num_drilled) as total_wells FROM wells WHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "generated_sql": "SELECT SUM(num_drilled) AS total_wells_drilled\nFROM wells\nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "raw_model_output": "SELECT SUM(num_drilled) AS total_wells_drilled\nFROM wells\nWHERE region IN ('Eagle Ford Shale', 'Bakken Formation');", "latency_sec": 3.398499011993408, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 185, "prompt_eval_sec": null, "tokens_completion": 362, "completion_eval_sec": null, "tokens_total": 547, "tokens_per_sec": 160.95340856937727, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of num_drilled for wells in the 'Eagle Ford Shale' and 'Bakken Formation' regions. The only difference is the column alias (total_wells vs. total_wells_drilled), which does not affect the semantic result."}
{"example_id": 1160, "sql_complexity": "subqueries", "prompt": "What is the total revenue generated from ads on Instagram in March 2021, for users in the 'brand' category who have posted more than 10 times?", "context": "CREATE TABLE ads (ad_id INT, user_id INT, platform VARCHAR(255), ad_revenue DECIMAL(10,2), post_count INT); INSERT INTO ads (ad_id, user_id, platform, ad_revenue, post_count) VALUES (1, 1, 'Instagram', 150.50, 12), (2, 2, 'Twitter', 80.00, 15), (3, 3, 'Instagram', 120.75, 8);", "reference_sql": "SELECT SUM(ad_revenue) FROM ads WHERE platform = 'Instagram' AND MONTH(ad_date) = 3 AND YEAR(ad_date) = 2021 AND user_id IN (SELECT user_id FROM users WHERE category = 'brand' AND post_count > 10);", "generated_sql": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10;", "raw_model_output": "SELECT SUM(ad_revenue) AS total_revenue\nFROM ads\nWHERE platform = 'Instagram'\n  AND post_count > 10; \n\n---------------------------------------------------------------------------\nNote: The provided schema does not include any date information or user category. As a result, the conditions for \"March 2021\" and \"users in the 'brand' category\" could not be applied.\n", "latency_sec": 5.087432861328125, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 201, "prompt_eval_sec": null, "tokens_completion": 597, "completion_eval_sec": null, "tokens_total": 798, "tokens_per_sec": 156.85710686542095, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL includes additional conditions: filtering by ad_date (month/year) and a subquery joining users table for user_id and post_count. The Generated SQL omits these and uses a different post_count condition (ads.post_count > 10 vs users.post_count > 10)."}
{"example_id": 4708, "sql_complexity": "subqueries", "prompt": "What is the maximum number of high-level threats reported by a single agency in a month?", "context": "CREATE TABLE Threat_Intelligence (Threat_ID INT, Threat_Type VARCHAR(50), Threat_Level VARCHAR(50), Reported_Date DATE, Reporting_Agency VARCHAR(50)); CREATE VIEW High_Level_Threats AS SELECT Threat_Type, Threat_Level, Reported_Date FROM Threat_Intelligence WHERE Threat_Level = 'High';", "reference_sql": "SELECT Reporting_Agency, MAX(Number_of_High_Level_Threats) as Max_High_Level_Threats_in_a_Month FROM (SELECT Reporting_Agency, TO_CHAR(Reported_Date, 'YYYY-MM') as Month, COUNT(*) as Number_of_High_Level_Threats FROM High_Level_Threats GROUP BY Reporting_Agency, Month) GROUP BY Reporting_Agency;", "generated_sql": "SELECT MAX(threat_count) AS max_high_level_threats\nFROM (\n  SELECT Reporting_Agency,\n         EXTRACT(YEAR FROM Reported_Date) AS year,\n         EXTRACT(MONTH FROM Reported_Date) AS month,\n         COUNT(*) AS threat_count\n  FROM Threat_Intelligence\n  WHERE Threat_Level = 'High'\n  GROUP BY Reporting_Agency,\n           EXTRACT(YEAR FROM Reported_Date),\n           EXTRACT(MONTH FROM Reported_Date)\n) AS monthly_counts;", "raw_model_output": "SELECT MAX(threat_count) AS max_high_level_threats\nFROM (\n  SELECT Reporting_Agency,\n         EXTRACT(YEAR FROM Reported_Date) AS year,\n         EXTRACT(MONTH FROM Reported_Date) AS month,\n         COUNT(*) AS threat_count\n  FROM Threat_Intelligence\n  WHERE Threat_Level = 'High'\n  GROUP BY Reporting_Agency,\n           EXTRACT(YEAR FROM Reported_Date),\n           EXTRACT(MONTH FROM Reported_Date)\n) AS monthly_counts;", "latency_sec": 5.310414791107178, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 147, "prompt_eval_sec": null, "tokens_completion": 626, "completion_eval_sec": null, "tokens_total": 773, "tokens_per_sec": 145.56301727964188, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the maximum number of high-level threats per agency per month, grouping by Reporting_Agency. The Generated SQL computes the overall maximum threat count across all agencies and months without grouping by agency, resulting in a single value instead of per-agency maxima. The aggregation strategies and grouping differ, leading to non-equivalent results."}
{"example_id": 5608, "sql_complexity": "set operations", "prompt": "List the suppliers that provide materials for both product A and product C.", "context": "CREATE TABLE products (product_id INT, product_name TEXT); CREATE TABLE materials (material_id INT, material_name TEXT, product_id INT, supplier_id INT); INSERT INTO products (product_id, product_name) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'); INSERT INTO materials (material_id, material_name, product_id, supplier_id) VALUES (1, 'Material 1', 1, 101), (2, 'Material 2', 1, 102), (3, 'Material 3', 2, 103), (4, 'Material 4', 3, 101), (5, 'Material 5', 3, 102);", "reference_sql": "SELECT supplier_id FROM materials WHERE product_id = 1 INTERSECT SELECT supplier_id FROM materials WHERE product_id = 3;", "generated_sql": "SELECT supplier_id\nFROM materials m\nJOIN products p ON m.product_id = p.product_id\nWHERE p.product_name IN ('Product A', 'Product C')\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT p.product_name) = 2;", "raw_model_output": "SELECT supplier_id\nFROM materials m\nJOIN products p ON m.product_id = p.product_id\nWHERE p.product_name IN ('Product A', 'Product C')\nGROUP BY supplier_id\nHAVING COUNT(DISTINCT p.product_name) = 2;", "latency_sec": 3.4935121536254883, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 231, "prompt_eval_sec": null, "tokens_completion": 319, "completion_eval_sec": null, "tokens_total": 550, "tokens_per_sec": 157.4346891649489, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve supplier_ids that are associated with both Product A (product_id=1) and Product C (product_id=3). The Reference SQL uses INTERSECT to find common supplier_ids between the two product_id conditions. The Generated SQL joins products and materials, filters for Product A and C, groups by supplier_id, and ensures each supplier has both products via HAVING COUNT(DISTINCT product_name) = 2. Both approaches yield the same result: suppliers linked to both products."}
{"example_id": 1506, "sql_complexity": "basic SQL", "prompt": "How many habitats are in the 'animal_habitats' table?", "context": "CREATE TABLE animal_habitats (id INT PRIMARY KEY, habitat_name VARCHAR, num_animals INT);", "reference_sql": "SELECT COUNT(*) FROM animal_habitats;", "generated_sql": "SELECT COUNT(*) AS num_habitats\nFROM animal_habitats;", "raw_model_output": "SELECT COUNT(*) AS num_habitats\nFROM animal_habitats;", "latency_sec": 2.4193711280822754, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 101, "prompt_eval_sec": null, "tokens_completion": 154, "completion_eval_sec": null, "tokens_total": 255, "tokens_per_sec": 105.39929035283099, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries return the same numerical count of rows from the animal_habitats table. The generated query adds an alias (num_habitats) to the COUNT(*) column, but this does not affect the semantic result - the scalar value returned remains identical."}
{"example_id": 3117, "sql_complexity": "aggregation", "prompt": "What is the percentage of the population that has access to clean water in each continent?", "context": "CREATE TABLE water_data (id INT, country VARCHAR(50), continent CHAR(2), access_to_clean_water BOOLEAN); INSERT INTO water_data VALUES (1, 'Canada', 'NA', true), (2, 'Mexico', 'NA', false), (3, 'Brazil', 'SA', true), (4, 'Russia', 'EU', true);", "reference_sql": "SELECT continent, COUNT(*) FILTER (WHERE access_to_clean_water) * 100.0 / COUNT(*) AS percentage FROM water_data GROUP BY continent;", "generated_sql": "SELECT\n  continent,\n  100.0 * SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) / COUNT(*) AS percentage_access\nFROM\n  water_data\nGROUP BY\n  continent;", "raw_model_output": "SELECT\n  continent,\n  100.0 * SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END) / COUNT(*) AS percentage_access\nFROM\n  water_data\nGROUP BY\n  continent;", "latency_sec": 2.582054853439331, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 156, "prompt_eval_sec": null, "tokens_completion": 249, "completion_eval_sec": null, "tokens_total": 405, "tokens_per_sec": 156.8518187987117, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of countries with access to clean water per continent. The Reference SQL uses COUNT(*) FILTER (WHERE access_to_clean_water) while the Generated SQL uses SUM(CASE WHEN access_to_clean_water THEN 1 ELSE 0 END). These two approaches are equivalent for counting true values. The division by COUNT(*) and multiplication by 100.0 ensures the same percentage calculation. The GROUP BY clause is identical, so the results will match."}
{"example_id": 3542, "sql_complexity": "window functions", "prompt": "What is the average yield of crops for each country, ranked by average yield?", "context": "CREATE TABLE farming (id INT, name TEXT, country TEXT, crop TEXT, yield INT); INSERT INTO farming VALUES (1, 'Smith Farm', 'USA', 'Corn', 120), (2, 'Brown Farm', 'Canada', 'Soybeans', 45), (3, 'Jones Farm', 'Mexico', 'Wheat', 80);", "reference_sql": "SELECT country, AVG(yield) as avg_yield, ROW_NUMBER() OVER (ORDER BY AVG(yield) DESC) as rank FROM farming GROUP BY country;", "generated_sql": "SELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "raw_model_output": "SELECT country, AVG(yield) AS average_yield\nFROM farming\nGROUP BY country\nORDER BY average_yield DESC;", "latency_sec": 2.549067974090576, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 155, "prompt_eval_sec": null, "tokens_completion": 229, "completion_eval_sec": null, "tokens_total": 384, "tokens_per_sec": 150.64329547233774, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a ROW_NUMBER() column that assigns ranks based on average yield, while the Generated SQL only orders results by average yield without adding a rank column. The output structures differ, making them non-equivalent."}
{"example_id": 2274, "sql_complexity": "subqueries", "prompt": "Add a new crop 'amaranth' to farm 'Nourishing Harvest' with yield 50 in 2023", "context": "CREATE TABLE farms (id INT, name TEXT, location TEXT, size FLOAT); INSERT INTO farms (id, name, location, size) VALUES (1, 'Nourishing Harvest', 'Mexico', 120.0); CREATE TABLE crops (id INT, farm_id INT, crop TEXT, yield INT, year INT);", "reference_sql": "INSERT INTO crops (id, farm_id, crop, yield, year) VALUES (5, (SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "generated_sql": "INSERT INTO crops (farm_id, crop, yield, year)\nVALUES ((SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "raw_model_output": "INSERT INTO crops (farm_id, crop, yield, year)\nVALUES ((SELECT id FROM farms WHERE name = 'Nourishing Harvest'), 'amaranth', 50, 2023);", "latency_sec": 3.1522560119628906, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 158, "prompt_eval_sec": null, "tokens_completion": 243, "completion_eval_sec": null, "tokens_total": 401, "tokens_per_sec": 127.21047988430982, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL explicitly specifies an 'id' value (5) for the crops table, while the Generated SQL omits the 'id' column entirely. Since the 'id' column is part of the crops table schema and not provided in the Generated SQL, the two queries are not semantically equivalent. The Generated SQL would either fail (if 'id' is NOT NULL and has no default) or produce different data than the Reference SQL."}
{"example_id": 3705, "sql_complexity": "subqueries", "prompt": "What is the percentage of unions with collective bargaining agreements in the Midwest region?", "context": "CREATE TABLE collective_bargaining (bargaining_id INT, union_name VARCHAR(50), contract_start_date DATE, contract_end_date DATE, region VARCHAR(50));CREATE VIEW union_region AS SELECT DISTINCT union_name, region FROM collective_bargaining;", "reference_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM union_region) as percentage FROM union_region ur WHERE ur.region = 'Midwest' AND EXISTS (SELECT 1 FROM collective_bargaining cb WHERE cb.union_name = ur.union_name);", "generated_sql": "SELECT \n    (100.0 * SUM(CASE WHEN region = 'Midwest' THEN 1 ELSE 0 END) / COUNT(*)) AS percentage_of_midwest_unions\nFROM union_region;", "raw_model_output": "SELECT \n    (100.0 * SUM(CASE WHEN region = 'Midwest' THEN 1 ELSE 0 END) / COUNT(*)) AS percentage_of_midwest_unions\nFROM union_region;", "latency_sec": 4.698045969009399, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 132, "prompt_eval_sec": null, "tokens_completion": 501, "completion_eval_sec": null, "tokens_total": 633, "tokens_per_sec": 134.73686808847262, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the percentage of unions in the 'Midwest' region relative to all unions in the union_region view. The Reference SQL's EXISTS clause is redundant because union_region is derived from collective_bargaining, ensuring all union_names in union_region exist in the original table. The Generated SQL directly computes the same ratio using SUM and COUNT, making them semantically equivalent."}
{"example_id": 240, "sql_complexity": "aggregation", "prompt": "What is the average capacity of renewable energy projects for each country?", "context": "CREATE TABLE projects (name TEXT, type TEXT, capacity INTEGER, country TEXT); INSERT INTO projects (name, type, capacity, country) VALUES ('Project 1', 'Wind', 100, 'USA'), ('Project 2', 'Solar', 200, 'Germany'), ('Project 3', 'Wind', 300, 'France');", "reference_sql": "SELECT country, AVG(capacity) FROM projects GROUP BY country", "generated_sql": "SELECT country, AVG(capacity) AS average_capacity\nFROM projects\nWHERE type IN ('Wind', 'Solar')\nGROUP BY country;", "raw_model_output": "SELECT country, AVG(capacity) AS average_capacity\nFROM projects\nWHERE type IN ('Wind', 'Solar')\nGROUP BY country;", "latency_sec": 3.2521629333496094, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 150, "prompt_eval_sec": null, "tokens_completion": 358, "completion_eval_sec": null, "tokens_total": 508, "tokens_per_sec": 156.20373591700047, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes all projects regardless of type, while the Generated SQL filters projects to only 'Wind' and 'Solar' types. Although the sample data contains only Wind and Solar projects, the WHERE clause makes the Generated SQL semantically different by restricting the dataset."}
{"example_id": 2132, "sql_complexity": "set operations", "prompt": "What is the average caseload per attorney in community legal clinics in California, and how does it compare to the state average?", "context": "CREATE TABLE cali_community_legal_clinics(id INT, attorney_count INT, cases_handled INT, state VARCHAR(255));", "reference_sql": "SELECT state, AVG(cases_handled/attorney_count) AS avg_caseload FROM cali_community_legal_clinics WHERE state = 'California' GROUP BY state UNION ALL SELECT 'California', AVG(cases_handled/attorney_count) FROM cali_community_legal_clinics WHERE state = 'California';", "generated_sql": "SELECT\n    SUM(cases_handled) AS total_cases,\n    SUM(attorney_count) AS total_attorneys\n  FROM cali_community_legal_clinics\n  WHERE state = 'California'\n),\nstate_stats AS (\n  SELECT\n    SUM(cases_handled) AS total_cases,\n    SUM(attorney_count) AS total_attorneys\n  FROM cali_community_legal_clinics\n)\nSELECT\n  california_stats.total_cases * 1.0 / NULLIF(california_stats.total_attorneys, 0) AS california_avg_caseload,\n  state_stats.total_cases * 1.0 / NULLIF(state_stats.total_attorneys, 0) AS overall_state_avg_caseload,\n  (california_stats.total_cases * 1.0 / NULLIF(california_stats.total_attorneys, 0)) -\n  (state_stats.total_cases * 1.0 / NULLIF(state_stats.total_attorneys, 0)) AS difference\nFROM california_stats, state_stats;", "raw_model_output": "WITH california_stats AS (\n  SELECT\n    SUM(cases_handled) AS total_cases,\n    SUM(attorney_count) AS total_attorneys\n  FROM cali_community_legal_clinics\n  WHERE state = 'California'\n),\nstate_stats AS (\n  SELECT\n    SUM(cases_handled) AS total_cases,\n    SUM(attorney_count) AS total_attorneys\n  FROM cali_community_legal_clinics\n)\nSELECT\n  california_stats.total_cases * 1.0 / NULLIF(california_stats.total_attorneys, 0) AS california_avg_caseload,\n  state_stats.total_cases * 1.0 / NULLIF(state_stats.total_attorneys, 0) AS overall_state_avg_caseload,\n  (california_stats.total_cases * 1.0 / NULLIF(california_stats.total_attorneys, 0)) -\n  (state_stats.total_cases * 1.0 / NULLIF(state_stats.total_attorneys, 0)) AS difference\nFROM california_stats, state_stats;", "latency_sec": 9.63267707824707, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 119, "prompt_eval_sec": null, "tokens_completion": 1056, "completion_eval_sec": null, "tokens_total": 1175, "tokens_per_sec": 121.98062806999272, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the average of (cases_handled/attorney_count) per clinic for California, while the Generated SQL computes total cases and attorneys for California and all states, then divides totals (SUM(cases_handled)/SUM(attorney_count)). These approaches yield different results due to the mathematical distinction between averaging ratios vs. ratio of totals. Additionally, the Generated SQL includes additional calculations (overall state average and difference) not present in the Reference SQL."}
{"example_id": 3276, "sql_complexity": "basic SQL", "prompt": "What is the total energy consumption of the Chemical Plant B in the last quarter?", "context": "CREATE TABLE EnergyConsumption (EnergyID INT, Plant VARCHAR(255), EnergyQuantity DECIMAL(5,2), Timestamp DATETIME);", "reference_sql": "SELECT SUM(EnergyQuantity) FROM EnergyConsumption WHERE Plant = 'Chemical Plant B' AND Timestamp BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE();", "generated_sql": "SELECT\n  SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND (\n    (EXTRACT(YEAR FROM Timestamp) = EXTRACT(YEAR FROM CURRENT_DATE)\n      AND EXTRACT(QUARTER FROM Timestamp) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1)\n    OR\n    (EXTRACT(QUARTER FROM CURRENT_DATE) = 1\n      AND EXTRACT(YEAR FROM Timestamp) = EXTRACT(YEAR FROM CURRENT_DATE) - 1\n      AND EXTRACT(QUARTER FROM Timestamp) = 4)\n  );", "raw_model_output": "SELECT\n  SUM(EnergyQuantity) AS TotalEnergyConsumption\nFROM EnergyConsumption\nWHERE Plant = 'Chemical Plant B'\n  AND (\n    (EXTRACT(YEAR FROM Timestamp) = EXTRACT(YEAR FROM CURRENT_DATE)\n      AND EXTRACT(QUARTER FROM Timestamp) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1)\n    OR\n    (EXTRACT(QUARTER FROM CURRENT_DATE) = 1\n      AND EXTRACT(YEAR FROM Timestamp) = EXTRACT(YEAR FROM CURRENT_DATE) - 1\n      AND EXTRACT(QUARTER FROM Timestamp) = 4)\n  );\n\n  \n-- This query calculates the sum of EnergyQuantity for Chemical Plant B for records that fall in the previous (last) quarter.\n  \n  \nExplanation:\n\u2022 It filters for rows where the Plant is 'Chemical Plant B'.\n\u2022 It uses the EXTRACT function to compare the quarter and year of the Timestamp with those of the current date.\n\u2022 For quarters other than the first quarter, it checks that the record\u2019s quarter equals (current quarter \u2013 1) in the current year.\n\u2022 For the first quarter, it handles the year change by checking if the record\u2019s quarter is 4 from the previous year.", "latency_sec": 8.673704862594604, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 109, "prompt_eval_sec": null, "tokens_completion": 1289, "completion_eval_sec": null, "tokens_total": 1398, "tokens_per_sec": 161.1768007035704, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query uses a 3-month date range (BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) AND CURRENT_DATE()), which captures the exact last three calendar months. The generated query checks for records in the previous quarter (or Q4 of the previous year if current quarter is Q1), which may not align with the 3-month window. For example, if today is March 15th, the reference includes Dec-Feb, but the generated query only includes Oct-Dec (Q4). This discrepancy makes the queries produce different results in certain scenarios."}
{"example_id": 3074, "sql_complexity": "multiple_joins", "prompt": "Find the top 5 players with the highest scores in the 'historical_tournaments' view, including their scores and the names of the tournaments they participated in.", "context": "CREATE VIEW historical_tournaments AS SELECT tournaments.tournament_name, players.player_name, players.score FROM tournaments JOIN players_scores ON tournaments.tournament_id = players_scores.tournament_id JOIN players ON players_scores.player_id = players.player_id;  CREATE TABLE tournaments (tournament_id INT, tournament_name TEXT);  CREATE TABLE players_scores (player_id INT, tournament_id INT, score INT);  CREATE TABLE players (player_id INT, player_name TEXT);", "reference_sql": "SELECT players.player_name, MAX(players_scores.score) as high_score, tournaments.tournament_name FROM historical_tournaments JOIN players ON historical_tournaments.player_id = players.player_id JOIN players_scores ON historical_tournaments.player_id = players_scores.player_id JOIN tournaments ON players_scores.tournament_id = tournaments.tournament_id GROUP BY players.player_id, tournaments.tournament_name ORDER BY high_score DESC LIMIT 5;", "generated_sql": "SELECT tournament_name,\n       player_name,\n       score\nFROM historical_tournaments\nORDER BY score DESC\nFETCH FIRST 5 ROWS ONLY;", "raw_model_output": "SELECT tournament_name,\n       player_name,\n       score\nFROM historical_tournaments\nORDER BY score DESC\nFETCH FIRST 5 ROWS ONLY;", "latency_sec": 3.541228771209717, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 189, "prompt_eval_sec": null, "tokens_completion": 360, "completion_eval_sec": null, "tokens_total": 549, "tokens_per_sec": 155.03093289633938, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains invalid joins and grouping that reference columns not present in the historical_tournaments view (e.g., player_id). The view's definition incorrectly references players.score (which doesn't exist) and lacks player_id, making the Reference SQL syntactically invalid. The Generated SQL, while valid, only selects and orders data from the view without aggregation. The Reference SQL's structure would produce different results due to incorrect joins and grouping, and would likely fail execution."}
{"example_id": 2219, "sql_complexity": "window functions", "prompt": "What is the average population of cities with a UNESCO World Heritage designation, ordered by designation date?", "context": "CREATE TABLE cities (name VARCHAR(255), population INT, designation_date DATE); INSERT INTO cities (name, population, designation_date) VALUES ('Paris', 2141000, '1991-09-16'); INSERT INTO cities (name, population, designation_date) VALUES ('Rio de Janeiro', 6727000, '2012-07-01');", "reference_sql": "SELECT AVG(population) FROM (SELECT population, ROW_NUMBER() OVER (ORDER BY designation_date) rn FROM cities WHERE name IN (SELECT name FROM heritagesites)) t WHERE rn % 2 = 1;", "generated_sql": "SELECT \n  designation_date,\n  AVG(population) AS average_population\nFROM cities\nWHERE designation_date IS NOT NULL\nGROUP BY designation_date\nORDER BY designation_date;", "raw_model_output": "SELECT \n  designation_date,\n  AVG(population) AS average_population\nFROM cities\nWHERE designation_date IS NOT NULL\nGROUP BY designation_date\nORDER BY designation_date;", "latency_sec": 7.175439119338989, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 159, "prompt_eval_sec": null, "tokens_completion": 750, "completion_eval_sec": null, "tokens_total": 909, "tokens_per_sec": 126.6821423583813, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL calculates the average population of cities in heritagesites, selecting every other row ordered by designation_date. The Generated SQL groups cities by designation_date and averages populations per date. Key differences: 1) Filtering condition (heritagesites vs. designation_date IS NOT NULL), 2) Aggregation structure (single average vs. grouped averages), 3) Row selection method (row numbers vs. grouping)."}
{"example_id": 3786, "sql_complexity": "aggregation", "prompt": "Display the names and average co-owner percentages for all properties in the 'property_coownership' table where the co-owner percentage is greater than 60.", "context": "CREATE TABLE property_coownership (property_id INT, owner VARCHAR(255), percentage INT); INSERT INTO property_coownership (property_id, owner, percentage) VALUES (1, 'Mohammed', 70), (1, 'Fatima', 30), (2, 'Jamal', 65), (2, 'Aisha', 35), (3, 'Ali', 75), (3, 'Khadija', 25);", "reference_sql": "SELECT owner, AVG(percentage) FROM property_coownership WHERE percentage > 60 GROUP BY owner;", "generated_sql": "SELECT owner,\n       AVG(percentage) OVER (PARTITION BY property_id) AS avg_percentage\nFROM property_coownership\nWHERE percentage > 60;", "raw_model_output": "SELECT owner,\n       AVG(percentage) OVER (PARTITION BY property_id) AS avg_percentage\nFROM property_coownership\nWHERE percentage > 60;", "latency_sec": 14.887031078338623, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 188, "prompt_eval_sec": null, "tokens_completion": 2410, "completion_eval_sec": null, "tokens_total": 2598, "tokens_per_sec": 174.51431291630877, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL groups by 'owner' and calculates the average percentage per owner, while the Generated SQL uses a window function to calculate the average percentage per 'property_id'. In the sample data, they produce the same results because each filtered row belongs to a unique property with a single owner, but this is not generally equivalent. For example, if a property had multiple owners with percentages >60, the Generated SQL would return the property-level average for each owner, whereas the Reference SQL would return individual owner averages."}
{"example_id": 2357, "sql_complexity": "basic SQL", "prompt": "What is the total amount of climate finance invested in renewable energy projects by public and private sectors in Africa?", "context": "CREATE TABLE renewable_energy_projects (project_id INT, sector TEXT, investor_type TEXT, region TEXT, amount FLOAT); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (1, 'Renewable Energy', 'Public', 'Africa', 5000000); INSERT INTO renewable_energy_projects (project_id, sector, investor_type, region, amount) VALUES (2, 'Renewable Energy', 'Private', 'Africa', 7000000);", "reference_sql": "SELECT SUM(amount) FROM renewable_energy_projects WHERE sector = 'Renewable Energy' AND region = 'Africa';", "generated_sql": "SELECT SUM(amount) AS total_amount\nFROM renewable_energy_projects\nWHERE region = 'Africa'\n  AND investor_type IN ('Public', 'Private');", "raw_model_output": "SELECT SUM(amount) AS total_amount\nFROM renewable_energy_projects\nWHERE region = 'Africa'\n  AND investor_type IN ('Public', 'Private');", "latency_sec": 2.3852407932281494, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 186, "prompt_eval_sec": null, "tokens_completion": 105, "completion_eval_sec": null, "tokens_total": 291, "tokens_per_sec": 122.00026128438166, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters by both sector = 'Renewable Energy' and region = 'Africa', while the Generated SQL filters by region = 'Africa' and investor_type IN ('Public', 'Private'). The absence of the sector condition in the Generated SQL means it could include projects from other sectors (if present) with the specified investor types and region, making them semantically different."}
{"example_id": 1009, "sql_complexity": "multiple_joins", "prompt": "Find the number of IoT sensors installed in each farm that use Sprinkler irrigation.", "context": "CREATE TABLE IoT_Sensors (id INT, sensor_type VARCHAR(50), Farm_id INT); INSERT INTO IoT_Sensors (id, sensor_type, Farm_id) VALUES (1, 'Soil Moisture', 1), (2, 'Temperature', 1), (3, 'Humidity', 2); CREATE TABLE Irrigation (id INT, Farm_id INT, irrigation_type VARCHAR(50), duration INT); INSERT INTO Irrigation (id, Farm_id, irrigation_type, duration) VALUES (1, 1, 'Sprinkler', 30), (2, 2, 'Drip', 45);", "reference_sql": "SELECT f.id, COUNT(s.id) FROM Farmers f JOIN Irrigation i ON f.id = i.Farm_id JOIN IoT_Sensors s ON f.id = s.Farm_id WHERE i.irrigation_type = 'Sprinkler' GROUP BY f.id;", "generated_sql": "SELECT s.Farm_id, COUNT(*) AS sensor_count\nFROM IoT_Sensors s\nJOIN Irrigation i ON s.Farm_id = i.Farm_id\nWHERE i.irrigation_type = 'Sprinkler'\nGROUP BY s.Farm_id;", "raw_model_output": "SELECT s.Farm_id, COUNT(*) AS sensor_count\nFROM IoT_Sensors s\nJOIN Irrigation i ON s.Farm_id = i.Farm_id\nWHERE i.irrigation_type = 'Sprinkler'\nGROUP BY s.Farm_id;", "latency_sec": 3.2415099143981934, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 214, "prompt_eval_sec": null, "tokens_completion": 320, "completion_eval_sec": null, "tokens_total": 534, "tokens_per_sec": 164.73804310394667, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of IoT sensors per farm that are associated with 'Sprinkler' irrigation. The Reference SQL uses Farmers.farm_id (aliased as f.id) and joins with Irrigation and IoT_Sensors, while the Generated SQL directly joins IoT_Sensors and Irrigation on Farm_id. Since Farm_id in IoT_Sensors corresponds to Farmers.id, the grouping and counting logic are equivalent. The output columns (f.id vs s.Farm_id) are semantically identical as they represent the same farm identifier, and the COUNT logic (s.id vs COUNT(*)) produces the same result due to inner joins ensuring non-null matches."}
{"example_id": 4217, "sql_complexity": "subqueries", "prompt": "Show consumer preference data for foundations, excluding products from the USA.", "context": "CREATE TABLE cosmetics (product_id INT, product_name VARCHAR(100), product_type VARCHAR(50), is_cruelty_free BOOLEAN, consumer_preference_score INT); INSERT INTO cosmetics (product_id, product_name, product_type, is_cruelty_free, consumer_preference_score) VALUES (1, 'Lipstick A', 'Lipstick', TRUE, 80), (2, 'Foundation B', 'Foundation', FALSE, 90), (3, 'Mascara C', 'Mascara', TRUE, 85), (4, 'Eyeshadow D', 'Eyeshadow', TRUE, 70), (5, 'Blush E', 'Blush', FALSE, 95); CREATE TABLE ingredient_sourcing (ingredient_id INT, ingredient_name VARCHAR(100), sourcing_country VARCHAR(50), is_organic BOOLEAN); INSERT INTO ingredient_sourcing (ingredient_id, ingredient_name, sourcing_country, is_organic) VALUES (1, 'Rosehip Oil', 'Chile', TRUE), (2, 'Shea Butter', 'Ghana', TRUE), (3, 'Jojoba Oil', 'India', TRUE), (4, 'Coconut Oil', 'Philippines', FALSE), (5, 'Aloe Vera', 'USA', TRUE);", "reference_sql": "SELECT * FROM cosmetics WHERE product_type = 'Foundation' AND product_id NOT IN (SELECT cosmetics.product_id FROM cosmetics INNER JOIN ingredient_sourcing ON cosmetics.product_id = ingredient_sourcing.ingredient_id WHERE ingredient_sourcing.sourcing_country = 'USA');", "generated_sql": "SELECT c.product_name,\n       c.consumer_preference_score\nFROM cosmetics AS c\nJOIN ingredient_sourcing AS i \n  ON c.product_id = i.ingredient_id\nWHERE c.product_type = 'Foundation'\n  AND i.sourcing_country <> 'USA';", "raw_model_output": "SELECT c.product_name,\n       c.consumer_preference_score\nFROM cosmetics AS c\nJOIN ingredient_sourcing AS i \n  ON c.product_id = i.ingredient_id\nWHERE c.product_type = 'Foundation'\n  AND i.sourcing_country <> 'USA';", "latency_sec": 8.740094184875488, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 335, "prompt_eval_sec": null, "tokens_completion": 1088, "completion_eval_sec": null, "tokens_total": 1423, "tokens_per_sec": 162.8128907881182, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL excludes Foundations with any ingredients sourced from USA (using NOT IN), while the Generated SQL includes Foundations with at least one non-USA ingredient (using JOIN and WHERE). The logic differs: the first ensures all ingredients are non-USA, the second only requires at least one non-USA ingredient. Additionally, the Generated SQL uses a JOIN which may return fewer rows than the Reference SQL."}
{"example_id": 5620, "sql_complexity": "basic SQL", "prompt": "What is the recycling rate of plastic in the residential sector in the state of New York?", "context": "CREATE TABLE recycling_rates_city (sector VARCHAR(20), city VARCHAR(20), material VARCHAR(20), recycling_rate DECIMAL(5,2)); INSERT INTO recycling_rates_city (sector, city, material, recycling_rate) VALUES ('residential', 'New York City', 'plastic', 0.25), ('commercial', 'New York City', 'plastic', 0.30), ('residential', 'New York City', 'paper', 0.45), ('commercial', 'New York City', 'paper', 0.50), ('residential', 'Los Angeles', 'plastic', 0.20), ('commercial', 'Los Angeles', 'plastic', 0.35), ('residential', 'Los Angeles', 'paper', 0.40), ('commercial', 'Los Angeles', 'paper', 0.50);", "reference_sql": "SELECT recycling_rate FROM recycling_rates_city WHERE sector = 'residential' AND material = 'plastic' AND city = 'New York City';", "generated_sql": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE material = 'plastic'\n  AND sector = 'residential'\n  AND city = 'New York City';", "raw_model_output": "SELECT recycling_rate\nFROM recycling_rates_city\nWHERE material = 'plastic'\n  AND sector = 'residential'\n  AND city = 'New York City';", "latency_sec": 4.36572527885437, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 258, "prompt_eval_sec": null, "tokens_completion": 299, "completion_eval_sec": null, "tokens_total": 557, "tokens_per_sec": 127.58475726767784, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same column from the same table and apply identical WHERE conditions (sector = 'residential', material = 'plastic', city = 'New York City'). The order of conditions in the WHERE clause does not affect the result set."}
{"example_id": 3151, "sql_complexity": "basic SQL", "prompt": "List all biotech startups that received funding in 2022 and their respective funding amounts.", "context": "CREATE TABLE biotech_startups (name TEXT, funding FLOAT, date DATE); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupA', 3500000, '2022-02-28'); INSERT INTO biotech_startups (name, funding, date) VALUES ('StartupB', 4500000, '2022-07-12');", "reference_sql": "SELECT name, funding FROM biotech_startups WHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "generated_sql": "SELECT name, funding\nFROM biotech_startups\nWHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "raw_model_output": "SELECT name, funding\nFROM biotech_startups\nWHERE date BETWEEN '2022-01-01' AND '2022-12-31';", "latency_sec": 2.5412559509277344, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 158, "prompt_eval_sec": null, "tokens_completion": 297, "completion_eval_sec": null, "tokens_total": 455, "tokens_per_sec": 179.0453259278718, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select 'name' and 'funding' from the biotech_startups table where the date falls between '2022-01-01' and '2022-12-31'. The only difference is formatting (line breaks), which does not affect semantic equivalence."}
{"example_id": 2136, "sql_complexity": "window functions", "prompt": "What is the total military equipment sales revenue for each sales representative by fiscal year?", "context": "CREATE TABLE SalesReps (SalesRepID INT, SalesRepName VARCHAR(50), FiscalYear INT, Revenue DECIMAL(10,2)); INSERT INTO SalesReps (SalesRepID, SalesRepName, FiscalYear, Revenue) VALUES (1, 'John Doe', 2020, 150000.00), (2, 'Jane Smith', 2020, 200000.00), (1, 'John Doe', 2021, 180000.00), (2, 'Jane Smith', 2021, 250000.00);", "reference_sql": "SELECT SalesRepName, FiscalYear, SUM(Revenue) OVER (PARTITION BY SalesRepName ORDER BY FiscalYear) AS TotalRevenue FROM SalesReps;", "generated_sql": "SELECT\n  SalesRepName,\n  FiscalYear,\n  SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY SalesRepName, FiscalYear\nORDER BY SalesRepName, FiscalYear;", "raw_model_output": "SELECT\n  SalesRepName,\n  FiscalYear,\n  SUM(Revenue) AS TotalRevenue\nFROM SalesReps\nGROUP BY SalesRepName, FiscalYear\nORDER BY SalesRepName, FiscalYear;", "latency_sec": 3.1714577674865723, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 200, "prompt_eval_sec": null, "tokens_completion": 182, "completion_eval_sec": null, "tokens_total": 382, "tokens_per_sec": 120.44934159811963, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate a cumulative running total of Revenue per SalesRepName ordered by FiscalYear, while the Generated SQL aggregates Revenue per SalesRepName and FiscalYear. The Reference query produces cumulative sums (e.g., 2020: 150000, 2021: 150000+180000=330000) whereas the Generated query returns individual year totals (e.g., 2020: 150000, 2021: 180000)."}
{"example_id": 5452, "sql_complexity": "basic SQL", "prompt": "What is the name of the farms with a size greater than 150 acres located in 'Texas'?", "context": "CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(50), size INT, location VARCHAR(50)); INSERT INTO farms (id, name, size, location) VALUES (1, 'Smith Farms', 200, 'Texas'), (2, 'Johnson Farms', 100, 'California');", "reference_sql": "SELECT name FROM farms WHERE size > 150 AND location = 'Texas'", "generated_sql": "SELECT name\nFROM farms\nWHERE size > 150\n  AND location = 'Texas';", "raw_model_output": "SELECT name\nFROM farms\nWHERE size > 150\n  AND location = 'Texas';", "latency_sec": 1.9993479251861572, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 148, "prompt_eval_sec": null, "tokens_completion": 158, "completion_eval_sec": null, "tokens_total": 306, "tokens_per_sec": 153.04989999252314, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the 'name' column from the 'farms' table where 'size' is greater than 150 and 'location' is 'Texas'. The only difference is formatting (line breaks), which does not affect semantic meaning."}
{"example_id": 5152, "sql_complexity": "aggregation", "prompt": "How many international tourists visited Portugal in 2020, broken down by continent?", "context": "CREATE TABLE international_tourists(tourist_id INT, country TEXT, arrival_year INT, continent TEXT);INSERT INTO international_tourists (tourist_id, country, arrival_year, continent) VALUES (1, 'Spain', 2020, 'Europe'), (2, 'France', 2020, 'Europe'), (3, 'Brazil', 2020, 'South America'), (4, 'United States', 2020, 'North America'), (5, 'China', 2020, 'Asia');", "reference_sql": "SELECT continent, COUNT(*) FROM international_tourists WHERE arrival_year = 2020 GROUP BY continent;", "generated_sql": "SELECT continent, COUNT(*) AS tourist_count\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "raw_model_output": "SELECT continent, COUNT(*) AS tourist_count\nFROM international_tourists\nWHERE country = 'Portugal' AND arrival_year = 2020\nGROUP BY continent;", "latency_sec": 2.1655008792877197, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 191, "prompt_eval_sec": null, "tokens_completion": 172, "completion_eval_sec": null, "tokens_total": 363, "tokens_per_sec": 167.62865509405776, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL counts all tourists from 2020 grouped by continent, while the Generated SQL adds a filter for 'country = 'Portugal'', which doesn't exist in the data. Since no rows match the Generated SQL's condition, it returns no results, whereas the Reference SQL returns counts per continent."}
{"example_id": 2477, "sql_complexity": "set operations", "prompt": "What is the carbon price in Europe and Australia for the last quarter of 2020?", "context": "CREATE TABLE CarbonPrices (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonPrices (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2020, 4, 25), ('Australia', 2020, 4, 15); CREATE TABLE CarbonTaxes (Country TEXT, Year INT, Quarter INT, CarbonPrice NUMBER); INSERT INTO CarbonTaxes (Country, Year, Quarter, CarbonPrice) VALUES ('Europe', 2019, 4, 20), ('Australia', 2019, 4, 10);", "reference_sql": "SELECT Context.Country, Context.CarbonPrice FROM ( SELECT * FROM CarbonPrices WHERE CarbonPrices.Country IN ('Europe', 'Australia') AND CarbonPrices.Year = 2020 AND CarbonPrices.Quarter = 4 UNION SELECT * FROM CarbonTaxes WHERE CarbonTaxes.Country IN ('Europe', 'Australia') AND CarbonTaxes.Year = 2020 AND CarbonTaxes.Quarter = 4 ) AS Context;", "generated_sql": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020\n  AND Quarter = 4\n  AND Country IN ('Europe', 'Australia');", "raw_model_output": "SELECT Country, CarbonPrice\nFROM CarbonPrices\nWHERE Year = 2020\n  AND Quarter = 4\n  AND Country IN ('Europe', 'Australia');", "latency_sec": 2.8560688495635986, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 202, "prompt_eval_sec": null, "tokens_completion": 237, "completion_eval_sec": null, "tokens_total": 439, "tokens_per_sec": 153.70777916193381, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL combines data from both CarbonPrices and CarbonTaxes tables using UNION, while the Generated SQL only queries the CarbonPrices table. Although the CarbonTaxes data in the sample doesn't match the 2020/4 filter, the queries are structurally different and would produce different results if CarbonTaxes contained matching records. Semantic equivalence requires identical result sets under all possible data scenarios, which does not hold here."}
{"example_id": 4573, "sql_complexity": "subqueries", "prompt": "Find the names of all the indigenous communities in the 'Arctic_Communities' table that have a population size greater than the average population size in the 'Antarctic_Communities' table.", "context": "CREATE TABLE Arctic_Communities (name TEXT, population INTEGER); CREATE TABLE Antarctic_Communities (name TEXT, population INTEGER);", "reference_sql": "SELECT name FROM Arctic_Communities WHERE Arctic_Communities.population > (SELECT AVG(population) FROM Antarctic_Communities)", "generated_sql": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "raw_model_output": "SELECT name\nFROM Arctic_Communities\nWHERE population > (\n    SELECT AVG(population)\n    FROM Antarctic_Communities\n);", "latency_sec": 3.2431046962738037, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 133, "prompt_eval_sec": null, "tokens_completion": 102, "completion_eval_sec": null, "tokens_total": 235, "tokens_per_sec": 72.46142878766926, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select names from Arctic_Communities where their population exceeds the average population of Antarctic_Communities. The Generated SQL omits the table qualifier in the main query's WHERE clause, but since the main query explicitly references Arctic_Communities, the population column is unambiguously from that table. The subquery's population is explicitly from Antarctic_Communities, maintaining the same semantic comparison in both queries."}
{"example_id": 3596, "sql_complexity": "window functions", "prompt": "What is the total revenue for each game in the \"Gaming\" category?", "context": "CREATE TABLE Games (GameID int, GameName varchar(50), Category varchar(50), Revenue decimal(10,2));", "reference_sql": "SELECT Category, SUM(Revenue) OVER(PARTITION BY Category) as TotalRevenue FROM Games;", "generated_sql": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "raw_model_output": "SELECT GameName, SUM(Revenue) AS TotalRevenue\nFROM Games\nWHERE Category = 'Gaming'\nGROUP BY GameName;", "latency_sec": 2.803866147994995, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 107, "prompt_eval_sec": null, "tokens_completion": 293, "completion_eval_sec": null, "tokens_total": 400, "tokens_per_sec": 142.66016239257152, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query calculates the total revenue per category for each row using a window function, while the generated query filters to only 'Gaming' category, groups by GameName, and sums revenue per game. The output columns, aggregation logic, and filtering differ significantly."}
{"example_id": 5039, "sql_complexity": "subqueries", "prompt": "What is the total number of community policing events in 'City Park' in 2021?", "context": "CREATE TABLE locations (id INT, name VARCHAR(255)); CREATE TABLE community_policing (id INT, location_id INT, year INT, events INT); INSERT INTO locations (id, name) VALUES (1, 'City Park'); INSERT INTO community_policing (id, location_id, year, events) VALUES (1, 1, 2021, 5);", "reference_sql": "SELECT SUM(events) FROM community_policing WHERE location_id = (SELECT id FROM locations WHERE name = 'City Park') AND year = 2021;", "generated_sql": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park'\nAND cp.year = 2021;", "raw_model_output": "SELECT SUM(cp.events) AS total_events\nFROM community_policing cp\nJOIN locations l ON cp.location_id = l.id\nWHERE l.name = 'City Park'\nAND cp.year = 2021;", "latency_sec": 2.3891711235046387, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 161, "prompt_eval_sec": null, "tokens_completion": 181, "completion_eval_sec": null, "tokens_total": 342, "tokens_per_sec": 143.14587876749715, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of events for 'City Park' in 2021. The reference query uses a subquery to get the location ID, while the generated query uses a JOIN to achieve the same filtering. Since the location name 'City Park' is unique, both approaches yield identical results."}
{"example_id": 2724, "sql_complexity": "basic SQL", "prompt": "What is the earliest installation date for solar panels in Italy?", "context": "CREATE TABLE solar_panels_italy (id INT, installation_date DATE); INSERT INTO solar_panels_italy (id, installation_date) VALUES (1, '2018-01-01'), (2, '2019-01-01'), (3, '2020-01-01');", "reference_sql": "SELECT MIN(installation_date) as earliest_date FROM solar_panels_italy;", "generated_sql": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "raw_model_output": "SELECT MIN(installation_date) AS earliest_installation_date\nFROM solar_panels_italy;", "latency_sec": 1.524364948272705, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 142, "prompt_eval_sec": null, "tokens_completion": 95, "completion_eval_sec": null, "tokens_total": 237, "tokens_per_sec": 155.47457993477903, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the minimum installation_date from the same table. The only difference is the column alias name ('earliest_date' vs 'earliest_installation_date'), which doesn't affect the semantic meaning or result of the query."}
{"example_id": 2200, "sql_complexity": "single join", "prompt": "Which diversity programs are currently being participated in by employees in the HR department?", "context": "CREATE TABLE Employees (Employee_ID INT, First_Name VARCHAR(20), Last_Name VARCHAR(20), Department VARCHAR(20), Salary DECIMAL(10,2), Date_Hired DATE); CREATE TABLE Diversity_Programs (Program_ID INT, Program_Name VARCHAR(50), Participant_ID INT, Date_Started DATE, Date_Ended DATE);", "reference_sql": "SELECT dp.Program_Name FROM Diversity_Programs dp JOIN Employees e ON dp.Participant_ID = e.Employee_ID WHERE e.Department = 'HR' AND dp.Date_Ended IS NULL;", "generated_sql": "SELECT DISTINCT dp.Program_Name\nFROM Employees e\nJOIN Diversity_Programs dp ON e.Employee_ID = dp.Participant_ID\nWHERE e.Department = 'HR'\n  AND dp.Date_Started <= CURRENT_DATE\n  AND (dp.Date_Ended IS NULL OR dp.Date_Ended >= CURRENT_DATE);", "raw_model_output": "SELECT DISTINCT dp.Program_Name\nFROM Employees e\nJOIN Diversity_Programs dp ON e.Employee_ID = dp.Participant_ID\nWHERE e.Department = 'HR'\n  AND dp.Date_Started <= CURRENT_DATE\n  AND (dp.Date_Ended IS NULL OR dp.Date_Ended >= CURRENT_DATE);", "latency_sec": 4.361336946487427, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 149, "prompt_eval_sec": null, "tokens_completion": 455, "completion_eval_sec": null, "tokens_total": 604, "tokens_per_sec": 138.48964375166082, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the generated query adds conditions on Date_Started and a more complex Date_Ended logic (checking for NULL or future dates), while the reference only checks for NULL. Second, the generated query uses DISTINCT, which the reference does not. These differences mean they may return different results."}
{"example_id": 4359, "sql_complexity": "window functions", "prompt": "Which destinations have the least hotel awards?", "context": "CREATE TABLE Destinations (destination_id INT, destination_name TEXT, country TEXT, awards INT); INSERT INTO Destinations (destination_id, destination_name, country, awards) VALUES (1, 'City A', 'Germany', 3), (2, 'City B', 'Switzerland', 5), (3, 'City C', 'Norway', 2);", "reference_sql": "SELECT destination_name, country, awards, RANK() OVER (PARTITION BY country ORDER BY awards ASC) AS rank FROM Destinations;", "generated_sql": "SELECT destination_id, destination_name, country, awards\nFROM Destinations\nWHERE awards = (SELECT MIN(awards) FROM Destinations);", "raw_model_output": "SELECT destination_id, destination_name, country, awards\nFROM Destinations\nWHERE awards = (SELECT MIN(awards) FROM Destinations);", "latency_sec": 2.774639844894409, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 150, "prompt_eval_sec": null, "tokens_completion": 232, "completion_eval_sec": null, "tokens_total": 382, "tokens_per_sec": 137.67552596165405, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates ranks within country partitions based on awards, while the Generated SQL filters to only include destinations with the minimum awards in the entire table. The first returns ranked data across all destinations, while the second returns only specific rows with the lowest awards. The column sets and result semantics differ significantly."}
{"example_id": 1373, "sql_complexity": "subqueries", "prompt": "What is the total value of military equipment sales to Africa in the last 12 months?", "context": "CREATE TABLE Military_Equipment_Sales(sale_id INT, sale_date DATE, equipment_type VARCHAR(50), country VARCHAR(50), sale_value DECIMAL(10,2));", "reference_sql": "SELECT SUM(sale_value) FROM Military_Equipment_Sales WHERE country IN (SELECT country FROM World_Countries WHERE continent = 'Africa') AND sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH);", "generated_sql": "SELECT SUM(sale_value) AS total_sales_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= CURRENT_DATE - INTERVAL '12' MONTH;", "raw_model_output": "SELECT SUM(sale_value) AS total_sales_value\nFROM Military_Equipment_Sales\nWHERE country = 'Africa'\n  AND sale_date >= CURRENT_DATE - INTERVAL '12' MONTH;", "latency_sec": 3.064196825027466, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 120, "prompt_eval_sec": null, "tokens_completion": 370, "completion_eval_sec": null, "tokens_total": 490, "tokens_per_sec": 159.91139864052562, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their country filtering logic. The reference query uses a subquery to select countries in Africa from World_Countries, while the generated query incorrectly filters for country = 'Africa' (a continent name) instead of using the correct country codes/names from the World_Countries table. The date conditions are equivalent, but the country condition makes them non-equivalent."}
{"example_id": 904, "sql_complexity": "basic SQL", "prompt": "What is the minimum Shariah-compliant loan amount issued in the last quarter of 2021?", "context": "CREATE TABLE loans (id INT, amount DECIMAL, date DATE, loan_type VARCHAR); INSERT INTO loans (id, amount, date, loan_type) VALUES (1, 5000, '2021-09-05', 'Shariah-compliant'), (2, 7000, '2021-10-07', 'socially responsible'), (3, 9000, '2021-11-03', 'Shariah-compliant'), (4, 11000, '2021-12-31', 'Shariah-compliant');", "reference_sql": "SELECT MIN(amount) FROM loans WHERE EXTRACT(YEAR FROM date) = 2021 AND EXTRACT(QUARTER FROM date) = 4 AND loan_type = 'Shariah-compliant';", "generated_sql": "SELECT MIN(amount) AS minimum_shariah_compliant_loan\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date BETWEEN '2021-10-01' AND '2021-12-31';", "raw_model_output": "SELECT MIN(amount) AS minimum_shariah_compliant_loan\nFROM loans\nWHERE loan_type = 'Shariah-compliant'\n  AND date BETWEEN '2021-10-01' AND '2021-12-31';", "latency_sec": 3.3423209190368652, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 205, "prompt_eval_sec": null, "tokens_completion": 380, "completion_eval_sec": null, "tokens_total": 585, "tokens_per_sec": 175.02807604979344, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries filter 'Shariah-compliant' loans in the fourth quarter of 2021. The reference uses EXTRACT(QUARTER) = 4, which corresponds to October-December, while the generated query uses a date range from '2021-10-01' to '2021-12-31'. These conditions are semantically equivalent for the given data. Both will return the minimum amount from the same subset of loans (ids 3 and 4 in the sample data)."}
{"example_id": 3299, "sql_complexity": "set operations", "prompt": "How many schools and hospitals are there in Colombia and which ones need repairs?", "context": "CREATE TABLE schools (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN); CREATE TABLE hospitals (id INT, country VARCHAR(20), name VARCHAR(50), needs_repair BOOLEAN);", "reference_sql": "SELECT 'Schools' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM schools WHERE country = 'Colombia' UNION ALL SELECT 'Hospitals' as facility_type, COUNT(*) as total, SUM(needs_repair) as repairs_needed FROM hospitals WHERE country = 'Colombia';", "generated_sql": "SELECT * FROM\n(\n  -- Summary rows for schools and hospitals in Colombia\n  SELECT 'Summary'            AS record_type,\n         'School'             AS institution,\n         COUNT(*)             AS total,\n         SUM(CASE WHEN needs_repair THEN 1 ELSE 0 END) AS repairs_needed,\n         NULL                 AS id,\n         NULL                 AS name\n  FROM schools\n  WHERE country = 'Colombia'\n  \n  UNION ALL\n  \n  SELECT 'Summary',\n         'Hospital',\n         COUNT(*),\n         SUM(CASE WHEN needs_repair THEN 1 ELSE 0 END),\n         NULL,\n         NULL\n  FROM hospitals\n  WHERE country = 'Colombia'\n  \n  UNION ALL\n  \n  -- Detail rows for schools in need of repair\n  SELECT 'Repair Detail',\n         'School',\n         NULL,\n         NULL,\n         id,\n         name\n  FROM schools\n  WHERE country = 'Colombia' AND needs_repair = TRUE\n  \n  UNION ALL\n  \n  -- Detail rows for hospitals in need of repair\n  SELECT 'Repair Detail',\n         'Hospital',\n         NULL,\n         NULL,\n         id,\n         name\n  FROM hospitals\n  WHERE country = 'Colombia' AND needs_repair = TRUE\n) AS combined_results;", "raw_model_output": "SELECT * FROM\n(\n  -- Summary rows for schools and hospitals in Colombia\n  SELECT 'Summary'            AS record_type,\n         'School'             AS institution,\n         COUNT(*)             AS total,\n         SUM(CASE WHEN needs_repair THEN 1 ELSE 0 END) AS repairs_needed,\n         NULL                 AS id,\n         NULL                 AS name\n  FROM schools\n  WHERE country = 'Colombia'\n  \n  UNION ALL\n  \n  SELECT 'Summary',\n         'Hospital',\n         COUNT(*),\n         SUM(CASE WHEN needs_repair THEN 1 ELSE 0 END),\n         NULL,\n         NULL\n  FROM hospitals\n  WHERE country = 'Colombia'\n  \n  UNION ALL\n  \n  -- Detail rows for schools in need of repair\n  SELECT 'Repair Detail',\n         'School',\n         NULL,\n         NULL,\n         id,\n         name\n  FROM schools\n  WHERE country = 'Colombia' AND needs_repair = TRUE\n  \n  UNION ALL\n  \n  -- Detail rows for hospitals in need of repair\n  SELECT 'Repair Detail',\n         'Hospital',\n         NULL,\n         NULL,\n         id,\n         name\n  FROM hospitals\n  WHERE country = 'Colombia' AND needs_repair = TRUE\n) AS combined_results;\n    \n/* \nThis single ANSI SQL statement returns a combined result set.\nRows with record_type = 'Summary' list, for each institution (school or hospital), \nthe total count and the count that need repairs in Colombia.\nRows with record_type = 'Repair Detail' list the id and name of institutions that need repair.\n*/", "latency_sec": 16.226279973983765, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 125, "prompt_eval_sec": null, "tokens_completion": 2380, "completion_eval_sec": null, "tokens_total": 2505, "tokens_per_sec": 154.37919252079746, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns two summary rows (schools and hospitals) with aggregated counts and repair totals. The Generated SQL returns four types of rows: summary rows (schools/hospitals), detail rows for schools needing repair, and detail rows for hospitals needing repair. The Generated SQL includes additional detail rows and has a different structure, making the results structurally and semantically different."}
{"example_id": 907, "sql_complexity": "set operations", "prompt": "What is the total quantity of items with type 'E' or type 'F' in warehouse O and warehouse P?", "context": "CREATE TABLE warehouse_o(item_id INT, item_type VARCHAR(10), quantity INT);CREATE TABLE warehouse_p(item_id INT, item_type VARCHAR(10), quantity INT);INSERT INTO warehouse_o(item_id, item_type, quantity) VALUES (1, 'E', 200), (2, 'F', 300), (3, 'E', 50), (4, 'F', 400);INSERT INTO warehouse_p(item_id, item_type, quantity) VALUES (1, 'E', 150), (2, 'F', 250), (3, 'E', 40), (4, 'F', 350);", "reference_sql": "SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F') UNION ALL SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F');", "generated_sql": "SELECT SUM(quantity) AS total_quantity\nFROM (\n  SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F')\n  UNION ALL\n  SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F')\n) AS combined_quantities;", "raw_model_output": "SELECT SUM(quantity) AS total_quantity\nFROM (\n  SELECT quantity FROM warehouse_o WHERE item_type IN ('E', 'F')\n  UNION ALL\n  SELECT quantity FROM warehouse_p WHERE item_type IN ('E', 'F')\n) AS combined_quantities;", "latency_sec": 2.8627052307128906, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 222, "prompt_eval_sec": null, "tokens_completion": 319, "completion_eval_sec": null, "tokens_total": 541, "tokens_per_sec": 188.98208386801895, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns individual quantity values from both tables combined with UNION ALL, while the Generated SQL aggregates all quantities into a single summed value. The first produces multiple rows of raw data, and the second produces a single summary value."}
{"example_id": 1400, "sql_complexity": "single join", "prompt": "What is the maximum co-ownership duration for properties in the neighborhood of 'Chinatown' in San Francisco?'", "context": "CREATE TABLE sf_neighborhoods (neighborhood_id INT, name VARCHAR(255), city VARCHAR(255)); INSERT INTO sf_neighborhoods (neighborhood_id, name, city) VALUES (1, 'Chinatown', 'San Francisco'); CREATE TABLE co_ownership (co_ownership_id INT, property_id INT, co_owner_id INT, start_date DATE, end_date DATE); INSERT INTO co_ownership (co_ownership_id, property_id, co_owner_id, start_date, end_date) VALUES (1, 1, 2, '2010-01-01', '2020-01-01'), (2, 2, 3, '2015-01-01', '2022-01-01'); CREATE TABLE properties (property_id INT, city VARCHAR(255)); INSERT INTO properties (property_id, city) VALUES (1, 'San Francisco'), (2, 'San Francisco');", "reference_sql": "SELECT MAX(DATEDIFF(end_date, start_date)) as max_duration FROM co_ownership JOIN properties ON co_ownership.property_id = properties.property_id WHERE properties.city = 'San Francisco' AND name = 'Chinatown';", "generated_sql": "SELECT \n    MAX(co.end_date - co.start_date) AS max_co_ownership_duration\nFROM co_ownership co\nJOIN properties p \n    ON co.property_id = p.property_id\nJOIN sf_neighborhoods n \n    ON p.city = n.city\nWHERE n.name = 'Chinatown'\n  AND n.city = 'San Francisco';", "raw_model_output": "SELECT \n    MAX(co.end_date - co.start_date) AS max_co_ownership_duration\nFROM co_ownership co\nJOIN properties p \n    ON co.property_id = p.property_id\nJOIN sf_neighborhoods n \n    ON p.city = n.city\nWHERE n.name = 'Chinatown'\n  AND n.city = 'San Francisco';", "latency_sec": 11.733999013900757, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 279, "prompt_eval_sec": null, "tokens_completion": 1619, "completion_eval_sec": null, "tokens_total": 1898, "tokens_per_sec": 161.75218676527263, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a 'name' column in the WHERE clause that does not exist in the joined tables (co_ownership and properties). The Generated SQL correctly joins with sf_neighborhoods to access the 'name' column. Additionally, the Reference SQL lacks the necessary join to sf_neighborhoods, making it invalid and semantically different from the Generated SQL."}
{"example_id": 5248, "sql_complexity": "window functions", "prompt": "Find the top 5 games by rating", "context": "CREATE TABLE games (game_id INT PRIMARY KEY, name VARCHAR(50), genre VARCHAR(50), rating DECIMAL(3,2));", "reference_sql": "SELECT * FROM (SELECT name, rating, ROW_NUMBER() OVER (ORDER BY rating DESC) as rn FROM games) t WHERE rn <= 5;", "generated_sql": "SELECT game_id, name, genre, rating\nFROM games\nORDER BY rating DESC\nFETCH FIRST 5 ROWS ONLY;", "raw_model_output": "SELECT game_id, name, genre, rating\nFROM games\nORDER BY rating DESC\nFETCH FIRST 5 ROWS ONLY;", "latency_sec": 2.3809361457824707, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 103, "prompt_eval_sec": null, "tokens_completion": 165, "completion_eval_sec": null, "tokens_total": 268, "tokens_per_sec": 112.56076752613812, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL returns only 'name', 'rating', and 'rn' columns with a row number, while the Generated SQL returns all columns (game_id, name, genre, rating). Additionally, the Reference SQL uses ROW_NUMBER() for ranking whereas the Generated SQL uses FETCH FIRST 5 ROWS ONLY, which could behave differently in edge cases (e.g., ties in rating)."}
{"example_id": 778, "sql_complexity": "single join", "prompt": "What is the maximum property price in wheelchair-accessible neighborhoods in Singapore?", "context": "CREATE TABLE Singapore_Neighborhoods (Neighborhood_Name TEXT, Wheelchair_Accessibility BOOLEAN); INSERT INTO Singapore_Neighborhoods (Neighborhood_Name, Wheelchair_Accessibility) VALUES ('Orchard', true), ('Marina Bay', true), ('Chinatown', false), ('Little India', false), ('Bugis', true); CREATE TABLE Singapore_Properties (Neighborhood_Name TEXT, Property_Price INTEGER); INSERT INTO Singapore_Properties (Neighborhood_Name, Property_Price) VALUES ('Orchard', 2000000), ('Marina Bay', 3000000), ('Chinatown', 1500000), ('Little India', 1200000), ('Bugis', 1800000);", "reference_sql": "SELECT MAX(Singapore_Properties.Property_Price) FROM Singapore_Properties INNER JOIN Singapore_Neighborhoods ON Singapore_Properties.Neighborhood_Name = Singapore_Neighborhoods.Neighborhood_Name WHERE Singapore_Neighborhoods.Wheelchair_Accessibility = true;", "generated_sql": "SELECT MAX(p.Property_Price) AS Maximum_Property_Price\nFROM Singapore_Properties p\nJOIN Singapore_Neighborhoods n ON p.Neighborhood_Name = n.Neighborhood_Name\nWHERE n.Wheelchair_Accessibility = true;", "raw_model_output": "SELECT MAX(p.Property_Price) AS Maximum_Property_Price\nFROM Singapore_Properties p\nJOIN Singapore_Neighborhoods n ON p.Neighborhood_Name = n.Neighborhood_Name\nWHERE n.Wheelchair_Accessibility = true;", "latency_sec": 2.524559736251831, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 225, "prompt_eval_sec": null, "tokens_completion": 251, "completion_eval_sec": null, "tokens_total": 476, "tokens_per_sec": 188.54772702138897, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an inner join between Singapore_Properties and Singapore_Neighborhoods on Neighborhood_Name, filter for wheelchair-accessible neighborhoods, and select the maximum property price. The generated query uses table aliases (p and n) and renames the output column, but these are syntactic variations that do not affect the semantic result."}
{"example_id": 3859, "sql_complexity": "aggregation", "prompt": "What is the total number of mental health parity violations by month and year?", "context": "CREATE TABLE mental_health_parity_reports (report_id INT, violation_date DATE); INSERT INTO mental_health_parity_reports (report_id, violation_date) VALUES (1, '2022-01-01'), (2, '2022-02-15'), (3, '2022-03-05'), (4, '2022-04-20'), (5, '2021-06-12'), (6, '2021-07-28');", "reference_sql": "SELECT EXTRACT(MONTH FROM violation_date) AS month, EXTRACT(YEAR FROM violation_date) AS year, COUNT(*) FROM mental_health_parity_reports GROUP BY month, year;", "generated_sql": "SELECT \n  EXTRACT(YEAR FROM violation_date) AS violation_year,\n  EXTRACT(MONTH FROM violation_date) AS violation_month,\n  COUNT(*) AS total_violations\nFROM mental_health_parity_reports\nGROUP BY \n  EXTRACT(YEAR FROM violation_date),\n  EXTRACT(MONTH FROM violation_date)\nORDER BY \n  violation_year,\n  violation_month;", "raw_model_output": "SELECT \n  EXTRACT(YEAR FROM violation_date) AS violation_year,\n  EXTRACT(MONTH FROM violation_date) AS violation_month,\n  COUNT(*) AS total_violations\nFROM mental_health_parity_reports\nGROUP BY \n  EXTRACT(YEAR FROM violation_date),\n  EXTRACT(MONTH FROM violation_date)\nORDER BY \n  violation_year,\n  violation_month;", "latency_sec": 4.214200973510742, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 178, "prompt_eval_sec": null, "tokens_completion": 409, "completion_eval_sec": null, "tokens_total": 587, "tokens_per_sec": 139.29093645265462, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries group by extracted year and month from violation_date, count the number of violations, and return the same data. The differences are purely in column aliases (month/year vs violation_month/violation_year) and the addition of an ORDER BY clause in the generated query, which does not affect the semantic result set."}
{"example_id": 3551, "sql_complexity": "multiple_joins", "prompt": "List all artists who have performed in New York and Chicago, along with their highest-earning performance.", "context": "CREATE TABLE artist_events (artist_id INT, event_id INT, earnings DECIMAL(5,2)); CREATE TABLE artists (id INT, name VARCHAR(50)); CREATE TABLE events (id INT, city VARCHAR(20));", "reference_sql": "SELECT artists.name, MAX(artist_events.earnings) FROM artists INNER JOIN artist_events ON artists.id = artist_events.artist_id INNER JOIN events ON artist_events.event_id = events.id WHERE city IN ('New York', 'Chicago') GROUP BY artists.name;", "generated_sql": "SELECT a.name,\n       MAX(ae.earnings) AS highest_earning_performance\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nWHERE a.id IN (\n    SELECT ae2.artist_id\n    FROM artist_events ae2\n    JOIN events e ON ae2.event_id = e.id\n    WHERE e.city IN ('New York', 'Chicago')\n    GROUP BY ae2.artist_id\n    HAVING COUNT(DISTINCT e.city) = 2\n)\nGROUP BY a.id, a.name;", "raw_model_output": "SELECT a.name,\n       MAX(ae.earnings) AS highest_earning_performance\nFROM artists a\nJOIN artist_events ae ON a.id = ae.artist_id\nWHERE a.id IN (\n    SELECT ae2.artist_id\n    FROM artist_events ae2\n    JOIN events e ON ae2.event_id = e.id\n    WHERE e.city IN ('New York', 'Chicago')\n    GROUP BY ae2.artist_id\n    HAVING COUNT(DISTINCT e.city) = 2\n)\nGROUP BY a.id, a.name;", "latency_sec": 9.767468214035034, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 131, "prompt_eval_sec": null, "tokens_completion": 1077, "completion_eval_sec": null, "tokens_total": 1208, "tokens_per_sec": 123.67585678591767, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their filtering criteria. The reference query includes artists with events in either 'New York' or 'Chicago', while the generated query only includes artists who have events in both cities (due to the HAVING COUNT(DISTINCT e.city) = 2 condition). Additionally, the generated query groups by a.id and a.name, whereas the reference groups by name alone, which could lead to different results if artists share the same name."}
{"example_id": 5168, "sql_complexity": "aggregation", "prompt": "Get the number of renewable energy projects in Australia for each project type.", "context": "CREATE TABLE renewable_projects (id INT PRIMARY KEY, project_name VARCHAR(255), project_location VARCHAR(255), project_type VARCHAR(255), capacity_mw FLOAT);", "reference_sql": "SELECT project_type, COUNT(*) FROM renewable_projects WHERE project_location = 'Australia' GROUP BY project_type;", "generated_sql": "SELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "raw_model_output": "SELECT project_type, COUNT(*) AS project_count\nFROM renewable_projects\nWHERE project_location = 'Australia'\nGROUP BY project_type;", "latency_sec": 2.4215052127838135, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 113, "prompt_eval_sec": null, "tokens_completion": 165, "completion_eval_sec": null, "tokens_total": 278, "tokens_per_sec": 114.80462587169298, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns, apply identical WHERE and GROUP BY clauses, and calculate the same aggregate function (COUNT(*)). The only difference is the alias 'project_count' given to the COUNT(*) column in the second query, which does not affect the semantic result set."}
{"example_id": 4916, "sql_complexity": "aggregation", "prompt": "What is the maximum revenue generated from selling Yttrium in India in the past 3 years?", "context": "CREATE TABLE Yttrium_Sales (id INT PRIMARY KEY, year INT, country VARCHAR(20), quantity INT, price PER_KG); INSERT INTO Yttrium_Sales (id, year, country, quantity, price) VALUES (1, 2019, 'India', 120, 40), (2, 2020, 'India', 130, 45), (3, 2021, 'India', 140, 50), (4, 2019, 'China', 150, 35), (5, 2020, 'China', 160, 40), (6, 2021, 'China', 170, 45);", "reference_sql": "SELECT MAX(quantity * price) FROM Yttrium_Sales WHERE country = 'India' GROUP BY year ORDER BY year DESC LIMIT 3;", "generated_sql": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India'\n  AND year BETWEEN 2019 AND 2021;", "raw_model_output": "SELECT MAX(quantity * price) AS max_revenue\nFROM Yttrium_Sales\nWHERE country = 'India'\n  AND year BETWEEN 2019 AND 2021;", "latency_sec": 2.951624870300293, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 233, "prompt_eval_sec": null, "tokens_completion": 304, "completion_eval_sec": null, "tokens_total": 537, "tokens_per_sec": 181.9336885941629, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL groups by year, calculates MAX(quantity * price) per year, and returns multiple rows ordered by year descending with a limit of 3. The Generated SQL calculates a single MAX(quantity * price) across all India records in the specified year range without grouping, resulting in a single value. The two queries return different structures (multiple rows vs. single value) and different semantics."}
{"example_id": 812, "sql_complexity": "multiple_joins", "prompt": "What is the average salary of 'engineer' workers in each factory?", "context": "CREATE TABLE factories (factory_id INT, factory_name VARCHAR(20)); INSERT INTO factories VALUES (1, 'Factory X'), (2, 'Factory Y'), (3, 'Factory Z'); CREATE TABLE roles (role_id INT, role_name VARCHAR(20)); INSERT INTO roles VALUES (1, 'engineer'), (2, 'manager'), (3, 'assistant'); CREATE TABLE workers (worker_id INT, factory_id INT, role_id INT, salary DECIMAL(5,2)); INSERT INTO workers VALUES (1, 1, 1, 50000.00), (2, 1, 2, 70000.00), (3, 2, 1, 55000.00), (4, 2, 3, 40000.00), (5, 3, 1, 60000.00);", "reference_sql": "SELECT f.factory_name, AVG(salary) FROM workers w INNER JOIN factories f ON w.factory_id = f.factory_id INNER JOIN roles r ON w.role_id = r.role_id WHERE r.role_name = 'engineer' GROUP BY f.factory_name;", "generated_sql": "SELECT f.factory_name, AVG(w.salary) AS average_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY f.factory_name;", "raw_model_output": "SELECT f.factory_name, AVG(w.salary) AS average_salary\nFROM workers w\nJOIN factories f ON w.factory_id = f.factory_id\nJOIN roles r ON w.role_id = r.role_id\nWHERE r.role_name = 'engineer'\nGROUP BY f.factory_name;", "latency_sec": 2.4492952823638916, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 260, "prompt_eval_sec": null, "tokens_completion": 195, "completion_eval_sec": null, "tokens_total": 455, "tokens_per_sec": 185.76771991365013, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the same data by joining the same tables with identical conditions, filtering on 'engineer' roles, and grouping by factory name. The only differences are syntax formatting (alias naming and spacing) and the explicit alias for the average salary in the second query, which does not affect the semantic result."}
{"example_id": 5784, "sql_complexity": "set operations", "prompt": "List the number of users who have completed a workout of a specific type (e.g. Running) and have a membership status of 'Active'.", "context": "CREATE TABLE workouts (id INT, user_id INT, workout_type VARCHAR(20)); CREATE TABLE members (id INT, name VARCHAR(50), membership_status VARCHAR(20), state VARCHAR(20)); INSERT INTO workouts (id, user_id, workout_type) VALUES (1, 1, 'Running'), (2, 1, 'Cycling'), (3, 2, 'Running'), (4, 3, 'Cycling'), (5, 3, 'Swimming'), (6, 4, 'Running'), (7, 4, 'Swimming'); INSERT INTO members (id, name, membership_status, state) VALUES (1, 'John Doe', 'Active', 'Texas'), (2, 'Jane Doe', 'Inactive', 'California'), (3, 'Bob Smith', 'Active', 'Texas'), (4, 'Alice Johnson', 'Active', 'California');", "reference_sql": "SELECT COUNT(*) FROM (SELECT user_id FROM workouts WHERE workout_type = 'Running' INTERSECT SELECT id FROM members WHERE membership_status = 'Active') AS user_set;", "generated_sql": "SELECT COUNT(DISTINCT w.user_id) AS active_users\nFROM workouts w\nJOIN members m ON w.user_id = m.id\nWHERE w.workout_type = 'Running'\n  AND m.membership_status = 'Active';", "raw_model_output": "SELECT COUNT(DISTINCT w.user_id) AS active_users\nFROM workouts w\nJOIN members m ON w.user_id = m.id\nWHERE w.workout_type = 'Running'\n  AND m.membership_status = 'Active';", "latency_sec": 2.5087878704071045, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 279, "prompt_eval_sec": null, "tokens_completion": 250, "completion_eval_sec": null, "tokens_total": 529, "tokens_per_sec": 210.8588000762928, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count the number of distinct users who have at least one 'Running' workout and are active members. The Reference SQL uses INTERSECT to find common user_ids between active members and Running workouts, while the Generated SQL uses a JOIN with DISTINCT to achieve the same result. Both approaches eliminate duplicates and filter the correct subset of users."}
{"example_id": 3038, "sql_complexity": "subqueries", "prompt": "What is the total assets of clients who have invested in mutual funds but not in stocks?", "context": "CREATE TABLE clients (client_id INT, name TEXT, age INT, gender TEXT, total_assets DECIMAL(10,2)); INSERT INTO clients VALUES (1, 'John Doe', 35, 'Male', 250000.00), (2, 'Jane Smith', 45, 'Female', 500000.00); CREATE TABLE investments (client_id INT, investment_type TEXT); INSERT INTO investments VALUES (1, 'Stocks'), (1, 'Bonds'), (2, 'Stocks'), (3, 'Mutual Funds');", "reference_sql": "SELECT c.total_assets FROM clients c INNER JOIN investments i ON c.client_id = i.client_id WHERE i.investment_type = 'Mutual Funds' AND c.client_id NOT IN (SELECT client_id FROM investments WHERE investment_type = 'Stocks');", "generated_sql": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nWHERE c.client_id IN (\n  SELECT i.client_id\n  FROM investments i\n  GROUP BY i.client_id\n  HAVING SUM(CASE WHEN i.investment_type = 'Mutual Funds' THEN 1 ELSE 0 END) > 0\n    AND SUM(CASE WHEN i.investment_type = 'Stocks' THEN 1 ELSE 0 END) = 0\n);", "raw_model_output": "SELECT SUM(c.total_assets) AS total_assets\nFROM clients c\nWHERE c.client_id IN (\n  SELECT i.client_id\n  FROM investments i\n  GROUP BY i.client_id\n  HAVING SUM(CASE WHEN i.investment_type = 'Mutual Funds' THEN 1 ELSE 0 END) > 0\n    AND SUM(CASE WHEN i.investment_type = 'Stocks' THEN 1 ELSE 0 END) = 0\n);", "latency_sec": 5.213210105895996, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 195, "prompt_eval_sec": null, "tokens_completion": 683, "completion_eval_sec": null, "tokens_total": 878, "tokens_per_sec": 168.4183031501083, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query returns individual client assets where clients have 'Mutual Funds' and no 'Stocks', while the generated query aggregates total_assets into a single sum. The output structure differs (rows vs. single value) and the generated query's subquery logic uses SUM/CASE instead of NOT IN, leading to different result sets."}
{"example_id": 1078, "sql_complexity": "basic SQL", "prompt": "What is the maximum and minimum temperature difference between any two Arctic research stations?", "context": "CREATE TABLE arctic_stations (id INT, name TEXT, location TEXT, temperature DECIMAL(5,2)); INSERT INTO arctic_stations (id, name, location, temperature) VALUES (1, 'Station A', 'Greenland', 2.3), (2, 'Station B', 'Canada', -5.2);", "reference_sql": "SELECT a.name as station1, b.name as station2, MAX(ABS(a.temperature - b.temperature)) as temp_diff FROM arctic_stations a, arctic_stations b ORDER BY temp_diff DESC LIMIT 1", "generated_sql": "SELECT \n  MAX(diff) AS maximum_difference, \n  MIN(diff) AS minimum_difference\nFROM (\n  SELECT ABS(a.temperature - b.temperature) AS diff\n  FROM arctic_stations a\n  JOIN arctic_stations b ON a.id < b.id\n) AS differences;", "raw_model_output": "SELECT \n  MAX(diff) AS maximum_difference, \n  MIN(diff) AS minimum_difference\nFROM (\n  SELECT ABS(a.temperature - b.temperature) AS diff\n  FROM arctic_stations a\n  JOIN arctic_stations b ON a.id < b.id\n) AS differences;", "latency_sec": 4.285120010375977, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 152, "prompt_eval_sec": null, "tokens_completion": 582, "completion_eval_sec": null, "tokens_total": 734, "tokens_per_sec": 171.29041852333066, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query finds the single pair of stations with the maximum temperature difference, returning station names and the max difference. The generated query calculates both maximum and minimum differences across all station pairs but does not return station names. Their output structures and purposes differ, making them non-equivalent."}
{"example_id": 5015, "sql_complexity": "basic SQL", "prompt": "Calculate the average recycling rate", "context": "CREATE TABLE recycling_rates (id INT PRIMARY KEY, location VARCHAR(50), rate FLOAT);", "reference_sql": "SELECT AVG(rate) FROM recycling_rates;", "generated_sql": "SELECT AVG(rate) AS average_recycling_rate\nFROM recycling_rates;", "raw_model_output": "SELECT AVG(rate) AS average_recycling_rate\nFROM recycling_rates;", "latency_sec": 1.6830899715423584, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 90, "prompt_eval_sec": null, "tokens_completion": 89, "completion_eval_sec": null, "tokens_total": 179, "tokens_per_sec": 106.35200911806699, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average value of the 'rate' column from the 'recycling_rates' table. The generated query adds an alias ('average_recycling_rate') to the computed average, but this does not affect the semantic result. The core operation (averaging the 'rate' column) remains identical."}
{"example_id": 1533, "sql_complexity": "subqueries", "prompt": "Which programs had the highest volunteer participation rate in the last quarter?", "context": "CREATE TABLE Programs (ProgramID INT, ProgramName TEXT, Budget DECIMAL(10,2), NumVolunteers INT); CREATE TABLE VolunteerEvents (EventID INT, ProgramID INT, EventDate DATE, NumVolunteers INT);", "reference_sql": "SELECT p.ProgramName, COUNT(v.EventID) / (SELECT COUNT(*) FROM VolunteerEvents WHERE EventDate >= DATEADD(quarter, -1, GETDATE())) * 100.0 AS VolunteerParticipationRate FROM Programs p INNER JOIN VolunteerEvents v ON p.ProgramID = v.ProgramID WHERE v.EventDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY p.ProgramName ORDER BY VolunteerParticipationRate DESC;", "generated_sql": "SELECT \n    p.ProgramID,\n    p.ProgramName,\n    SUM(ve.NumVolunteers) * 1.0 / p.NumVolunteers AS ParticipationRate\n  FROM Programs p\n  JOIN VolunteerEvents ve \n    ON p.ProgramID = ve.ProgramID\n  WHERE ve.EventDate BETWEEN DATE '2023-10-01' AND DATE '2023-12-31'\n  GROUP BY p.ProgramID, p.ProgramName, p.NumVolunteers\n)\nSELECT ProgramID, ProgramName, ParticipationRate\nFROM ParticipationRates\nWHERE ParticipationRate = (\n  SELECT MAX(ParticipationRate) FROM ParticipationRates\n);", "raw_model_output": "WITH ParticipationRates AS (\n  SELECT \n    p.ProgramID,\n    p.ProgramName,\n    SUM(ve.NumVolunteers) * 1.0 / p.NumVolunteers AS ParticipationRate\n  FROM Programs p\n  JOIN VolunteerEvents ve \n    ON p.ProgramID = ve.ProgramID\n  WHERE ve.EventDate BETWEEN DATE '2023-10-01' AND DATE '2023-12-31'\n  GROUP BY p.ProgramID, p.ProgramName, p.NumVolunteers\n)\nSELECT ProgramID, ProgramName, ParticipationRate\nFROM ParticipationRates\nWHERE ParticipationRate = (\n  SELECT MAX(ParticipationRate) FROM ParticipationRates\n);", "latency_sec": 10.964535236358643, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 126, "prompt_eval_sec": null, "tokens_completion": 1553, "completion_eval_sec": null, "tokens_total": 1679, "tokens_per_sec": 153.13006559843947, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in multiple critical aspects. 1) The reference query calculates a participation rate based on the *count* of events, while the generated query uses the *sum of volunteers* from events. 2) The reference query uses a dynamic date range (last quarter from current date), whereas the generated query uses a fixed date range (2023-10-01 to 2023-12-31). 3) The reference query returns all programs ordered by participation rate, while the generated query only returns the program(s) with the maximum participation rate. 4) The reference query groups by ProgramName, while the generated query groups by ProgramID, ProgramName, and NumVolunteers (though this is likely a minor difference). These differences in calculation logic, date filtering, and result set structure make the queries non-equivalent."}
{"example_id": 4021, "sql_complexity": "subqueries", "prompt": "What is the percentage of energy efficiency improvement, per sector, compared to 2015 levels?", "context": "CREATE TABLE energy_efficiency (id INT, sector VARCHAR(50), year INT, efficiency FLOAT); INSERT INTO energy_efficiency (id, sector, year, efficiency) VALUES (1, 'Industry', 2015, 100.0), (2, 'Industry', 2020, 105.0), (3, 'Residential', 2015, 100.0), (4, 'Residential', 2020, 103.0);", "reference_sql": "SELECT sector, (SUM(efficiency) / (SELECT SUM(efficiency) FROM energy_efficiency WHERE year = 2015 AND sector = e.sector) * 100.0) - 100.0 AS improvement FROM energy_efficiency e WHERE year = 2020 GROUP BY sector;", "generated_sql": "SELECT b.sector,\n       ((b.efficiency / a.efficiency) - 1) * 100 AS percent_improvement\nFROM energy_efficiency a\nJOIN energy_efficiency b\n  ON a.sector = b.sector\nWHERE a.year = 2015\n  AND b.year = 2020;", "raw_model_output": "SELECT b.sector,\n       ((b.efficiency / a.efficiency) - 1) * 100 AS percent_improvement\nFROM energy_efficiency a\nJOIN energy_efficiency b\n  ON a.sector = b.sector\nWHERE a.year = 2015\n  AND b.year = 2020;", "latency_sec": 6.535604000091553, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 180, "prompt_eval_sec": null, "tokens_completion": 847, "completion_eval_sec": null, "tokens_total": 1027, "tokens_per_sec": 157.13926363739503, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL calculates the percentage improvement by aggregating efficiency values for each sector across years (using SUM), while the Generated SQL performs a self-join and computes the ratio of individual efficiency values without aggregation. If there are multiple entries per sector/year, the Generated SQL would produce multiple rows with per-row calculations, whereas the Reference SQL would return a single aggregated value per sector. In the provided sample data, they produce the same results due to single entries per sector/year, but they differ in general cases."}
{"example_id": 1551, "sql_complexity": "single join", "prompt": "How many unique donors made donations in the healthcare industry in Q3 2022?", "context": "CREATE TABLE donations (id INT, donor_id INT, amount FLOAT, donation_date DATE); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (1, 7, 100, '2022-07-01'); INSERT INTO donations (id, donor_id, amount, donation_date) VALUES (2, 8, 200, '2022-09-15'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (7, 'Charlie Davis', 'Healthcare', '2022-07-01'); INSERT INTO donors (id, name, industry, first_donation_date DATE) VALUES (8, 'Dana Wilson', 'Healthcare', '2022-09-15');", "reference_sql": "SELECT COUNT(DISTINCT donor_id) FROM donations d JOIN donors don ON d.donor_id = don.id WHERE industry = 'Healthcare' AND donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "generated_sql": "SELECT COUNT(DISTINCT d.donor_id) AS unique_donors\nFROM donations d\nJOIN donors dr ON d.donor_id = dr.id\nWHERE dr.industry = 'Healthcare'\n  AND d.donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "raw_model_output": "SELECT COUNT(DISTINCT d.donor_id) AS unique_donors\nFROM donations d\nJOIN donors dr ON d.donor_id = dr.id\nWHERE dr.industry = 'Healthcare'\n  AND d.donation_date BETWEEN '2022-07-01' AND '2022-09-30';", "latency_sec": 4.011713981628418, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 235, "prompt_eval_sec": null, "tokens_completion": 331, "completion_eval_sec": null, "tokens_total": 566, "tokens_per_sec": 141.08682787257223, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an inner join between donations and donors tables on donor_id, filter for 'Healthcare' industry and donations in July-September 2022, and count distinct donor_ids. The only differences are table alias names ('don' vs 'dr') and column aliasing (COUNT(DISTINCT d.donor_id) vs COUNT(DISTINCT donor_id)), which do not affect the semantic result."}
{"example_id": 2592, "sql_complexity": "window functions", "prompt": "What is the third highest account balance for Shariah-compliant finance customers?", "context": "CREATE TABLE shariah_compliant_finance(customer_id INT, account_balance DECIMAL(10, 2)); INSERT INTO shariah_compliant_finance VALUES (1, 5000), (2, 7000), (3, 6000), (4, 8000), (5, 9000);", "reference_sql": "SELECT account_balance FROM (SELECT account_balance, RANK() OVER (ORDER BY account_balance DESC) as rn FROM shariah_compliant_finance) t WHERE rn = 3;", "generated_sql": "SELECT account_balance\nFROM shariah_compliant_finance t1\nWHERE (\n  SELECT COUNT(DISTINCT t2.account_balance)\n  FROM shariah_compliant_finance t2\n  WHERE t2.account_balance > t1.account_balance\n) = 2;", "raw_model_output": "SELECT account_balance\nFROM shariah_compliant_finance t1\nWHERE (\n  SELECT COUNT(DISTINCT t2.account_balance)\n  FROM shariah_compliant_finance t2\n  WHERE t2.account_balance > t1.account_balance\n) = 2;", "latency_sec": 3.557339906692505, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 150, "prompt_eval_sec": null, "tokens_completion": 452, "completion_eval_sec": null, "tokens_total": 602, "tokens_per_sec": 169.22757335261767, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses RANK() to find the third-highest account balance (including ties), while the Generated SQL counts distinct balances higher than the current value. In cases with duplicate balances, the RANK() may assign the same rank to multiple rows, but the Generated SQL's COUNT(DISTINCT) approach would not match the RANK() behavior. For example, if there are two 10000 balances, the Reference SQL would return 9000 (rank 3), but the Generated SQL would not select it since only one distinct higher value exists."}
{"example_id": 3795, "sql_complexity": "single join", "prompt": "What is the total quantity of unsold garments for each manufacturer based in 'Italy' or 'Spain'?", "context": "CREATE TABLE manufacturers (id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); CREATE TABLE garments (id INT PRIMARY KEY, manufacturer_id INT, quantity_manufactured INT, quantity_sold INT);", "reference_sql": "SELECT m.name, SUM(g.quantity_manufactured - g.quantity_sold) as total_unsold_quantity FROM manufacturers m JOIN garments g ON m.id = g.manufacturer_id WHERE m.country IN ('Italy', 'Spain') GROUP BY m.name;", "generated_sql": "SELECT m.name,\n       SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold\nFROM manufacturers m\nJOIN garments g ON m.id = g.manufacturer_id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "raw_model_output": "SELECT m.name,\n       SUM(g.quantity_manufactured - g.quantity_sold) AS total_unsold\nFROM manufacturers m\nJOIN garments g ON m.id = g.manufacturer_id\nWHERE m.country IN ('Italy', 'Spain')\nGROUP BY m.name;", "latency_sec": 2.676107168197632, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 131, "prompt_eval_sec": null, "tokens_completion": 192, "completion_eval_sec": null, "tokens_total": 323, "tokens_per_sec": 120.69770741563453, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only difference is the column alias name ('total_unsold_quantity' vs 'total_unsold'), which does not affect the semantic result. Both queries perform the same join, filtering, aggregation, and grouping."}
{"example_id": 4138, "sql_complexity": "window functions", "prompt": "How many lifelong learning courses has a student with ID '2' completed, in chronological order?", "context": "CREATE TABLE lifelong_learning (student_id INT, course_id INT, completion_date DATE); INSERT INTO lifelong_learning VALUES (2, 1001, '2015-01-01'), (2, 1002, '2016-01-01');", "reference_sql": "SELECT student_id, course_id, COUNT(course_id) OVER (PARTITION BY student_id ORDER BY completion_date) as completed_courses FROM lifelong_learning WHERE student_id = 2;", "generated_sql": "SELECT \n  completion_date,\n  course_id,\n  ROW_NUMBER() OVER (ORDER BY completion_date) AS course_order\nFROM lifelong_learning\nWHERE student_id = 2\nORDER BY completion_date;", "raw_model_output": "SELECT \n  completion_date,\n  course_id,\n  ROW_NUMBER() OVER (ORDER BY completion_date) AS course_order\nFROM lifelong_learning\nWHERE student_id = 2\nORDER BY completion_date;", "latency_sec": 5.799942970275879, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 137, "prompt_eval_sec": null, "tokens_completion": 756, "completion_eval_sec": null, "tokens_total": 893, "tokens_per_sec": 153.9670311547087, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The reference query returns student_id, course_id, and a cumulative count of courses per student, while the generated query returns completion_date, course_id, and a row number based on completion date. The window functions (COUNT vs. ROW_NUMBER) and selected columns differ, leading to different result structures."}
{"example_id": 312, "sql_complexity": "aggregation", "prompt": "List the top 3 most represented ethnicities in movies produced in the USA.", "context": "CREATE TABLE movies (title VARCHAR(255), production_country VARCHAR(64), lead_actor_ethnicity VARCHAR(64));", "reference_sql": "SELECT lead_actor_ethnicity, COUNT(*) AS count FROM movies WHERE production_country = 'USA' GROUP BY lead_actor_ethnicity ORDER BY count DESC LIMIT 3;", "generated_sql": "SELECT lead_actor_ethnicity,\n       COUNT(*) AS ethnicity_count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY ethnicity_count DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT lead_actor_ethnicity,\n       COUNT(*) AS ethnicity_count\nFROM movies\nWHERE production_country = 'USA'\nGROUP BY lead_actor_ethnicity\nORDER BY ethnicity_count DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 4.227916955947876, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 105, "prompt_eval_sec": null, "tokens_completion": 312, "completion_eval_sec": null, "tokens_total": 417, "tokens_per_sec": 98.63013023786104, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the top 3 lead actor ethnicities by count for USA-produced movies. The only differences are column alias names ('count' vs 'ethnicity_count') and the row-limiting syntax ('LIMIT 3' vs 'FETCH FIRST 3 ROWS ONLY'). These are syntactic variations with equivalent semantic behavior in this context."}
{"example_id": 4298, "sql_complexity": "single join", "prompt": "How many users joined the gym in Q1 2023?", "context": "CREATE TABLE memberships (id INT, user_id INT, join_date DATE); INSERT INTO memberships (id, user_id, join_date) VALUES (1, 5, '2023-01-15'), (2, 6, '2023-02-03'), (3, 7, '2023-03-20'), (4, 8, '2022-12-31');", "reference_sql": "SELECT COUNT(*) FROM memberships WHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "generated_sql": "SELECT COUNT(*) AS users_joined_in_q1_2023\nFROM memberships\nWHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "raw_model_output": "SELECT COUNT(*) AS users_joined_in_q1_2023\nFROM memberships\nWHERE join_date BETWEEN '2023-01-01' AND '2023-03-31';", "latency_sec": 4.401620149612427, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 163, "prompt_eval_sec": null, "tokens_completion": 433, "completion_eval_sec": null, "tokens_total": 596, "tokens_per_sec": 135.40468730644085, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries count the number of rows in the 'memberships' table where join_date falls between '2023-01-01' and '2023-03-31'. The generated query adds an alias ('users_joined_in_q1_2023') to the COUNT(*) result, but this does not affect the semantic meaning or the actual result value."}
{"example_id": 5211, "sql_complexity": "multiple_joins", "prompt": "What is the average transaction value in the last week, split by product category and customer demographics?", "context": "CREATE TABLE transactions (transaction_id INT, customer_id INT, product_id INT, category_id INT, transaction_date DATE, amount DECIMAL(10,2)); CREATE TABLE customers (customer_id INT, age INT, gender VARCHAR(10), location VARCHAR(255)); CREATE TABLE products (product_id INT, name VARCHAR(255), category_id INT);", "reference_sql": "SELECT c.age, c.gender, p.category_id, AVG(t.amount) as avg_transaction_value FROM transactions t INNER JOIN customers c ON t.customer_id = c.customer_id INNER JOIN products p ON t.product_id = p.product_id WHERE t.transaction_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 WEEK) GROUP BY c.age, c.gender, p.category_id;", "generated_sql": "SELECT \n  p.category_id,\n  c.age,\n  c.gender,\n  c.location,\n  AVG(t.amount) AS average_transaction_value\nFROM transactions t\nJOIN customers c \n  ON t.customer_id = c.customer_id\nJOIN products p \n  ON t.product_id = p.product_id\nWHERE t.transaction_date >= CURRENT_DATE - INTERVAL '7' DAY\nGROUP BY p.category_id, c.age, c.gender, c.location;", "raw_model_output": "SELECT \n  p.category_id,\n  c.age,\n  c.gender,\n  c.location,\n  AVG(t.amount) AS average_transaction_value\nFROM transactions t\nJOIN customers c \n  ON t.customer_id = c.customer_id\nJOIN products p \n  ON t.product_id = p.product_id\nWHERE t.transaction_date >= CURRENT_DATE - INTERVAL '7' DAY\nGROUP BY p.category_id, c.age, c.gender, c.location;", "latency_sec": 4.161494016647339, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 155, "prompt_eval_sec": null, "tokens_completion": 486, "completion_eval_sec": null, "tokens_total": 641, "tokens_per_sec": 154.03121990222505, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. 1) The generated query includes an additional column 'c.location' in both the SELECT and GROUP BY clauses, which is not present in the reference query. 2) The GROUP BY clause in the generated query includes 'c.location' while the reference query does not. These differences will result in different grouping and aggregation, leading to different results."}
{"example_id": 382, "sql_complexity": "window functions", "prompt": "What is the average annual precipitation in the past 10 years for each weather station?", "context": "CREATE TABLE WeatherStation (ID INT, Name VARCHAR(100), Location VARCHAR(100), Elevation FLOAT, AnnualPrecipitation FLOAT); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (1, 'Station A', 'Arctic Circle', 100, 450); INSERT INTO WeatherStation (ID, Name, Location, Elevation, AnnualPrecipitation) VALUES (2, 'Station B', 'North Pole', 200, 300);", "reference_sql": "SELECT Name, AVG(AnnualPrecipitation) OVER (PARTITION BY Name ORDER BY Name ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS AvgAnnualPrecipitation FROM WeatherStation WHERE YEAR(CurrentDate) - YEAR(DateInstalled) BETWEEN 1 AND 10;", "generated_sql": "SELECT Name, AnnualPrecipitation AS AvgAnnualPrecipitation\nFROM WeatherStation;", "raw_model_output": "SELECT Name, AnnualPrecipitation AS AvgAnnualPrecipitation\nFROM WeatherStation;", "latency_sec": 4.350337982177734, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 186, "prompt_eval_sec": null, "tokens_completion": 413, "completion_eval_sec": null, "tokens_total": 599, "tokens_per_sec": 137.69045128308554, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references a non-existent 'DateInstalled' column in the WHERE clause and uses a window function to calculate an average, while the Generated SQL directly selects and renames the 'AnnualPrecipitation' column. The queries differ in both structure and logic, making them non-equivalent."}
{"example_id": 2190, "sql_complexity": "single join", "prompt": "What is the total number of humanitarian assistance events by each country in the last 3 years?", "context": "CREATE TABLE Humanitarian_Assistance (id INT, country VARCHAR(50), year INT, events INT); CREATE TABLE Countries (id INT, name VARCHAR(50), region VARCHAR(50));", "reference_sql": "SELECT co.name, SUM(ha.events) FROM Humanitarian_Assistance ha INNER JOIN Countries co ON ha.country = co.name WHERE ha.year BETWEEN (YEAR(CURRENT_DATE) - 3) AND YEAR(CURRENT_DATE) GROUP BY co.name;", "generated_sql": "SELECT \n  country, \n  SUM(events) AS total_events\nFROM Humanitarian_Assistance\nWHERE year BETWEEN ((SELECT MAX(year) FROM Humanitarian_Assistance) - 2)\n                AND  (SELECT MAX(year) FROM Humanitarian_Assistance)\nGROUP BY country;", "raw_model_output": "SELECT \n  country, \n  SUM(events) AS total_events\nFROM Humanitarian_Assistance\nWHERE year BETWEEN ((SELECT MAX(year) FROM Humanitarian_Assistance) - 2)\n                AND  (SELECT MAX(year) FROM Humanitarian_Assistance)\nGROUP BY country;", "latency_sec": 8.643851041793823, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 1027, "completion_eval_sec": null, "tokens_total": 1150, "tokens_per_sec": 133.04255180239028, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. 1) The year range: the reference query uses a fixed window of the last 4 years (current year - 3 to current year), while the generated query uses a dynamic window of the last 3 years (max year - 2 to max year). 2) The join: the reference query joins with the Countries table, while the generated query doesn't. These differences would lead to different results."}
{"example_id": 1852, "sql_complexity": "set operations", "prompt": "Compare coal production and employment rates in China and India between 2018 and 2020.", "context": "CREATE TABLE china_coal_production (year INT, production FLOAT); INSERT INTO china_coal_production (year, production) VALUES (2018, 3500.0), (2019, 3600.0), (2020, 3700.0); CREATE TABLE china_employment (year INT, employment FLOAT); INSERT INTO china_employment (year, employment) VALUES (2018, 8000000.0), (2019, 8100000.0), (2020, 8200000.0); CREATE TABLE india_coal_production (year INT, production FLOAT); INSERT INTO india_coal_production (year, production) VALUES (2018, 700.0), (2019, 750.0), (2020, 800.0); CREATE TABLE india_employment (year INT, employment FLOAT); INSERT INTO india_employment (year, employment) VALUES (2018, 1000000.0), (2019, 1050000.0), (2020, 1100000.0);", "reference_sql": "SELECT 'China' AS country, china_coal_production.production, china_employment.employment FROM china_coal_production INNER JOIN china_employment ON china_coal_production.year = china_employment.year WHERE china_coal_production.year BETWEEN 2018 AND 2020 UNION ALL SELECT 'India', india_coal_production.production, india_employment.employment FROM india_coal_production INNER JOIN india_employment ON india_coal_production.year = india_employment.year WHERE india_coal_production.year BETWEEN 2018 AND 2020;", "generated_sql": "SELECT \n  ccp.year,\n  ccp.production AS china_production,\n  ce.employment AS china_employment,\n  icp.production AS india_production,\n  ie.employment AS india_employment\nFROM china_coal_production AS ccp\nJOIN china_employment AS ce ON ccp.year = ce.year\nJOIN india_coal_production AS icp ON ccp.year = icp.year\nJOIN india_employment AS ie ON ccp.year = ie.year\nWHERE ccp.year BETWEEN 2018 AND 2020;", "raw_model_output": "SELECT \n  ccp.year,\n  ccp.production AS china_production,\n  ce.employment AS china_employment,\n  icp.production AS india_production,\n  ie.employment AS india_employment\nFROM china_coal_production AS ccp\nJOIN china_employment AS ce ON ccp.year = ce.year\nJOIN india_coal_production AS icp ON ccp.year = icp.year\nJOIN india_employment AS ie ON ccp.year = ie.year\nWHERE ccp.year BETWEEN 2018 AND 2020;", "latency_sec": 3.5387420654296875, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 308, "prompt_eval_sec": null, "tokens_completion": 379, "completion_eval_sec": null, "tokens_total": 687, "tokens_per_sec": 194.13678287303537, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two rows per year (China and India) with columns 'country', 'production', 'employment', while the Generated SQL returns one row per year with separate columns for China and India's production/employment. The structure and number of rows differ, making them non-equivalent."}
{"example_id": 2535, "sql_complexity": "subqueries", "prompt": "What is the maximum safety rating for vehicles in the vehiclesafety schema?", "context": "CREATE TABLE VehicleSafety (id INT, vehicle_id INT, safetyrating INT, PRIMARY KEY (id)); CREATE TABLE Vehicles (id INT, make VARCHAR(50), model VARCHAR(50), PRIMARY KEY (id)); CREATE TABLE LuxuryVehicles (id INT, vehicle_id INT, PRIMARY KEY (id), FOREIGN KEY (vehicle_id) REFERENCES Vehicles(id));", "reference_sql": "SELECT MAX(safetyrating) FROM vehicleSafety JOIN Vehicles ON vehicleSafety.vehicle_id = Vehicles.id WHERE EXISTS (SELECT * FROM LuxuryVehicles WHERE Vehicles.id = LuxuryVehicles.vehicle_id);", "generated_sql": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "raw_model_output": "SELECT MAX(safetyrating) AS max_safety_rating\nFROM VehicleSafety;", "latency_sec": 2.781989812850952, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 152, "prompt_eval_sec": null, "tokens_completion": 156, "completion_eval_sec": null, "tokens_total": 308, "tokens_per_sec": 110.71212359486142, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters safety ratings to only include vehicles that exist in LuxuryVehicles (via the EXISTS clause), while the Generated SQL considers all entries in VehicleSafety without any filtering. The presence of the LuxuryVehicles constraint in the Reference SQL means it could return a different (lower) maximum value if some vehicles are not luxury vehicles."}
{"example_id": 2140, "sql_complexity": "aggregation", "prompt": "What was the total amount of minerals extracted in the 'north' region for each month in 2020?", "context": "CREATE TABLE extraction(id INT, location TEXT, month INT, year INT, minerals_extracted FLOAT);INSERT INTO extraction(id, location, month, year, minerals_extracted) VALUES (1, 'north', 1, 2020, 1500), (2, 'north', 2, 2020, 1800), (3, 'south', 1, 2020, 1200);", "reference_sql": "SELECT month, SUM(minerals_extracted) FROM extraction WHERE location = 'north' AND year = 2020 GROUP BY month;", "generated_sql": "SELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month;", "raw_model_output": "SELECT month, SUM(minerals_extracted) AS total_minerals_extracted\nFROM extraction\nWHERE location = 'north' AND year = 2020\nGROUP BY month;", "latency_sec": 9.875821113586426, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 175, "prompt_eval_sec": null, "tokens_completion": 177, "completion_eval_sec": null, "tokens_total": 352, "tokens_per_sec": 35.64260591109173, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The queries are semantically equivalent. The generated query adds an alias (AS total_minerals_extracted) to the SUM column, but the core logic (filtering, grouping, and aggregation) remains identical. The result set's data values (month and summed minerals_extracted) are the same, and column aliases do not affect the actual computed results."}
{"example_id": 4779, "sql_complexity": "window functions", "prompt": "What is the average CO2 emission for the top 3 highest emitting countries since 2015?", "context": "CREATE TABLE emissions (country VARCHAR(50), year INT, co2_emission INT); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2015, 5373978000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2015, 10498600000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2015, 2633830000); INSERT INTO emissions (country, year, co2_emission) VALUES ('USA', 2016, 5518004000); INSERT INTO emissions (country, year, co2_emission) VALUES ('China', 2016, 10813000000); INSERT INTO emissions (country, year, co2_emission) VALUES ('India', 2016, 2799280000);", "reference_sql": "SELECT AVG(co2_emission) as avg_emission FROM (SELECT country, year, co2_emission, ROW_NUMBER() OVER (ORDER BY co2_emission DESC) as rn FROM emissions WHERE year >= 2015) t WHERE rn <= 3 GROUP BY country;", "generated_sql": "SELECT AVG(total_emission) AS avg_emission\nFROM (\n  SELECT SUM(co2_emission) AS total_emission\n  FROM emissions\n  WHERE year >= 2015\n  GROUP BY country\n  ORDER BY total_emission DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top_emissions;", "raw_model_output": "SELECT AVG(total_emission) AS avg_emission\nFROM (\n  SELECT SUM(co2_emission) AS total_emission\n  FROM emissions\n  WHERE year >= 2015\n  GROUP BY country\n  ORDER BY total_emission DESC\n  FETCH FIRST 3 ROWS ONLY\n) AS top_emissions;", "latency_sec": 5.966785907745361, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 266, "prompt_eval_sec": null, "tokens_completion": 781, "completion_eval_sec": null, "tokens_total": 1047, "tokens_per_sec": 175.4713536212035, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the average CO2 emission for each country's top 3 individual entries (by emission value), while the Generated SQL first sums emissions per country, then averages the top 3 countries by total emission. The Reference SQL groups by country after selecting top 3 rows globally, whereas the Generated SQL aggregates by country first and then selects top 3. Their results differ in structure and calculation logic."}
{"example_id": 1015, "sql_complexity": "subqueries", "prompt": "List the top 3 most expensive eco-friendly products in Europe and their suppliers.", "context": "CREATE TABLE Suppliers (supplierID INT, supplierName VARCHAR(50), country VARCHAR(50)); CREATE TABLE Products (productID INT, productName VARCHAR(50), price DECIMAL(10,2), ecoFriendly BOOLEAN, supplierID INT);", "reference_sql": "SELECT P.productName, P.price, S.supplierName FROM (SELECT * FROM Products WHERE ecoFriendly = TRUE ORDER BY price DESC LIMIT 3) P JOIN Suppliers S ON P.supplierID = S.supplierID;", "generated_sql": "SELECT \n  p.productName,\n  p.price,\n  s.supplierName,\n  s.country\nFROM Products AS p\nJOIN Suppliers AS s \n  ON p.supplierID = s.supplierID\nWHERE \n  p.ecoFriendly = TRUE \n  AND s.country = 'Europe'\nORDER BY p.price DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT \n  p.productName,\n  p.price,\n  s.supplierName,\n  s.country\nFROM Products AS p\nJOIN Suppliers AS s \n  ON p.supplierID = s.supplierID\nWHERE \n  p.ecoFriendly = TRUE \n  AND s.country = 'Europe'\nORDER BY p.price DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 6.833858013153076, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 131, "prompt_eval_sec": null, "tokens_completion": 854, "completion_eval_sec": null, "tokens_total": 985, "tokens_per_sec": 144.1352744092982, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects: 1) The generated query includes an additional WHERE condition (s.country = 'Europe') not present in the reference query, and 2) The generated query selects an extra column (s.country) that the reference query does not. These differences ensure they cannot produce identical results."}
{"example_id": 3715, "sql_complexity": "aggregation", "prompt": "What is the average age of engines still in service for each engine type?", "context": "CREATE TABLE Engine (id INT, aircraft_id INT, engine_type VARCHAR(255), hours_since_last_service INT, manufacture_year INT); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (1, 1, 'GE90-115B', 500, 2000); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (2, 2, 'CFM56-5B', 1000, 1995); INSERT INTO Engine (id, aircraft_id, engine_type, hours_since_last_service, manufacture_year) VALUES (3, 1, 'GE90-115B', 700, 2002);", "reference_sql": "SELECT engine_type, AVG(YEAR(CURRENT_DATE) - manufacture_year) as avg_age FROM Engine GROUP BY engine_type;", "generated_sql": "SELECT \n  engine_type, \n  AVG(EXTRACT(YEAR FROM CURRENT_DATE) - manufacture_year) AS average_age\nFROM Engine\nGROUP BY engine_type;", "raw_model_output": "SELECT \n  engine_type, \n  AVG(EXTRACT(YEAR FROM CURRENT_DATE) - manufacture_year) AS average_age\nFROM Engine\nGROUP BY engine_type;", "latency_sec": 4.166162967681885, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 233, "prompt_eval_sec": null, "tokens_completion": 492, "completion_eval_sec": null, "tokens_total": 725, "tokens_per_sec": 174.02103701272176, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average age of engines by subtracting the manufacture_year from the current year. The reference query uses YEAR(CURRENT_DATE) while the generated query uses EXTRACT(YEAR FROM CURRENT_DATE). These expressions are functionally equivalent in standard SQL for retrieving the year component of the current date, leading to identical aggregation results."}
{"example_id": 1957, "sql_complexity": "set operations", "prompt": "What is the average temperature recorded for the 'polar_bear' species in the 'Arctic_Animals' table compared to the 'penguin' species in the 'Antarctic_Animals' table?", "context": "CREATE TABLE Arctic_Animals (species TEXT, avg_temp FLOAT); CREATE TABLE Antarctic_Animals (species TEXT, avg_temp FLOAT);", "reference_sql": "SELECT AVG(Arctic_Animals.avg_temp) FROM Arctic_Animals WHERE Arctic_Animals.species = 'polar_bear' INTERSECT SELECT AVG(Antarctic_Animals.avg_temp) FROM Antarctic_Animals WHERE Antarctic_Animals.species = 'penguin'", "generated_sql": "SELECT \n    (SELECT avg_temp \n     FROM Arctic_Animals \n     WHERE species = 'polar_bear') AS polar_bear_avg,\n    (SELECT avg_temp \n     FROM Antarctic_Animals \n     WHERE species = 'penguin') AS penguin_avg;", "raw_model_output": "SELECT \n    (SELECT avg_temp \n     FROM Arctic_Animals \n     WHERE species = 'polar_bear') AS polar_bear_avg,\n    (SELECT avg_temp \n     FROM Antarctic_Animals \n     WHERE species = 'penguin') AS penguin_avg;", "latency_sec": 3.1202499866485596, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 134, "prompt_eval_sec": null, "tokens_completion": 321, "completion_eval_sec": null, "tokens_total": 455, "tokens_per_sec": 145.82164953030338, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses INTERSECT to find common values between two AVG() results, returning a single column with matching averages. The Generated SQL returns two separate columns with individual avg_temp values. The first query checks for equality between the two averages, while the second retrieves both values independently, resulting in different output structures and semantics."}
{"example_id": 1311, "sql_complexity": "basic SQL", "prompt": "What is the total number of veteran job applications in Texas in the last year?", "context": "CREATE TABLE veteran_jobs (id INT, state VARCHAR(50), application_date DATE); INSERT INTO veteran_jobs (id, state, application_date) VALUES (1, 'Texas', '2021-02-15'), (2, 'California', '2021-04-10'), (3, 'Texas', '2022-01-05');", "reference_sql": "SELECT COUNT(*) FROM veteran_jobs WHERE state = 'Texas' AND application_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);", "generated_sql": "SELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas'\n  AND application_date >= CURRENT_DATE - INTERVAL '1' YEAR;", "raw_model_output": "SELECT COUNT(*) AS total_applications\nFROM veteran_jobs\nWHERE state = 'Texas'\n  AND application_date >= CURRENT_DATE - INTERVAL '1' YEAR;", "latency_sec": 2.970494031906128, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 154, "prompt_eval_sec": null, "tokens_completion": 300, "completion_eval_sec": null, "tokens_total": 454, "tokens_per_sec": 152.83652992518353, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count records where state is 'Texas' and application_date is within the last year. The date calculation uses equivalent syntax (DATE_SUB vs. CURRENT_DATE - INTERVAL) which produce the same result. The column alias in the generated query does not affect semantic equivalence."}
{"example_id": 2997, "sql_complexity": "window functions", "prompt": "What is the earliest capture time for each satellite image in the 'satellite_images' table?", "context": "CREATE TABLE satellite_images (image_id INT, image_url TEXT, capture_time TIMESTAMP); INSERT INTO satellite_images (image_id, image_url, capture_time) VALUES (1, 'image1.jpg', '2022-01-01 10:00:00'), (2, 'image2.jpg', '2021-05-01 10:00:00');", "reference_sql": "SELECT image_id, MIN(capture_time) OVER (PARTITION BY image_id) FROM satellite_images;", "generated_sql": "SELECT \n  image_id, \n  MIN(capture_time) AS earliest_capture_time \nFROM \n  satellite_images \nGROUP BY \n  image_id;", "raw_model_output": "SELECT \n  image_id, \n  MIN(capture_time) AS earliest_capture_time \nFROM \n  satellite_images \nGROUP BY \n  image_id;", "latency_sec": 3.0446979999542236, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 162, "prompt_eval_sec": null, "tokens_completion": 298, "completion_eval_sec": null, "tokens_total": 460, "tokens_per_sec": 151.0823076728516, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to return all rows with the minimum capture_time per image_id, while the Generated SQL aggregates to one row per image_id. If there are multiple rows with the same image_id, the Reference SQL would return multiple rows with the same min value, whereas the Generated SQL would return a single row per image_id. Thus, they are not semantically equivalent in general cases."}
{"example_id": 3743, "sql_complexity": "aggregation", "prompt": "What is the maximum budget spent on peacekeeping operations by each department?", "context": "CREATE TABLE DepartmentPeacekeeping (id INT, department VARCHAR(50), budget INT);", "reference_sql": "SELECT department, MAX(budget) FROM DepartmentPeacekeeping GROUP BY department;", "generated_sql": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "raw_model_output": "SELECT department, MAX(budget) AS max_budget\nFROM DepartmentPeacekeeping\nGROUP BY department;", "latency_sec": 3.384145975112915, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 97, "prompt_eval_sec": null, "tokens_completion": 188, "completion_eval_sec": null, "tokens_total": 285, "tokens_per_sec": 84.21622533303716, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group by 'department' and calculate the maximum 'budget' for each group. The generated query adds an alias 'max_budget' to the MAX(budget) column, but this does not affect the semantic result. The output data (department and corresponding max budget values) remains identical."}
{"example_id": 4664, "sql_complexity": "multiple_joins", "prompt": "Calculate the total number of volunteer hours contributed by volunteers from 'California' in 'Health' projects in 2021.", "context": "CREATE TABLE volunteers (volunteer_id INT, name VARCHAR(255), state VARCHAR(255));", "reference_sql": "SELECT SUM(vh.hours) as total_hours FROM volunteer_projects vp JOIN volunteer_hours vh ON vp.project_id = vh.project_id JOIN volunteers vol ON vh.volunteer_id = vol.volunteer_id WHERE vp.cause = 'Health' AND vol.state = 'California' AND vh.volunteer_date BETWEEN '2021-01-01' AND '2021-12-31';", "generated_sql": "SELECT SUM(vh.hours) AS total_hours\n-- FROM volunteers v\n-- JOIN volunteer_hours vh ON v.volunteer_id = vh.volunteer_id\n-- JOIN projects p ON vh.project_id = p.project_id\n-- WHERE v.state = 'California'\n--   AND p.category = 'Health'\n--   AND p.year = 2021;", "raw_model_output": "The question asks for volunteer hours for \u2018Health\u2019 projects in 2021 for California volunteers. However, the provided schema includes only the volunteers table (with volunteer_id, name, and state) and does not include any information about volunteer hours, project details, project categories, or project dates. Without additional tables or columns to refer to (such as a projects table or a volunteer_hours table), it isn\u2019t possible to write an executable SQL query that meets the requirements.\n\nIf additional tables were available (for example, a volunteer_hours table with columns volunteer_id, hours and a projects table with columns project_id, category, and year), the query might look similar to:\n\n-------------------------------------------------\n-- Hypothetical example if additional tables existed:\n--\n-- SELECT SUM(vh.hours) AS total_hours\n-- FROM volunteers v\n-- JOIN volunteer_hours vh ON v.volunteer_id = vh.volunteer_id\n-- JOIN projects p ON vh.project_id = p.project_id\n-- WHERE v.state = 'California'\n--   AND p.category = 'Health'\n--   AND p.year = 2021;\n-------------------------------------------------\n\nBut with only the volunteers table in the schema, there isn\u2019t enough information to answer the question.", "latency_sec": 8.16837763786316, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 109, "prompt_eval_sec": null, "tokens_completion": 1212, "completion_eval_sec": null, "tokens_total": 1321, "tokens_per_sec": 161.72122036531755, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their filtering conditions and joined tables. The Reference SQL filters on `vp.cause = 'Health'` and `vh.volunteer_date` between specific dates, while the Generated SQL uses `p.category = 'Health'` and `p.year = 2021`. Additionally, the Generated SQL references a `projects` table (not in the original schema) instead of `volunteer_projects`, and omits the date range filter. These differences in logic and schema usage make them non-equivalent."}
{"example_id": 251, "sql_complexity": "set operations", "prompt": "Compare the number of economic diversification projects in two regions, one in Europe and one in Oceania, by showing the project type and the number of projects in each region.", "context": "CREATE TABLE economic_diversification (region VARCHAR(50), project_type VARCHAR(50), project_start_date DATE);", "reference_sql": "SELECT 'Europe' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Europe' UNION ALL SELECT 'Oceania' as region, project_type, COUNT(*) as project_count FROM economic_diversification WHERE region = 'Oceania';", "generated_sql": "SELECT \n    project_type,\n    SUM(CASE WHEN region = 'Europe' THEN 1 ELSE 0 END) AS europe_project_count,\n    SUM(CASE WHEN region = 'Oceania' THEN 1 ELSE 0 END) AS oceania_project_count\nFROM economic_diversification\nWHERE region IN ('Europe', 'Oceania')\nGROUP BY project_type;", "raw_model_output": "SELECT \n    project_type,\n    SUM(CASE WHEN region = 'Europe' THEN 1 ELSE 0 END) AS europe_project_count,\n    SUM(CASE WHEN region = 'Oceania' THEN 1 ELSE 0 END) AS oceania_project_count\nFROM economic_diversification\nWHERE region IN ('Europe', 'Oceania')\nGROUP BY project_type;", "latency_sec": 4.982640981674194, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 344, "completion_eval_sec": null, "tokens_total": 467, "tokens_per_sec": 93.72539617395542, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries produce different result structures. The Reference SQL returns separate rows for Europe and Oceania per project_type, while the Generated SQL aggregates counts into columns for each region within a single row per project_type. The first has 2 rows per project_type (if both regions exist), the second has 1 row per project_type with two count columns."}
{"example_id": 610, "sql_complexity": "subqueries", "prompt": "What is the percentage of community development projects completed in 'Caribbean' in 2020?", "context": "CREATE TABLE community_projects (project_id INT, project_name TEXT, location TEXT, completion_year INT); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (1, 'Community Center', 'Southern Region, Caribbean', 2020); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (2, 'Park Renovation', 'Northern Region, Caribbean', 2019); INSERT INTO community_projects (project_id, project_name, location, completion_year) VALUES (3, 'Library Construction', 'Caribbean', 2020);", "reference_sql": "SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM community_projects WHERE location = 'Caribbean')) FROM community_projects WHERE completion_year = 2020 AND location = 'Caribbean';", "generated_sql": "SELECT \n  100.0 * (SELECT COUNT(*) \n           FROM community_projects \n           WHERE completion_year = 2020 \n             AND location = 'Caribbean') \n  / (SELECT COUNT(*) \n     FROM community_projects \n     WHERE completion_year = 2020) AS percentage;", "raw_model_output": "SELECT \n  100.0 * (SELECT COUNT(*) \n           FROM community_projects \n           WHERE completion_year = 2020 \n             AND location = 'Caribbean') \n  / (SELECT COUNT(*) \n     FROM community_projects \n     WHERE completion_year = 2020) AS percentage;", "latency_sec": 3.8218359947205, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 206, "prompt_eval_sec": null, "tokens_completion": 839, "completion_eval_sec": null, "tokens_total": 1045, "tokens_per_sec": 1.7220870081034656, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the percentage of Caribbean projects that were completed in 2020 relative to all Caribbean projects, while the Generated SQL calculates the percentage of 2020 projects that are located in the Caribbean. The denominator in the Reference is total Caribbean projects (regardless of completion year), whereas the Generated SQL's denominator is total projects completed in 2020 (regardless of location). This results in different percentages."}
{"example_id": 421, "sql_complexity": "set operations", "prompt": "What is the combined landfill capacity for 'City A' and 'City B'?", "context": "CREATE TABLE landfill_capacity (city VARCHAR(255), capacity INT); INSERT INTO landfill_capacity (city, capacity) VALUES ('City A', 500000), ('City B', 600000);", "reference_sql": "SELECT SUM(capacity) FROM (SELECT capacity FROM landfill_capacity WHERE city = 'City A' UNION ALL SELECT capacity FROM landfill_capacity WHERE city = 'City B') AS combined_capacity;", "generated_sql": "SELECT SUM(capacity) AS total_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "raw_model_output": "SELECT SUM(capacity) AS total_capacity\nFROM landfill_capacity\nWHERE city IN ('City A', 'City B');", "latency_sec": 1.844970941543579, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 122, "prompt_eval_sec": null, "tokens_completion": 99, "completion_eval_sec": null, "tokens_total": 221, "tokens_per_sec": 119.78508442799769, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of capacities for 'City A' and 'City B'. The reference query uses a UNION ALL to combine individual city capacities before summing, while the generated query directly sums capacities where city is in the specified list. Both approaches yield the same result."}
{"example_id": 880, "sql_complexity": "aggregation", "prompt": "Show veteran employment statistics for each state in the 'veteran_employment' table", "context": "CREATE TABLE veteran_employment (employee_id INT, state VARCHAR(2), job_title VARCHAR(50), employment_date DATE);", "reference_sql": "SELECT state, COUNT(*) as veteran_employees FROM veteran_employment WHERE state IN ('CA', 'NY', 'TX', 'FL', 'PA') GROUP BY state;", "generated_sql": "SELECT state, COUNT(*) AS employment_count\nFROM veteran_employment\nGROUP BY state;", "raw_model_output": "SELECT state, COUNT(*) AS employment_count\nFROM veteran_employment\nGROUP BY state;", "latency_sec": 2.2140307426452637, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 109, "prompt_eval_sec": null, "tokens_completion": 221, "completion_eval_sec": null, "tokens_total": 330, "tokens_per_sec": 149.04942087919022, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters records to only include states 'CA', 'NY', 'TX', 'FL', 'PA' before grouping, while the Generated SQL groups all records without filtering. If the table contains states outside the specified list, the Generated SQL would include those in the count, making the results different."}
{"example_id": 454, "sql_complexity": "single join", "prompt": "Which excavation sites have more than 10 artifacts?", "context": "CREATE TABLE ExcavationSite (SiteID INT, SiteName VARCHAR(50)); INSERT INTO ExcavationSite (SiteID, SiteName) VALUES (1, 'Site A'), (2, 'Site B'), (3, 'Site C'); CREATE TABLE Artifact (ArtifactID INT, SiteID INT, ObjectType VARCHAR(50)); INSERT INTO Artifact (ArtifactID, SiteID, ObjectType) VALUES (1, 1, 'Pottery'), (2, 1, 'Tool'), (3, 2, 'Statue'), (4, 2, 'Bead'), (5, 3, 'Bead'), (6, 3, 'Bead'), (7, 3, 'Bead'), (8, 3, 'Bead'), (9, 3, 'Bead'), (10, 3, 'Bead'), (11, 3, 'Bead');", "reference_sql": "SELECT e.SiteName FROM ExcavationSite e JOIN Artifact a ON e.SiteID = a.SiteID GROUP BY e.SiteName HAVING COUNT(a.ArtifactID) > 10;", "generated_sql": "SELECT e.SiteName\nFROM ExcavationSite e\nJOIN Artifact a ON e.SiteID = a.SiteID\nGROUP BY e.SiteID, e.SiteName\nHAVING COUNT(*) > 10;", "raw_model_output": "SELECT e.SiteName\nFROM ExcavationSite e\nJOIN Artifact a ON e.SiteID = a.SiteID\nGROUP BY e.SiteID, e.SiteName\nHAVING COUNT(*) > 10;", "latency_sec": 4.064857006072998, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 267, "prompt_eval_sec": null, "tokens_completion": 500, "completion_eval_sec": null, "tokens_total": 767, "tokens_per_sec": 188.69052437861475, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their GROUP BY clauses. The Reference SQL groups by SiteName alone, which could combine multiple sites with the same name (though not in the sample data). The Generated SQL groups by both SiteID and SiteName, ensuring each site is treated individually. While COUNT(*) and COUNT(a.ArtifactID) are equivalent here, the GROUP BY difference means they may produce different results if multiple sites share the same SiteName."}
{"example_id": 1086, "sql_complexity": "aggregation", "prompt": "What is the total CO2 emission for each equipment type, excluding equipment that is older than 8 years?", "context": "CREATE TABLE EmissionData (EquipmentID INT, EquipmentType VARCHAR(50), CO2Emission INT, Age INT); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (1, 'Excavator', 50, 8); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (2, 'Haul Truck', 70, 7); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (3, 'Shovel', 30, 6); INSERT INTO EmissionData (EquipmentID, EquipmentType, CO2Emission, Age) VALUES (4, 'Drilling Rig', 40, 3);", "reference_sql": "SELECT EquipmentType, SUM(CO2Emission) as TotalCO2Emission FROM EmissionData WHERE Age <= 8 GROUP BY EquipmentType;", "generated_sql": "SELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "raw_model_output": "SELECT EquipmentType, SUM(CO2Emission) AS TotalCO2Emission\nFROM EmissionData\nWHERE Age <= 8\nGROUP BY EquipmentType;", "latency_sec": 2.8118162155151367, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 243, "prompt_eval_sec": null, "tokens_completion": 235, "completion_eval_sec": null, "tokens_total": 478, "tokens_per_sec": 169.99688577172117, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. Both select EquipmentType and sum CO2Emission where Age <= 8, grouping by EquipmentType. The generated SQL has identical semantics with no differences in clauses, conditions, or aggregation."}
{"example_id": 3455, "sql_complexity": "basic SQL", "prompt": "What are the names of all innovation projects in the 'rural_infrastructure' table, excluding those with a budget over 50000?", "context": "CREATE TABLE rural_infrastructure (name VARCHAR(255), budget INT); INSERT INTO rural_infrastructure (name, budget) VALUES ('Dam Construction', 40000), ('Well Digging', 30000), ('Irrigation System', 70000);", "reference_sql": "SELECT name FROM rural_infrastructure WHERE budget <= 50000;", "generated_sql": "SELECT name\nFROM rural_infrastructure\nWHERE budget <= 50000;", "raw_model_output": "SELECT name\nFROM rural_infrastructure\nWHERE budget <= 50000;", "latency_sec": 1.7381339073181152, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 146, "prompt_eval_sec": null, "tokens_completion": 154, "completion_eval_sec": null, "tokens_total": 300, "tokens_per_sec": 172.59889973775978, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The Generated SQL is merely formatted with line breaks and indentation, but contains the same SELECT clause, FROM clause, and WHERE condition as the Reference SQL. Both select the 'name' column from the 'rural_infrastructure' table where budget is less than or equal to 50000."}
{"example_id": 3936, "sql_complexity": "window functions", "prompt": "What is the total investment per client for each investment type?", "context": "CREATE TABLE clients (client_id INT, name TEXT, investment_type TEXT, investment FLOAT); INSERT INTO clients (client_id, name, investment_type, investment) VALUES (1, 'John Doe', 'Stocks', 3000.00), (1, 'John Doe', 'Bonds', 2000.00), (2, 'Jane Smith', 'Stocks', 5000.00);", "reference_sql": "SELECT client_id, name, investment_type, SUM(investment) OVER (PARTITION BY client_id, investment_type ORDER BY client_id) as total_investment FROM clients;", "generated_sql": "SELECT client_id,\n       name,\n       investment_type,\n       SUM(investment) AS total_investment\nFROM clients\nGROUP BY client_id, name, investment_type;", "raw_model_output": "SELECT client_id,\n       name,\n       investment_type,\n       SUM(investment) AS total_investment\nFROM clients\nGROUP BY client_id, name, investment_type;", "latency_sec": 2.188861846923828, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 160, "prompt_eval_sec": null, "tokens_completion": 175, "completion_eval_sec": null, "tokens_total": 335, "tokens_per_sec": 153.04757605912891, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate a running total per client_id/investment_type without collapsing rows, while the Generated SQL aggregates rows into one per client_id/name/investment_type. The Reference query retains all original rows with summed values, whereas the Generated query collapses multiple rows into single aggregated rows. This difference in output structure makes them non-equivalent."}
{"example_id": 1838, "sql_complexity": "window functions", "prompt": "What are the top 3 species with the most sightings across all arctic research stations?", "context": "CREATE TABLE research_station (id INT, name TEXT); INSERT INTO research_station (id, name) VALUES (1, 'Station A'); INSERT INTO research_station (id, name) VALUES (2, 'Station B'); CREATE TABLE species_observations (station_id INT, species_name TEXT, sightings INT); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 1', 10); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (1, 'Species 2', 5); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 1', 8); INSERT INTO species_observations (station_id, species_name, sightings) VALUES (2, 'Species 3', 15);", "reference_sql": "SELECT species_name, SUM(sightings) as total_sightings, RANK() OVER (ORDER BY SUM(sightings) DESC) as rank FROM species_observations GROUP BY species_name HAVING rank <= 3;", "generated_sql": "SELECT species_name,\n       SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT species_name,\n       SUM(sightings) AS total_sightings\nFROM species_observations\nGROUP BY species_name\nORDER BY total_sightings DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 3.5461058616638184, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 255, "prompt_eval_sec": null, "tokens_completion": 310, "completion_eval_sec": null, "tokens_total": 565, "tokens_per_sec": 159.32970476377835, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a RANK() window function in the HAVING clause, which is invalid because HAVING cannot reference column aliases or window functions from the SELECT list. The Generated SQL correctly uses ORDER BY and FETCH FIRST 3 ROWS ONLY to get the top 3 results. While both might return the same rows in this specific case, the Reference SQL is syntactically incorrect and semantically different."}
{"example_id": 3091, "sql_complexity": "single join", "prompt": "Find the number of hybrid vehicles sold in the US, Germany, and Japan.", "context": "CREATE TABLE vehicle_sales (sale_id INT, vehicle_id INT, country VARCHAR(20), quantity INT); CREATE TABLE vehicles (vehicle_id INT, model VARCHAR(20), manufacture VARCHAR(20), vehicle_type VARCHAR(20));", "reference_sql": "SELECT SUM(vs.quantity) FROM vehicle_sales vs JOIN vehicles v ON vs.vehicle_id = v.vehicle_id WHERE v.vehicle_type = 'hybrid' AND vs.country IN ('US', 'Germany', 'Japan');", "generated_sql": "SELECT\n  vs.country,\n  SUM(vs.quantity) AS total_hybrid_sales\nFROM\n  vehicle_sales vs\nJOIN\n  vehicles v ON vs.vehicle_id = v.vehicle_id\nWHERE\n  v.vehicle_type = 'hybrid'\n  AND vs.country IN ('US', 'Germany', 'Japan')\nGROUP BY\n  vs.country;", "raw_model_output": "SELECT\n  vs.country,\n  SUM(vs.quantity) AS total_hybrid_sales\nFROM\n  vehicle_sales vs\nJOIN\n  vehicles v ON vs.vehicle_id = v.vehicle_id\nWHERE\n  v.vehicle_type = 'hybrid'\n  AND vs.country IN ('US', 'Germany', 'Japan')\nGROUP BY\n  vs.country;", "latency_sec": 4.320771932601929, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 127, "prompt_eval_sec": null, "tokens_completion": 402, "completion_eval_sec": null, "tokens_total": 529, "tokens_per_sec": 122.4318265929489, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns a single total sum of quantities for hybrid vehicles in specified countries, while the Generated SQL groups the sum by individual countries. The first produces one row with a single value, the second produces three rows (one per country) with country-specific totals. The result structures differ."}
{"example_id": 2399, "sql_complexity": "set operations", "prompt": "What is the average duration of criminal trials for Indigenous defendants compared to non-Indigenous defendants in Canada and New Zealand?", "context": "CREATE TABLE canada_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO canada_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 60), (2, 'Non-Indigenous', 45);CREATE TABLE nz_criminal_trials (id INT, defendant_type VARCHAR(255), days_to_completion INT); INSERT INTO nz_criminal_trials (id, defendant_type, days_to_completion) VALUES (1, 'Indigenous', 70), (2, 'Non-Indigenous', 50);", "reference_sql": "SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM canada_criminal_trials WHERE defendant_type = 'Non-Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Indigenous' UNION ALL SELECT AVG(days_to_completion) AS avg_duration FROM nz_criminal_trials WHERE defendant_type = 'Non-Indigenous';", "generated_sql": "SELECT 'Canada' AS jurisdiction,\n       defendant_type,\n       AVG(days_to_completion) AS average_duration\nFROM canada_criminal_trials\nGROUP BY defendant_type\nUNION ALL\nSELECT 'New Zealand' AS jurisdiction,\n       defendant_type,\n       AVG(days_to_completion) AS average_duration\nFROM nz_criminal_trials\nGROUP BY defendant_type;", "raw_model_output": "SELECT 'Canada' AS jurisdiction,\n       defendant_type,\n       AVG(days_to_completion) AS average_duration\nFROM canada_criminal_trials\nGROUP BY defendant_type\nUNION ALL\nSELECT 'New Zealand' AS jurisdiction,\n       defendant_type,\n       AVG(days_to_completion) AS average_duration\nFROM nz_criminal_trials\nGROUP BY defendant_type;", "latency_sec": 3.3019168376922607, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 207, "prompt_eval_sec": null, "tokens_completion": 336, "completion_eval_sec": null, "tokens_total": 543, "tokens_per_sec": 164.4499321731881, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL returns four rows with only the average duration values, while the Generated SQL returns four rows with three columns: jurisdiction, defendant_type, and average_duration. The structure of the result sets differs, making them non-equivalent despite calculating the same average values."}
{"example_id": 2972, "sql_complexity": "set operations", "prompt": "How many indigenous communities are in the Arctic Research Station 13 and 14?", "context": "CREATE TABLE Arctic_Research_Station_13 (id INT, community TEXT); CREATE TABLE Arctic_Research_Station_14 (id INT, community TEXT);", "reference_sql": "SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_13; SELECT COUNT(DISTINCT community) FROM Arctic_Research_Station_14; SELECT COUNT(DISTINCT community) FROM (SELECT * FROM Arctic_Research_Station_13 UNION ALL SELECT * FROM Arctic_Research_Station_14) AS Arctic_Communities;", "generated_sql": "SELECT COUNT(*) AS indigenous_community_count\nFROM (\n  SELECT community FROM Arctic_Research_Station_13\n  UNION\n  SELECT community FROM Arctic_Research_Station_14\n) AS combined_communities;", "raw_model_output": "SELECT COUNT(*) AS indigenous_community_count\nFROM (\n  SELECT community FROM Arctic_Research_Station_13\n  UNION\n  SELECT community FROM Arctic_Research_Station_14\n) AS combined_communities;", "latency_sec": 4.746303081512451, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 114, "prompt_eval_sec": null, "tokens_completion": 504, "completion_eval_sec": null, "tokens_total": 618, "tokens_per_sec": 130.20660277831834, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL contains three separate queries: two COUNT(DISTINCT community) on individual tables and a third query combining both tables with UNION ALL before counting distinct communities. The Generated SQL is a single query that uses UNION (not UNION ALL) to combine communities from both tables and then counts all rows. While the third Reference query and Generated SQL both aim to count unique communities across tables, the Generated SQL uses UNION (which removes duplicates) while the third Reference query uses UNION ALL (which includes duplicates but then applies COUNT(DISTINCT)). However, the Reference SQL as a whole includes additional queries that the Generated SQL does not, making them semantically unequal."}
{"example_id": 5576, "sql_complexity": "window functions", "prompt": "Who are the top 5 users with the most followers, and what is their location?", "context": "CREATE TABLE user_data (user_id INT, name VARCHAR(50), followers INT, location VARCHAR(50)); INSERT INTO user_data (user_id, name, followers, location) VALUES (1, 'Alice', 10000, 'New York'), (2, 'Bob', 15000, 'California'), (3, 'Charlie', 12000, 'Texas'), (4, 'David', 8000, 'Florida'), (5, 'Eve', 9000, 'Illinois');", "reference_sql": "SELECT name, location FROM (SELECT name, location, ROW_NUMBER() OVER (ORDER BY followers DESC) AS rank FROM user_data) AS user_ranks WHERE rank <= 5;", "generated_sql": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nFETCH FIRST 5 ROWS ONLY;", "raw_model_output": "SELECT name, location\nFROM user_data\nORDER BY followers DESC\nFETCH FIRST 5 ROWS ONLY;", "latency_sec": 2.085939884185791, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 188, "prompt_eval_sec": null, "tokens_completion": 161, "completion_eval_sec": null, "tokens_total": 349, "tokens_per_sec": 167.31067019039517, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the top 5 users by followers in descending order. The reference query uses ROW_NUMBER() to assign ranks and filters for rank <= 5, while the generated query directly uses ORDER BY and FETCH FIRST 5 ROWS ONLY. Since the ordering logic (followers DESC) is identical in both, they produce the same result set. The ROW_NUMBER() approach ensures unique ranking, but when combined with the same ORDER BY clause, it aligns with the FETCH FIRST 5 behavior. In the given sample data and general cases, the output is equivalent."}
{"example_id": 1560, "sql_complexity": "basic SQL", "prompt": "What is the average media literacy score for users in the 'Young Adult' age group who have completed at least one disinformation detection course?", "context": "CREATE TABLE users (id INT, age VARCHAR(20), media_literacy_score INT, courses_completed INT);", "reference_sql": "SELECT AVG(media_literacy_score) FROM users WHERE age = 'Young Adult' AND courses_completed > 0;", "generated_sql": "SELECT AVG(media_literacy_score) AS avg_media_literacy_score\nFROM users\nWHERE age = 'Young Adult'\n  AND courses_completed >= 1;", "raw_model_output": "SELECT AVG(media_literacy_score) AS avg_media_literacy_score\nFROM users\nWHERE age = 'Young Adult'\n  AND courses_completed >= 1;", "latency_sec": 2.9321911334991455, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 117, "prompt_eval_sec": null, "tokens_completion": 301, "completion_eval_sec": null, "tokens_total": 418, "tokens_per_sec": 142.5555091632712, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "The conditions 'courses_completed > 0' and 'courses_completed >= 1' are equivalent for integer values. Since 'courses_completed' is defined as an INT in the schema, both conditions filter the same set of rows. The generated query also adds an alias, which does not affect the semantic result."}
{"example_id": 1201, "sql_complexity": "basic SQL", "prompt": "What is the maximum energy efficiency rating of hydroelectric dams in Canada?", "context": "CREATE TABLE hydro_dams (id INT, name TEXT, country TEXT, energy_efficiency_rating FLOAT); INSERT INTO hydro_dams (id, name, country, energy_efficiency_rating) VALUES (1, 'Robert-Bourassa', 'Canada', 0.94), (2, 'Churchill Falls', 'Canada', 0.92);", "reference_sql": "SELECT MAX(energy_efficiency_rating) FROM hydro_dams WHERE country = 'Canada';", "generated_sql": "SELECT MAX(energy_efficiency_rating) AS max_efficiency\nFROM hydro_dams\nWHERE country = 'Canada';", "raw_model_output": "SELECT MAX(energy_efficiency_rating) AS max_efficiency\nFROM hydro_dams\nWHERE country = 'Canada';", "latency_sec": 2.259558916091919, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 152, "prompt_eval_sec": null, "tokens_completion": 99, "completion_eval_sec": null, "tokens_total": 251, "tokens_per_sec": 111.08362707980362, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries calculate the maximum energy_efficiency_rating for dams in Canada. The generated query adds an alias (max_efficiency) to the result column, but this does not affect the semantic value of the result. The WHERE clause and aggregate function are identical."}
{"example_id": 4243, "sql_complexity": "single join", "prompt": "How many orders were placed by new and returning customers in each month of the year 2021?'", "context": "CREATE TABLE customer (id INT, first_order_date DATE, last_order_date DATE);", "reference_sql": "INSERT INTO customer (id, first_order_date, last_order_date) SELECT customer_id, MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date FROM orders GROUP BY customer_id; SELECT YEAR(order_date) AS year, MONTH(order_date) AS month, CASE WHEN DATEDIFF(last_order_date, first_order_date) > 30 THEN 'returning' ELSE 'new' END AS customer_type, COUNT(DISTINCT id) AS num_orders FROM orders JOIN customer ON orders.customer_id = customer.id WHERE YEAR(order_date) = 2021 GROUP BY year, month, customer_type;", "generated_sql": "SELECT\n  month,\n  SUM(new_orders) AS new_orders,\n  SUM(returning_orders) AS returning_orders\nFROM\n(\n  -- New customers: their first order dates in 2021 are counted as \u201cnew\u201d\n  SELECT\n    EXTRACT(MONTH FROM first_order_date) AS month,\n    1 AS new_orders,\n    0 AS returning_orders\n  FROM customer\n  WHERE first_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n\n  UNION ALL\n\n  -- Returning customers: if a customer\u2019s last order date (in 2021) is not their first order,\n  -- we count that order as coming from a returning customer.\n  SELECT\n    EXTRACT(MONTH FROM last_order_date) AS month,\n    0 AS new_orders,\n    1 AS returning_orders\n  FROM customer\n  WHERE last_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n    AND last_order_date <> first_order_date\n) AS orders_by_type\nGROUP BY month\nORDER BY month;", "raw_model_output": "SELECT\n  month,\n  SUM(new_orders) AS new_orders,\n  SUM(returning_orders) AS returning_orders\nFROM\n(\n  -- New customers: their first order dates in 2021 are counted as \u201cnew\u201d\n  SELECT\n    EXTRACT(MONTH FROM first_order_date) AS month,\n    1 AS new_orders,\n    0 AS returning_orders\n  FROM customer\n  WHERE first_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n\n  UNION ALL\n\n  -- Returning customers: if a customer\u2019s last order date (in 2021) is not their first order,\n  -- we count that order as coming from a returning customer.\n  SELECT\n    EXTRACT(MONTH FROM last_order_date) AS month,\n    0 AS new_orders,\n    1 AS returning_orders\n  FROM customer\n  WHERE last_order_date BETWEEN DATE '2021-01-01' AND DATE '2021-12-31'\n    AND last_order_date <> first_order_date\n) AS orders_by_type\nGROUP BY month\nORDER BY month;", "latency_sec": 14.95768928527832, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 104, "prompt_eval_sec": null, "tokens_completion": 2226, "completion_eval_sec": null, "tokens_total": 2330, "tokens_per_sec": 155.77272368488335, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their logic for determining 'new' and 'returning' customers. The Reference SQL categorizes customers based on the time between their first and last order dates (if >30 days, 'returning'), while the Generated SQL uses whether first/last order dates fall in 2021. Additionally, the Reference SQL counts orders per month, whereas the Generated SQL counts customers per month. These differences in logic and aggregation lead to non-equivalent results."}
{"example_id": 2321, "sql_complexity": "subqueries", "prompt": "What are the names and types of vessels used in research expeditions in the regions with the lowest ocean acidification levels?", "context": "CREATE TABLE ocean_acidification (id INT PRIMARY KEY, region VARCHAR(255), year INT, acidification_level INT); INSERT INTO ocean_acidification (id, region, year, acidification_level) VALUES (1, 'Arctic Ocean', 2018, 20), (2, 'Southern Ocean', 2019, 22); CREATE TABLE expedition_vessels (id INT PRIMARY KEY, name VARCHAR(255), type VARCHAR(255), region VARCHAR(255)); INSERT INTO expedition_vessels (id, name, type, region) VALUES (1, 'Sea Researcher', 'Research Vessel', 'Arctic Ocean');", "reference_sql": "SELECT v.name, v.type FROM expedition_vessels v INNER JOIN ocean_acidification oa ON v.region = oa.region WHERE oa.acidification_level = (SELECT MIN(acidification_level) FROM ocean_acidification);", "generated_sql": "SELECT ev.name, ev.type\nFROM expedition_vessels ev\nWHERE ev.region IN (\n  SELECT oa.region\n  FROM ocean_acidification oa\n  WHERE oa.acidification_level = (\n    SELECT MIN(acidification_level)\n    FROM ocean_acidification\n  )\n)\nAND ev.type = 'Research Vessel';", "raw_model_output": "SELECT ev.name, ev.type\nFROM expedition_vessels ev\nWHERE ev.region IN (\n  SELECT oa.region\n  FROM ocean_acidification oa\n  WHERE oa.acidification_level = (\n    SELECT MIN(acidification_level)\n    FROM ocean_acidification\n  )\n)\nAND ev.type = 'Research Vessel';", "latency_sec": 3.9454257488250732, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 222, "prompt_eval_sec": null, "tokens_completion": 462, "completion_eval_sec": null, "tokens_total": 684, "tokens_per_sec": 173.36532063838524, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query performs an INNER JOIN between expedition_vessels and ocean_acidification on region, filtering by the minimum acidification_level. The generated query uses a subquery with IN to select regions with the minimum acidification_level and adds an explicit WHERE condition for ev.type = 'Research Vessel'. This additional type filter in the generated query restricts results further than the reference query, making them non-equivalent."}
{"example_id": 4349, "sql_complexity": "multiple_joins", "prompt": "Show the research grants awarded to professors in the Computer Science department.", "context": "CREATE TABLE departments (id INT, name VARCHAR(50)); INSERT INTO departments (id, name) VALUES (1, 'Computer Science'), (2, 'Mathematics'); CREATE TABLE professors (id INT, name VARCHAR(50), department_id INT); INSERT INTO professors (id, name, department_id) VALUES (1, 'John Smith', 1), (2, 'Jane Doe', 2); CREATE TABLE grants (id INT, professor_id INT, year INT, amount FLOAT); INSERT INTO grants (id, professor_id, year, amount) VALUES (1, 1, 2021, 5000.0), (2, 2, 2020, 7000.0);", "reference_sql": "SELECT professors.name, grants.amount FROM professors INNER JOIN grants ON professors.id = grants.professor_id INNER JOIN departments ON professors.department_id = departments.id WHERE departments.name = 'Computer Science';", "generated_sql": "SELECT p.name AS professor_name, g.year, g.amount\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "raw_model_output": "SELECT p.name AS professor_name, g.year, g.amount\nFROM grants g\nJOIN professors p ON g.professor_id = p.id\nJOIN departments d ON p.department_id = d.id\nWHERE d.name = 'Computer Science';", "latency_sec": 2.6784000396728516, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 226, "prompt_eval_sec": null, "tokens_completion": 251, "completion_eval_sec": null, "tokens_total": 477, "tokens_per_sec": 178.09139521154663, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL selects professors.name and grants.amount, while the Generated SQL selects p.name, g.year, and g.amount. The column sets differ (missing 'year' in Reference, additional 'year' in Generated), making their result structures incompatible. Both share identical joins and WHERE conditions, but semantic equivalence requires identical output columns."}
{"example_id": 476, "sql_complexity": "basic SQL", "prompt": "Insert new food safety records for locations \"A123\", \"B456\", and \"C789\"", "context": "CREATE TABLE food_safety_records (id INT, location VARCHAR(255), inspection_date DATE, violation_count INT);", "reference_sql": "INSERT INTO food_safety_records (location, inspection_date, violation_count) VALUES ('A123', '2022-03-01', 0), ('B456', '2022-03-05', 2), ('C789', '2022-03-10', 1);", "generated_sql": "INSERT INTO food_safety_records (location)\nVALUES ('A123'), ('B456'), ('C789');", "raw_model_output": "INSERT INTO food_safety_records (location)\nVALUES ('A123'), ('B456'), ('C789');", "latency_sec": 7.152111768722534, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 109, "prompt_eval_sec": null, "tokens_completion": 929, "completion_eval_sec": null, "tokens_total": 1038, "tokens_per_sec": 145.13196012111555, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL inserts all three columns (location, inspection_date, violation_count) with explicit values, while the Generated SQL only inserts the 'location' column. The other columns (id, inspection_date, violation_count) would either be NULL or use default values, leading to different data outcomes."}
{"example_id": 2908, "sql_complexity": "single join", "prompt": "List all co-owners and the properties they own in New York, NY.", "context": "CREATE TABLE properties (id INT, city VARCHAR(50), price INT); CREATE TABLE co_owners (property_id INT, owner_name VARCHAR(50)); INSERT INTO properties (id, city, price) VALUES (1, 'New York', 800000), (2, 'Los Angeles', 600000); INSERT INTO co_owners (property_id, owner_name) VALUES (1, 'David'), (1, 'Ella'), (2, 'Frank');", "reference_sql": "SELECT properties.city, co_owners.owner_name FROM properties INNER JOIN co_owners ON properties.id = co_owners.property_id WHERE properties.city = 'New York';", "generated_sql": "SELECT co.owner_name, p.id AS property_id, p.city, p.price\nFROM properties p\nJOIN co_owners co ON p.id = co.property_id\nWHERE p.city = 'New York';", "raw_model_output": "SELECT co.owner_name, p.id AS property_id, p.city, p.price\nFROM properties p\nJOIN co_owners co ON p.id = co.property_id\nWHERE p.city = 'New York';", "latency_sec": 3.217183828353882, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 177, "prompt_eval_sec": null, "tokens_completion": 309, "completion_eval_sec": null, "tokens_total": 486, "tokens_per_sec": 151.06379552102524, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL selects only 'city' and 'owner_name', while the Generated SQL selects additional columns ('property_id', 'price') and reorders columns. The column set difference means the result structures are not identical, even though both filter for 'New York' and join the same tables."}
{"example_id": 636, "sql_complexity": "set operations", "prompt": "Insert new data into the 'cosmetic_ingredients' table for a vegan eyeshadow product by brand 'Ara' with ingredients 'Mica', 'Iron Oxide', 'Titanium Dioxide' and 'Zinc Oxide'.", "context": "CREATE TABLE cosmetic_ingredients (ingredient_id INT, product_name TEXT, brand_name TEXT, ingredient_type TEXT);", "reference_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type) VALUES (NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient'); INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type, ingredient_name) SELECT ingredient_id, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Mica' FROM cosmetic_ingredients WHERE ingredient_name = 'Mica' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Iron Oxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Titanium Dioxide' UNION ALL SELECT NULL, 'Vegan Eyeshadow', 'Ara', 'Ingredient', 'Zinc Oxide';", "generated_sql": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type)\nVALUES \n  (1, 'vegan eyeshadow', 'Ara', 'Mica'),\n  (2, 'vegan eyeshadow', 'Ara', 'Iron Oxide'),\n  (3, 'vegan eyeshadow', 'Ara', 'Titanium Dioxide'),\n  (4, 'vegan eyeshadow', 'Ara', 'Zinc Oxide');", "raw_model_output": "INSERT INTO cosmetic_ingredients (ingredient_id, product_name, brand_name, ingredient_type)\nVALUES \n  (1, 'vegan eyeshadow', 'Ara', 'Mica'),\n  (2, 'vegan eyeshadow', 'Ara', 'Iron Oxide'),\n  (3, 'vegan eyeshadow', 'Ara', 'Titanium Dioxide'),\n  (4, 'vegan eyeshadow', 'Ara', 'Zinc Oxide');", "latency_sec": 5.6320960521698, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 135, "prompt_eval_sec": null, "tokens_completion": 744, "completion_eval_sec": null, "tokens_total": 879, "tokens_per_sec": 156.0697814557619, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL attempts to insert into a non-existent 'ingredient_name' column (schema mismatch) and includes a NULL ingredient_id with a generic 'Ingredient' type, while the Generated SQL uses explicit ingredient_ids and directly assigns ingredient names to the 'ingredient_type' column. Additionally, product names differ in casing ('Vegan Eyeshadow' vs 'vegan eyeshadow')."}
{"example_id": 3404, "sql_complexity": "multiple_joins", "prompt": "What are the names of startups that have received funding from investors with over 3 million funds, and are involved in Genetic Research or Bioprocess Engineering?", "context": "CREATE TABLE public.investors ( id SERIAL PRIMARY KEY, name VARCHAR(100), type VARCHAR(50), funds INTEGER ); CREATE TABLE public.investments ( id SERIAL PRIMARY KEY, investor_id INTEGER, startup_id INTEGER ); CREATE TABLE public.startups ( id SERIAL PRIMARY KEY, name VARCHAR(100), industry VARCHAR(50), funding INTEGER );", "reference_sql": "SELECT startups.name FROM public.startups JOIN public.investments ON startups.id = investments.startup_id JOIN public.investors ON investments.investor_id = investors.id WHERE (startups.industry = 'Genetic Research' OR startups.industry = 'Bioprocess Engineering') AND investors.funds > 3000000;", "generated_sql": "SELECT DISTINCT s.name\nFROM public.startups s\nJOIN public.investments i ON s.id = i.startup_id\nJOIN public.investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "raw_model_output": "SELECT DISTINCT s.name\nFROM public.startups s\nJOIN public.investments i ON s.id = i.startup_id\nJOIN public.investors inv ON i.investor_id = inv.id\nWHERE inv.funds > 3000000\n  AND s.industry IN ('Genetic Research', 'Bioprocess Engineering');", "latency_sec": 3.066559076309204, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 166, "prompt_eval_sec": null, "tokens_completion": 208, "completion_eval_sec": null, "tokens_total": 374, "tokens_per_sec": 121.96080058895602, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The generated query includes DISTINCT which may eliminate duplicates not present in the reference query. While the join logic and WHERE conditions are equivalent (IN replaces OR for industry filtering), the absence of DISTINCT in the reference query could result in duplicate startup names when multiple investments meet the criteria. This makes the two queries not strictly equivalent in result sets."}
{"example_id": 134, "sql_complexity": "subqueries", "prompt": "Who are the top 3 authors with the most citations in the Mathematics department in the past 5 years?", "context": "CREATE TABLE authors (id INT, name VARCHAR(50), department VARCHAR(50)); INSERT INTO authors (id, name, department) VALUES (1, 'Author Name', 'Mathematics'); CREATE TABLE publications (id INT, title VARCHAR(100), author VARCHAR(50), journal VARCHAR(50), year INT, cites INT); INSERT INTO publications (id, title, author, journal, year, cites) VALUES (1, 'Publication Title', 'Author Name', 'Journal Name', 2021, 10);", "reference_sql": "SELECT author, SUM(cites) as total_cites FROM publications WHERE author IN (SELECT name FROM authors WHERE department = 'Mathematics') AND year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY author ORDER BY total_cites DESC LIMIT 3;", "generated_sql": "SELECT a.name,\n       SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY a.name\nORDER BY total_citations DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT a.name,\n       SUM(p.cites) AS total_citations\nFROM authors a\nJOIN publications p ON a.name = p.author\nWHERE a.department = 'Mathematics'\n  AND p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5\nGROUP BY a.name\nORDER BY total_citations DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 4.005013942718506, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 195, "prompt_eval_sec": null, "tokens_completion": 406, "completion_eval_sec": null, "tokens_total": 601, "tokens_per_sec": 150.0618995578467, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in their year filtering logic. The Reference SQL uses `BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE)` which explicitly includes both the lower and upper bounds (5 years ago to current year). The Generated SQL uses `p.year >= EXTRACT(YEAR FROM CURRENT_DATE) - 5` which only enforces the lower bound. This means the Generated SQL could include publications from years beyond the current year (if such data exists), while the Reference SQL strictly limits to the 5-year window ending in the current year. Additionally, `FETCH FIRST 3 ROWS ONLY` and `LIMIT 3` are functionally equivalent, but the year condition discrepancy makes the queries non-equivalent."}
{"example_id": 592, "sql_complexity": "set operations", "prompt": "How many public healthcare facilities and public parks are there in total, in the 'StateData' schema's 'StateHealthcare' and 'StateParks' tables?", "context": "CREATE SCHEMA StateData; CREATE TABLE StateHealthcare (Name varchar(255), Type varchar(255)); INSERT INTO StateHealthcare (Name, Type) VALUES ('FacilityA', 'Public'), ('FacilityB', 'Public'), ('FacilityC', 'Private'); CREATE TABLE StateParks (Name varchar(255), Type varchar(255)); INSERT INTO StateParks (Name, Type) VALUES ('ParkA', 'Public'), ('ParkB', 'Public'), ('ParkC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public';", "generated_sql": "SELECT \n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public') +\n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public') AS TotalPublicCount;", "raw_model_output": "SELECT \n  (SELECT COUNT(*) FROM StateData.StateHealthcare WHERE Type = 'Public') +\n  (SELECT COUNT(*) FROM StateData.StateParks WHERE Type = 'Public') AS TotalPublicCount;", "latency_sec": 3.2339377403259277, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 199, "prompt_eval_sec": null, "tokens_completion": 244, "completion_eval_sec": null, "tokens_total": 443, "tokens_per_sec": 136.9847027281833, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate rows with individual counts from each table, while the Generated SQL returns a single row with the summed total. The result structures differ (two rows vs. one row with aggregation), so they are not semantically equivalent."}
{"example_id": 1989, "sql_complexity": "single join", "prompt": "What are the names and production dates of garments made from fabrics with a sustainability score over 70, produced after 2021-01-01?", "context": "CREATE TABLE fabrics (id INT, name VARCHAR(50), type VARCHAR(50), sustainability_score INT); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (1, 'Organic Linen', 'Natural', 80); INSERT INTO fabrics (id, name, type, sustainability_score) VALUES (2, 'Recycled Nylon', 'Synthetic', 72);", "reference_sql": "SELECT garments.name, garments.production_date FROM garments JOIN fabrics ON garments.fabric_id = fabrics.id WHERE fabrics.sustainability_score > 70 AND garments.production_date > '2021-01-01';", "generated_sql": "The provided schema only includes the table \u201cfabrics\u201d (with columns id, name, type, and sustainability_score) and does not contain any information about garments or production dates. Without a garments table (or a production_date column) in the schema, it isn\u2019t possible to construct a valid SQL statement that answers the question using only the available tables and columns.", "raw_model_output": "The provided schema only includes the table \u201cfabrics\u201d (with columns id, name, type, and sustainability_score) and does not contain any information about garments or production dates. Without a garments table (or a production_date column) in the schema, it isn\u2019t possible to construct a valid SQL statement that answers the question using only the available tables and columns.", "latency_sec": 6.943742036819458, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 172, "prompt_eval_sec": null, "tokens_completion": 789, "completion_eval_sec": null, "tokens_total": 961, "tokens_per_sec": 138.39799850055786, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL references the 'garments' table and 'production_date' column, which are not present in the provided schema. The Generated SQL is invalid because the necessary tables/columns don't exist. Since both queries cannot be executed due to missing schema elements, they are not semantically equivalent as they cannot produce results."}
{"example_id": 1388, "sql_complexity": "aggregation", "prompt": "What was the total donation amount by each organization in the last 30 days?", "context": "CREATE TABLE organization_donations (id INT, organization TEXT, donation_date DATE, donation_amount DECIMAL(10,2)); INSERT INTO organization_donations (id, organization, donation_date, donation_amount) VALUES (1, 'Organization A', '2021-03-15', 100.00), (2, 'Organization B', '2021-03-25', 200.00);", "reference_sql": "SELECT organization, SUM(donation_amount) FROM organization_donations WHERE donation_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) GROUP BY organization;", "generated_sql": "SELECT organization,\n       SUM(donation_amount) AS total_donations\nFROM organization_donations\nWHERE donation_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY organization;", "raw_model_output": "SELECT organization,\n       SUM(donation_amount) AS total_donations\nFROM organization_donations\nWHERE donation_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY organization;", "latency_sec": 3.034449815750122, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 166, "prompt_eval_sec": null, "tokens_completion": 310, "completion_eval_sec": null, "tokens_total": 476, "tokens_per_sec": 156.86533932093778, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of donation amounts for each organization where the donation_date is within the last 30 days. The difference lies in the syntax for date subtraction: DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) vs. CURRENT_DATE - INTERVAL '30' DAY. Both expressions evaluate to the same date value, so the result sets will be identical."}
{"example_id": 1628, "sql_complexity": "window functions", "prompt": "What is the ranking of national security measures for Russia based on the publication date?", "context": "CREATE TABLE national_security (id INT, title VARCHAR(255), description TEXT, agency VARCHAR(255), date DATE); INSERT INTO national_security (id, title, description, agency, date) VALUES (1, 'National Cyber Strategy', 'Outlines the approach to protecting the American people and the American way of life in the digital age', 'White House', '2018-09-20'); INSERT INTO national_security (id, title, description, agency, date) VALUES (2, 'Cybersecurity and Infrastructure Security Agency Act of 2018', 'Establishes the Cybersecurity and Infrastructure Security Agency within the Department of Homeland Security', 'Congress', '2018-11-16'); INSERT INTO national_security (id, title, description, agency, date) VALUES (3, 'Russian Military Doctrine', 'Outlines the country\u2019s stance on military security', 'Russian Government', '2014-12-26');", "reference_sql": "SELECT title, description, agency, date, ROW_NUMBER() OVER (PARTITION BY agency ORDER BY date DESC) as ranking FROM national_security WHERE agency = 'Russian Government';", "generated_sql": "SELECT \n  id,\n  title,\n  agency,\n  date,\n  RANK() OVER (ORDER BY date) AS ranking\nFROM national_security\nWHERE agency = 'Russian Government';", "raw_model_output": "SELECT \n  id,\n  title,\n  agency,\n  date,\n  RANK() OVER (ORDER BY date) AS ranking\nFROM national_security\nWHERE agency = 'Russian Government';", "latency_sec": 6.248899221420288, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 271, "prompt_eval_sec": null, "tokens_completion": 689, "completion_eval_sec": null, "tokens_total": 960, "tokens_per_sec": 153.6270574998656, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns (description vs id) and ranking functions (ROW_NUMBER() with PARTITION BY agency vs RANK() without partitioning). While both filter for 'Russian Government' and assign ranking 1 to the single record, the column sets and ranking logic differ semantically."}
{"example_id": 2300, "sql_complexity": "aggregation", "prompt": "What is the minimum capacity for schools in each location ('community_development')?", "context": "CREATE TABLE community_development.schools (id INT, name VARCHAR(50), capacity INT, location VARCHAR(50));", "reference_sql": "SELECT location, MIN(capacity) FROM community_development.schools GROUP BY location;", "generated_sql": "SELECT \n  location, \n  MIN(capacity) AS minimum_capacity \nFROM \n  community_development.schools \nGROUP BY \n  location;", "raw_model_output": "SELECT \n  location, \n  MIN(capacity) AS minimum_capacity \nFROM \n  community_development.schools \nGROUP BY \n  location;", "latency_sec": 2.310473918914795, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 106, "prompt_eval_sec": null, "tokens_completion": 233, "completion_eval_sec": null, "tokens_total": 339, "tokens_per_sec": 146.72314507632473, "match_exact": false, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries group schools by location and retrieve the minimum capacity per location. The generated query adds an alias ('minimum_capacity') for the MIN(capacity) column, but this does not affect the semantic result set. The GROUP BY clause and aggregate function remain identical."}
{"example_id": 4976, "sql_complexity": "set operations", "prompt": "What is the most common hashtag used in posts made by users from Brazil?", "context": "CREATE TABLE posts (id INT, user_id INT, content TEXT, hashtags TEXT, post_date DATE); INSERT INTO posts (id, user_id, content, hashtags, post_date) VALUES (1, 1, 'Hello World', '#datascience', '2022-06-01'), (2, 1, 'I love data', '#ai', '2022-06-02'), (3, 2, 'Ol\u00e1 Mundo', '#brasil', '2022-06-03'); CREATE TABLE users (id INT, name VARCHAR(100), country VARCHAR(50)); INSERT INTO users (id, name, country) VALUES (1, 'Jo\u00e3o Silva', 'Brazil'), (2, 'Maria Souza', 'Brazil');", "reference_sql": "SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(hashtags, ' ', n.n), ' ', -1) hashtag, COUNT(*) count FROM posts JOIN users ON posts.user_id = users.id CROSS JOIN (SELECT 1 n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5) n WHERE users.country = 'Brazil' GROUP BY hashtag ORDER BY count DESC LIMIT 1;", "generated_sql": "SELECT hashtags\nFROM posts\nJOIN users ON posts.user_id = users.id\nWHERE users.country = 'Brazil'\nGROUP BY hashtags\nORDER BY COUNT(*) DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "SELECT hashtags\nFROM posts\nJOIN users ON posts.user_id = users.id\nWHERE users.country = 'Brazil'\nGROUP BY hashtags\nORDER BY COUNT(*) DESC\nFETCH FIRST 1 ROW ONLY;", "latency_sec": 2.5172958374023438, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 234, "prompt_eval_sec": null, "tokens_completion": 243, "completion_eval_sec": null, "tokens_total": 477, "tokens_per_sec": 189.48905127187095, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL splits multi-hashtag strings into individual hashtags using SUBSTRING_INDEX and a numbers table, while the Generated SQL treats the entire hashtags column as a single string. This means the Reference SQL counts individual hashtags (e.g., splitting '#a #b' into '#a' and '#b') whereas the Generated SQL counts the full string as a single entity. The grouping and counting logic differ fundamentally."}
{"example_id": 4637, "sql_complexity": "single join", "prompt": "What is the total value of transactions for each customer in the last 30 days?", "context": "CREATE TABLE transactions (id INT, customer_id INT, value DECIMAL(10, 2), transaction_date DATE); INSERT INTO transactions (id, customer_id, value, transaction_date) VALUES (1, 1, 100, '2022-01-01'), (2, 1, 200, '2022-01-15'), (3, 2, 50, '2022-01-05'), (4, 2, 150, '2022-01-30'), (5, 3, 300, '2022-01-20');", "reference_sql": "SELECT c.id, SUM(t.value) FROM customers c INNER JOIN transactions t ON c.id = t.customer_id WHERE t.transaction_date >= CURDATE() - INTERVAL 30 DAY GROUP BY c.id;", "generated_sql": "SELECT \n  customer_id, \n  SUM(value) AS total_value\nFROM \n  transactions\nWHERE \n  transaction_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY \n  customer_id;", "raw_model_output": "SELECT \n  customer_id, \n  SUM(value) AS total_value\nFROM \n  transactions\nWHERE \n  transaction_date >= CURRENT_DATE - INTERVAL '30' DAY\nGROUP BY \n  customer_id;", "latency_sec": 10.03921914100647, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 207, "prompt_eval_sec": null, "tokens_completion": 310, "completion_eval_sec": null, "tokens_total": 517, "tokens_per_sec": 51.49802915330811, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the sum of transaction values for each customer over the last 30 days. The Reference SQL uses an INNER JOIN between customers and transactions, but since the Generated SQL groups directly by customer_id from transactions, and the WHERE clause filters transactions by date, the results will be identical when all customer_ids in transactions exist in the customers table. The date functions (CURDATE() vs CURRENT_DATE) and interval syntax are functionally equivalent in this context."}
{"example_id": 4947, "sql_complexity": "aggregation", "prompt": "What is the total revenue for drugs approved between 2017 and 2019?", "context": "CREATE TABLE drug_sales_3 (drug_name TEXT, revenue FLOAT, year INT); INSERT INTO drug_sales_3 (drug_name, revenue, year) VALUES ('DrugG', 20000000, 2019), ('DrugG', 19000000, 2018), ('DrugH', 15000000, 2017), ('DrugH', 16000000, 2018);", "reference_sql": "SELECT drug_name, SUM(revenue) FROM drug_sales_3 WHERE year BETWEEN 2017 AND 2019 GROUP BY drug_name;", "generated_sql": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "raw_model_output": "SELECT SUM(revenue) AS total_revenue\nFROM drug_sales_3\nWHERE year BETWEEN 2017 AND 2019;", "latency_sec": 2.9892737865448, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 167, "prompt_eval_sec": null, "tokens_completion": 294, "completion_eval_sec": null, "tokens_total": 461, "tokens_per_sec": 154.21805860508155, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query groups results by drug_name and calculates individual sums per drug, while the generated query returns a single total revenue sum for all drugs combined. The GROUP BY clause is missing in the generated query, leading to different result structures."}
{"example_id": 4767, "sql_complexity": "window functions", "prompt": "List the top 2 AI algorithms with the highest explainability scores, by algorithm subtype, ordered by scores in descending order for the European region.", "context": "CREATE TABLE ai_algorithms (algorithm_id INT, algorithm_name VARCHAR(50), algorithm_subtype VARCHAR(50), region VARCHAR(50), explainability_score FLOAT); INSERT INTO ai_algorithms (algorithm_id, algorithm_name, algorithm_subtype, region, explainability_score) VALUES (1, 'AlgoA', 'Tree-based', 'Europe', 0.85), (2, 'AlgoB', 'Computer Vision', 'Europe', 0.92), (3, 'AlgoC', 'Tree-based', 'Europe', 0.78), (4, 'AlgoD', 'Transformer', 'Europe', 0.90), (5, 'AlgoE', 'Tree-based', 'Europe', 0.80);", "reference_sql": "SELECT algorithm_subtype, region, * FROM (SELECT algorithm_subtype, region, algorithm_id, algorithm_name, explainability_score, RANK() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rank FROM ai_algorithms WHERE region = 'Europe') ranked WHERE rank <= 2 ORDER BY algorithm_subtype, region, explainability_score DESC;", "generated_sql": "SELECT algorithm_id,\n       algorithm_name,\n       algorithm_subtype,\n       region,\n       explainability_score\nFROM (\n  SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rn\n  FROM ai_algorithms\n  WHERE region = 'Europe'\n) AS sub\nWHERE rn <= 2\nORDER BY algorithm_subtype, explainability_score DESC;", "raw_model_output": "SELECT algorithm_id,\n       algorithm_name,\n       algorithm_subtype,\n       region,\n       explainability_score\nFROM (\n  SELECT *,\n         ROW_NUMBER() OVER (PARTITION BY algorithm_subtype ORDER BY explainability_score DESC) AS rn\n  FROM ai_algorithms\n  WHERE region = 'Europe'\n) AS sub\nWHERE rn <= 2\nORDER BY algorithm_subtype, explainability_score DESC;", "latency_sec": 2.487791061401367, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 245, "prompt_eval_sec": null, "tokens_completion": 285, "completion_eval_sec": null, "tokens_total": 530, "tokens_per_sec": 213.04039885948146, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in two key aspects. First, the Reference SQL includes the 'rank' column in the output (via 'SELECT algorithm_subtype, region, *'), while the Generated SQL explicitly lists only specific columns without the rank. Second, the Reference uses RANK() while the Generated uses ROW_NUMBER(). Although RANK() and ROW_NUMBER() may produce the same results for unique scores (as in the sample data), they behave differently when there are ties. However, the column difference alone makes the queries non-equivalent."}
{"example_id": 4495, "sql_complexity": "basic SQL", "prompt": "Which countries are the top 3 sources of sustainable textiles?", "context": "CREATE TABLE Textile_Sources (Source_ID INT, Source_Country TEXT, Sustainable BOOLEAN, Quantity INT); INSERT INTO Textile_Sources (Source_ID, Source_Country, Sustainable, Quantity) VALUES (1, 'India', true, 1000), (2, 'Bangladesh', false, 800), (3, 'China', true, 1200), (4, 'Vietnam', false, 900), (5, 'Italy', true, 1100), (6, 'USA', false, 700);", "reference_sql": "SELECT Source_Country FROM Textile_Sources WHERE Sustainable = true ORDER BY Quantity DESC LIMIT 3;", "generated_sql": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nORDER BY Quantity DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT Source_Country\nFROM Textile_Sources\nWHERE Sustainable = TRUE\nORDER BY Quantity DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 3.378848075866699, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 187, "prompt_eval_sec": null, "tokens_completion": 359, "completion_eval_sec": null, "tokens_total": 546, "tokens_per_sec": 161.59353357725237, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select Source_Country from Textile_Sources where Sustainable is true, order by Quantity descending, and limit to 3 results. The difference is purely syntactic (LIMIT 3 vs FETCH FIRST 3 ROWS ONLY) which are equivalent in PostgreSQL for this use case."}
{"example_id": 2513, "sql_complexity": "single join", "prompt": "What is the total number of concert ticket sales for artists who released their first album between 2015 and 2017?", "context": "CREATE TABLE ConcertTicketSales (id INT, year INT, artist_id INT); CREATE TABLE ArtistAlbums (id INT, artist_id INT, year INT);", "reference_sql": "SELECT COUNT(DISTINCT cts.artist_id) FROM ConcertTicketSales cts JOIN ArtistAlbums a ON cts.artist_id = a.artist_id WHERE a.year BETWEEN 2015 AND 2017;", "generated_sql": "SELECT COUNT(*) AS total_ticket_sales\nFROM ConcertTicketSales AS cts\nJOIN (\n  SELECT artist_id\n  FROM ArtistAlbums\n  GROUP BY artist_id\n  HAVING MIN(year) BETWEEN 2015 AND 2017\n) AS first_album\n  ON cts.artist_id = first_album.artist_id;", "raw_model_output": "SELECT COUNT(*) AS total_ticket_sales\nFROM ConcertTicketSales AS cts\nJOIN (\n  SELECT artist_id\n  FROM ArtistAlbums\n  GROUP BY artist_id\n  HAVING MIN(year) BETWEEN 2015 AND 2017\n) AS first_album\n  ON cts.artist_id = first_album.artist_id;", "latency_sec": 3.845546007156372, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 122, "prompt_eval_sec": null, "tokens_completion": 461, "completion_eval_sec": null, "tokens_total": 583, "tokens_per_sec": 151.60395920763025, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The reference query counts distinct artist_ids from ConcertTicketSales who have at least one matching album in ArtistAlbums between 2015-2017. The generated query instead counts all ticket sales for artists whose earliest album (MIN(year)) falls in 2015-2017. This creates two key differences: 1) The generated query's subquery filters artists based on their earliest album year (MIN(year)) rather than any album year, and 2) The generated query counts all ticket sales rows (COUNT(*)) instead of unique artists (COUNT(DISTINCT)). These differences mean the queries can produce different results."}
{"example_id": 873, "sql_complexity": "subqueries", "prompt": "Identify attorneys who have never handled cases in the 'West' region but have in the 'North' or 'South'.", "context": "CREATE TABLE attorney_regions(attorney_id INT, region VARCHAR(20)); INSERT INTO attorney_regions(attorney_id, region) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'), (5, 'West'), (6, 'North'); CREATE TABLE handled_cases(attorney_id INT, case_id INT); INSERT INTO handled_cases(attorney_id, case_id) VALUES (1, 101), (2, 102), (3, 103), (4, 104), (5, 105), (6, 106), (1, 107), (1, 108);", "reference_sql": "SELECT h.attorney_id FROM attorney_regions h LEFT JOIN handled_cases i ON h.attorney_id = i.attorney_id WHERE h.region IN ('North', 'South') AND h.region != 'West' AND i.attorney_id IS NOT NULL AND h.attorney_id NOT IN (SELECT attorney_id FROM attorney_regions WHERE region = 'West');", "generated_sql": "SELECT DISTINCT ar.attorney_id\nFROM attorney_regions ar\nJOIN handled_cases hc \n  ON ar.attorney_id = hc.attorney_id\nWHERE ar.region IN ('North', 'South')\n  AND ar.attorney_id NOT IN (\n    SELECT attorney_id \n    FROM attorney_regions \n    WHERE region = 'West'\n  );", "raw_model_output": "SELECT DISTINCT ar.attorney_id\nFROM attorney_regions ar\nJOIN handled_cases hc \n  ON ar.attorney_id = hc.attorney_id\nWHERE ar.region IN ('North', 'South')\n  AND ar.attorney_id NOT IN (\n    SELECT attorney_id \n    FROM attorney_regions \n    WHERE region = 'West'\n  );", "latency_sec": 13.784149885177612, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 224, "prompt_eval_sec": null, "tokens_completion": 1998, "completion_eval_sec": null, "tokens_total": 2222, "tokens_per_sec": 161.19964005827907, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in handling duplicates. The Reference SQL may return duplicate attorney_ids (e.g., attorney 1 with multiple cases), while the Generated SQL uses DISTINCT to eliminate duplicates. Additionally, the Reference SQL's LEFT JOIN with i.attorney_id IS NOT NULL condition effectively acts as an INNER JOIN, but the Generated SQL explicitly uses INNER JOIN. However, the key difference is the DISTINCT clause in the Generated SQL, which ensures unique results, making the two queries not semantically equivalent."}
{"example_id": 471, "sql_complexity": "set operations", "prompt": "Find the number of donations made by first-time donors in the last quarter.", "context": "CREATE TABLE Donations (DonationID INT, DonorID INT, DonationDate DATE, DonationType TEXT, DonationAmount FLOAT); INSERT INTO Donations (DonationID, DonorID, DonationDate, DonationType, DonationAmount) VALUES (1, 1, '2021-01-01', 'Individual', 100), (2, 2, '2021-02-01', 'Corporate', 5000);", "reference_sql": "SELECT COUNT(*) FROM (SELECT DonationID FROM Donations WHERE DonationType = 'Individual' AND DonationDate >= DATEADD(quarter, -1, CURRENT_DATE) EXCEPT SELECT DonationID FROM PreviousDonations) AS FirstTimeDonors;", "generated_sql": "SELECT DonorID, MIN(DonationDate) AS FirstDonationDate\n  FROM Donations\n  GROUP BY DonorID\n)\nSELECT COUNT(*) AS FirstTimeDonationCount\nFROM Donations d\nJOIN FirstDonations fd\n  ON d.DonorID = fd.DonorID\n     AND d.DonationDate = fd.FirstDonationDate\nWHERE d.DonationDate BETWEEN DATE '2021-10-01' AND DATE '2021-12-31';", "raw_model_output": "WITH FirstDonations AS (\n  SELECT DonorID, MIN(DonationDate) AS FirstDonationDate\n  FROM Donations\n  GROUP BY DonorID\n)\nSELECT COUNT(*) AS FirstTimeDonationCount\nFROM Donations d\nJOIN FirstDonations fd\n  ON d.DonorID = fd.DonorID\n     AND d.DonationDate = fd.FirstDonationDate\nWHERE d.DonationDate BETWEEN DATE '2021-10-01' AND DATE '2021-12-31';", "latency_sec": 9.505710124969482, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 168, "prompt_eval_sec": null, "tokens_completion": 881, "completion_eval_sec": null, "tokens_total": 1049, "tokens_per_sec": 110.35472218372195, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL counts unique DonationIDs from Donations (Individual type in last quarter) not present in PreviousDonations, while the Generated SQL identifies first-time donations for donors in a specific date range. Key differences: 1) Reference uses EXCEPT with PreviousDonations (missing in Generated), 2) Date ranges differ (quarterly vs fixed 2021-10-01 to 2021-12-31), 3) Different logic (set difference vs first donation dates)."}
{"example_id": 1301, "sql_complexity": "multiple_joins", "prompt": "What is the total quantity of corn sold by farmers in 'Summerfield'?", "context": "CREATE TABLE farmers (id INT, name VARCHAR(50), location VARCHAR(50), crops VARCHAR(50)); CREATE TABLE crops (id INT, name VARCHAR(50), yield INT); CREATE TABLE sales (id INT, farmer_id INT, crop_name VARCHAR(50), quantity INT, price DECIMAL(5,2)); INSERT INTO farmers VALUES (1, 'Jane Doe', 'Summerfield', 'Corn'); INSERT INTO crops VALUES (1, 'Corn', 100); INSERT INTO sales VALUES (1, 1, 'Corn', 50, 2.50);", "reference_sql": "SELECT SUM(quantity) FROM sales INNER JOIN farmers ON sales.farmer_id = farmers.id INNER JOIN crops ON sales.crop_name = crops.name WHERE farmers.location = 'Summerfield' AND crops.name = 'Corn';", "generated_sql": "SELECT SUM(s.quantity) AS total_quantity\nFROM sales s\nJOIN farmers f ON s.farmer_id = f.id\nWHERE f.location = 'Summerfield' AND s.crop_name = 'Corn';", "raw_model_output": "SELECT SUM(s.quantity) AS total_quantity\nFROM sales s\nJOIN farmers f ON s.farmer_id = f.id\nWHERE f.location = 'Summerfield' AND s.crop_name = 'Corn';", "latency_sec": 2.0655839443206787, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 199, "prompt_eval_sec": null, "tokens_completion": 181, "completion_eval_sec": null, "tokens_total": 380, "tokens_per_sec": 183.96734785086304, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes an explicit JOIN with the 'crops' table and filters on 'crops.name = 'Corn'', while the Generated SQL omits this join and filters directly on 'sales.crop_name = 'Corn''. Although both filter for 'Corn', the Reference ensures the crop exists in the 'crops' table (via the join), whereas the Generated SQL does not. This could lead to different results if there are sales records with 'crop_name' values not present in the 'crops' table."}
{"example_id": 4667, "sql_complexity": "aggregation", "prompt": "Find the number of unique organizations in each country in the Philanthropy Trends table?", "context": "CREATE TABLE PhilanthropyTrends (OrgID INT, Name TEXT, Country TEXT);", "reference_sql": "SELECT Country, COUNT(DISTINCT OrgID) as UniqueOrganizations FROM PhilanthropyTrends GROUP BY Country;", "generated_sql": "SELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;", "raw_model_output": "SELECT Country, COUNT(DISTINCT OrgID) AS UniqueOrganizations\nFROM PhilanthropyTrends\nGROUP BY Country;", "latency_sec": 2.48746919631958, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 101, "prompt_eval_sec": null, "tokens_completion": 228, "completion_eval_sec": null, "tokens_total": 329, "tokens_per_sec": 132.26294439616908, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "The two queries are identical in structure and logic. The only differences are formatting (line breaks and capitalization of keywords), which do not affect semantic meaning. Both queries select the same columns, apply the same aggregation (COUNT(DISTINCT OrgID)), and group by the same column (Country)."}
{"example_id": 1006, "sql_complexity": "subqueries", "prompt": "What is the average word count of news articles written by investigative journalists?", "context": "CREATE TABLE reporters (id INT, name VARCHAR(50), gender VARCHAR(10), age INT, position VARCHAR(20), country VARCHAR(50)); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (1, 'Anna Smith', 'Female', 35, 'News Reporter', 'USA'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (2, 'Mike Johnson', 'Male', 40, 'Investigative Journalist', 'Canada'); INSERT INTO reporters (id, name, gender, age, position, country) VALUES (3, 'Sofia Rodriguez', 'Female', 32, 'Investigative Journalist', 'Mexico'); CREATE TABLE news_articles (id INT, title VARCHAR(100), content TEXT, publication_date DATE, reporter_id INT); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (1, 'News Article 1', 'Content of News Article 1', '2021-01-01', 2); INSERT INTO news_articles (id, title, content, publication_date, reporter_id) VALUES (2, 'News Article 2', 'Content of News Article 2', '2021-02-01', 3);", "reference_sql": "SELECT AVG(LENGTH(content) - LENGTH(REPLACE(content, ' ', '')) + 1) AS avg_word_count FROM news_articles WHERE reporter_id IN (SELECT id FROM reporters WHERE position = 'Investigative Journalist');", "generated_sql": "SELECT AVG(LENGTH(n.content) - LENGTH(REPLACE(n.content, ' ', '')) + 1) AS average_word_count\nFROM news_articles n\nJOIN reporters r ON n.reporter_id = r.id\nWHERE r.position = 'Investigative Journalist';", "raw_model_output": "SELECT AVG(LENGTH(n.content) - LENGTH(REPLACE(n.content, ' ', '')) + 1) AS average_word_count\nFROM news_articles n\nJOIN reporters r ON n.reporter_id = r.id\nWHERE r.position = 'Investigative Journalist';", "latency_sec": 4.912207126617432, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 340, "prompt_eval_sec": null, "tokens_completion": 512, "completion_eval_sec": null, "tokens_total": 852, "tokens_per_sec": 173.44545497345328, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the average word count of news articles written by investigative journalists. The Reference SQL uses a subquery to filter reporter_ids, while the Generated SQL uses a JOIN. Both apply the same word count formula (length of content minus length of content without spaces plus 1) and filter the same set of articles. The logical result is identical."}
{"example_id": 3635, "sql_complexity": "set operations", "prompt": "Which brands have certifications related to cruelty-free, vegan, or organic products?", "context": "CREATE TABLE brands (brand_name VARCHAR(50), is_cruelty_free BOOLEAN, is_vegan BOOLEAN, is_organic BOOLEAN); INSERT INTO brands (brand_name, is_cruelty_free, is_vegan, is_organic) VALUES ('Lush', TRUE, TRUE, FALSE), ('The Body Shop', TRUE, FALSE, FALSE), ('Est\u00e9e Lauder', FALSE, FALSE, FALSE), ('Urban Decay', TRUE, TRUE, FALSE), ('Maybelline', FALSE, FALSE, FALSE), ('Kat Von D', TRUE, TRUE, FALSE), ('Tarte', TRUE, TRUE, TRUE);", "reference_sql": "SELECT brand_name, 'Cruelty-free' as certification FROM brands WHERE is_cruelty_free = TRUE UNION SELECT brand_name, 'Vegan' as certification FROM brands WHERE is_vegan = TRUE UNION SELECT brand_name, 'Organic' as certification FROM brands WHERE is_organic = TRUE;", "generated_sql": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "raw_model_output": "SELECT brand_name\nFROM brands\nWHERE is_cruelty_free = TRUE\n   OR is_vegan = TRUE\n   OR is_organic = TRUE;", "latency_sec": 1.9642388820648193, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 208, "prompt_eval_sec": null, "tokens_completion": 172, "completion_eval_sec": null, "tokens_total": 380, "tokens_per_sec": 193.45915788029905, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns multiple rows per brand when they meet multiple certification criteria (e.g., a brand that is both cruelty-free and vegan would appear twice), while the Generated SQL returns each brand only once regardless of how many certifications they meet. The UNION approach preserves individual certification distinctions, whereas the OR condition in the Generated SQL collapses them into a single row per brand."}
{"example_id": 4932, "sql_complexity": "basic SQL", "prompt": "Delete the workout row with the id of 2.", "context": "CREATE TABLE Workouts (id INT, user_id INT, workout_name TEXT, calories INT); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (1, 1, 'Running', 300); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (2, 1, 'Cycling', 400); INSERT INTO Workouts (id, user_id, workout_name, calories) VALUES (3, 2, 'Yoga', 200);", "reference_sql": "DELETE FROM Workouts WHERE id = 2;", "generated_sql": "DELETE FROM Workouts WHERE id = 2;", "raw_model_output": "DELETE FROM Workouts WHERE id = 2;", "latency_sec": 1.8486368656158447, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 181, "prompt_eval_sec": null, "tokens_completion": 85, "completion_eval_sec": null, "tokens_total": 266, "tokens_per_sec": 143.88980602276706, "match_exact": true, "match_ast": true, "llm_equivalent": true, "llm_explanation": "Both queries are identical in structure and logic. They both delete the record from the Workouts table where the id is 2. The SQL syntax, table name, and WHERE condition are exactly the same in both queries."}
{"example_id": 365, "sql_complexity": "aggregation", "prompt": "Identify the total number of military personnel and their corresponding rank for each branch and country in the 'military_personnel' table, sorted by the total number of personnel in descending order.", "context": "CREATE TABLE military_personnel (id INT, branch VARCHAR(255), rank VARCHAR(255), country VARCHAR(255), personnel INT);", "reference_sql": "SELECT branch, country, SUM(personnel) as total_personnel FROM military_personnel GROUP BY branch, country ORDER BY total_personnel DESC;", "generated_sql": "SELECT branch,\n       country,\n       rank,\n       SUM(personnel) AS total_personnel\nFROM military_personnel\nGROUP BY branch, country, rank\nORDER BY total_personnel DESC;", "raw_model_output": "SELECT branch,\n       country,\n       rank,\n       SUM(personnel) AS total_personnel\nFROM military_personnel\nGROUP BY branch, country, rank\nORDER BY total_personnel DESC;", "latency_sec": 2.7961909770965576, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 130, "prompt_eval_sec": null, "tokens_completion": 306, "completion_eval_sec": null, "tokens_total": 436, "tokens_per_sec": 155.9264025852495, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The reference query groups by (branch, country) and sums personnel across all ranks within each group. The generated query adds 'rank' to the GROUP BY clause, causing it to group by (branch, country, rank) instead. This changes the aggregation granularity, resulting in more rows with per-rank totals rather than combined branch-country totals. Additionally, the generated query includes an extra 'rank' column in the output."}
{"example_id": 521, "sql_complexity": "subqueries", "prompt": "How many vessels have not had an inspection in the past year?", "context": "CREATE TABLE safety_records(id INT, vessel_name VARCHAR(50), inspection_date DATE); CREATE TABLE vessels(id INT, name VARCHAR(50), country VARCHAR(50)); INSERT INTO vessels(id, name, country) VALUES (1, 'Vessel A', 'Philippines'), (2, 'Vessel B', 'Philippines'); INSERT INTO safety_records(id, vessel_name, inspection_date) VALUES (1, 'Vessel A', '2022-01-01');", "reference_sql": "SELECT COUNT(*) FROM vessels WHERE name NOT IN (SELECT vessel_name FROM safety_records WHERE inspection_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW());", "generated_sql": "SELECT COUNT(*) AS vessels_without_recent_inspection\nFROM vessels v\nLEFT JOIN safety_records s \n  ON v.name = s.vessel_name\n  AND s.inspection_date >= (CURRENT_DATE - INTERVAL '1' YEAR)\nWHERE s.id IS NULL;", "raw_model_output": "SELECT COUNT(*) AS vessels_without_recent_inspection\nFROM vessels v\nLEFT JOIN safety_records s \n  ON v.name = s.vessel_name\n  AND s.inspection_date >= (CURRENT_DATE - INTERVAL '1' YEAR)\nWHERE s.id IS NULL;", "latency_sec": 9.272433042526245, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 175, "prompt_eval_sec": null, "tokens_completion": 513, "completion_eval_sec": null, "tokens_total": 688, "tokens_per_sec": 74.19843280017437, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries count vessels without recent inspections. The Reference SQL uses NOT IN with a subquery filtering inspections in the last year, while the Generated SQL uses a LEFT JOIN with a date condition. The date conditions (BETWEEN with DATE_SUB/NOW vs. >= with CURRENT_DATE - INTERVAL) are equivalent when considering DATE-type inspection dates. Both approaches exclude vessels with any matching recent inspection, ensuring identical results."}
{"example_id": 5687, "sql_complexity": "multiple_joins", "prompt": "List organizations with more than 200 volunteers, and their average donation amounts, excluding donations less than $10.", "context": "CREATE TABLE organizations (org_id INT, org_name TEXT, social_impact_score INT);CREATE TABLE volunteers (vol_id INT, org_id INT, vol_country TEXT);CREATE TABLE donations (donation_id INT, donor_id INT, donation_amount INT, donation_date DATE);", "reference_sql": "SELECT o.org_name, AVG(donation_amount) AS avg_donation_amount FROM organizations o JOIN volunteers v ON o.org_id = v.org_id JOIN donations don ON o.org_id = don.org_id WHERE donation_amount >= 10 GROUP BY o.org_name HAVING COUNT(v.vol_id) > 200;", "generated_sql": "SELECT org_id\n  FROM volunteers\n  GROUP BY org_id\n  HAVING COUNT(*) > 200\n)\nSELECT o.org_name,\n       AVG(d.donation_amount) AS avg_donation\nFROM organizations o\nJOIN org_with_many_vols v ON o.org_id = v.org_id\nJOIN donations d ON o.org_id = d.donor_id\nWHERE d.donation_amount >= 10\nGROUP BY o.org_name;", "raw_model_output": "WITH org_with_many_vols AS (\n  SELECT org_id\n  FROM volunteers\n  GROUP BY org_id\n  HAVING COUNT(*) > 200\n)\nSELECT o.org_name,\n       AVG(d.donation_amount) AS avg_donation\nFROM organizations o\nJOIN org_with_many_vols v ON o.org_id = v.org_id\nJOIN donations d ON o.org_id = d.donor_id\nWHERE d.donation_amount >= 10\nGROUP BY o.org_name;", "latency_sec": 16.3979709148407, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 143, "prompt_eval_sec": null, "tokens_completion": 1517, "completion_eval_sec": null, "tokens_total": 1660, "tokens_per_sec": 101.23203709903193, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The generated SQL incorrectly joins donations on 'd.donor_id = o.org_id' instead of 'don.org_id', which changes the relationship between donations and organizations. Additionally, the reference query filters by 'volunteer count > 200' while the generated SQL uses a subquery to filter organizations with many volunteers, but the donation join condition difference leads to fundamentally different results."}
{"example_id": 1281, "sql_complexity": "subqueries", "prompt": "Find the top 3 contributors with the lowest recycling rate in the 'waste_contributors' table.", "context": "CREATE TABLE waste_contributors (contributor VARCHAR(20), recycling_rate FLOAT); INSERT INTO waste_contributors (contributor, recycling_rate) VALUES ('Manufacturing', 0.4), ('Commercial', 0.38), ('Residential', 0.35), ('Institutional', 0.32), ('Agricultural', 0.2), ('Industrial', 0.15);", "reference_sql": "SELECT contributor FROM waste_contributors WHERE recycling_rate IN (SELECT MIN(recycling_rate) FROM waste_contributors) LIMIT 3;", "generated_sql": "SELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT contributor, recycling_rate\nFROM waste_contributors\nORDER BY recycling_rate ASC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 2.9377307891845703, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 167, "prompt_eval_sec": null, "tokens_completion": 292, "completion_eval_sec": null, "tokens_total": 459, "tokens_per_sec": 156.24304367501463, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL selects contributors with the minimum recycling_rate (only 'Industrial' in the data) and limits to 3 rows. The Generated SQL returns the 3 contributors with the lowest recycling_rates (Industrial, Agricultural, Institutional) and includes the recycling_rate column. The queries differ in both result columns and logic (exact match vs. top N ordered values)."}
{"example_id": 5669, "sql_complexity": "window functions", "prompt": "What is the total number of new and returning volunteers in each program in each month?", "context": "CREATE TABLE Volunteers (VolunteerID INT, VolunteerName TEXT, ProgramID INT, VolunteerDate DATE, IsReturning BOOLEAN); INSERT INTO Volunteers (VolunteerID, VolunteerName, ProgramID, VolunteerDate, IsReturning) VALUES (6, 'David Kim', 1, '2022-03-01', FALSE), (7, 'Emily Chen', 2, '2022-03-15', TRUE), (8, 'James Lee', 2, '2022-04-01', FALSE), (9, 'Grace Park', 3, '2022-04-15', TRUE), (10, 'Daniel Kim', 1, '2022-04-01', FALSE);", "reference_sql": "SELECT ProgramID, EXTRACT(MONTH FROM VolunteerDate) AS Month, SUM(CASE WHEN IsReturning THEN 1 ELSE 0 END) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) + COUNT(DISTINCT VolunteerID) OVER (PARTITION BY ProgramID, EXTRACT(MONTH FROM VolunteerDate) ORDER BY ProgramID, EXTRACT(MONTH FROM VolunteerDate)) AS TotalVolunteers FROM Volunteers;", "generated_sql": "SELECT \n  ProgramID,\n  EXTRACT(YEAR FROM VolunteerDate) AS Year,\n  EXTRACT(MONTH FROM VolunteerDate) AS Month,\n  SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n  SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY \n  ProgramID,\n  EXTRACT(YEAR FROM VolunteerDate),\n  EXTRACT(MONTH FROM VolunteerDate)\nORDER BY \n  ProgramID,\n  Year,\n  Month;", "raw_model_output": "SELECT \n  ProgramID,\n  EXTRACT(YEAR FROM VolunteerDate) AS Year,\n  EXTRACT(MONTH FROM VolunteerDate) AS Month,\n  SUM(CASE WHEN IsReturning = FALSE THEN 1 ELSE 0 END) AS NewVolunteers,\n  SUM(CASE WHEN IsReturning = TRUE THEN 1 ELSE 0 END) AS ReturningVolunteers\nFROM Volunteers\nGROUP BY \n  ProgramID,\n  EXTRACT(YEAR FROM VolunteerDate),\n  EXTRACT(MONTH FROM VolunteerDate)\nORDER BY \n  ProgramID,\n  Year,\n  Month;", "latency_sec": 4.5797119140625, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 227, "prompt_eval_sec": null, "tokens_completion": 512, "completion_eval_sec": null, "tokens_total": 739, "tokens_per_sec": 161.36386171602206, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses window functions to calculate cumulative sums without grouping, resulting in per-row calculations that may repeat values within the same ProgramID and month. The Generated SQL groups data by ProgramID, year, and month, producing aggregated counts of new and returning volunteers. Key differences include: 1) The Reference includes only the month (not year), 2) The Reference combines returning and distinct volunteer counts into a single 'TotalVolunteers' column using window functions, while the Generated separates them into distinct columns, and 3) The output structure and aggregation logic differ fundamentally."}
{"example_id": 3576, "sql_complexity": "window functions", "prompt": "What is the difference in the number of eco-friendly hotels between the top 2 countries?", "context": "CREATE TABLE eco_hotel_count (country TEXT, num_hotels INT); INSERT INTO eco_hotel_count (country, num_hotels) VALUES ('France', 100), ('Italy', 120), ('Germany', 150), ('Spain', 110), ('UK', 160);", "reference_sql": "SELECT (MAX(num_hotels) OVER (PARTITION BY num_hotels <= 2) - MIN(num_hotels) OVER (PARTITION BY num_hotels <= 2)) AS hotel_difference FROM eco_hotel_count WHERE country IN ('France', 'Italy');", "generated_sql": "SELECT\n    country,\n    num_hotels,\n    ROW_NUMBER() OVER (ORDER BY num_hotels DESC) AS rn\n  FROM eco_hotel_count\n)\nSELECT \n  (SELECT num_hotels FROM RankedCountries WHERE rn = 1) -\n  (SELECT num_hotels FROM RankedCountries WHERE rn = 2) AS difference;", "raw_model_output": "WITH RankedCountries AS (\n  SELECT\n    country,\n    num_hotels,\n    ROW_NUMBER() OVER (ORDER BY num_hotels DESC) AS rn\n  FROM eco_hotel_count\n)\nSELECT \n  (SELECT num_hotels FROM RankedCountries WHERE rn = 1) -\n  (SELECT num_hotels FROM RankedCountries WHERE rn = 2) AS difference;", "latency_sec": 4.135447025299072, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 143, "prompt_eval_sec": null, "tokens_completion": 407, "completion_eval_sec": null, "tokens_total": 550, "tokens_per_sec": 132.99650476364752, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL calculates the difference between MAX and MIN of num_hotels for rows where num_hotels <= 2 (which are none in the filtered dataset), resulting in two rows with the same value (20). The Generated SQL computes the difference between the top two hotels in a ranked list, returning a single row with 20. The output structure and row count differ, making them non-equivalent."}
{"example_id": 1970, "sql_complexity": "multiple_joins", "prompt": "List all players who have played a specific VR game, 'CyberSphere', and their ages.", "context": "CREATE TABLE Players (PlayerID INT, Age INT, Gender VARCHAR(10), Country VARCHAR(50)); CREATE TABLE VRPlayers (PlayerID INT, VRGameID INT); CREATE TABLE VRGames (VRGameID INT, Title VARCHAR(50)); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (1, 25, 'Male', 'USA'); INSERT INTO Players (PlayerID, Age, Gender, Country) VALUES (2, 28, 'Female', 'Canada'); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (1, 1); INSERT INTO VRPlayers (PlayerID, VRGameID) VALUES (2, 1); INSERT INTO VRGames (VRGameID, Title) VALUES (1, 'CyberSphere');", "reference_sql": "SELECT Players.Age, Players.PlayerID FROM Players INNER JOIN VRPlayers ON Players.PlayerID = VRPlayers.PlayerID INNER JOIN VRGames ON VRPlayers.VRGameID = VRGames.VRGameID WHERE VRGames.Title = 'CyberSphere';", "generated_sql": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "raw_model_output": "SELECT p.PlayerID, p.Age\nFROM Players p\nJOIN VRPlayers vp ON p.PlayerID = vp.PlayerID\nJOIN VRGames vg ON vp.VRGameID = vg.VRGameID\nWHERE vg.Title = 'CyberSphere';", "latency_sec": 2.6866302490234375, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 244, "prompt_eval_sec": null, "tokens_completion": 254, "completion_eval_sec": null, "tokens_total": 498, "tokens_per_sec": 185.36231406648454, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries select the same columns (PlayerID and Age) from the Players table, join with VRPlayers and VRGames on identical conditions, and apply the same filter (VRGames.Title = 'CyberSphere'). The differences are purely syntactic (column order and table aliases) and do not affect the result."}
{"example_id": 2414, "sql_complexity": "window functions", "prompt": "List the policy areas with the lowest citizen satisfaction scores.", "context": "CREATE TABLE Policy (Area VARCHAR(20), Score INT); INSERT INTO Policy (Area, Score) VALUES ('Transportation', 70), ('Education', 85), ('Healthcare', 75), ('PublicSafety', 80);", "reference_sql": "SELECT Area, Score FROM (SELECT Area, Score, ROW_NUMBER() OVER (ORDER BY Score) AS RN FROM Policy) X WHERE RN IN (1, 2);", "generated_sql": "SELECT Area\nFROM Policy\nWHERE Score = (SELECT MIN(Score) FROM Policy);", "raw_model_output": "SELECT Area\nFROM Policy\nWHERE Score = (SELECT MIN(Score) FROM Policy);", "latency_sec": 4.870591163635254, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 123, "prompt_eval_sec": null, "tokens_completion": 157, "completion_eval_sec": null, "tokens_total": 280, "tokens_per_sec": 57.48788814190205, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns the two lowest-scoring policies (based on row numbers), while the Generated SQL only returns the policy with the absolute minimum score. In the sample data, the Reference SQL would return 'Transportation' (70) and 'Healthcare' (75), whereas the Generated SQL only returns 'Transportation' (70)."}
{"example_id": 1898, "sql_complexity": "single join", "prompt": "What are the total sales for each drug in Q2 2020?", "context": "CREATE TABLE drugs (drug_id INT, drug_name TEXT); INSERT INTO drugs (drug_id, drug_name) VALUES (1001, 'Ibuprofen'), (1002, 'Paracetamol'), (1003, 'Aspirin'); CREATE TABLE sales (sale_id INT, drug_id INT, sale_date DATE, revenue FLOAT); INSERT INTO sales (sale_id, drug_id, sale_date, revenue) VALUES (1, 1001, '2020-04-05', 1800.0), (2, 1002, '2020-04-10', 2300.0), (3, 1003, '2020-04-15', 1400.0), (4, 1001, '2020-05-20', 1900.0), (5, 1002, '2020-06-25', 2400.0);", "reference_sql": "SELECT drug_name, SUM(revenue) as total_sales FROM sales JOIN drugs ON sales.drug_id = drugs.drug_id WHERE sale_date BETWEEN '2020-04-01' AND '2020-06-30' GROUP BY drug_name;", "generated_sql": "SELECT d.drug_name, SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.drug_id = s.drug_id\nWHERE s.sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY d.drug_name;", "raw_model_output": "SELECT d.drug_name, SUM(s.revenue) AS total_sales\nFROM drugs d\nJOIN sales s ON d.drug_id = s.drug_id\nWHERE s.sale_date BETWEEN '2020-04-01' AND '2020-06-30'\nGROUP BY d.drug_name;", "latency_sec": 3.327023983001709, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 270, "prompt_eval_sec": null, "tokens_completion": 393, "completion_eval_sec": null, "tokens_total": 663, "tokens_per_sec": 199.27719288690784, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries perform an inner join between the 'drugs' and 'sales' tables on drug_id, filter sales within the date range '2020-04-01' to '2020-06-30', and group by drug_name to calculate total sales. The only difference is the use of table aliases (d/s vs no aliases), which does not affect the semantic outcome."}
{"example_id": 2403, "sql_complexity": "multiple_joins", "prompt": "Who is the most frequent customer ordering vegetarian items?", "context": "CREATE TABLE customers (customer_id INT, customer_name VARCHAR(50)); INSERT INTO customers VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); CREATE TABLE orders (order_id INT, customer_id INT, menu_id INT, order_date DATE); INSERT INTO orders VALUES (1, 1, 1, '2022-01-01'), (2, 2, 3, '2022-01-02'), (3, 3, 2, '2022-01-03'); CREATE TABLE menu (menu_id INT, item_name VARCHAR(50), is_vegetarian BOOLEAN, price DECIMAL(5,2)); INSERT INTO menu VALUES (1, 'Veggie Burger', true, 8.99), (2, 'Cheeseburger', false, 7.99), (3, 'Tofu Stir Fry', true, 11.99);", "reference_sql": "SELECT customers.customer_name, COUNT(orders.order_id) as order_count FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN menu ON orders.menu_id = menu.menu_id WHERE menu.is_vegetarian = true GROUP BY customers.customer_name ORDER BY order_count DESC LIMIT 1;", "generated_sql": "SELECT c.customer_name\nFROM orders o\nJOIN menu m ON o.menu_id = m.menu_id\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_id, c.customer_name\nORDER BY COUNT(*) DESC\nFETCH FIRST 1 ROW ONLY;", "raw_model_output": "SELECT c.customer_name\nFROM orders o\nJOIN menu m ON o.menu_id = m.menu_id\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE m.is_vegetarian = TRUE\nGROUP BY c.customer_id, c.customer_name\nORDER BY COUNT(*) DESC\nFETCH FIRST 1 ROW ONLY;", "latency_sec": 2.6424121856689453, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 269, "prompt_eval_sec": null, "tokens_completion": 268, "completion_eval_sec": null, "tokens_total": 537, "tokens_per_sec": 203.22340432442968, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries retrieve the customer with the highest count of vegetarian orders. The Reference SQL groups by customer_name and uses LIMIT 1, while the Generated SQL groups by customer_id and name (ensuring uniqueness) and uses FETCH FIRST 1 ROW ONLY. Since customer_id is the primary key and customer_name is unique in the sample data, both approaches yield the same result. The COUNT(*) in Generated SQL is equivalent to COUNT(orders.order_id) in Reference SQL, and the ordering/limiting clauses are functionally identical."}
{"example_id": 124, "sql_complexity": "set operations", "prompt": "Find the intersection of AI and accessibility research projects in the EU and those in Africa.", "context": "CREATE SCHEMA if not exists accessibility; CREATE TABLE if not exists accessibility.research (id INT PRIMARY KEY, project_name VARCHAR(255), region VARCHAR(255)); INSERT INTO accessibility.research (id, project_name, region) VALUES (1, 'AI for Accessibility EU', 'EU'), (2, 'Accessibility Africa', 'Africa'), (3, 'AI for Accessibility Africa', 'Africa'), (4, 'Accessibility EU', 'EU');", "reference_sql": "SELECT project_name FROM accessibility.research WHERE region = 'EU' INTERSECT SELECT project_name FROM accessibility.research WHERE region = 'Africa';", "generated_sql": "SELECT id, project_name, region\nFROM accessibility.research\nWHERE project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%'\n  AND region IN ('EU', 'Africa');", "raw_model_output": "SELECT id, project_name, region\nFROM accessibility.research\nWHERE project_name LIKE '%AI%'\n  AND project_name LIKE '%Accessibility%'\n  AND region IN ('EU', 'Africa');", "latency_sec": 8.737037181854248, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 174, "prompt_eval_sec": null, "tokens_completion": 1201, "completion_eval_sec": null, "tokens_total": 1375, "tokens_per_sec": 157.3760041740129, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not equivalent. The Reference SQL finds project names present in both 'EU' and 'Africa' regions using INTERSECT, while the Generated SQL selects projects containing both 'AI' and 'Accessibility' in their names within 'EU' or 'Africa' regions. The logic, conditions, and output columns differ significantly. For the given data, Reference SQL returns no rows, while Generated SQL returns two rows."}
{"example_id": 1231, "sql_complexity": "basic SQL", "prompt": "What is the average ticket price for performances at the 'Downtown Theater'?", "context": "CREATE TABLE DowntownTheater (show_name TEXT, date DATE, ticket_price FLOAT); INSERT INTO DowntownTheater (show_name, date, ticket_price) VALUES ('Play 1', '2022-01-01', 30.0), ('Play 2', '2022-01-02', 40.0), ('Concert 1', '2022-01-03', 50.0);", "reference_sql": "SELECT AVG(ticket_price) FROM DowntownTheater WHERE show_name = 'Downtown Theater'", "generated_sql": "SELECT AVG(ticket_price) AS avg_ticket_price\nFROM DowntownTheater;", "raw_model_output": "SELECT AVG(ticket_price) AS avg_ticket_price\nFROM DowntownTheater;", "latency_sec": 17.467797994613647, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 168, "prompt_eval_sec": null, "tokens_completion": 218, "completion_eval_sec": null, "tokens_total": 386, "tokens_per_sec": 22.097805351254152, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL filters for show_name = 'Downtown Theater' which doesn't exist in the sample data (the actual show names are 'Play 1', 'Play 2', 'Concert 1'), resulting in no rows. The Generated SQL calculates the average of all ticket prices. The first returns NULL/empty, the second returns 40.0."}
{"example_id": 1485, "sql_complexity": "set operations", "prompt": "How many public schools and public libraries exist in total, in the 'CityData' schema's 'CityEducation' and 'CityLibrary' tables?", "context": "CREATE SCHEMA CityData; CREATE TABLE CityEducation (Name varchar(255), Type varchar(255)); INSERT INTO CityEducation (Name, Type) VALUES ('SchoolA', 'Public'), ('SchoolB', 'Public'), ('SchoolC', 'Private'); CREATE TABLE CityLibrary (Name varchar(255), Type varchar(255)); INSERT INTO CityLibrary (Name, Type) VALUES ('LibraryA', 'Public'), ('LibraryB', 'Public'), ('LibraryC', 'Private');", "reference_sql": "SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public' UNION ALL SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public';", "generated_sql": "SELECT \n    (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') +\n    (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS TotalPublicCount;", "raw_model_output": "SELECT \n    (SELECT COUNT(*) FROM CityData.CityEducation WHERE Type = 'Public') +\n    (SELECT COUNT(*) FROM CityData.CityLibrary WHERE Type = 'Public') AS TotalPublicCount;", "latency_sec": 2.9326229095458984, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 194, "prompt_eval_sec": null, "tokens_completion": 307, "completion_eval_sec": null, "tokens_total": 501, "tokens_per_sec": 170.83682950481256, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate counts (one for CityEducation and one for CityLibrary) as two rows, while the Generated SQL returns a single row with the summed total of both counts. The result structures differ (two rows vs. one row), making them non-equivalent."}
{"example_id": 5806, "sql_complexity": "single join", "prompt": "List the top 3 countries with the most veteran employment in the IT industry", "context": "CREATE TABLE veteran_employment (employee_id INT, industry VARCHAR(255), salary DECIMAL(10,2), state VARCHAR(2), country VARCHAR(255)); CREATE TABLE countries (country_id INT, country VARCHAR(255));", "reference_sql": "SELECT country, COUNT(*) as num_veterans FROM veteran_employment JOIN countries ON veteran_employment.country = countries.country WHERE industry = 'IT' GROUP BY country ORDER BY num_veterans DESC LIMIT 3;", "generated_sql": "SELECT \n  country, \n  COUNT(*) AS veteran_count\nFROM veteran_employment\nWHERE industry = 'IT'\nGROUP BY country\nORDER BY veteran_count DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT \n  country, \n  COUNT(*) AS veteran_count\nFROM veteran_employment\nWHERE industry = 'IT'\nGROUP BY country\nORDER BY veteran_count DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 4.957974672317505, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 128, "prompt_eval_sec": null, "tokens_completion": 629, "completion_eval_sec": null, "tokens_total": 757, "tokens_per_sec": 152.68331325423162, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL includes a JOIN with the countries table on veteran_employment.country = countries.country, which could affect the result if there are multiple entries in the countries table for the same country. The Generated SQL omits this JOIN, which might lead to different counts if the countries table has non-unique country values. Additionally, the LIMIT 3 in Reference SQL and FETCH FIRST 3 ROWS ONLY in Generated SQL are functionally equivalent, but the JOIN discrepancy makes the queries not semantically equivalent."}
{"example_id": 4126, "sql_complexity": "window functions", "prompt": "What is the average crime rate per capita in each neighborhood?", "context": "CREATE TABLE neighborhoods (name VARCHAR(255), population INT, crime_count INT); INSERT INTO neighborhoods (name, population, crime_count) VALUES ('Central Park', 1000, 25), ('Harlem', 2500, 75), ('Brooklyn', 5000, 120);", "reference_sql": "SELECT name, AVG(crime_count/population) OVER (PARTITION BY name) FROM neighborhoods;", "generated_sql": "SELECT \n  name, \n  1.0 * crime_count / population AS crime_rate_per_capita\nFROM neighborhoods;", "raw_model_output": "SELECT \n  name, \n  1.0 * crime_count / population AS crime_rate_per_capita\nFROM neighborhoods;", "latency_sec": 3.2420248985290527, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 139, "prompt_eval_sec": null, "tokens_completion": 229, "completion_eval_sec": null, "tokens_total": 368, "tokens_per_sec": 113.509307151517, "match_exact": false, "match_ast": false, "llm_equivalent": true, "llm_explanation": "Both queries calculate the crime rate (crime_count/population) for each neighborhood. The reference query uses an AVG() window function with PARTITION BY name, but since each name is unique, the average of a single value equals the value itself. The generated query directly computes the ratio. Both produce identical numerical results for the second column."}
{"example_id": 4559, "sql_complexity": "basic SQL", "prompt": "List the top 3 energy efficient appliances in the US by energy star rating?", "context": "CREATE TABLE appliances (id INT, name VARCHAR(255), country VARCHAR(255), energy_star_rating INT); INSERT INTO appliances (id, name, country, energy_star_rating) VALUES (1, 'Fridge A', 'USA', 5), (2, 'TV B', 'USA', 4), (3, 'Laptop C', 'USA', 5), (4, 'Microwave D', 'USA', 3);", "reference_sql": "SELECT name, energy_star_rating FROM appliances WHERE country = 'USA' ORDER BY energy_star_rating DESC LIMIT 3;", "generated_sql": "SELECT id, name, energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nFETCH FIRST 3 ROWS ONLY;", "raw_model_output": "SELECT id, name, energy_star_rating\nFROM appliances\nWHERE country = 'USA'\nORDER BY energy_star_rating DESC\nFETCH FIRST 3 ROWS ONLY;", "latency_sec": 2.7984280586242676, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 173, "prompt_eval_sec": null, "tokens_completion": 236, "completion_eval_sec": null, "tokens_total": 409, "tokens_per_sec": 146.15348025100494, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries differ in selected columns (Reference selects only 'name' and 'energy_star_rating', while Generated includes 'id' as well) and use different syntax for limiting results ('LIMIT 3' vs 'FETCH FIRST 3 ROWS ONLY'). Although both filter USA appliances, order by energy_star_rating descending, and limit to 3 rows, the additional column in the Generated query makes them non-equivalent."}
{"example_id": 456, "sql_complexity": "window functions", "prompt": "List the intelligence operations and their corresponding threat levels, and rank them based on their threat level and budget.", "context": "CREATE TABLE intel_ops_threat (id INT, operation VARCHAR, threat VARCHAR, budget INT); INSERT INTO intel_ops_threat (id, operation, threat, budget) VALUES (1, 'Operation Red Folder', 'High', 5000000), (2, 'Operation Black Vault', 'Medium', 7000000), (3, 'Operation Blue Sail', 'Low', 6000000);", "reference_sql": "SELECT operation, threat, budget, ROW_NUMBER() OVER (PARTITION BY threat ORDER BY budget DESC) as rank FROM intel_ops_threat;", "generated_sql": "SELECT\n  operation,\n  threat,\n  RANK() OVER (\n    ORDER BY\n      CASE threat\n        WHEN 'High' THEN 1\n        WHEN 'Medium' THEN 2\n        WHEN 'Low' THEN 3\n        ELSE 4\n      END,\n      budget DESC\n  ) AS ranking\nFROM intel_ops_threat\nORDER BY ranking;", "raw_model_output": "SELECT\n  operation,\n  threat,\n  RANK() OVER (\n    ORDER BY\n      CASE threat\n        WHEN 'High' THEN 1\n        WHEN 'Medium' THEN 2\n        WHEN 'Low' THEN 3\n        ELSE 4\n      END,\n      budget DESC\n  ) AS ranking\nFROM intel_ops_threat\nORDER BY ranking;", "latency_sec": 5.210638046264648, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 170, "prompt_eval_sec": null, "tokens_completion": 599, "completion_eval_sec": null, "tokens_total": 769, "tokens_per_sec": 147.5826939373141, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The queries are not semantically equivalent. The Reference SQL uses ROW_NUMBER() with PARTITION BY threat, ranking within each threat group by budget descending. The Generated SQL uses RANK() without partitioning, ordering first by a custom threat priority (High=1, Medium=2, Low=3) and then by budget descending. This results in different ranking logic: the Reference ranks within threat categories, while the Generated ranks all rows globally based on threat priority and budget. Additionally, ROW_NUMBER() and RANK() behave differently for ties (though no ties exist in the sample data), but the core difference in ordering criteria makes the results distinct."}
{"example_id": 459, "sql_complexity": "set operations", "prompt": "What is the total installed capacity of hydroelectric power plants in Brazil and Canada?", "context": "CREATE TABLE hydroelectric_power (country TEXT, capacity INTEGER); INSERT INTO hydroelectric_power (country, capacity) VALUES ('Brazil', 104000), ('Canada', 78000), ('China', 350000), ('United States', 100000), ('Russia', 45000);", "reference_sql": "(SELECT capacity FROM hydroelectric_power WHERE country = 'Brazil') UNION (SELECT capacity FROM hydroelectric_power WHERE country = 'Canada');", "generated_sql": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "raw_model_output": "SELECT SUM(capacity) AS total_capacity\nFROM hydroelectric_power\nWHERE country IN ('Brazil', 'Canada');", "latency_sec": 1.7495477199554443, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 141, "prompt_eval_sec": null, "tokens_completion": 98, "completion_eval_sec": null, "tokens_total": 239, "tokens_per_sec": 136.60673399985146, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL returns two separate rows with individual capacities of Brazil and Canada, while the Generated SQL returns a single row with the summed capacity of both countries. The output structures and results differ."}
{"example_id": 2356, "sql_complexity": "window functions", "prompt": "Find the total billing amount for attorneys in the 'Criminal Law' practice area, for the year 2020, partitioned by attorney's last name and ordered by the total billing amount in descending order.", "context": "CREATE TABLE Attorneys (AttorneyID INT, FirstName VARCHAR(50), LastName VARCHAR(50), PracticeArea VARCHAR(50), TotalBilling FLOAT, BillingYear INT); INSERT INTO Attorneys (AttorneyID, FirstName, LastName, PracticeArea, TotalBilling, BillingYear) VALUES (1, 'Clara', 'Rivera', 'Personal Injury', 8000.00, 2020), (2, 'Jamal', 'Lee', 'Personal Injury', 6000.00, 2019), (3, 'Sophia', 'Gomez', 'Criminal Law', 9000.00, 2020);", "reference_sql": "SELECT LastName, SUM(TotalBilling) OVER (PARTITION BY PracticeArea, LastName, BillingYear) AS TotalBilling FROM Attorneys WHERE PracticeArea = 'Criminal Law' AND BillingYear = 2020 ORDER BY TotalBilling DESC;", "generated_sql": "SELECT \n    LastName, \n    SUM(TotalBilling) AS TotalBillingAmount\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law' \n  AND BillingYear = 2020\nGROUP BY LastName\nORDER BY TotalBillingAmount DESC;", "raw_model_output": "SELECT \n    LastName, \n    SUM(TotalBilling) AS TotalBillingAmount\nFROM Attorneys\nWHERE PracticeArea = 'Criminal Law' \n  AND BillingYear = 2020\nGROUP BY LastName\nORDER BY TotalBillingAmount DESC;", "latency_sec": 3.045935869216919, "total_duration_sec": null, "load_duration_sec": null, "tokens_prompt": 240, "prompt_eval_sec": null, "tokens_completion": 319, "completion_eval_sec": null, "tokens_total": 559, "tokens_per_sec": 183.52323358131423, "match_exact": false, "match_ast": false, "llm_equivalent": false, "llm_explanation": "The Reference SQL uses a window function to calculate the sum per (PracticeArea, LastName, BillingYear) without grouping, which would return all rows with duplicated LastName entries if multiple records exist per LastName. The Generated SQL groups by LastName, collapsing multiple entries into a single row per LastName. This difference in handling duplicates makes them non-equivalent. Additionally, the column alias names differ (TotalBilling vs TotalBillingAmount), but the primary discrepancy lies in grouping behavior."}
